{
    "C": [
        {
            "question": "Which keyword is used to declare a loop that runs a set number of times?",
            "options": [
                "do",
                "while",
                "for",
                "loop"
            ],
            "answer": "for",
            "explanation": "The ‘for’ loop is used to iterate a section of code a specified number of times."
        },
        {
            "question": "How many times will the following loop run?",
            "options": [
                "0 times",
                "4 times",
                "5 times",
                "Infinite times"
            ],
            "answer": "5 times",
            "explanation": "The loop starts with i=0 and runs until i<5 .=\"\" 5=\"\" hence=\"\" it=\"\" iterate=\"\" p=\"\" times.=\"\" will=\"\">"
        },
        {
            "question": "Which loop checks the condition before executing the code block?",
            "options": [
                "do-while",
                "while",
                "for",
                "None of the above"
            ],
            "answer": "while",
            "explanation": "The ‘while’ loop checks its condition before executing its code block."
        },
        {
            "question": "What will the following code segment print?",
            "options": [
                "0",
                "0 1",
                "0 1 2",
                "Nothing"
            ],
            "answer": "0 1 2",
            "explanation": "The loop will print values of i from 0 to 2."
        },
        {
            "question": "Which of the following is used to forcefully exit a loop?",
            "options": [
                "stop",
                "halt",
                "exit",
                "break"
            ],
            "answer": "break",
            "explanation": "The ‘break’ statement is used to exit a loop forcefully."
        },
        {
            "question": "Which statement skips the current iteration and jumps to the next iteration of the loop?",
            "options": [
                "continue",
                "skip",
                "next",
                "ignore"
            ],
            "answer": "continue",
            "explanation": "The ‘continue’ statement skips the current iteration and moves to the next."
        },
        {
            "question": "How can an infinite loop be created using a ‘for’ loop?",
            "options": [
                "for(;;)",
                "for(int i=1; i>0; i++)",
                "Both a and b",
                "None of the above"
            ],
            "answer": "Both a and b",
            "explanation": "Both given options will result in an infinite loop."
        },
        {
            "question": "Which loop is best for iterating over an array when you know its size?",
            "options": [
                "for",
                "while",
                "do-while",
                "switch"
            ],
            "answer": "for",
            "explanation": "The for loop is structured perfectly for iterating a known number of times."
        },
        {
            "question": "Which of the following loops checks the condition before executing the loop body?",
            "options": [
                "for loop",
                "while loop",
                "do-while loop",
                "None of the above"
            ],
            "answer": "while loop",
            "explanation": "The while loop checks its condition before executing the loop body. If the condition is false from the start, the body may not run even once."
        },
        {
            "question": "In which loop, the condition is checked at the end of the loop body?",
            "options": [
                "for",
                "while",
                "do-while",
                "Both A and B"
            ],
            "answer": "do-while",
            "explanation": "In the do-while loop, the condition is checked after the loop body is executed."
        },
        {
            "question": "What is the correct syntax for an if statement in C?",
            "options": [
                "if expression { }",
                "if: expression { }",
                "if = expression { }",
                "if (expression) { }"
            ],
            "answer": "if (expression) { }",
            "explanation": "The correct syntax involves placing the condition/expression inside parentheses."
        },
        {
            "question": "Which loop guarantees at least one execution of its block of code?",
            "options": [
                "for",
                "while",
                "do-while",
                "All of the above"
            ],
            "answer": "do-while",
            "explanation": "The do-while loop tests the condition after executing the loop body, ensuring at least one execution."
        },
        {
            "question": "How many primary decision-making constructs does C have?",
            "options": [
                "1",
                "2",
                "3",
                "4"
            ],
            "answer": "3",
            "explanation": "C has if, if-else, and switch as its primary decision-making constructs."
        },
        {
            "question": "The switch statement tests _________.",
            "options": [
                "Only equality conditions",
                "Relational conditions",
                "Logical conditions",
                "Complex conditions"
            ],
            "answer": "Only equality conditions",
            "explanation": "switch checks for direct equality against its cases."
        },
        {
            "question": "What is the purpose of the break statement inside a switch case?",
            "options": [
                "To end the program",
                "To terminate the loop",
                "To exit the switch and transfer control to the statement following the switch",
                "To skip to the next case"
            ],
            "answer": "To exit the switch and transfer control to the statement following the switch",
            "explanation": "The break statement exits the current switch case."
        },
        {
            "question": "Which loop is best for iterating over an array when you know its size?",
            "options": [
                "for",
                "while",
                "do-while",
                "switch"
            ],
            "answer": "for",
            "explanation": "The for loop is structured perfectly for iterating a known number of times."
        },
        {
            "question": "What does the continue statement do?",
            "options": [
                "Halts the program",
                "Exits the loop",
                "Skips the current iteration and moves to the next one",
                "Executes the next iteration twice"
            ],
            "answer": "Skips the current iteration and moves to the next one",
            "explanation": "The continue statement skips the remainder of the current iteration and proceeds to the next loop iteration."
        },
        {
            "question": "What is the purpose of default in a switch statement?",
            "options": [
                "It is executed when no other cases match.",
                "It sets the default value for the switch variable.",
                "It specifies the default number of cases.",
                "It is required in every switch statement."
            ],
            "answer": "It is executed when no other cases match.",
            "explanation": "The default case is executed if no other case label matches the switch expression."
        },
        {
            "question": "Which of the following loops checks the condition before executing the loop body?",
            "options": [
                "for loop",
                "while loop",
                "do-while loop",
                "None of the above"
            ],
            "answer": "while loop",
            "explanation": "The while loop checks its condition before executing the loop body. If the condition is false from the start, the body may not run even once."
        },
        {
            "question": "How many times will the loop body execute in a do-while loop?",
            "options": [
                "Zero",
                "Once",
                "Twice",
                "It depends on the condition"
            ],
            "answer": "Once",
            "explanation": "Even if the condition is false, a do-while loop ensures that the loop body is executed at least once."
        },
        {
            "question": "In which loop, the condition is checked at the end of the loop body?",
            "options": [
                "for",
                "while",
                "do-while",
                "Both A and B"
            ],
            "answer": "do-while",
            "explanation": "In the do-while loop, the condition is checked after the loop body is executed."
        },
        {
            "question": "For a switch statement, which data type can’t be used for the switch variable?",
            "options": [
                "int",
                "char",
                "double",
                "Both A and B"
            ],
            "answer": "double",
            "explanation": "The switch statement does not support double as the switch variable data type."
        },
        {
            "question": "Which of the following will exit a loop prematurely?",
            "options": [
                "continue",
                "return",
                "exit",
                "break"
            ],
            "answer": "break",
            "explanation": "The break statement is used to exit a loop prematurely."
        },
        {
            "question": "Which statement skips the current iteration and continues with the next one?",
            "options": [
                "skip",
                "continue",
                "next",
                "resume"
            ],
            "answer": "continue",
            "explanation": "The continue statement skips the current iteration and jumps to the next one."
        },
        {
            "question": "In a do-while loop, where is the condition tested?",
            "options": [
                "Before entering the loop",
                "In the middle of the loop",
                "After the loop body has been executed",
                "At the end of the program"
            ],
            "answer": "After the loop body has been executed",
            "explanation": "In a do-while loop, the condition is checked after the loop body has been executed."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "x is greater",
                "y is greater",
                "x and y are equal",
                "No output"
            ],
            "answer": "y is greater",
            "explanation": "Since 10 is not greater than 20, the other part will execute."
        },
        {
            "question": "How many times will this loop execute?",
            "options": [
                "Never",
                "Once",
                "Three times",
                "Infinite times"
            ],
            "answer": "Three times",
            "explanation": "The loop will run for i values 0, 1, and 2."
        },
        {
            "question": "What is a variable in C programming?",
            "options": [
                "A type of function",
                "An operator",
                "A storage location with a name",
                "A keyword in C"
            ],
            "answer": "A storage location with a name",
            "explanation": "A variable in C programming is a storage location that is assigned a name. It can store data values."
        },
        {
            "question": "Which of the following is a valid variable name in C?",
            "options": [
                "1number",
                "_number",
                "number1",
                "number-1"
            ],
            "answer": "number1",
            "explanation": "Variable names in C can start with an underscore or a letter and can include numbers but cannot start with a number or include special characters like '-'."
        },
        {
            "question": "How do you declare an integer variable named 'age' in C?",
            "options": [
                "int age;",
                "integer age;",
                "age int;",
                "declare age as integer;"
            ],
            "answer": "int age;",
            "explanation": "In C, an integer variable is declared with the keyword 'int' followed by the variable name, such as 'int age;'."
        },
        {
            "question": "What will be the initial value of an uninitialized integer variable in C?",
            "options": [
                "0",
                "A random number",
                "1",
                "Null"
            ],
            "answer": "A random number",
            "explanation": "Uninitialized variables in C have an undefined value, often a random number, based on whatever is in the memory location."
        },
        {
            "question": "How do you initialize a float variable 'temp' with the value 23.5 in C?",
            "options": [
                "float temp = 23.5;",
                "float 23.5 = temp;",
                "float temp = 23.5f;",
                "initialize temp with 23.5;"
            ],
            "answer": "float temp = 23.5f;",
            "explanation": "In C, float literals should be suffixed with 'f' or 'F' to distinguish them from double. So, 'float temp = 23.5f;' is correct."
        },
        {
            "question": "Which of the following is the correct way to declare a character variable with the value 'A'?",
            "options": [
                "char letter = 'A';",
                "char letter = \"A\";",
                "character letter = 'A';",
                "letter = 'A';"
            ],
            "answer": "char letter = 'A';",
            "explanation": "A character variable is declared with the 'char' keyword and initialized with a single character enclosed in single quotes."
        },
        {
            "question": "What is the correct syntax to declare a constant integer variable 'MAX' with value 100 in C?",
            "options": [
                "constant int MAX = 100;",
                "const int MAX = 100;",
                "int constant MAX = 100;",
                "#define MAX 100"
            ],
            "answer": "const int MAX = 100;",
            "explanation": "The 'const' keyword is used to declare a constant variable in C. Alternatively, '#define' could also be used as a preprocessor directive."
        },
        {
            "question": "Which of the following is used to define a symbolic constant in C?",
            "options": [
                "const",
                "define",
                "#define",
                "#const"
            ],
            "answer": "#define",
            "explanation": "'#define' is a preprocessor directive used to define symbolic constants in C."
        },
        {
            "question": "What is the default value of a global integer variable in C?",
            "options": [
                "0",
                "1",
                "A random number",
                "Null"
            ],
            "answer": "0",
            "explanation": "Global and static variables in C are automatically initialized to zero."
        },
        {
            "question": "What data type would you use to store a person's first name in C?",
            "options": [
                "int",
                "float",
                "char array",
                "bool"
            ],
            "answer": "char array",
            "explanation": "A string, like a person's first name, is stored in a char array in C."
        },
        {
            "question": "How do you declare an array of 10 integers in C?",
            "options": [
                "int array[10];",
                "array int[10];",
                "int[10] array;",
                "array[10] int;"
            ],
            "answer": "int array[10];",
            "explanation": "Arrays in C are declared with the data type, followed by the array name and size in square brackets."
        },
        {
            "question": "Which of the following operators is used to access the value at a specific address in a pointer?",
            "options": [
                "&",
                "*",
                "->",
                "::"
            ],
            "answer": "*",
            "explanation": "The '*' operator is used to dereference a pointer, i.e., to access the value at the memory address stored in the pointer."
        },
        {
            "question": "What is the output of the following C code: int x = 10; printf(\"%d\", x);",
            "options": [
                "10",
                "x",
                "%d",
                "Error"
            ],
            "answer": "10",
            "explanation": "The printf function prints the value of the 'x' variable, which is 10."
        },
        {
            "question": "What is the purpose of the 'sizeof' operator in C?",
            "options": [
                "To check the size of a variable",
                "To allocate memory",
                "To compare two values",
                "To find the length of a string"
            ],
            "answer": "To check the size of a variable",
            "explanation": "The 'sizeof' operator is used to determine the size, in bytes, of a variable or data type."
        },
        {
            "question": "What is the correct way to assign a new value to an existing variable in C?",
            "options": [
                "int x;",
                "int x;",
                "x = 5;",
                "assign x = 5;"
            ],
            "answer": "int x; x = 5;",
            "explanation": "In C, a variable is assigned a value using the '=' operator after declaring it."
        },
        {
            "question": "What is the scope of a local variable in C?",
            "options": [
                "Throughout the program",
                "Only within the function it is declared",
                "Throughout the file",
                "Global"
            ],
            "answer": "Only within the function it is declared",
            "explanation": "A local variable in C is only accessible within the function in which it is declared."
        },
        {
            "question": "Which of the following is not a valid data type in C?",
            "options": [
                "int",
                "string",
                "float",
                "double"
            ],
            "answer": "string",
            "explanation": "C does not have a native 'string' data type. Strings are represented as arrays of characters."
        },
        {
            "question": "What does the following declaration mean? int *ptr;",
            "options": [
                "ptr is an integer",
                "ptr is a pointer to an integer",
                "ptr is a function returning an integer",
                "ptr is an array of integers"
            ],
            "answer": "ptr is a pointer to an integer",
            "explanation": "In C, the '*' symbol is used in the declaration to indicate that the variable is a pointer to the specified data type."
        },
        {
            "question": "What is the result of the following expression in C: 5 + 3 * 2?",
            "options": [
                "16",
                "11",
                "13",
                "8"
            ],
            "answer": "11",
            "explanation": "According to the order of operations in C, multiplication is performed before addition, so the expression evaluates to 5 + (3 * 2) = 11."
        },
        {
            "question": "What is the purpose of the 'return' statement in a C function?",
            "options": [
                "To exit the program",
                "To return control to the calling function",
                "To declare a variable",
                "To print a value"
            ],
            "answer": "To return control to the calling function",
            "explanation": "The 'return' statement in a C function is used to return control to the calling function, optionally returning a value."
        },
        {
            "question": "What is the purpose of the 'if' statement in C?",
            "options": [
                "To iterate over a block of code",
                "To execute a block of code based on a condition",
                "To declare a variable",
                "To terminate a loop"
            ],
            "answer": "To execute a block of code based on a condition",
            "explanation": "The 'if' statement is used to execute a block of code only if a specified condition is true."
        },
        {
            "question": "How do you write an 'if' statement in C to check if a variable 'a' is equal to 10?",
            "options": [
                "if a = 10 { }",
                "if (a == 10) { }",
                "if a == 10 { }",
                "if (a = 10) { }"
            ],
            "answer": "if (a == 10) { }",
            "explanation": "In C, the '==' operator is used for comparison, and conditions in an 'if' statement are enclosed in parentheses."
        },
        {
            "question": "What is the role of the 'else' statement in C?",
            "options": [
                "To define an alternative block of code if the 'if' condition is false",
                "To repeat a block of code",
                "To create a loop",
                "To define a function"
            ],
            "answer": "To define an alternative block of code if the 'if' condition is false",
            "explanation": "The 'else' statement is used to execute a different block of code if the 'if' condition is not met."
        },
        {
            "question": "What will be the output of the following C code snippet?",
            "options": [
                "Greater",
                "Smaller",
                "No output",
                "Error"
            ],
            "answer": "Smaller",
            "explanation": "Since x is 5, which is not greater than 10, the 'else' block will execute, printing \"Smaller\"."
        },
        {
            "question": "Which of the following is a valid 'if…else if…else' statement in C?",
            "options": [
                "if (condition) { } else if (condition) { } else { }",
                "if condition { } else if condition { } else { }",
                "if (condition) else if (condition) else { }",
                "if condition else if condition else { }"
            ],
            "answer": "if (condition) { } else if (condition) { } else { }",
            "explanation": "The correct syntax includes parentheses around the conditions and braces for the blocks of code."
        },
        {
            "question": "How do you write a nested 'if' statement in C?",
            "options": [
                "if (condition) { if (condition) { } }",
                "if condition { if condition { } }",
                "if (condition) if (condition) { }",
                "nested if (condition) { if (condition) { } }"
            ],
            "answer": "if (condition) { if (condition) { } }",
            "explanation": "Nested 'if' statements in C are written by placing an 'if' statement inside the block of another 'if' statement."
        },
        {
            "question": "What will the following C code snippet print?",
            "options": [
                "Hi",
                "Hello",
                "Hey",
                "No output"
            ],
            "answer": "Hi",
            "explanation": "Since num is greater than 5, the first 'if' condition is true, so \"Hi\" will be printed."
        },
        {
            "question": "What is the correct way to check multiple conditions in a single 'if' statement in C?",
            "options": [
                "if (condition1 && condition2) { }",
                "if condition1 and condition2 { }",
                "if (condition1) && (condition2) { }",
                "if condition1 && condition2 { }"
            ],
            "answer": "if (condition1 && condition2) { }",
            "explanation": "The '&&' operator is used to check if both conditions are true in a single 'if' statement."
        },
        {
            "question": "What does the 'else' block contain in an 'if…else' statement?",
            "options": [
                "The condition to be checked",
                "The code to be executed if the 'if' condition is true",
                "The code to be executed if the 'if' condition is false",
                "A mandatory return statement"
            ],
            "answer": "The code to be executed if the 'if' condition is false",
            "explanation": "The 'else' block contains code that is executed when the 'if' condition is not met."
        },
        {
            "question": "Which of the following statements about the 'if…else' structure in C is true?",
            "options": [
                "The 'else' part is mandatory in an 'if' statement.",
                "An 'if' statement can have multiple 'else' blocks.",
                "The 'if' condition can include logical, relational, and arithmetic expressions.",
                "The 'else' block can exist without an 'if' block."
            ],
            "answer": "The 'if' condition can include logical, relational, and arithmetic expressions.",
            "explanation": "The condition in an 'if' statement in C can be a complex expression involving logical, relational, and arithmetic operators. The 'else' part is not mandatory, and there can be only one 'else' block for each 'if'."
        },
        {
            "question": "What is the purpose of the 'switch' statement in C?",
            "options": [
                "To execute a block of code based on a condition",
                "To iterate over a block of code multiple times",
                "To select one of many code blocks to execute based on a variable's value",
                "To terminate a loop prematurely"
            ],
            "answer": "To select one of many code blocks to execute based on a variable's value",
            "explanation": "The 'switch' statement in C is used to select and execute one code block from multiple choices based on the value of a variable."
        },
        {
            "question": "Which type of expression can be used in a C 'switch' statement?",
            "options": [
                "Integer",
                "Float",
                "String",
                "Pointer"
            ],
            "answer": "Integer",
            "explanation": "The expression used in a 'switch' statement must be an integer or a character (which is internally represented as an integer)."
        },
        {
            "question": "What keyword is used to define cases in a 'switch' statement in C?",
            "options": [
                "case",
                "select",
                "option",
                "break"
            ],
            "answer": "case",
            "explanation": "The 'case' keyword is used to define different cases in a 'switch' statement in C."
        },
        {
            "question": "What is the role of the 'break' statement in a 'switch' case in C?",
            "options": [
                "To pause the execution of the case",
                "To exit the 'switch' statement",
                "To prevent the execution of the next case",
                "Both b) and c)"
            ],
            "answer": "Both b) and c)",
            "explanation": "The 'break' statement is used to exit the switch statement and to prevent the execution from falling through to the next case."
        },
        {
            "question": "What will happen if the 'break' statement is omitted in a 'switch' case in C?",
            "options": [
                "The program will crash",
                "The next case will not execute",
                "The execution will continue into the next case",
                "The switch statement will end"
            ],
            "answer": "The execution will continue into the next case",
            "explanation": "If the 'break' statement is omitted, the execution will \"fall through\" and continue into the next case until a 'break' is encountered or the switch ends."
        },
        {
            "question": "What keyword is used to define a default case in a 'switch' statement?",
            "options": [
                "default",
                "else",
                "otherwise",
                "none"
            ],
            "answer": "default",
            "explanation": "The 'default' keyword is used to define a case that will be executed if none of the other cases match."
        },
        {
            "question": "How many 'default' cases can a 'switch' statement have in C?",
            "options": [
                "One",
                "Two",
                "As many as needed",
                "Zero"
            ],
            "answer": "One",
            "explanation": "A 'switch' statement can have only one 'default' case, which is executed if no other case matches."
        },
        {
            "question": "What is the correct syntax for a 'switch' statement in C?",
            "options": [
                "switch(expression) { case constant: statements; … }",
                "switch { case expression: statements; … }",
                "switch(expression) { when constant: statements; … }",
                "switch: { case expression: statements; … }"
            ],
            "answer": "switch(expression) { case constant: statements; … }",
            "explanation": "The correct syntax for a 'switch' statement includes the 'switch' keyword followed by an expression in parentheses, and then one or more 'case' statements."
        },
        {
            "question": "Can a 'switch' statement in C be nested inside another 'switch' statement?",
            "options": [
                "Yes",
                "No",
                "Only if the outer switch has a default case",
                "Only within a 'for' loop"
            ],
            "answer": "Yes",
            "explanation": "'Switch' statements can be nested, meaning one switch can be placed inside another."
        },
        {
            "question": "Which of the following is a valid use of a 'switch' statement in C?",
            "options": [
                "To execute different blocks of code based on a character's value",
                "To check if a condition is true or false",
                "To loop through a range of numbers",
                "To define functions"
            ],
            "answer": "To execute different blocks of code based on a character's value",
            "explanation": "'Switch' statements are commonly used to execute different blocks of code based on the value of a character or integer variable."
        },
        {
            "question": "What is the primary characteristic of a 'while' loop in C?",
            "options": [
                "The loop executes at least once",
                "The condition is checked at the end of the loop",
                "The loop may not execute at all if the condition is false initially",
                "The loop executes an indefinite number of times"
            ],
            "answer": "The loop may not execute at all if the condition is false initially",
            "explanation": "A 'while' loop in C checks the condition before the loop body is executed. If the condition is false initially, the loop body does not execute at all."
        },
        {
            "question": "How does a 'do…while' loop differ from a 'while' loop in C?",
            "options": [
                "The 'do…while' loop checks the condition at the beginning",
                "The 'do…while' loop executes at least once regardless of the condition",
                "The 'do…while' loop cannot use a break statement",
                "The 'do…while' loop is faster than the 'while' loop"
            ],
            "answer": "The 'do…while' loop executes at least once regardless of the condition",
            "explanation": "The 'do…while' loop in C checks the condition after the loop body has executed, ensuring that the loop body is executed at least once."
        },
        {
            "question": "What is the correct syntax for a 'while' loop in C?",
            "options": [
                "while condition { statements; }",
                "while (condition) { statements; }",
                "while (condition) statements;",
                "Both b) and c) are correct"
            ],
            "answer": "Both b) and c) are correct",
            "explanation": "The correct syntax for a 'while' loop includes the 'while' keyword followed by the condition in parentheses and the loop body either in braces or as a single statement."
        },
        {
            "question": "What is the correct syntax for a 'do…while' loop in C?",
            "options": [
                "do { statements; } while (condition);",
                "do (condition) { statements; };",
                "do { statements; } until (condition);",
                "do while (condition) { statements; };"
            ],
            "answer": "do { statements; } while (condition);",
            "explanation": "The 'do…while' loop begins with 'do', followed by the loop body in braces, and ends with 'while' and the condition in parentheses, followed by a semicolon."
        },
        {
            "question": "Which type of loop is ideal when the number of iterations is not known in advance?",
            "options": [
                "For loop",
                "While loop",
                "Do/while loop",
                "Both b) and c) are suitable"
            ],
            "answer": "Both b) and c) are suitable",
            "explanation": "While and do/while loops are ideal for situations where the number of iterations is not predetermined, as they depend on a condition rather than a counter."
        },
        {
            "question": "In a 'while' loop, if the condition never becomes false, what happens?",
            "options": [
                "The loop exits after a certain number of iterations",
                "The loop continues indefinitely, creating an infinite loop",
                "The loop skips to the next section of code",
                "An error is thrown by the compiler"
            ],
            "answer": "The loop continues indefinitely, creating an infinite loop",
            "explanation": "If the condition in a 'while' loop never becomes false, the loop will continue to execute indefinitely, resulting in an infinite loop."
        },
        {
            "question": "What will the following C code snippet print?",
            "options": [
                "012",
                "123",
                "0123",
                "An infinite number of 0s"
            ],
            "answer": "012",
            "explanation": "The loop prints the values of 'i' from 0 to 2 and then exits when 'i' becomes 3, resulting in the output \"012\"."
        },
        {
            "question": "Which of the following is a valid 'do…while' loop in C?",
            "options": [
                "do { statements; } while condition;",
                "do { statements; } while (condition)",
                "do (condition) { statements; } while;",
                "do { statements; } while (condition);"
            ],
            "answer": "do { statements; } while (condition);",
            "explanation": "A valid 'do…while' loop in C must end with a semicolon after the condition enclosed in parentheses."
        },
        {
            "question": "How can you exit a 'while' loop prematurely in C?",
            "options": [
                "Using the 'stop' statement",
                "Using the 'exit' statement",
                "Using the 'break' statement",
                "By setting the condition to false"
            ],
            "answer": "Using the 'break' statement",
            "explanation": "The 'break' statement is used to exit a loop prematurely, immediately stopping the loop and moving to the next statement after the loop."
        },
        {
            "question": "What is the role of the 'continue' statement in a 'while' loop in C?",
            "options": [
                "To exit the loop",
                "To skip the current iteration and proceed to the next iteration",
                "To pause the loop temporarily",
                "To restart the loop from the beginning"
            ],
            "answer": "To skip the current iteration and proceed to the next iteration",
            "explanation": "The 'continue' statement skips the remaining statements in the current loop iteration and proceeds with the next iteration of the loop."
        },
        {
            "question": "What is the minimum number of times a 'do…while' loop is guaranteed to execute?",
            "options": [
                "0 times",
                "1 time",
                "2 times",
                "Depends on the condition"
            ],
            "answer": "1 time",
            "explanation": "A 'do…while' loop is guaranteed to execute at least once, regardless of the condition, as the condition is checked after the first execution."
        },
        {
            "question": "Which of the following is an infinite loop in C?",
            "options": [
                "while (1) { }",
                "while (0) { }",
                "do { } while (0);",
                "for (;;) { }"
            ],
            "answer": "while (1) { }",
            "explanation": "'while (1)' creates an infinite loop because the condition '1' (which is always true) never becomes false."
        },
        {
            "question": "What happens if the condition in a 'while' loop is always true?",
            "options": [
                "The loop executes a fixed number of times",
                "The loop executes only once",
                "The loop executes indefinitely",
                "The program terminates"
            ],
            "answer": "The loop executes indefinitely",
            "explanation": "If the condition in a 'while' loop is always true, the loop will continue to execute indefinitely, creating an infinite loop."
        },
        {
            "question": "Can a 'while' loop be used to iterate over an array in C?",
            "options": [
                "Yes, using an index variable",
                "No, 'while' loops cannot be used with arrays",
                "Only if the array has a known fixed size",
                "Only in combination with a 'for' loop"
            ],
            "answer": "Yes, using an index variable",
            "explanation": "A 'while' loop can iterate over an array by using an index variable to access each element in turn."
        },
        {
            "question": "In a 'do…while' loop, where should the increment/decrement statement typically be placed?",
            "options": [
                "Before the loop body",
                "At the beginning of the loop body",
                "At the end of the loop body",
                "After the loop condition"
            ],
            "answer": "At the end of the loop body",
            "explanation": "The increment or decrement statement in a 'do…while' loop is typically placed at the end of the loop body to ensure that the loop variable is updated after each iteration."
        },
        {
            "question": "What is the primary purpose of a 'for' loop in C?",
            "options": [
                "To execute a block of code a fixed number of times",
                "To execute a block of code based on a condition",
                "To create an infinite loop",
                "To iterate over arrays only"
            ],
            "answer": "To execute a block of code a fixed number of times",
            "explanation": "A 'for' loop is typically used in C to execute a block of code a specific number of times, with the number of iterations usually determined by the loop's initialization and condition."
        },
        {
            "question": "What are the three parts of a 'for' loop declaration in C?",
            "options": [
                "Initialization, condition, update",
                "Condition, update, execution",
                "Start, end, step",
                "Declaration, execution, termination"
            ],
            "answer": "Initialization, condition, update",
            "explanation": "A 'for' loop in C consists of three parts: initialization (executed once before the loop starts), condition (checked before each iteration), and update (executed after each iteration)."
        },
        {
            "question": "Which part of the 'for' loop is optional?",
            "options": [
                "Initialization",
                "Condition",
                "Update",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "All three parts of the 'for' loop (initialization, condition, update) are optional in C. Omitting the condition creates an infinite loop."
        },
        {
            "question": "How is a 'for' loop commonly used in array processing?",
            "options": [
                "To search for an element",
                "To iterate over each element",
                "To modify array size",
                "To reverse the array"
            ],
            "answer": "To iterate over each element",
            "explanation": "'For' loops are commonly used to iterate over each element in an array, typically by using an index variable that is incremented in each iteration."
        },
        {
            "question": "What is the scope of a variable declared in the initialization part of a 'for' loop in C?",
            "options": [
                "It is global",
                "It is local to the loop",
                "It is local to the function containing the loop",
                "It is local to the entire program"
            ],
            "answer": "It is local to the loop",
            "explanation": "A variable declared in the initialization part of a 'for' loop is local to the loop and cannot be accessed outside the loop."
        },
        {
            "question": "What will be the output of the following C code snippet?",
            "options": [
                "012",
                "123",
                "0123",
                "3"
            ],
            "answer": "012",
            "explanation": "The loop iterates three times with 'i' taking values 0, 1, and 2, resulting in the output \"012\"."
        },
        {
            "question": "How do you create an infinite 'for' loop in C?",
            "options": [
                "for ( ; ; ) { }",
                "for (int i = 0; true; i++) { }",
                "for (1) { }",
                "Both a) and b)"
            ],
            "answer": "Both a) and b)",
            "explanation": "An infinite 'for' loop can be created by leaving the condition empty (for ( ; ; ) { }) or by using a condition that always evaluates to true."
        },
        {
            "question": "What does the 'break' statement do inside a 'for' loop?",
            "options": [
                "Pauses the loop",
                "Terminates the loop immediately",
                "Skips to the next iteration",
                "Exits the program"
            ],
            "answer": "Terminates the loop immediately",
            "explanation": "The 'break' statement is used to exit the loop immediately, regardless of the loop condition."
        },
        {
            "question": "What is the use of the 'continue' statement in a 'for' loop?",
            "options": [
                "To stop the loop",
                "To skip the rest of the current loop iteration and continue with the next one",
                "To repeat the loop from the beginning",
                "To pause the loop execution"
            ],
            "answer": "To skip the rest of the current loop iteration and continue with the next one",
            "explanation": "The 'continue' statement skips the remaining part of the loop body for the current iteration and proceeds with the next iteration of the loop."
        },
        {
            "question": "What will happen if you omit all three parts of the 'for' loop declaration?",
            "options": [
                "The loop will not compile",
                "The loop will execute once",
                "The loop will become an infinite loop",
                "The loop will be skipped"
            ],
            "answer": "The loop will become an infinite loop",
            "explanation": "Omitting all three parts (initialization, condition, and update) of the 'for' loop creates an infinite loop because there is no condition to terminate the loop."
        },
        {
            "question": "Can the initialization part of the 'for' loop contain multiple statements in C?",
            "options": [
                "Yes, separated by commas",
                "No, it can contain only one statement",
                "Only if they are of the same type",
                "Only if they are assignments"
            ],
            "answer": "Yes, separated by commas",
            "explanation": "The initialization part of a 'for' loop can contain multiple statements, separated by commas."
        },
        {
            "question": "Is it possible to declare more than one variable in the initialization part of a 'for' loop in C?",
            "options": [
                "Yes, but only of the same type",
                "Yes, of any type",
                "No, only one variable is allowed",
                "Only if they are pointers"
            ],
            "answer": "Yes, but only of the same type",
            "explanation": "Multiple variables can be declared in the initialization part of a 'for' loop, but they must all be of the same type."
        },
        {
            "question": "What will be the output of the following C code snippet?",
            "options": [
                "10 8 6 4 2 0",
                "10 9 8 7 6 5 4 3 2 1 0",
                "9 7 5 3 1",
                "No output"
            ],
            "answer": "10 8 6 4 2 0",
            "explanation": "The loop starts at 10 and decrements 'i' by 2 in each iteration, printing the even numbers down to 0."
        },
        {
            "question": "What is the correct way to write a nested 'for' loop in C?",
            "options": [
                "for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { } }",
                "for (int i = 0; i < n; i++), for (int j = 0; j < m; j++) { }",
                "for (int i = 0, j = 0; i < n, j < m; i++, j++) { }",
                "for int i = 0; i < n; i++ { for int j = 0; j < m; j++ { } }"
            ],
            "answer": "for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { } }",
            "explanation": "Nested 'for' loops are written by placing one 'for' loop inside the body of another, with each loop having its own control variables and conditions."
        },
        {
            "question": "What is the role of the update part of the 'for' loop in C?",
            "options": [
                "To initialize loop variables",
                "To check the loop condition",
                "To modify the loop variable(s) after each iteration",
                "To define the loop body"
            ],
            "answer": "To modify the loop variable(s) after each iteration",
            "explanation": "The update part of the 'for' loop is executed after each iteration of the loop body and is typically used to modify the loop variable(s), such as incrementing or decrementing a counter."
        },
        {
            "question": "Which function is used to open a file in C?",
            "options": [
                "file_open()",
                "open_file()",
                "fopen()",
                "open()"
            ],
            "answer": "fopen()",
            "explanation": "In C, the fopen() function is used to open a file. It returns a pointer to the file if successful or NULL if there’s an error."
        },
        {
            "question": "What does the “r” mode signify when opening a file using fopen()?",
            "options": [
                "Write mode",
                "Read mode",
                "Append mode",
                "Exclusive mode"
            ],
            "answer": "Read mode",
            "explanation": "The “r” mode stands for “read” and it opens the file for reading."
        },
        {
            "question": "Which function is used to close an opened file?",
            "options": [
                "fclose()",
                "file_close()",
                "close_file()",
                "close()"
            ],
            "answer": "fclose()",
            "explanation": "The fclose() function is used to close an opened file in C."
        },
        {
            "question": "How do you read a character from a file?",
            "options": [
                "fscanf()",
                "fprint()",
                "fputc()",
                "fgetc()"
            ],
            "answer": "fgetc()",
            "explanation": "The fgetc() function reads a character from a file."
        },
        {
            "question": "Which function writes a string to a file?",
            "options": [
                "fputs()",
                "fgets()",
                "fread()",
                "fwrite()"
            ],
            "answer": "fputs()",
            "explanation": "The fputs() function writes a string to the given file."
        },
        {
            "question": "What is the return value of feof() when the end of file is reached?",
            "options": [
                "0",
                "1",
                "-1",
                "NULL"
            ],
            "answer": "1",
            "explanation": "The feof() function returns 1 when the end of the file is reached."
        },
        {
            "question": "Which function is used to seek a specific position in a file?",
            "options": [
                "fseek()",
                "flocate()",
                "fposition()",
                "fmove()"
            ],
            "answer": "fseek()",
            "explanation": "The fseek() function is used to change the file position."
        },
        {
            "question": "How can you get the current position of the file pointer?",
            "options": [
                "ftell()",
                "fshow()",
                "fpos()",
                "fcurrent()"
            ],
            "answer": "ftell()",
            "explanation": "The ftell() function gives the current position of the file pointer."
        },
        {
            "question": "Which function is used to read blocks of data from a file?",
            "options": [
                "fblockread()",
                "fread()",
                "fgetline()",
                "fgetblock()"
            ],
            "answer": "fread()",
            "explanation": "The fread() function is used to read blocks of data from a file."
        },
        {
            "question": "If you want to open a file in both read and write mode without truncating it, which mode should you use?",
            "options": [
                "“rw”",
                "“w+”",
                "“r+”",
                "“rw+”"
            ],
            "answer": "“r+”",
            "explanation": "The mode “r+” opens the file for both reading and writing without truncating it."
        },
        {
            "question": "Which of the following is a derived data type in C?",
            "options": [
                "int",
                "float",
                "array",
                "char"
            ],
            "answer": "array",
            "explanation": "Arrays are derived data types in C, created using fundamental types like int, char, etc."
        },
        {
            "question": "What is the size (in bytes) of double on most modern systems?",
            "options": [
                "4",
                "6",
                "8",
                "10"
            ],
            "answer": "8",
            "explanation": "On most systems, a double is 8 bytes. But it’s always good to check using the sizeof() operator for platform-specific sizes."
        },
        {
            "question": "What data type is best suited for storing a single character?",
            "options": [
                "int",
                "bool",
                "char",
                "double"
            ],
            "answer": "char",
            "explanation": "The char data type is specifically designed for storing a single character."
        },
        {
            "question": "Which of the following is a non-standard integer type?",
            "options": [
                "int",
                "long int",
                "byte",
                "short int"
            ],
            "answer": "byte",
            "explanation": "byte is not a standard integer type in C."
        },
        {
            "question": "How many bytes does the int data type usually occupy?",
            "options": [
                "1",
                "2",
                "4",
                "8"
            ],
            "answer": "4",
            "explanation": "Typically, in most modern systems, an int occupies 4 bytes (32 bits), but this can vary depending on the system and compiler."
        },
        {
            "question": "Which of the following types can store a larger range of integers?",
            "options": [
                "short",
                "int",
                "long long",
                "long"
            ],
            "answer": "long long",
            "explanation": "long long can typically store larger integers compared to the other listed types."
        },
        {
            "question": "Which data type in C has only two possible values?",
            "options": [
                "char",
                "bool",
                "int",
                "double"
            ],
            "answer": "bool",
            "explanation": "The _Bool (or bool with stdbool.h included) can have only two values: true or false."
        },
        {
            "question": "Which of the following is not a floating-point data type?",
            "options": [
                "float",
                "double",
                "long double",
                "long int"
            ],
            "answer": "long int",
            "explanation": "long int is an integer type, not a floating-point type."
        },
        {
            "question": "Which type is used to store a wide character in C?",
            "options": [
                "char",
                "w_char",
                "wchar_t",
                "wide"
            ],
            "answer": "wchar_t",
            "explanation": "wchar_t is used for wide characters."
        },
        {
            "question": "If a variable is declared as unsigned short int, what is its typical size on modern systems?",
            "options": [
                "1 byte",
                "2 bytes",
                "4 bytes",
                "8 bytes"
            ],
            "answer": "2 bytes",
            "explanation": "Typically, an unsigned short int occupies 2 bytes on modern systems."
        },
        {
            "question": "Which of the following data types has the smallest storage size?",
            "options": [
                "float",
                "double",
                "long double",
                "char"
            ],
            "answer": "char",
            "explanation": "Typically, a char occupies 1 byte, making it smaller than the other listed data types."
        },
        {
            "question": "What would be the outcome of sizeof(_Bool) in C?",
            "options": [
                "0",
                "1",
                "2",
                "4"
            ],
            "answer": "1",
            "explanation": "The _Bool type, or bool when including stdbool.h, typically occupies 1 byte."
        },
        {
            "question": "What is the primary difference between int and unsigned int?",
            "options": [
                "Memory allocation",
                "Range of values",
                "Data type classification",
                "Operation types"
            ],
            "answer": "Range of values",
            "explanation": "Both int and unsigned int typically occupy the same memory, but unsigned int can’t store negative values, extending its positive range."
        },
        {
            "question": "Which data type would be most suitable for storing the value of PI (3.14159…)?",
            "options": [
                "int",
                "float",
                "double",
                "char"
            ],
            "answer": "double",
            "explanation": "double provides more precision than float, making it more suitable for storing the value of PI."
        },
        {
            "question": "Which data type is used to store a sequence of characters?",
            "options": [
                "sequence",
                "char sequence[]",
                "string",
                "char[]"
            ],
            "answer": "char[]",
            "explanation": "In C, a sequence of characters (a string) is stored as an array of char, i.e., char[]."
        },
        {
            "question": "Which keyword is used to define a structure?",
            "options": [
                "struct",
                "structure",
                "strct",
                "typedef"
            ],
            "answer": "struct",
            "explanation": "In C, the struct keyword is used to define a structure."
        },
        {
            "question": "Consider the following code:",
            "options": [
                "Variable",
                "Value",
                "Structure type",
                "Function"
            ],
            "answer": "Structure type",
            "explanation": "‘student’ is a structure type. We can use this type to declare variables of this structure."
        },
        {
            "question": "How do you access the ‘id’ of a structure variable ‘stu’ of type ‘student’?",
            "options": [
                "stu.id",
                "student.id",
                "stu->id",
                "student->id"
            ],
            "answer": "stu.id",
            "explanation": "The dot operator . is used to access the members of a structure variable."
        },
        {
            "question": "What will be the size of the structure student in memory (assuming an int takes 4 bytes and a char takes 1 byte)?",
            "options": [
                "20 bytes",
                "24 bytes",
                "5 bytes",
                "21 bytes"
            ],
            "answer": "24 bytes",
            "explanation": "The size would be the sum of the size of an int (4 bytes) and the size of the character array (20 bytes) = 24 bytes."
        },
        {
            "question": "What does the following code do?",
            "options": [
                "Defines a function named Student",
                "Defines a variable named Student",
                "Creates an alias ‘Student’ for the structure",
                "Creates a new structure named Student"
            ],
            "answer": "Creates an alias ‘Student’ for the structure",
            "explanation": "The typedef keyword is used to create an alias. Here, ‘Student’ becomes an alias for ‘struct student’."
        },
        {
            "question": "How can you define a structure variable at the time of structure declaration?",
            "options": [
                "struct student { int id; char name[20]; } stu;",
                "struct student = { int id; char name[20]; } stu;",
                "struct student { int id; char name[20]; stu; }",
                "struct { int id; char name[20]; } student stu;"
            ],
            "answer": "struct student { int id; char name[20]; } stu;",
            "explanation": "This code snippet defines a structure of type ‘student’ and also declares a variable ‘stu’ of that type."
        },
        {
            "question": "If ‘ptr’ is a pointer to a structure variable, how do you access the members of the structure?",
            "options": [
                "ptr.member",
                "*ptr.member",
                "ptr->member",
                "&ptr->member"
            ],
            "answer": "ptr->member",
            "explanation": "When you have a pointer to a structure, the ‘->’ operator is used to access its members."
        },
        {
            "question": "Can a structure in C contain a member of its own type?",
            "options": [
                "No, it’s forbidden.",
                "Yes, but only as a direct member.",
                "Yes, but only as a pointer.",
                "Yes, without any restrictions."
            ],
            "answer": "Yes, but only as a pointer.",
            "explanation": "A structure cannot contain a member of its own type directly because the size of the structure would become indeterminate. However, it can contain a pointer to its own type."
        },
        {
            "question": "Which of the following initializes a structure variable stu with id as 100 and name as “John”?",
            "options": [
                "struct student stu = {100, “John”};",
                "struct student stu = {id: 100, name: “John”};",
                "student stu = {100, “John”};",
                "student stu = {id = 100, name = “John”};"
            ],
            "answer": "struct student stu = {100, “John”};",
            "explanation": "This is the correct way to initialize a structure variable with given values."
        },
        {
            "question": "Structures in C can contain:",
            "options": [
                "Only data members",
                "Data members and member functions",
                "Only member functions",
                "None of the above"
            ],
            "answer": "Only data members",
            "explanation": "In C, structures can contain only data members. Member functions are a feature of classes in C++."
        },
        {
            "question": "How is the string “hello” represented in memory?",
            "options": [
                "‘h’, ‘e’, ‘l’, ‘l’, ‘o’",
                "‘h’, ‘e’, ‘l’, ‘l’, ‘o’, ‘\\n’",
                "‘h’, ‘e’, ‘l’, ‘l’, ‘o’, ‘\\0’",
                "‘hello’"
            ],
            "answer": "‘h’, ‘e’, ‘l’, ‘l’, ‘o’, ‘\\0’",
            "explanation": "Strings in C are terminated with a null character to mark the end."
        },
        {
            "question": "What will be the size of the string “CProgramming” in memory?",
            "options": [
                "12",
                "13",
                "11",
                "10"
            ],
            "answer": "13",
            "explanation": "The size includes all characters plus the null terminator."
        },
        {
            "question": "Which of the following functions is used to compare two strings in C?",
            "options": [
                "cmpstr()",
                "strcomp()",
                "strcmp()",
                "compare()"
            ],
            "answer": "strcmp()",
            "explanation": "The strcmp() function from the string.h library is used to compare two strings."
        },
        {
            "question": "Which of the following functions can be used to find the length of a string?",
            "options": [
                "strlen()",
                "strlength()",
                "length()",
                "size()"
            ],
            "answer": "strlen()",
            "explanation": "The strlen() function from the string.h library returns the length of the string excluding the null terminator."
        },
        {
            "question": "Which function is used to concatenate two strings?",
            "options": [
                "strconcat()",
                "strcat()",
                "stradd()",
                "strapp()"
            ],
            "answer": "strcat()",
            "explanation": "The strcat() function from the string.h library is used to concatenate two strings."
        },
        {
            "question": "What does the strcpy() function do?",
            "options": [
                "Compares two strings",
                "Counts characters in a string",
                "Copies one string to another",
                "Splits a string"
            ],
            "answer": "Copies one string to another",
            "explanation": "The strcpy() function copies the content of one string into another."
        },
        {
            "question": "Which of the following will correctly initialize a string with the content “world”?",
            "options": [
                "char str[] = “world”;",
                "char str[5] = “world”;",
                "char *str = “world”;",
                "Both A and C"
            ],
            "answer": "Both A and C",
            "explanation": "Both these methods correctly initialize a string. Option B is incorrect because it doesn’t account for the null terminator."
        },
        {
            "question": "In C, which escape sequence represents the null character?",
            "options": [
                "\\n",
                "\\0",
                "\\null",
                "\\t"
            ],
            "answer": "\\0",
            "explanation": "In C, the null character is represented by the escape sequence \\0."
        },
        {
            "question": "Which function can be used to convert a string to uppercase?",
            "options": [
                "strupr()",
                "strtoupper()",
                "toupper()",
                "to_upper()"
            ],
            "answer": "strupr()",
            "explanation": "The strupr() function converts a string to uppercase."
        },
        {
            "question": "Which of the following functions reverses a string?",
            "options": [
                "revstr()",
                "strrev()",
                "reverse()",
                "strreverse()"
            ],
            "answer": "strrev()",
            "explanation": "The strrev() function from the string.h library reverses the string in place."
        },
        {
            "question": "How can you initialize an empty string in C?",
            "options": [
                "char str[] = ” “;",
                "char str[] = “\\0”;",
                "char str[] = “”;",
                "char str[0];"
            ],
            "answer": "char str[] = “”;",
            "explanation": "An empty string in C can be initialized using empty double quotes. It contains only the null character."
        },
        {
            "question": "Which function will convert the string “123” to an integer?",
            "options": [
                "toInt(“123”);",
                "atoi(“123”);",
                "str2int(“123”);",
                "convert(“123”);"
            ],
            "answer": "atoi(“123”);",
            "explanation": "The atoi() function (from the stdlib.h library) converts a string to an integer."
        },
        {
            "question": "Given char str[] = “Hello, World!”;, how do you get the character ‘W’ using the array indexing?",
            "options": [
                "str[6]",
                "str[7]",
                "str[8]",
                "str[9]"
            ],
            "answer": "str[9]",
            "explanation": "Strings in C are zero-indexed, so the character ‘W’ is located at index 9 in the given string."
        },
        {
            "question": "What is the main purpose of a function in C?",
            "options": [
                "Reduce repetition of code",
                "Make the code more readable",
                "Facilitate modular programming",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Functions provide modularity, reduce code repetition, and make the code more readable and maintainable."
        },
        {
            "question": "Which of the following is the correct way to declare a function in C?",
            "options": [
                "function functionName() { … }",
                "declare functionName() { … }",
                "int functionName() { … }",
                "functionName: function() { … }"
            ],
            "answer": "int functionName() { … }",
            "explanation": "In C, functions are declared with their return type followed by the function name and parentheses."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "Error",
                "0",
                "Hello",
                "greet"
            ],
            "answer": "Hello",
            "explanation": "The function greet() is called within main() and prints “Hello” to the console."
        },
        {
            "question": "How many values can a function return in C?",
            "options": [
                "Multiple values",
                "Only one value",
                "No values",
                "Both B and C"
            ],
            "answer": "Both B and C",
            "explanation": "A function in C can return only one value, or it can be a void function returning no value."
        },
        {
            "question": "What does the ‘void’ keyword represent in a function?",
            "options": [
                "The function takes no arguments",
                "The function returns no value",
                "The function is empty",
                "The function has errors"
            ],
            "answer": "The function returns no value",
            "explanation": "The ‘void’ keyword indicates that the function doesn’t return any value."
        },
        {
            "question": "How do you call a function named ‘display’ in C?",
            "options": [
                "call display;",
                "display.call();",
                "display();",
                "func display;"
            ],
            "answer": "display();",
            "explanation": "Functions are called by their name followed by parentheses."
        },
        {
            "question": "If a function doesn’t explicitly return a value, what will its default return type be?",
            "options": [
                "void",
                "int",
                "float",
                "char"
            ],
            "answer": "void",
            "explanation": "If no return type is specified, it defaults to ‘void’ which means the function doesn’t return any value."
        },
        {
            "question": "Which of the following is a valid function declaration?",
            "options": [
                "void example() {}",
                "function example() {}",
                "void: example() {}",
                "example function() {}"
            ],
            "answer": "void example() {}",
            "explanation": "The correct syntax for declaring a function in C is return_type function_name(parameters) { /* code */ }."
        },
        {
            "question": "What is a recursive function?",
            "options": [
                "A function that calls other functions",
                "A function that can run indefinitely",
                "A function that calls itself",
                "A function with multiple parameters"
            ],
            "answer": "A function that calls itself",
            "explanation": "A recursive function is a function that calls itself in its definition."
        },
        {
            "question": "Which of the following is true about function arguments passed by value?",
            "options": [
                "The function works with the actual data.",
                "Changes in the function do not affect the original data.",
                "Changes in the function reflected in the original data.",
                "The function cannot modify the arguments."
            ],
            "answer": "Changes in the function do not affect the original data.",
            "explanation": "When arguments are passed by value, the function works with a copy of the data, not the actual data itself."
        },
        {
            "question": "What is the purpose of the return statement in a function?",
            "options": [
                "To terminate the function",
                "To return control to the calling function",
                "To return a value to the calling function",
                "Both b and c"
            ],
            "answer": "Both b and c",
            "explanation": "The return statement is used to return control to the calling function and optionally to return a value."
        },
        {
            "question": "How is an array with 5 integers declared in C?",
            "options": [
                "int a(5);",
                "int a[5];",
                "int[5] a;",
                "array a[5];"
            ],
            "answer": "int a[5];",
            "explanation": "Arrays in C are declared with the datatype followed by the array name and its size in square brackets."
        },
        {
            "question": "What is the index of the first element in an array?",
            "options": [
                "0",
                "1",
                "First",
                "Start"
            ],
            "answer": "0",
            "explanation": "Array indexing in C starts from 0, so the first element’s index is 0."
        },
        {
            "question": "To access the third element of an array named ‘arr’, you would use:",
            "options": [
                "arr[2]",
                "arr[3]",
                "arr(2)",
                "arr(3)"
            ],
            "answer": "arr[2]",
            "explanation": "As indexing starts from 0, the third element is accessed using index 2."
        },
        {
            "question": "What will be the size in bytes of an array int arr[20]; if an integer requires 4 bytes of memory?",
            "options": [
                "40",
                "80",
                "20",
                "5"
            ],
            "answer": "80",
            "explanation": "For 20 integers each of 4 bytes, the array will be 20 * 4 = 80 bytes."
        },
        {
            "question": "Which of the following is a valid declaration for a 2D array?",
            "options": [
                "int a[][] = {{1,2}, {3,4}};",
                "int a[2,2] = {{1,2}, {3,4}};",
                "int a[2][2] = {{1,2}, {3,4}};",
                "array a[2][2] = {{1,2}, {3,4}};"
            ],
            "answer": "int a[2][2] = {{1,2}, {3,4}};",
            "explanation": "In C, multi-dimensional arrays are declared by specifying each dimension’s size inside its respective brackets."
        },
        {
            "question": "Which of the following is the correct way to declare a 3D array?",
            "options": [
                "int a[][][] = {{{1},{2},{3}},{{4},{5},{6}}};",
                "int a[3][3][3];",
                "int[3][3][3] a;",
                "Both A and B"
            ],
            "answer": "Both A and B",
            "explanation": "Both declarations are valid ways to declare a 3D array."
        },
        {
            "question": "In an array declaration int arr[5] = {1, 2, 3};, what will be the value of arr[3]?",
            "options": [
                "1",
                "2",
                "3",
                "0"
            ],
            "answer": "0",
            "explanation": "Elements that aren’t explicitly initialized are automatically initialized to 0."
        },
        {
            "question": "Which function is used to determine the length of an array?",
            "options": [
                "sizeof()",
                "length()",
                "len()",
                "size()"
            ],
            "answer": "sizeof()",
            "explanation": "The sizeof() function can be used to determine the memory size occupied by the array. To get the number of elements, you’d divide the size of the entire array by the size of a single element."
        },
        {
            "question": "Which statement about arrays in C is false?",
            "options": [
                "Arrays can store multiple values of different data types.",
                "The size of an array must be specified at the time of declaration.",
                "The elements of an array are stored in contiguous memory locations.",
                "The array index starts from 0."
            ],
            "answer": "Arrays can store multiple values of different data types.",
            "explanation": "Arrays in C store multiple values of the same data type."
        },
        {
            "question": "Which of the following correctly initializes an array of size 5 with all values set to 0?",
            "options": [
                "int arr[5] = {0};",
                "int arr[5];",
                "int arr[5] = {};",
                "int arr[] = {0,0,0,0,0};"
            ],
            "answer": "int arr[5] = {0};",
            "explanation": "When an array is initialized with fewer values than its declared size, the remaining elements get automatically initialized to 0."
        },
        {
            "question": "How would you declare a two-dimensional integer array of 3 rows and 4 columns?",
            "options": [
                "int arr[3, 4];",
                "int arr[3][4];",
                "int[3][4] arr;",
                "int arr[ ][ ] = {3, 4};"
            ],
            "answer": "int arr[3][4];",
            "explanation": "A two-dimensional array in C is declared using the type name[row_size][column_size]."
        },
        {
            "question": "What will the value of arr[2] be in the following code segment?",
            "options": [
                "10",
                "20",
                "30",
                "40"
            ],
            "answer": "30",
            "explanation": "Array indices start from 0. Hence, arr[2] refers to the third element which is 30."
        },
        {
            "question": "Which of the following is a modulus operator in C?",
            "options": [
                "%",
                "/",
                "&&",
                "||"
            ],
            "answer": "%",
            "explanation": "The modulus operator (%) returns the remainder of a division operation."
        },
        {
            "question": "Which operator is used for bitwise left shift?",
            "options": [
                "<<",
                "<\\",
                "<=",
                "<"
            ],
            "answer": "<<",
            "explanation": "The << operator shifts bits of a number to the left."
        },
        {
            "question": "What does the == operator do?",
            "options": [
                "Assigns a value",
                "Checks for inequality",
                "Checks for equality",
                "Performs an XOR operation"
            ],
            "answer": "Checks for equality",
            "explanation": "The == operator is used to compare two values for equality."
        },
        {
            "question": "Which of the following operators has the highest precedence?",
            "options": [
                "+",
                "*",
                "&&",
                "||"
            ],
            "answer": "*",
            "explanation": "The multiplication operator (*) has higher precedence than addition, logical AND, and logical OR."
        },
        {
            "question": "What will be the value of x after executing this expression: x = 7 + 3 * 2;?",
            "options": [
                "13",
                "20",
                "16",
                "10"
            ],
            "answer": "13",
            "explanation": "According to operator precedence, multiplication is performed before addition. Thus, the result is 13"
        },
        {
            "question": "Which operator is used for bitwise AND?",
            "options": [
                "&&",
                "&",
                "|",
                "^"
            ],
            "answer": "&",
            "explanation": "The & operator performs a bitwise AND operation."
        },
        {
            "question": "Which operator can be used to check if both conditions are true?",
            "options": [
                "||",
                "&&",
                "!",
                "^"
            ],
            "answer": "&&",
            "explanation": "The && operator is the logical AND, which checks if both conditions are true."
        },
        {
            "question": "The != operator is __________.",
            "options": [
                "Logical AND",
                "Logical OR",
                "NOT equal to",
                "Equal to"
            ],
            "answer": "NOT equal to",
            "explanation": "The != operator checks if two values are not equal."
        },
        {
            "question": "What is the result of the bitwise operation ~4?",
            "options": [
                "4",
                "5",
                "-5",
                "-4"
            ],
            "answer": "-5",
            "explanation": "The ~ operator inverts all the bits. For integer 4, the bitwise representation is 0100. Inverting the bits gives 1011, which represents -5 in Two’s Complement form."
        },
        {
            "question": "What will be the result of 7 ^ 3?",
            "options": [
                "4",
                "10",
                "5",
                "6"
            ],
            "answer": "4",
            "explanation": "The ^ operator is the bitwise XOR. The operation 7 (0111) XOR 3 (0011) results in 4 (0100)."
        },
        {
            "question": "Which operator is used for division?",
            "options": [
                "%",
                "/",
                "\\",
                "//"
            ],
            "answer": "/",
            "explanation": "The / operator is used for division in C."
        },
        {
            "question": "Which of the following is a post-increment operator?",
            "options": [
                "i++",
                "i–",
                "++i",
                "–i"
            ],
            "answer": "i++",
            "explanation": "The i++ operator is the post-increment operator which increases the value of i by 1 after its current value is used."
        },
        {
            "question": "Which operator assigns a value to a variable?",
            "options": [
                "==",
                "=",
                ":=",
                "<="
            ],
            "answer": "=",
            "explanation": "The = operator is used for assignment in C."
        },
        {
            "question": "What does a pointer store?",
            "options": [
                "Actual value of a variable",
                "Address of a variable",
                "Both actual value and address",
                "None of the above"
            ],
            "answer": "Address of a variable",
            "explanation": "A pointer stores the memory address of another variable."
        },
        {
            "question": "Which operator is used to get the address of a variable?",
            "options": [
                "*",
                "&",
                "^",
                "%"
            ],
            "answer": "&",
            "explanation": "The & operator is used to fetch the address of a variable."
        },
        {
            "question": "Which operator is used to declare a pointer variable?",
            "options": [
                "&",
                "*",
                "&&",
                "%"
            ],
            "answer": "*",
            "explanation": "The * operator is used in the declaration of a pointer variable."
        },
        {
            "question": "What does the following declaration mean?",
            "options": [
                "pointer to an int",
                "double pointer",
                "character pointer",
                "pointer to a function"
            ],
            "answer": "pointer to an int",
            "explanation": "This declaration means that ptr is a pointer variable that can store the address of an int data type."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "10",
                "Address of a",
                "p",
                "Address of p"
            ],
            "answer": "10",
            "explanation": "The pointer p is assigned the address of a and *p dereferences the pointer, giving the value of a which is 10."
        },
        {
            "question": "Which keyword is used to allocate dynamic memory in C?",
            "options": [
                "new",
                "malloc",
                "alloc",
                "dynalloc"
            ],
            "answer": "malloc",
            "explanation": "malloc stands for memory allocation and is used for dynamic memory allocation."
        },
        {
            "question": "What will be the output of the following code segment?",
            "options": [
                "2",
                "5",
                "7",
                "None of the above"
            ],
            "answer": "7",
            "explanation": "The value at pointer p is 5 (which is the value of a). So, *p + 2 = 5 + 2 = 7."
        },
        {
            "question": "Which function is used to release dynamically allocated memory?",
            "options": [
                "free",
                "delete",
                "remove",
                "clear"
            ],
            "answer": "free",
            "explanation": "The free function is used to release memory that was previously allocated by malloc."
        },
        {
            "question": "What is a NULL pointer?",
            "options": [
                "Pointer pointing to some memory location",
                "Pointer pointing to a function",
                "A keyword in C",
                "Pointer which is not pointing to any memory location"
            ],
            "answer": "Pointer which is not pointing to any memory location",
            "explanation": "A NULL pointer is a pointer that does not point to any memory location."
        },
        {
            "question": "What is a dangling pointer?",
            "options": [
                "A pointer pointing to an invalid memory location",
                "A keyword in C",
                "A pointer pointing to a valid memory location",
                "A pointer which is NULL"
            ],
            "answer": "A pointer pointing to an invalid memory location",
            "explanation": "A dangling pointer is a pointer that points to a memory location that has been deleted or deallocated."
        },
        {
            "question": "What is the C Preprocessor?",
            "options": [
                "A set of instructions that are executed before the main function",
                "A component of the compiler that processes directives before compilation",
                "A library of standard input and output functions",
                "A tool for debugging C programs"
            ],
            "answer": "A component of the compiler that processes directives before compilation",
            "explanation": "The C Preprocessor is a part of the compilation process that processes preprocessor directives, like #include and #define, before the actual compilation of code begins."
        },
        {
            "question": "What does the #include directive do in C?",
            "options": [
                "Declares a variable",
                "Includes the contents of a file into the C program",
                "Initializes a function",
                "Creates a loop"
            ],
            "answer": "Includes the contents of a file into the C program",
            "explanation": "The #include directive is used to include the contents of one file in another file. It is commonly used to include standard library headers or other header files in a C program."
        },
        {
            "question": "Which of the following directives defines a macro in C?",
            "options": [
                "#macro",
                "#define",
                "#include",
                "#ifdef"
            ],
            "answer": "#define",
            "explanation": "The #define directive is used to define a macro, which is a fragment of code that has been given a name. Whenever the name is used, it is replaced by the contents of the macro."
        },
        {
            "question": "What is the purpose of the #ifdef directive in C?",
            "options": [
                "To define a new variable",
                "To include a file",
                "To check if a macro is defined",
                "To define a macro"
            ],
            "answer": "To check if a macro is defined",
            "explanation": "The #ifdef directive checks whether a macro is defined and, if so, includes the code that follows it until #endif is encountered."
        },
        {
            "question": "How can you prevent a header file from being included multiple times in a C program?",
            "options": [
                "Using #define",
                "Using #include_once",
                "Using include guards",
                "Using #stop"
            ],
            "answer": "Using include guards",
            "explanation": "Include guards, often written with #ifndef, #define, and #endif directives, are used to prevent a header file from being included more than once in a program."
        },
        {
            "question": "What does the #undef directive do?",
            "options": [
                "Defines a new macro",
                "Includes a file",
                "Undefines a previously defined macro",
                "Checks if a macro is not defined"
            ],
            "answer": "Undefines a previously defined macro",
            "explanation": "The #undef directive is used to undefine a macro, removing its definition from the program."
        },
        {
            "question": "Which directive is used to conditionally include or exclude part of a program?",
            "options": [
                "#ifdef",
                "#include",
                "#define",
                "#pragma"
            ],
            "answer": "#ifdef",
            "explanation": "The #ifdef directive, along with #ifndef and #else, is used to conditionally include or exclude parts of the code depending on whether certain macros are defined."
        },
        {
            "question": "What is the result of using the #error directive in a C program?",
            "options": [
                "It includes a standard error message",
                "It defines an error macro",
                "It generates a compiler error",
                "It checks for errors in the code"
            ],
            "answer": "It generates a compiler error",
            "explanation": "The #error directive causes the preprocessor to generate a compiler error with a specified message. This is often used for debugging or to ensure certain conditions are met during compilation."
        },
        {
            "question": "How do you include a standard library file in C?",
            "options": [
                "#include <filename>",
                "#include \"filename\"",
                "#library <filename>",
                "#file <filename>"
            ],
            "answer": "#include <filename>",
            "explanation": "Standard library files in C are included using the #include directive with angle brackets, for example, #include <stdio.h>."
        },
        {
            "question": "What is the purpose of the #pragma directive?",
            "options": [
                "To include a file",
                "To provide instructions to the compiler",
                "To define a macro",
                "To create a loop"
            ],
            "answer": "To provide instructions to the compiler",
            "explanation": "The #pragma directive is used to offer machine-specific or implementation-specific instructions to the compiler. It can control various aspects of compilation."
        },
        {
            "question": "What is the difference between #include <file> and #include \"file\"?",
            "options": [
                "There is no difference",
                "The first searches for the file in system directories, the second in the current directory",
                "The first is for C files, the second for header files",
                "The first is for standard libraries, the second for user-defined libraries"
            ],
            "answer": "The first searches for the file in system directories, the second in the current directory",
            "explanation": "#include <file> is used for standard library headers and searches system directories, while #include \"file\" is typically used for user-defined headers and searches in the current directory first."
        },
        {
            "question": "What does the #line directive do in C?",
            "options": [
                "Changes the current line number in the source code file",
                "Defines a line macro",
                "Comments a line",
                "Includes a line from another file"
            ],
            "answer": "Changes the current line number in the source code file",
            "explanation": "The #line directive is used to change the current line number and the filename as recorded by the compiler. This can be useful for error handling and debugging."
        },
        {
            "question": "In what situation might you use the #elif directive?",
            "options": [
                "When you need to include a file",
                "To define a macro",
                "For additional condition checking in a conditional preprocessor block",
                "To undefine a macro"
            ],
            "answer": "For additional condition checking in a conditional preprocessor block",
            "explanation": "The #elif (else if) directive is used for additional condition checking within an #if, #ifdef, or #ifndef block in a C program."
        },
        {
            "question": "What is a common use for the #define directive?",
            "options": [
                "Error checking",
                "Creating an alias for a data type",
                "Conditional compilation",
                "Defining constants"
            ],
            "answer": "Defining constants",
            "explanation": "A common use of the #define directive is to define constants that can be used throughout a program, replacing literals with meaningful names."
        },
        {
            "question": "Can the preprocessor directives be nested?",
            "options": [
                "Yes, but only up to two levels deep",
                "No, preprocessor directives cannot be nested",
                "Yes, preprocessor directives can be nested",
                "Only #include directives can be nested"
            ],
            "answer": "Yes, preprocessor directives can be nested",
            "explanation": "Preprocessor directives in C can be nested, meaning you can have directives like #ifdef within another #ifdef or #if directive."
        },
        {
            "question": "What does the 'printf' function do in C?",
            "options": [
                "Reads input from the user",
                "Prints output to the console",
                "Initializes a variable",
                "Ends the program"
            ],
            "answer": "Prints output to the console",
            "explanation": "The 'printf' function is used in C to print output to the console. It can format strings, numbers, and other data types."
        },
        {
            "question": "Which function is used to read a formatted input in C?",
            "options": [
                "printf",
                "scanf",
                "gets",
                "fgets"
            ],
            "answer": "scanf",
            "explanation": "The 'scanf' function is used to read formatted input from the standard input (console)."
        },
        {
            "question": "Which header file must be included to use the 'printf' and 'scanf' functions?",
            "options": [
                "<math.h>",
                "<string.h>",
                "<stdio.h>",
                "<stdlib.h>"
            ],
            "answer": "<stdio.h>",
            "explanation": "The 'printf' and 'scanf' functions are part of the standard input/output library in C, and they require the inclusion of the <stdio.h> header file."
        },
        {
            "question": "What does the 'strcpy' function do in C?",
            "options": [
                "Concatenates two strings",
                "Compares two strings",
                "Copies a string",
                "Searches for a character in a string"
            ],
            "answer": "Copies a string",
            "explanation": "The 'strcpy' function is used to copy one string into another in C."
        },
        {
            "question": "Which standard library function allocates memory dynamically in C?",
            "options": [
                "malloc",
                "free",
                "sizeof",
                "realloc"
            ],
            "answer": "malloc",
            "explanation": "The 'malloc' function is used to allocate memory dynamically at runtime in C."
        },
        {
            "question": "How do you compare two strings in C?",
            "options": [
                "using ==",
                "with the strcmp function",
                "with the strcat function",
                "using ="
            ],
            "answer": "with the strcmp function",
            "explanation": "The 'strcmp' function is used to compare two strings in C. It returns 0 if the strings are equal."
        },
        {
            "question": "Which function is used to calculate the length of a string in C?",
            "options": [
                "strlen",
                "strlength",
                "length",
                "size"
            ],
            "answer": "strlen",
            "explanation": "The 'strlen' function is used to calculate the length of a string in C, excluding the null terminator."
        },
        {
            "question": "What does the 'free' function do in C?",
            "options": [
                "Allocates memory",
                "Frees dynamically allocated memory",
                "Initializes memory",
                "Copies memory"
            ],
            "answer": "Frees dynamically allocated memory",
            "explanation": "The 'free' function is used to release memory that was previously allocated dynamically (e.g., using malloc or calloc)."
        },
        {
            "question": "Which function is used to read a line of text from a file in C?",
            "options": [
                "fscanf",
                "fread",
                "fgets",
                "getc"
            ],
            "answer": "fgets",
            "explanation": "The 'fgets' function is used to read a line of text from a file or other stream in C."
        },
        {
            "question": "How can you open a file in C?",
            "options": [
                "Using the open function",
                "With the fopen function",
                "By calling the file function",
                "Using the openfile function"
            ],
            "answer": "With the fopen function",
            "explanation": "The 'fopen' function is used to open a file in C, returning a pointer to the file."
        },
        {
            "question": "Which function is used to close a file in C?",
            "options": [
                "fclose",
                "close",
                "closefile",
                "fexit"
            ],
            "answer": "fclose",
            "explanation": "The 'fclose' function is used to close a file in C. It takes a file pointer as its argument."
        },
        {
            "question": "What is the purpose of the 'qsort' function in C?",
            "options": [
                "To search an array",
                "To sort elements in an array",
                "To query the size of an array",
                "To partition an array"
            ],
            "answer": "To sort elements in an array",
            "explanation": "The 'qsort' function is used for sorting elements in an array. It implements the quicksort algorithm."
        },
        {
            "question": "Which function is used to convert a string to an integer in C?",
            "options": [
                "stoi",
                "str2int",
                "atoi",
                "itoa"
            ],
            "answer": "atoi",
            "explanation": "The 'atoi' function converts a string to an integer in C."
        },
        {
            "question": "How is memory allocated for an array of integers in C?",
            "options": [
                "Using the array function",
                "With the malloc function",
                "By declaring an array variable",
                "Through the new operator"
            ],
            "answer": "With the malloc function",
            "explanation": "The 'malloc' function can be used to allocate memory dynamically for an array of integers in C, based on the required number of elements."
        },
        {
            "question": "What does the 'memset' function do in C?",
            "options": [
                "Sets a memory block with a specific value",
                "Clears a memory block",
                "Compares two memory blocks",
                "Copies a memory block"
            ],
            "answer": "Sets a memory block with a specific value",
            "explanation": "The 'memset' function is used to fill a block of memory with a specific value in C. It is often used for initialization."
        },
        {
            "question": "What is an enum in C programming?",
            "options": [
                "A function",
                "A user-defined data type for integer constants",
                "A standard library",
                "A macro"
            ],
            "answer": "A user-defined data type for integer constants",
            "explanation": "An enum is a user-defined data type in C that consists of integral constants, providing a way to assign names to these constants for better code readability."
        },
        {
            "question": "How do you define an enum in C?",
            "options": [
                "enum { CONST1, CONST2, CONST3 };",
                "define enum { CONST1, CONST2, CONST3 };",
                "enum [CONST1, CONST2, CONST3];",
                "enumeration { CONST1, CONST2, CONST3 };"
            ],
            "answer": "enum { CONST1, CONST2, CONST3 };",
            "explanation": "An enum is defined using the 'enum' keyword followed by a set of named integer constants enclosed in curly braces."
        },
        {
            "question": "What is the default starting value of an enum in C?",
            "options": [
                "1",
                "0",
                "-1",
                "Depends on the number of elements"
            ],
            "answer": "0",
            "explanation": "By default, the first item in an enum has a value of 0, and each subsequent item's value is incremented by one from the previous item."
        },
        {
            "question": "Can you assign specific values to enum elements in C?",
            "options": [
                "No, enum values are automatically assigned",
                "Yes, but only sequential values are allowed",
                "Yes, any integer value can be assigned",
                "Only positive values can be assigned"
            ],
            "answer": "Yes, any integer value can be assigned",
            "explanation": "In C, specific integer values can be assigned to enum elements. If not assigned, they take on sequential values starting from 0 by default."
        },
        {
            "question": "What is the size of an enum variable in C?",
            "options": [
                "The size of a char",
                "The size of an int",
                "The size of a float",
                "The size of a double"
            ],
            "answer": "The size of an int",
            "explanation": "The size of an enum variable in C is typically the same as the size of an int on the host machine."
        },
        {
            "question": "How do you access an element of an enum in C?",
            "options": [
                "enumName.elementName",
                "elementName",
                "enumName[elementName]",
                "elementName(enumName)"
            ],
            "answer": "elementName",
            "explanation": "Elements of an enum are accessed directly by their names, which are scoped to the entire program."
        },
        {
            "question": "Can an enum be declared inside a function in C?",
            "options": [
                "Yes, in both local and global scope",
                "No, enums can only be declared globally",
                "Only in the main function",
                "Only outside any function"
            ],
            "answer": "Yes, in both local and global scope",
            "explanation": "Enums in C can be declared either inside a function (local scope) or outside of any function (global scope)."
        },
        {
            "question": "What happens if two elements in an enum are given the same value?",
            "options": [
                "It causes a syntax error",
                "It is allowed and both elements represent the same value",
                "It causes a runtime error",
                "It overwrites the first element with the second"
            ],
            "answer": "It is allowed and both elements represent the same value",
            "explanation": "In C, two elements in an enum can have the same value. This is legal and both elements will represent the same value."
        },
        {
            "question": "Can you compare two enum elements in C?",
            "options": [
                "Yes, using the == operator",
                "No, enum elements cannot be compared",
                "Only if they have the same value",
                "Only if they are part of the same enum"
            ],
            "answer": "Yes, using the == operator",
            "explanation": "Enum elements in C can be compared using the equality (==) operator, as they are essentially integer constants."
        },
        {
            "question": "How can enum be used to improve code readability?",
            "options": [
                "By replacing numeric constants with meaningful names",
                "By using enums as function arguments",
                "By creating complex data types",
                "Enums cannot improve code readability"
            ],
            "answer": "By replacing numeric constants with meaningful names",
            "explanation": "Enums improve code readability by allowing the use of meaningful names for sets of integer constants, rather than using numeric literals directly."
        },
        {
            "question": "Is it possible to use enums as switch case labels in C?",
            "options": [
                "Yes, enum elements can be used as case labels",
                "No, switch statements do not accept enums",
                "Only if the enum values start from 0",
                "Only if the enums are globally declared"
            ],
            "answer": "Yes, enum elements can be used as case labels",
            "explanation": "Enums are often used in switch statements as case labels, providing more readable code compared to using plain integers."
        },
        {
            "question": "What is the default data type of enum elements in C?",
            "options": [
                "char",
                "int",
                "float",
                "long"
            ],
            "answer": "int",
            "explanation": "In C, the default data type of enum elements is int."
        },
        {
            "question": "Can you increment an enum element in C?",
            "options": [
                "Yes, using the ++ operator",
                "No, enum elements are constants and cannot be modified",
                "Only within a loop",
                "Only if the enum is declared with a specific data type"
            ],
            "answer": "No, enum elements are constants and cannot be modified",
            "explanation": "Enum elements are constants and therefore cannot be incremented or modified in any way after their declaration."
        },
        {
            "question": "How do you typedef an enum in C for easier usage?",
            "options": [
                "typedef enumName",
                "typedef enum { … } enumName;",
                "enum typedef { … } enumName;",
                "typedef { enum … } enumName;"
            ],
            "answer": "typedef enum { … } enumName;",
            "explanation": "The 'typedef' keyword can be used with enums to create a new type name, simplifying the declaration of variables of the enum type."
        },
        {
            "question": "Can enums be used to define bitwise operators in C?",
            "options": [
                "Yes, but only with specific compiler settings",
                "No, enums cannot be used with bitwise operators",
                "Yes, enums can be used with bitwise operators",
                "Only if the enums are explicitly cast to integers"
            ],
            "answer": "Yes, enums can be used with bitwise operators",
            "explanation": "Enums can be used with bitwise operators in C, as enum values are essentially integers. This is often used in scenarios where enum elements represent bit flags."
        },
        {
            "question": "What is recursion in C programming?",
            "options": [
                "A loop that iterates a fixed number of times",
                "A function that calls another function",
                "A function that calls itself",
                "A method to declare variables"
            ],
            "answer": "A function that calls itself",
            "explanation": "Recursion in C is a process where a function calls itself directly or indirectly, allowing the function to repeat its behavior."
        },
        {
            "question": "What is a base case in recursion?",
            "options": [
                "The initial value for a recursive function",
                "The condition under which the recursion stops",
                "The maximum number of times a function can call itself",
                "The main function in a recursive program"
            ],
            "answer": "The condition under which the recursion stops",
            "explanation": "The base case in a recursive function is a condition that stops the recursion by preventing further recursive calls."
        },
        {
            "question": "Which of the following is essential for a recursive function to avoid infinite recursion?",
            "options": [
                "A loop",
                "A global variable",
                "A base case",
                "A static variable"
            ],
            "answer": "A base case",
            "explanation": "A base case is essential in a recursive function to terminate the recursion. Without it, the function would call itself indefinitely, leading to infinite recursion."
        },
        {
            "question": "What is stack overflow in the context of recursive functions in C?",
            "options": [
                "An error that occurs when the program runs out of memory",
                "A situation where too many functions are called at once",
                "An error that occurs when recursive calls exhaust the call stack",
                "A condition where the stack data structure overflows"
            ],
            "answer": "An error that occurs when recursive calls exhaust the call stack",
            "explanation": "Stack overflow in recursion occurs when there are too many nested recursive calls, exhausting the available call stack memory."
        },
        {
            "question": "Which of the following problems is typically solved using recursion?",
            "options": [
                "Calculating the factorial of a number",
                "Swapping two variables",
                "Finding the maximum value in an array",
                "Printing a string"
            ],
            "answer": "Calculating the factorial of a number",
            "explanation": "Calculating the factorial of a number is a classic example of a problem that is commonly solved using recursion in programming."
        },
        {
            "question": "What is tail recursion in C programming?",
            "options": [
                "A recursive function with no base case",
                "A recursive function where the recursive call is the last operation",
                "A recursive function that calls multiple functions",
                "A recursive function without return statement"
            ],
            "answer": "A recursive function where the recursive call is the last operation",
            "explanation": "Tail recursion is a type of recursion where the recursive call is the last operation in the function. In some cases, compilers optimize tail recursion to improve performance."
        },
        {
            "question": "Can a recursive function in C have more than one base case?",
            "options": [
                "No, a recursive function can only have one base case",
                "Yes, but only in special circumstances",
                "Yes, a recursive function can have multiple base cases",
                "Yes, but all base cases must be identical"
            ],
            "answer": "Yes, a recursive function can have multiple base cases",
            "explanation": "Recursive functions can have multiple base cases to handle different conditions for terminating the recursion."
        },
        {
            "question": "What is indirect recursion in C?",
            "options": [
                "A function that calls itself multiple times",
                "A function that calls a sequence of other functions, one of which calls the first function",
                "A function that does not have a direct call to itself",
                "A recursive function without a base case"
            ],
            "answer": "A function that calls a sequence of other functions, one of which calls the first function",
            "explanation": "Indirect recursion occurs when a function calls another function, and that function (directly or indirectly) calls the first function again."
        },
        {
            "question": "In a recursive function, which memory area is primarily used for storing function calls?",
            "options": [
                "Heap",
                "Stack",
                "Global memory",
                "Static memory"
            ],
            "answer": "Stack",
            "explanation": "In recursive functions, each function call is stored in the call stack, which keeps track of the point to which each active function should return control when it finishes executing."
        },
        {
            "question": "How does recursion differ from iteration?",
            "options": [
                "Recursion is faster than iteration",
                "Recursion uses less memory than iteration",
                "Recursion involves function calls, while iteration uses loops",
                "Recursion can only solve simple problems"
            ],
            "answer": "Recursion involves function calls, while iteration uses loops",
            "explanation": "The key difference between recursion and iteration is that recursion involves repeated function calls, while iteration repeatedly executes a set of instructions using loops."
        }
    ],
    "C++": [
        {
            "question": "Which symbol marks the beginning and end of a C++ statement?",
            "options": [
                ";",
                ".",
                ":",
                ","
            ],
            "answer": ";",
            "explanation": "In C++, statements are terminated using a semicolon."
        },
        {
            "question": "Which of the following is a valid variable name in C++?",
            "options": [
                "1var",
                "var!",
                "_var",
                "var#"
            ],
            "answer": "_var",
            "explanation": "Variables in C++ can start with an underscore or a letter, but not with a number or special character."
        },
        {
            "question": "Which of the following is the correct way to add comments in C++?",
            "options": [
                "//",
                "/* */",
                "—",
                "Both a & b"
            ],
            "answer": "Both a & b",
            "explanation": "// is used for single-line comments, while /* */ is used for multi-line comments."
        },
        {
            "question": "Which header file is required for input and output operations?",
            "options": [
                "<iostream>",
                "<io>",
                "<input>",
                "<output>"
            ],
            "answer": "<iostream>",
            "explanation": "The header defines the standard stream objects for input and output."
        },
        {
            "question": "Which of the following is not a C++ data type?",
            "options": [
                "float",
                "double",
                "char",
                "boolean"
            ],
            "answer": "boolean",
            "explanation": "The correct data type for boolean values in C++ is bool, not boolean."
        },
        {
            "question": "What is the size (in bytes) of an int data type on most 32-bit systems?",
            "options": [
                "1",
                "2",
                "4",
                "8"
            ],
            "answer": "4",
            "explanation": "On most 32-bit systems, an int is 4 bytes."
        },
        {
            "question": "What data type would you use to store a single character?",
            "options": [
                "string",
                "char",
                "text",
                "word"
            ],
            "answer": "char",
            "explanation": "The char data type is used to store a single character."
        },
        {
            "question": "Which keyword is used to declare a constant?",
            "options": [
                "const",
                "static",
                "final",
                "define"
            ],
            "answer": "const",
            "explanation": "In C++, the const keyword is used to declare a constant value."
        },
        {
            "question": "What will be the output of cout << 5/2;?",
            "options": [
                "2.5",
                "2",
                "5",
                "2.0"
            ],
            "answer": "2",
            "explanation": "Both 5 and 2 are integers, so the division will be integer division, which discards the remainder."
        },
        {
            "question": "Which of the following can be a valid value for a bool data type?",
            "options": [
                "1",
                "0",
                "true",
                "Both a & c"
            ],
            "answer": "Both a & c",
            "explanation": "In C++, bool can take values true or false, which are equivalent to 1 and 0, respectively."
        },
        {
            "question": "Which of the following control structures allows the execution of a block of statements multiple times based on a condition?",
            "options": [
                "if",
                "switch",
                "loop",
                "goto"
            ],
            "answer": "loop",
            "explanation": "Loops, like for, while, and do-while, allow statements to be executed multiple times based on a condition."
        },
        {
            "question": "Which keyword is used to exit a loop prematurely?",
            "options": [
                "break",
                "exit",
                "stop",
                "return"
            ],
            "answer": "break",
            "explanation": "The break statement is used to exit a loop before its normal completion."
        },
        {
            "question": "Which of the following is NOT a loop in C++?",
            "options": [
                "for",
                "foreach",
                "while",
                "do-while"
            ],
            "answer": "foreach",
            "explanation": "C++ is used for for traditional looping, and while and do-while for conditional looping. There isn’t a foreach loop in standard C++, but there’s a range-based for loop."
        },
        {
            "question": "Which keyword is used to define a function in C++?",
            "options": [
                "def",
                "fun",
                "func",
                "None of the above"
            ],
            "answer": "None of the above",
            "explanation": "In C++, functions are defined by specifying the return type followed by the function name and parameters. No specific keyword like def or fun is required."
        },
        {
            "question": "If a function doesn’t return any value, what should be its return type?",
            "options": [
                "null",
                "void",
                "none",
                "empty"
            ],
            "answer": "void",
            "explanation": "Functions that don’t return a value have a return type of void."
        },
        {
            "question": "Which of the following is NOT a valid function declaration?",
            "options": [
                "int func();",
                "void func(int a, int b);",
                "double func(double a, double b);",
                "func();"
            ],
            "answer": "func();",
            "explanation": "The return type is missing in option d, making it an invalid function declaration."
        },
        {
            "question": "What is the first index of an array in C++?",
            "options": [
                "1",
                "0",
                "Depends on the declaration",
                "None of the above"
            ],
            "answer": "0",
            "explanation": "In C++, arrays are zero-indexed, meaning the first element has an index of 0."
        },
        {
            "question": "How do you find the length of a string named str?",
            "options": [
                "str.length()",
                "length(str)",
                "sizeof(str)",
                "str.len()"
            ],
            "answer": "str.length()",
            "explanation": "The length() function is a member function of the string class in C++."
        },
        {
            "question": "Which of the following is the correct way to declare an array of 5 integers?",
            "options": [
                "int array[5];",
                "int array;",
                "array[5] int;",
                "int[5] array;"
            ],
            "answer": "int array[5];",
            "explanation": "Arrays in C++ are declared with the type, followed by the name and size in square brackets."
        },
        {
            "question": "If string str = “Hello”;, what is str[1]?",
            "options": [
                "H",
                "e",
                "l",
                "o"
            ],
            "answer": "e",
            "explanation": "Strings in C++ are zero-indexed, so str[1] would return the second character, which is ‘e’."
        },
        {
            "question": "What is encapsulation in C++?",
            "options": [
                "Function overloading",
                "Inheritance of classes",
                "Wrapping data and methods into a single unit",
                "Using multiple inheritance"
            ],
            "answer": "Wrapping data and methods into a single unit",
            "explanation": "Encapsulation is a fundamental concept in object-oriented programming that binds together the data and functions that manipulate the data."
        },
        {
            "question": "Which keyword is used to create an object of a class in C++?",
            "options": [
                "new",
                "this",
                "class",
                "object"
            ],
            "answer": "new",
            "explanation": "The new keyword is used to dynamically create an instance (object) of a class."
        },
        {
            "question": "Which of the following is a member function?",
            "options": [
                "A function declared outside a class",
                "A function declared inside a class",
                "A function that is static",
                "A global function"
            ],
            "answer": "A function declared inside a class",
            "explanation": "A member function is a function that is declared inside a class and acts upon the data members of that class."
        },
        {
            "question": "What is the main role of a constructor in a class?",
            "options": [
                "To delete objects",
                "To initialize the object’s data members",
                "To perform operations",
                "None of the above"
            ],
            "answer": "To initialize the object’s data members",
            "explanation": "Constructors are special class functions that are executed whenever an object of the class is created. They help in initializing the object’s data."
        },
        {
            "question": "Which of the following is true about destructors?",
            "options": [
                "A class can have multiple destructors",
                "Destructors cannot have parameters",
                "Destructors are used to allocate memory",
                "Destructors can be inherited"
            ],
            "answer": "Destructors cannot have parameters",
            "explanation": "A destructor is a special member function of a class that is executed whenever an object of its class goes out of scope or is explicitly deleted. A destructor will have the exact same name as the class prefixed with a tilde (~) and it can neither return a value nor can it take any parameters."
        },
        {
            "question": "Which of the following is used for dynamic memory allocation?",
            "options": [
                "malloc",
                "free",
                "delete",
                "new"
            ],
            "answer": "new",
            "explanation": "In C++, a new operator is used for dynamic memory allocation which initializes the memory and returns its address."
        },
        {
            "question": "Which of the following is used to free the memory allocated by the ‘new’ operator?",
            "options": [
                "free",
                "delete",
                "remove",
                "dealloc"
            ],
            "answer": "delete",
            "explanation": "The delete operator is used to free the memory that was previously allocated by the new operator."
        },
        {
            "question": "What is the process by which a function can be made to behave differently based on its arguments?",
            "options": [
                "Encapsulation",
                "Abstraction",
                "Polymorphism",
                "Inheritance"
            ],
            "answer": "Polymorphism",
            "explanation": "Polymorphism is a characteristic of being able to assign a different meaning or usage to something in different contexts – specifically, to allow an entity such as a variable, a function, or an object to have more than one form."
        },
        {
            "question": "Function overriding is an example of:",
            "options": [
                "Compile-time polymorphism",
                "Run-time polymorphism",
                "Both compile-time and run-time polymorphism",
                "None of the above"
            ],
            "answer": "Run-time polymorphism",
            "explanation": "Function overriding is a concept where two or more functions have the same name, return type, and parameters. The function that is to be called is determined at runtime, hence it is considered run-time polymorphism."
        },
        {
            "question": "Which of the following concepts allows you to reuse code?",
            "options": [
                "Abstraction",
                "Encapsulation",
                "Inheritance",
                "Polymorphism"
            ],
            "answer": "Inheritance",
            "explanation": "Inheritance is a mechanism wherein a new class is derived from an existing class. This allows the derived class to inherit features from the base class, allowing for code reuse."
        },
        {
            "question": "What function is used to open a file in C++?",
            "options": [
                "open()",
                "fopen()",
                "start()",
                "begin()"
            ],
            "answer": "open()",
            "explanation": "In C++, the open() function is used to open a file."
        },
        {
            "question": "Which of the following modes is used to open a file in read-only mode in C++?",
            "options": [
                "r",
                "w",
                "a",
                "rw"
            ],
            "answer": "r",
            "explanation": "The ‘r’ mode is used to open a file for reading."
        },
        {
            "question": "What does a pointer variable store?",
            "options": [
                "A memory address",
                "A value",
                "Both memory address and value",
                "Name of a variable"
            ],
            "answer": "A memory address",
            "explanation": "A pointer variable in C++ stores the memory address of another variable."
        },
        {
            "question": "What symbol is used to declare a pointer variable?",
            "options": [
                "&",
                "*",
                "%",
                "$"
            ],
            "answer": "*",
            "explanation": "The * symbol is used to declare a pointer variable."
        },
        {
            "question": "What is the main use of templates in C++?",
            "options": [
                "To increase the runtime of a program",
                "To add more variables to a program",
                "To add flexibility to classes and functions",
                "To make the program look better"
            ],
            "answer": "To add flexibility to classes and functions",
            "explanation": "Templates provide a way to create generic classes and functions, thereby providing flexibility."
        },
        {
            "question": "Which loop is best suited for going through an array?",
            "options": [
                "for loop",
                "while loop",
                "do-while loop",
                "for-each loop"
            ],
            "answer": "for loop",
            "explanation": "A for loop is typically best suited for iterating through an array because of its structure, with initialization, condition, and increment/decrement in one line."
        },
        {
            "question": "Which of the following loops is executed at least once?",
            "options": [
                "for loop",
                "while loop",
                "do-while loop",
                "None of the above"
            ],
            "answer": "do-while loop",
            "explanation": "The do-while loop is executed at least once because the condition is checked after the loop body is executed."
        },
        {
            "question": "What keyword is used for exception handling?",
            "options": [
                "throw",
                "throws",
                "tackle",
                "error"
            ],
            "answer": "throw",
            "explanation": "In C++, the throw keyword is used to signal that an exception has occurred."
        },
        {
            "question": "Which of the following is not a type of exception in C++?",
            "options": [
                "runtime_error",
                "logic_error",
                "input_error",
                "overflow_error"
            ],
            "answer": "input_error",
            "explanation": "There isn’t an exception named input_error in the standard C++ library."
        },
        {
            "question": "Which keyword is used to catch exceptions in C++?",
            "options": [
                "capture",
                "get",
                "catch",
                "trap"
            ],
            "answer": "catch",
            "explanation": "In C++, the catch block is used to handle the exceptions. It follows the try block which contains the code that might throw exceptions."
        },
        {
            "question": "Which of the following keywords is used in C++ to allocate memory dynamically for a single value?",
            "options": [
                "malloc()",
                "alloc()",
                "new",
                "create"
            ],
            "answer": "new",
            "explanation": "In C++, the new operator is used to allocate memory dynamically on the heap for a single value or an array."
        },
        {
            "question": "To deallocate memory allocated using the new operator, which operator is used?",
            "options": [
                "delete",
                "free",
                "dealloc",
                "remove"
            ],
            "answer": "delete",
            "explanation": "The delete operator is used to free up the memory that was previously allocated using the new operator."
        },
        {
            "question": "What is the process of defining multiple functions with the same name but different parameters?",
            "options": [
                "Function Overriding",
                "Function Overloading",
                "Function Duplication",
                "Function Multiplicity"
            ],
            "answer": "Function Overloading",
            "explanation": "Function overloading allows multiple functions to have the same name but different parameters, possibly with different types."
        },
        {
            "question": "Which of the following is a container in the Standard Template Library (STL)?",
            "options": [
                "int",
                "char",
                "vector",
                "main"
            ],
            "answer": "vector",
            "explanation": "A vector is a dynamic array provided by the C++ Standard Template Library."
        },
        {
            "question": "What is the primary use of the algorithm header in the STL?",
            "options": [
                "To define basic data types",
                "To implement classes",
                "To provide function templates for algorithms",
                "To handle errors"
            ],
            "answer": "To provide function templates for algorithms",
            "explanation": "The algorithm header provides a set of function templates for common algorithms like sorting, searching, etc."
        },
        {
            "question": "What is the full form of OOP?",
            "options": [
                "Object Oriented Programming",
                "Official Operational Program",
                "Object Operated Programming",
                "Official Operator Program"
            ],
            "answer": "Object Oriented Programming",
            "explanation": "OOP stands for Object Oriented Programming, a paradigm that uses “objects” – data structures consisting of data fields and methods."
        },
        {
            "question": "In C++, what is the scope resolution operator?",
            "options": [
                "->",
                ".",
                "::",
                "<>"
            ],
            "answer": "::",
            "explanation": "The scope resolution operator (::) in C++ is used to define a function outside a class or to access a global variable within another variable."
        },
        {
            "question": "Which of the following is the correct syntax to comment multiple lines in C++?",
            "options": [
                "//…//",
                "",
                "/…/",
                "–…–"
            ],
            "answer": "/…/",
            "explanation": "In C++, /*…*/ is used to comment out multiple lines."
        },
        {
            "question": "What does STL stand for in C++?",
            "options": [
                "Standard Template Language",
                "Simple Template Library",
                "Standardized Type Library",
                "Standard Template Library"
            ],
            "answer": "Standard Template Library",
            "explanation": "STL stands for Standard Template Library in C++."
        },
        {
            "question": "What is the correct way to declare a constant variable in C++?",
            "options": [
                "const int x;",
                "int constant x;",
                "constant int x;",
                "int const x;"
            ],
            "answer": "const int x;",
            "explanation": "In C++, the const keyword is used before the datatype to declare a variable as constant."
        },
        {
            "question": "What is a special type of function that has access to private members of a class but isn’t a member of that class?",
            "options": [
                "Private function",
                "Member function",
                "Friend function",
                "Public function"
            ],
            "answer": "Friend function",
            "explanation": "A friend function is not a member of the class, but it can access private and protected members of the class. It is declared using the keyword friend."
        },
        {
            "question": "Which keyword is used in C++ to include a particular namespace in our program?",
            "options": [
                "import",
                "include",
                "use",
                "using"
            ],
            "answer": "using",
            "explanation": "The using keyword is used to specify that a program will be using a particular namespace, like using namespace std;."
        },
        {
            "question": "Which function cannot be inline in C++?",
            "options": [
                "Static function",
                "Virtual function",
                "Constant function",
                "Friend function"
            ],
            "answer": "Virtual function",
            "explanation": "A virtual function in C++ is used for runtime polymorphism and it cannot be inline because its address is not known at compile time."
        },
        {
            "question": "What is it called when a function calls itself?",
            "options": [
                "Looping",
                "Iterating",
                "Recursion",
                "Nesting"
            ],
            "answer": "Recursion",
            "explanation": "When a function calls itself, it’s known as recursion. It’s a powerful technique but one must ensure it has a base case to prevent infinite recursion."
        },
        {
            "question": "Which among the following is a valid way to define a data member of a class as static?",
            "options": [
                "static varName;",
                "static dataType varName;",
                "varName static;",
                "dataType varName = static;"
            ],
            "answer": "static dataType varName;",
            "explanation": "In C++, static data members of a class need to be declared within the class using the static keyword followed by data type and variable name."
        },
        {
            "question": "What can be used to point to a function in C++?",
            "options": [
                "Variable pointer",
                "Reference",
                "Function pointer",
                "Data pointer"
            ],
            "answer": "Function pointer",
            "explanation": "A function pointer points to the address of a function and can be used to call a function indirectly."
        },
        {
            "question": "What characterizes the initialization of variables inside a class constructor?",
            "options": [
                "Dynamic Initialization",
                "Static Initialization",
                "Constructor Initialization",
                "Direct Initialization"
            ],
            "answer": "Dynamic Initialization",
            "explanation": "When the value of a variable is set during runtime (like inside a class constructor), it’s called dynamic initialization."
        },
        {
            "question": "Which access specifier allows class members to be accessible only within the same class and by friend functions?",
            "options": [
                "Private",
                "Public",
                "Protected",
                "External"
            ],
            "answer": "Private",
            "explanation": "Private access specifier ensures that class members are only accessible within the class and by friend functions."
        },
        {
            "question": "What is a class called that cannot be instantiated and is meant to be subclassed?",
            "options": [
                "Incomplete class",
                "Subclass",
                "Abstract class",
                "Superclass"
            ],
            "answer": "Abstract class",
            "explanation": "An abstract class is a class that cannot be instantiated and is intended to be subclassed. It can have abstract (without implementation) as well as concrete methods."
        },
        {
            "question": "To read command line arguments in C++, which parameters should the main() function have?",
            "options": [
                "void",
                "()",
                "(args[])",
                "(int argc, char *argv[])"
            ],
            "answer": "(int argc, char *argv[])",
            "explanation": "Command line arguments in C++ are read using (int argc, char *argv[]) where argc denotes the number of arguments and argv is an array of pointers to those arguments."
        },
        {
            "question": "Which of the following is not an OOP principle in C++?",
            "options": [
                "Inheritance",
                "Polymorphism",
                "Compilation",
                "Encapsulation"
            ],
            "answer": "Compilation",
            "explanation": "Compilation is the process of converting source code into machine code. It is not a principle of OOP."
        },
        {
            "question": "What is the primary purpose of a constructor in a class?",
            "options": [
                "To construct the class",
                "To initialize the class’s objects",
                "To destroy the class’s objects",
                "None of the above"
            ],
            "answer": "To initialize the class’s objects",
            "explanation": "A constructor is a special member function that is invoked when an object of the class is created. Its primary purpose is to initialize the object."
        },
        {
            "question": "How many types of inheritance does C++ support?",
            "options": [
                "1",
                "3",
                "5",
                "7"
            ],
            "answer": "5",
            "explanation": "C++ supports five types of inheritance – Single, Multiple, Multilevel, Hierarchical, and Hybrid inheritance."
        },
        {
            "question": "Which keyword is used to prevent overriding in derived classes?",
            "options": [
                "override",
                "virtual",
                "final",
                "abstract"
            ],
            "answer": "final",
            "explanation": "The final keyword can be used to prevent derived classes from overriding a method."
        },
        {
            "question": "Which of the following is not a type of constructor?",
            "options": [
                "Default constructor",
                "Copy constructor",
                "Multi constructor",
                "Parameterized constructor"
            ],
            "answer": "Multi constructor",
            "explanation": "There is no “Multi constructor” in C++."
        },
        {
            "question": "Which of the following concepts hides the internal data from outside access?",
            "options": [
                "Abstraction",
                "Encapsulation",
                "Polymorphism",
                "Inheritance"
            ],
            "answer": "Encapsulation",
            "explanation": "Encapsulation is the concept of bundling data (attributes) and methods (functions) into a single unit and restricting access to the data."
        },
        {
            "question": "What is an abstract class?",
            "options": [
                "A class that can be instantiated",
                "A class with at least one pure virtual function",
                "A class without any members",
                "A class with multiple inheritance"
            ],
            "answer": "A class with at least one pure virtual function",
            "explanation": "An abstract class cannot be instantiated and is meant to be subclassed. It contains at least one pure virtual function."
        },
        {
            "question": "Which keyword is used to declare a pure virtual function?",
            "options": [
                "abstract",
                "virtual",
                "pure",
                "virtual… = 0"
            ],
            "answer": "virtual… = 0",
            "explanation": "A pure virtual function is declared using virtual followed by = 0."
        },
        {
            "question": "Which concept allows C++ to implement the “is-a” relationship?",
            "options": [
                "Composition",
                "Encapsulation",
                "Inheritance",
                "Polymorphism"
            ],
            "answer": "Inheritance",
            "explanation": "The “is-a” relationship is represented through inheritance in OOP."
        },
        {
            "question": "What is the base class in C++ from which all other classes implicitly inherit?",
            "options": [
                "Object",
                "Base",
                "Main",
                "None of the above"
            ],
            "answer": "None of the above",
            "explanation": "Unlike some other object-oriented languages, C++ doesn’t have a universal base class from which all other classes implicitly inherit."
        },
        {
            "question": "Which function cannot be overloaded in C++?",
            "options": [
                "Main function",
                "Constructor",
                "Destructor",
                "Virtual functions"
            ],
            "answer": "Destructor",
            "explanation": "Destructors cannot be overloaded as a class can have only one destructor."
        },
        {
            "question": "What does the :: operator represent in C++?",
            "options": [
                "Scope resolution operator",
                "Conditional operator",
                "Bitwise operator",
                "Shift operator"
            ],
            "answer": "Scope resolution operator",
            "explanation": "The :: operator in C++ is known as the scope resolution operator. It’s used to define a member function outside a class or to access a global variable within the scope where a local variable with the same name exists."
        },
        {
            "question": "What is the default access specifier for members of a class?",
            "options": [
                "public",
                "private",
                "protected",
                "None of the above"
            ],
            "answer": "private",
            "explanation": "By default, members of a class are private in C++."
        },
        {
            "question": "Which keyword is used for dynamic polymorphism?",
            "options": [
                "dynamic",
                "polymorph",
                "virtual",
                "override"
            ],
            "answer": "virtual",
            "explanation": "Dynamic polymorphism is achieved using virtual functions in C++."
        },
        {
            "question": "Which of the following is correct about the destructor?",
            "options": [
                "It is used to initialize the object",
                "It has a return type",
                "It cannot have parameters",
                "It is invoked automatically when the object goes out of scope"
            ],
            "answer": "It cannot have parameters and d) It is invoked automatically when the object goes out of scope",
            "explanation": "A destructor is used to release resources before an object is destroyed. It doesn’t have a return type and cannot accept parameters. It’s automatically called when an object goes out of scope."
        },
        {
            "question": "Which of the following cannot be static in a class?",
            "options": [
                "Variables",
                "Methods",
                "Constructors",
                "Destructors"
            ],
            "answer": "Constructors",
            "explanation": "Constructors in C++ cannot be declared as static. However, methods, variables, and destructors can be."
        },
        {
            "question": "Which of the following is a mechanism of reusing code in C++?",
            "options": [
                "Copy-Pasting",
                "Linking",
                "Inheritance",
                "Instantiation"
            ],
            "answer": "Inheritance",
            "explanation": "Inheritance allows a class (derived class) to inherit properties and behaviors (methods) from another class (base class), thereby promoting code reuse."
        },
        {
            "question": "What is the process by which one class can acquire the properties and behaviors of another class?",
            "options": [
                "Polymorphism",
                "Abstraction",
                "Inheritance",
                "Encapsulation"
            ],
            "answer": "Inheritance",
            "explanation": "Inheritance is the process by which a new class (called a derived class) can acquire the properties and behaviors (methods) of an existing class (base class)."
        },
        {
            "question": "Which keyword is used to prevent a class from being inherited?",
            "options": [
                "private",
                "protected",
                "sealed",
                "final"
            ],
            "answer": "final",
            "explanation": "In C++, when a class is declared as final, it cannot be inherited by other classes."
        },
        {
            "question": "When is the memory for a class’s member variables allocated?",
            "options": [
                "At compile time",
                "When the object is declared",
                "When the object is used",
                "When the class is defined"
            ],
            "answer": "When the object is declared",
            "explanation": "Memory for a class’s member variables is allocated when an object of the class is declared."
        },
        {
            "question": "Which keyword is used to inherit a class in C++?",
            "options": [
                "extends",
                "implements",
                "inherits",
                "public/private/protected"
            ],
            "answer": "public/private/protected",
            "explanation": "In C++, inheritance is declared using one of the access specifiers: public, private, or protected."
        },
        {
            "question": "Which type of inheritance leads to the diamond problem in C++?",
            "options": [
                "Single Inheritance",
                "Multilevel Inheritance",
                "Multiple Inheritance",
                "Hierarchical Inheritance"
            ],
            "answer": "Multiple Inheritance",
            "explanation": "The diamond problem arises due to ambiguity when a class inherits from two classes that have a common base class. This occurs in multiple inheritance."
        },
        {
            "question": "What is the type of inheritance where one class inherits from multiple classes?",
            "options": [
                "Single Inheritance",
                "Multilevel Inheritance",
                "Multiple Inheritance",
                "Hierarchical Inheritance"
            ],
            "answer": "Multiple Inheritance",
            "explanation": "Multiple inheritance means a class can inherit properties and behaviors from more than one parent class."
        },
        {
            "question": "By default, the members of the base class are _____ in the derived class.",
            "options": [
                "private",
                "public",
                "protected",
                "None of the above"
            ],
            "answer": "private",
            "explanation": "By default, the inherited members of a base class take the private access specifier in the derived class."
        },
        {
            "question": "Which of the following can be inherited from the base class?",
            "options": [
                "Public members only",
                "Private members only",
                "Both public and protected members",
                "All members (public, protected, and private)"
            ],
            "answer": "Both public and protected members",
            "explanation": "In C++, derived classes inherit both public and protected members of the base class, but not its private members."
        },
        {
            "question": "What is the type of inheritance where a derived class has only one base class?",
            "options": [
                "Single Inheritance",
                "Multilevel Inheritance",
                "Multiple Inheritance",
                "Hierarchical Inheritance"
            ],
            "answer": "Single Inheritance",
            "explanation": "Single inheritance means that a class can inherit from only one base class."
        },
        {
            "question": "In which type of inheritance do multiple derived classes share a single base class?",
            "options": [
                "Single Inheritance",
                "Multilevel Inheritance",
                "Multiple Inheritance",
                "Hierarchical Inheritance"
            ],
            "answer": "Hierarchical Inheritance",
            "explanation": "In hierarchical inheritance, multiple derived classes share the same base class."
        },
        {
            "question": "Which of the following cannot be inherited?",
            "options": [
                "Constructor",
                "Destructor",
                "Friends",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "In C++, constructors, destructors, and friend functions of the base class are not inherited by the derived class."
        },
        {
            "question": "If the base class’s destructor is not virtual, what can happen?",
            "options": [
                "Compilation error",
                "Runtime error",
                "Object slicing",
                "Incorrect destructor call for the derived class"
            ],
            "answer": "Incorrect destructor call for the derived class",
            "explanation": "If the base class destructor is not virtual and a derived class object is deleted through a base class pointer, then the derived class’s destructor will not be called, leading to potential resource leaks."
        },
        {
            "question": "When a derived class object is destroyed, which destructor is called first?",
            "options": [
                "Base class destructor",
                "Derived class destructor",
                "Both simultaneously",
                "It’s random"
            ],
            "answer": "Derived class destructor",
            "explanation": "When a derived class object is destroyed, the derived class destructor is called first, followed by the base class destructor."
        },
        {
            "question": "Which of the following defines a function in C++?",
            "options": [
                "int funcName()",
                "funcName: int",
                "int funcName[]",
                "int: funcName()"
            ],
            "answer": "int funcName()",
            "explanation": "Functions in C++ are defined by specifying a return type followed by the function name and parentheses."
        },
        {
            "question": "What does the void keyword signify in a function declaration?",
            "options": [
                "The function takes no arguments.",
                "The function does not return a value.",
                "The function can be overridden.",
                "The function is virtual."
            ],
            "answer": "The function does not return a value.",
            "explanation": "When void is used as the return type of a function, it means the function doesn’t return any value."
        },
        {
            "question": "Which keyword is used to pass arguments by reference?",
            "options": [
                "ref",
                "byref",
                "&",
                "*"
            ],
            "answer": "&",
            "explanation": "In C++, the & symbol before a parameter in a function declaration indicates that the argument is passed by reference."
        },
        {
            "question": "If a function does not include a return statement, which of the following return types is assumed?",
            "options": [
                "int",
                "char",
                "void",
                "float"
            ],
            "answer": "int",
            "explanation": "In older C++ standards, if a function did not have a return type specified, it was assumed to be int. However, modern C++ standards require specifying the return type, and not doing so will result in a compilation error."
        },
        {
            "question": "What does the term “function overloading” mean?",
            "options": [
                "A function that is too long.",
                "Multiple functions with the same name but different parameters.",
                "Calling a function too many times.",
                "A function that performs too many operations."
            ],
            "answer": "Multiple functions with the same name but different parameters.",
            "explanation": "Function overloading allows multiple functions with the same name but with different parameters, enabling the same function name to have different implementations based on its arguments."
        },
        {
            "question": "What is the output of a recursive function that doesn’t have a base case?",
            "options": [
                "It runs once.",
                "It runs a fixed number of times.",
                "It runs indefinitely or until a stack overflow occurs.",
                "It results in a compilation error."
            ],
            "answer": "It runs indefinitely or until a stack overflow occurs.",
            "explanation": "Without a base case, a recursive function will keep calling itself indefinitely. This will eventually lead to a stack overflow as the system runs out of memory for the function call stack."
        },
        {
            "question": "Which keyword is used to specify a default value for a function parameter?",
            "options": [
                "default",
                "const",
                "=",
                "def"
            ],
            "answer": "=",
            "explanation": "In C++, the = symbol is used to specify a default value for a function parameter, allowing the function to be called without providing that specific argument."
        },
        {
            "question": "What is the correct way to declare a function prototype?",
            "options": [
                "int funcName();",
                "funcName: int",
                "int funcName[]",
                "int: funcName()"
            ],
            "answer": "int funcName();",
            "explanation": "A function prototype in C++ is a declaration of a function that tells the compiler about the function name, return type, and parameters. It ends with a semicolon."
        },
        {
            "question": "What is the purpose of the inline keyword before a function?",
            "options": [
                "To make the function run faster by avoiding function-call overhead.",
                "To force all calls to the function to be inline.",
                "To make the function available across multiple files.",
                "To indicate that the function should not be compiled."
            ],
            "answer": "To make the function run faster by avoiding function-call overhead.",
            "explanation": "The inline keyword is a request to the compiler to inline-expand the function at the point of call, which can make it faster by eliminating the function-call overhead. However, it’s only a request, and the compiler can ignore it."
        },
        {
            "question": "Which of the following is true regarding function arguments in C++?",
            "options": [
                "Arguments are passed by value by default.",
                "Arguments are passed by reference by default.",
                "Arguments are passed by pointer by default.",
                "None of the above."
            ],
            "answer": "Arguments are passed by value by default.",
            "explanation": "By default, function arguments in C++ are passed by value, meaning that a copy of the data is passed into the function."
        },
        {
            "question": "How do you declare an array of 5 integers in C++?",
            "options": [
                "int array(5);",
                "int array[5];",
                "int[5] array;",
                "array"
            ],
            "answer": "int array[5];",
            "explanation": "Arrays in C++ are declared by specifying the type, followed by the array name and its size in square brackets."
        },
        {
            "question": "Which index refers to the first element of an array?",
            "options": [
                "0",
                "1",
                "-1",
                "None of the above"
            ],
            "answer": "0",
            "explanation": "In C++, array indices start at 0. So, the first element of an array is accessed using index 0."
        },
        {
            "question": "What is the size of an array int arr[10];?",
            "options": [
                "10 bytes",
                "40 bytes",
                "100 bytes",
                "Cannot be determined"
            ],
            "answer": "40 bytes",
            "explanation": "Each int typically occupies 4 bytes. Therefore, an array of 10 integers will occupy 10 x 4 = 40 bytes."
        },
        {
            "question": "How do you determine the number of elements in an array named data?",
            "options": [
                "sizeof(data)",
                "data.length",
                "sizeof(data) / sizeof(data[0])",
                "data.size()"
            ],
            "answer": "sizeof(data) / sizeof(data[0])",
            "explanation": "To get the number of elements, you divide the total size of the array by the size of a single element."
        },
        {
            "question": "What will be the value of arr[2] after the following code is executed?",
            "options": [
                "10",
                "20",
                "0",
                "Undefined"
            ],
            "answer": "0",
            "explanation": "If an array is initialized with fewer values than its size, the remaining elements get automatically initialized to zero."
        },
        {
            "question": "Which of the following is NOT a correct way to initialize an array?",
            "options": [
                "int arr[3] = {1, 2, 3};",
                "int arr[] = {1, 2, 3};",
                "int arr[3] = (1, 2, 3);",
                "int arr[3] = {1, 2};"
            ],
            "answer": "int arr[3] = (1, 2, 3);",
            "explanation": "Arrays are initialized using curly braces { }, not parentheses ( )."
        },
        {
            "question": "Which of the following will give a compilation error?",
            "options": [
                "int arr[0];",
                "int arr[-1];",
                "int arr[];",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "You cannot declare an array of size 0, a negative size, or without a size if it’s not being initialized immediately."
        },
        {
            "question": "What happens if you try to access an array element using an index that is out of bounds?",
            "options": [
                "A compilation error occurs.",
                "The program will definitely crash.",
                "Undefined behavior.",
                "The element will be automatically added to the array."
            ],
            "answer": "Undefined behavior.",
            "explanation": "Accessing an element out of bounds does not cause a compilation error in C++, but it results in undefined behavior, which could be anything, including a crash or incorrect results."
        },
        {
            "question": "Which of the following is a two-dimensional array?",
            "options": [
                "int arr[5];",
                "int arr[5][5];",
                "int arr[][];",
                "int[5] arr;"
            ],
            "answer": "int arr[5][5];",
            "explanation": "A two-dimensional array is essentially an “array of arrays”. It’s represented by rows and columns, as in option b."
        },
        {
            "question": "How do you include the string library in C++?",
            "options": [
                "#import",
                "#include “string”",
                "#include",
                "import string"
            ],
            "answer": "#include",
            "explanation": "In C++, libraries are included using the #include directive, with system libraries enclosed in angle brackets < >."
        },
        {
            "question": "How can you declare a string named ‘greeting’ with the value “Hello, World!”?",
            "options": [
                "string greeting = “Hello, World!”;",
                "str greeting(“Hello, World!”);",
                "String greeting = “Hello, World!”;",
                "char greeting[] = “Hello, World!”;"
            ],
            "answer": "string greeting = “Hello, World!”;",
            "explanation": "The correct way to declare a string using the string class is option a). Option d) also declares a string, but it uses a character array."
        },
        {
            "question": "Which member function is used to find the length of a string?",
            "options": [
                "length()",
                "size()",
                "strlen()",
                "Both a) and b)"
            ],
            "answer": "Both a) and b)",
            "explanation": "The string class provides both length() and size() member functions, which return the number of characters in the string."
        },
        {
            "question": "Which function is used to concatenate two strings, str1 and str2?",
            "options": [
                "str1.concat(str2)",
                "str1 + str2",
                "str1.append(str2)",
                "Both b) and c)"
            ],
            "answer": "Both b) and c)",
            "explanation": "You can use the + operator or the append() member function to concatenate two strings in C++."
        },
        {
            "question": "What does the following code return?",
            "options": [
                "gramm",
                "gram",
                "ramming",
                "mmin"
            ],
            "answer": "gram",
            "explanation": "The substr() function returns a substring starting from the given index (3 in this case) and of the specified length (4 in this case)."
        },
        {
            "question": "How can you compare two strings, str1 and str2, for equality?",
            "options": [
                "str1.equals(str2)",
                "str1 == str2",
                "compare(str1, str2)",
                "str1.compare(str2)"
            ],
            "answer": "str1 == str2",
            "explanation": "In C++, you can use the == operator to compare two strings for equality. The compare() member function can also be used, but it returns 0 when strings are equal, not a boolean value."
        },
        {
            "question": "How can you convert a string to uppercase?",
            "options": [
                "toupper(string)",
                "string.toupper()",
                "transform(string.begin(), string.end(), string.begin(), ::toupper)",
                "string.upper()"
            ],
            "answer": "transform(string.begin(), string.end(), string.begin(), ::toupper)",
            "explanation": "The transform() function from the algorithm library is used with iterators to apply the toupper() function to each character in the string."
        },
        {
            "question": "Which member function removes all characters from a string?",
            "options": [
                "erase()",
                "remove()",
                "clear()",
                "delete()"
            ],
            "answer": "clear()",
            "explanation": "The clear() member function removes all characters from the string, making its length 0."
        },
        {
            "question": "What does the following code return?",
            "options": [
                "3",
                "4",
                "6",
                "8"
            ],
            "answer": "3",
            "explanation": "The find() function returns the starting position of the first occurrence of the given substring. Indexing starts from 0."
        },
        {
            "question": "If string s1 = “Hello”; and string s2 = “World”;, what will be the value of s1 after s1.swap(s2);?",
            "options": [
                "“Hello”",
                "“World”",
                "An empty string",
                "“HelloWorld”"
            ],
            "answer": "“World”",
            "explanation": "The swap() member function swaps the contents of the two strings. So, after the swap, s1 will contain “World”."
        },
        {
            "question": "Which of the following is the assignment operator in C++?",
            "options": [
                "==",
                "=",
                "===",
                ":="
            ],
            "answer": "=",
            "explanation": "The = operator is used for assignment in C++. It assigns the value on its right to the variable on its left."
        },
        {
            "question": "Which operator is used for checking equality?",
            "options": [
                ":=",
                "=",
                "==",
                "!="
            ],
            "answer": "==",
            "explanation": "The == operator checks if the values of two operands are equal or not."
        },
        {
            "question": "What is the result of 5 % 2?",
            "options": [
                "2.5",
                "2",
                "1",
                "0"
            ],
            "answer": "1",
            "explanation": "The % operator calculates the remainder of the division. 5 divided by 2 has a remainder of 1."
        },
        {
            "question": "Which operator increases the value of a variable by 1?",
            "options": [
                "++",
                "—",
                "+=",
                "*="
            ],
            "answer": "++",
            "explanation": "The ++ operator is the increment operator. It increases the value of a variable by 1."
        },
        {
            "question": "What is the purpose of the != operator?",
            "options": [
                "Multiplication",
                "Modulus",
                "Not equal to",
                "Division"
            ],
            "answer": "Not equal to",
            "explanation": "The != operator checks if two operands are not equal."
        },
        {
            "question": "What does the && operator represent?",
            "options": [
                "Bitwise AND",
                "Logical AND",
                "Bitwise OR",
                "Logical OR"
            ],
            "answer": "Logical AND",
            "explanation": "The && operator is the logical AND operator. It returns true if both operands are true."
        },
        {
            "question": "Which operator has the highest precedence?",
            "options": [
                "+",
                "/",
                "%",
                "()"
            ],
            "answer": "()",
            "explanation": "Parentheses () have the highest precedence in C++. Expressions inside them are evaluated first."
        },
        {
            "question": "What is the result of 10 | 5?",
            "options": [
                "15",
                "5",
                "2",
                "10"
            ],
            "answer": "15",
            "explanation": "The | operator is a bitwise OR operator. In binary, 10 is 1010 and 5 is 0101. The OR operation results in 1111 which is 15 in decimal."
        },
        {
            "question": "Which operator is used to allocate dynamic memory in C++?",
            "options": [
                "malloc",
                "new",
                "alloc",
                "create"
            ],
            "answer": "new",
            "explanation": "The new operator is used in C++ to allocate dynamic memory on the heap."
        },
        {
            "question": "What does the ^ operator do in C++?",
            "options": [
                "Exponentiation",
                "Logical XOR",
                "Bitwise XOR",
                "None of the above"
            ],
            "answer": "Bitwise XOR",
            "explanation": "In C++, the ^ operator is the bitwise XOR operator. It returns 1 for differing bits and 0 for identical bits."
        },
        {
            "question": "Which control structure is used for executing a block of statements repeatedly based on a condition?",
            "options": [
                "if",
                "switch",
                "loop",
                "goto"
            ],
            "answer": "loop",
            "explanation": "Loops, like for, while, and do-while, execute blocks of code repeatedly based on a condition."
        },
        {
            "question": "Which keyword is used to test a condition in C++?",
            "options": [
                "test",
                "switch",
                "decide",
                "if"
            ],
            "answer": "if",
            "explanation": "The if keyword is used to test a condition. If the condition is true, the block of code inside the if is executed."
        },
        {
            "question": "Which of the following is NOT a loop in C++?",
            "options": [
                "for",
                "while",
                "do",
                "check"
            ],
            "answer": "check",
            "explanation": "check is not a loop in C++. The three primary loops are for, while, and do-while."
        },
        {
            "question": "How many times is the body of a do-while loop guaranteed to execute?",
            "options": [
                "0",
                "1",
                "Until the condition is true",
                "Infinitely"
            ],
            "answer": "1",
            "explanation": "The do-while loop checks its condition at the end, ensuring the body of the loop executes at least once."
        },
        {
            "question": "What will be the output of the following code snippet?",
            "options": [
                "No",
                "Yes",
                "Error",
                "None of the above"
            ],
            "answer": "Yes",
            "explanation": "The condition x == 5 is true, so “Yes” will be printed."
        },
        {
            "question": "Which control structure allows you to choose between multiple alternatives?",
            "options": [
                "if-then",
                "for",
                "switch-case",
                "while"
            ],
            "answer": "switch-case",
            "explanation": "The switch-case structure allows you to choose between multiple alternatives based on the value of an expression."
        },
        {
            "question": "What is the purpose of the break statement in loops?",
            "options": [
                "To start the loop",
                "To exit the loop immediately",
                "To skip one iteration",
                "None of the above"
            ],
            "answer": "To exit the loop immediately",
            "explanation": "The break statement is used to exit a loop immediately, bypassing any remaining iterations."
        },
        {
            "question": "Which loop is best suited for iterating over arrays when you know the number of iterations in advance?",
            "options": [
                "if",
                "do-while",
                "while",
                "for"
            ],
            "answer": "for",
            "explanation": "The for loop is best suited for cases when you know the number of iterations in advance, such as iterating over arrays."
        },
        {
            "question": "How can you execute a block of code irrespective of whether a condition in an if statement is true or false?",
            "options": [
                "else",
                "elseif",
                "then",
                "finally"
            ],
            "answer": "else",
            "explanation": "The else block will execute when the condition in the associated if statement is false. If you want a block of code to run irrespective of the condition, place it outside the if-else structure."
        },
        {
            "question": "Which of the following statements will run indefinitely?",
            "options": [
                "for( ; ; ) { }",
                "while(1) { }",
                "do { } while(1);",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "All the given loop structures have conditions that will always evaluate to true, causing them to run indefinitely."
        },
        {
            "question": "Which header file is primarily used for I/O operations in C++?",
            "options": [
                "<iostream>",
                "<io>",
                "<input>",
                "<output>"
            ],
            "answer": "<iostream>",
            "explanation": "The  header file contains definitions for objects like cin, cout, cerr, etc., which are used for I/O operations in C++."
        },
        {
            "question": "What is the primary object used for standard output in C++?",
            "options": [
                "cin",
                "cout",
                "cprint",
                "co"
            ],
            "answer": "cout",
            "explanation": "The cout object, defined in the  header, is used for standard output operations."
        },
        {
            "question": "Which of the following is the correct way to read an integer input in C++?",
            "options": [
                "cout << x;",
                "cin << x;",
                "cin >> x;",
                "cout >> x;"
            ],
            "answer": "cin >> x;",
            "explanation": "The cin object with the extraction operator (>>) is used to take input from the user."
        },
        {
            "question": "How do you display “Hello, World!” on the console?",
            "options": [
                "cout << “Hello, World!”;",
                "cout >> “Hello, World!”;",
                "cin << “Hello, World!”;",
                "cin >> “Hello, World!”;"
            ],
            "answer": "cout << “Hello, World!”;",
            "explanation": "The cout object with the insertion operator (<<) is used for displaying output."
        },
        {
            "question": "Which of the following allows you to format the output in C++?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": "The  header provides set of manipulators to format the output in C++."
        },
        {
            "question": "How can you display a newline character in C++?",
            "options": [
                "cout << “/n”;",
                "cout << “\\n”;",
                "cout << “//n”;",
                "cout << “&n”;"
            ],
            "answer": "cout << “\\n”;",
            "explanation": "The escape sequence \\n represents a newline character in C++."
        },
        {
            "question": "If you want to read an entire line of text including spaces, which function would you use?",
            "options": [
                "cin.read()",
                "cin.getline()",
                "cin.get()",
                "cin.line()"
            ],
            "answer": "cin.getline()",
            "explanation": "The cin.getline() function is used to read an entire line of text from the standard input, including spaces."
        },
        {
            "question": "Which object is used to report error messages?",
            "options": [
                "cin",
                "cout",
                "cerr",
                "cerror"
            ],
            "answer": "cerr",
            "explanation": "The cerr object is used to display error messages on the standard error device, which is typically the screen."
        },
        {
            "question": "What is the purpose of the endl manipulator?",
            "options": [
                "Read input",
                "Display an end-of-file character",
                "Display a newline character and flush the output buffer",
                "Display a tab character"
            ],
            "answer": "Display a newline character and flush the output buffer",
            "explanation": "The endl manipulator is used to insert a newline character and flush the output buffer."
        },
        {
            "question": "What would the following code display?",
            "options": [
                "HelloWorld!",
                "Hello World!",
                "Hello” “World!",
                "Error"
            ],
            "answer": "Hello World!",
            "explanation": "The code uses the insertion operator to concatenate and display multiple strings. The output would be “Hello World!”."
        },
        {
            "question": "What does the term ‘Polymorphism’ mean in C++?",
            "options": [
                "The ability to have many classes",
                "The ability to have many methods",
                "The ability to take on many forms",
                "The ability to have many variables"
            ],
            "answer": "The ability to take on many forms",
            "explanation": "Polymorphism comes from the Greek words ‘poly’ meaning many and ‘morph’ meaning forms. It refers to the ability of one function or method to work in multiple ways depending on its input or on its associated objects."
        },
        {
            "question": "Which of the following best describes runtime polymorphism?",
            "options": [
                "Function overloading",
                "Operator overloading",
                "Templates",
                "Virtual functions"
            ],
            "answer": "Virtual functions",
            "explanation": "Runtime polymorphism is achieved through the use of virtual functions, where the function to be executed is determined at runtime based on the object’s actual type."
        },
        {
            "question": "What keyword is used to declare a function as polymorphic in the base class?",
            "options": [
                "polymorphic",
                "override",
                "virtual",
                "abstract"
            ],
            "answer": "virtual",
            "explanation": "The virtual keyword is used to declare a function as polymorphic in the base class. This allows derived classes to provide a specific implementation of the function."
        },
        {
            "question": "How is compile-time polymorphism achieved in C++?",
            "options": [
                "Function overriding",
                "Function overloading and operator overloading",
                "Using virtual functions",
                "Using abstract classes"
            ],
            "answer": "Function overloading and operator overloading",
            "explanation": "Compile-time polymorphism, also known as static polymorphism, is achieved through function overloading and operator overloading."
        },
        {
            "question": "In the context of polymorphism, what does “overriding” mean?",
            "options": [
                "Using the same function name in different classes",
                "Changing the return type of a function in a derived class",
                "Providing a new implementation of a base class function in a derived class",
                "Calling a function multiple times with different arguments"
            ],
            "answer": "Providing a new implementation of a base class function in a derived class",
            "explanation": "Overriding refers to the ability of the derived class to provide a specific implementation of a function that is already provided by its base class."
        },
        {
            "question": "Which of the following is NOT a type of polymorphism?",
            "options": [
                "Runtime Polymorphism",
                "Compile-time Polymorphism",
                "Overloading Polymorphism",
                "External Polymorphism"
            ],
            "answer": "External Polymorphism",
            "explanation": "There’s no concept called “External Polymorphism” in C++."
        },
        {
            "question": "What is the primary requirement for function overriding?",
            "options": [
                "Both the base class and derived class functions must have different names",
                "The derived class function must be virtual",
                "The base class function must be virtual",
                "Both functions must be static"
            ],
            "answer": "The base class function must be virtual",
            "explanation": "For function overriding, the function in the base class should be declared as virtual, which allows the derived class to override it."
        },
        {
            "question": "How can you prevent a class from being subclassed further?",
            "options": [
                "By making the class virtual",
                "By making the class sealed",
                "By using the final keyword",
                "By using the end keyword"
            ],
            "answer": "By using the final keyword",
            "explanation": "In C++, you can prevent a class from being subclassed by using the final keyword."
        },
        {
            "question": "If a base class destructor is not virtual, what can happen?",
            "options": [
                "The derived class destructor will not be called",
                "The base class destructor will not be called",
                "It will cause a compile-time error",
                "The program will crash"
            ],
            "answer": "The derived class destructor will not be called",
            "explanation": "If the base class destructor is not virtual and we delete an object of a derived class using a pointer of the base class, the derived class destructor will not be called. This may lead to resource leaks."
        },
        {
            "question": "If a virtual function is defined in the base class, it…",
            "options": [
                "Must be overridden in the derived class",
                "Cannot be accessed by objects of the derived class",
                "Can optionally be overridden in the derived class",
                "Will cause an error in the derived class"
            ],
            "answer": "Can optionally be overridden in the derived class",
            "explanation": "If a virtual function is defined in the base class, the derived class can optionally provide its own implementation or override the base class function. If not overridden, the base class’s function is used."
        },
        {
            "question": "What is a class in C++?",
            "options": [
                "A data type",
                "A function",
                "A blueprint for creating objects",
                "An instance of an object"
            ],
            "answer": "A blueprint for creating objects",
            "explanation": "A class in C++ defines attributes (data members) and behaviors (member functions or methods) that its objects will have. It acts as a blueprint for creating objects."
        },
        {
            "question": "How do you define an object in C++?",
            "options": [
                "classname objectname;",
                "objectname classname;",
                "define classname objectname;",
                "class objectname;"
            ],
            "answer": "classname objectname;",
            "explanation": "An object is an instance of a class. It’s defined using the class name followed by the object name."
        },
        {
            "question": "Which among these is a valid access specifier in C++?",
            "options": [
                "private",
                "protected",
                "public",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "C++ supports several access specifiers, including private, protected, and public, which determine the accessibility of class members."
        },
        {
            "question": "By default, members of a class are:",
            "options": [
                "Public",
                "Private",
                "Protected",
                "None of the above"
            ],
            "answer": "Private",
            "explanation": "In C++, if no access specifier is mentioned, class members are private by default."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "5",
                "0",
                "Compilation error",
                "Undefined"
            ],
            "answer": "Compilation error",
            "explanation": "The member variable x is private by default and cannot be accessed directly outside the class."
        },
        {
            "question": "Which among the following is a special type of function in a class?",
            "options": [
                "Inline function",
                "Virtual function",
                "Constructor",
                "Static function"
            ],
            "answer": "Constructor",
            "explanation": "A constructor is a special member function in a class that is executed whenever a new object of that class is created. It has the same name as the class."
        },
        {
            "question": "How can a member function be defined outside the class?",
            "options": [
                "By using the :: operator",
                "By using the . operator",
                "By using the -> operator",
                "It can’t be defined outside the class"
            ],
            "answer": "By using the :: operator",
            "explanation": "The scope resolution operator (::) is used to define a member function outside the class."
        },
        {
            "question": "What is the primary purpose of a destructor?",
            "options": [
                "To initialize the class members",
                "To allocate memory for the object",
                "To delete any dynamic memory allocated by the object",
                "To copy the object"
            ],
            "answer": "To delete any dynamic memory allocated by the object",
            "explanation": "A destructor is a special member function that cleans up and releases any resources (like dynamic memory) that might have been allocated during the object’s lifespan."
        },
        {
            "question": "Which of the following can’t have a return type?",
            "options": [
                "Member function",
                "Inline function",
                "Constructor",
                "Static function"
            ],
            "answer": "Constructor",
            "explanation": "Constructors don’t have a return type, not even void."
        },
        {
            "question": "A class can have:",
            "options": [
                "Only one constructor",
                "Only two constructors",
                "As many constructors as needed",
                "No constructors"
            ],
            "answer": "As many constructors as needed",
            "explanation": "A class can have multiple constructors as long as they have different parameters. This is known as constructor overloading."
        },
        {
            "question": "Which of the following is not a type of loop in C++?",
            "options": [
                "for",
                "while",
                "do-while",
                "repeat-until"
            ],
            "answer": "repeat-until",
            "explanation": "repeat-until is not a type of loop in C++. The standard loops are for, while, and do-while."
        },
        {
            "question": "What will be the output of the following code snippet?",
            "options": [
                "0 1 2 3 4",
                "1 2 3 4 5",
                "0 1 2 3 4 5",
                "1 2 3 4"
            ],
            "answer": "0 1 2 3 4",
            "explanation": "The loop starts with i=0 and runs until i<5 0=\"\" 4.=\"\" from=\"\" it=\"\" numbers=\"\" p=\"\" print=\"\" so=\"\" to=\"\" will=\"\">"
        },
        {
            "question": "How many times will the loop body execute in a do-while loop?",
            "options": [
                "Zero or more times",
                "One or more times",
                "Exactly once",
                "It’s unpredictable"
            ],
            "answer": "One or more times",
            "explanation": "The do-while loop ensures that the loop body is executed at least once before the condition is checked."
        },
        {
            "question": "Which loop is best if you want to execute the block of code at least once?",
            "options": [
                "for loop",
                "while loop",
                "do-while loop",
                "All are equally good"
            ],
            "answer": "do-while loop",
            "explanation": "The do-while loop checks the condition after executing the loop body, so the body will always run at least once."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "5 4 3 2 1",
                "1 2 3 4 5",
                "5 4 3",
                "No output"
            ],
            "answer": "5 4 3 2 1",
            "explanation": "The loop starts with i=5 and runs as long as i is greater than 0, decrementing i in each iteration."
        },
        {
            "question": "In a for loop, which part is optional?",
            "options": [
                "Initialization",
                "Condition",
                "Update",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "In a for loop, all parts (initialization, condition, and update) are optional."
        },
        {
            "question": "Infinite loops are generally considered:",
            "options": [
                "Useful",
                "An error",
                "Required",
                "Desirable"
            ],
            "answer": "An error",
            "explanation": "Infinite loops generally indicate that something has gone wrong in the code, causing the loop to run indefinitely."
        },
        {
            "question": "Which statement is used to exit a loop prematurely?",
            "options": [
                "break",
                "exit",
                "stop",
                "return"
            ],
            "answer": "break",
            "explanation": "The break statement is used to exit a loop prematurely."
        },
        {
            "question": "Which statement allows the next iteration of the loop to run prematurely?",
            "options": [
                "next",
                "continue",
                "skip",
                "move"
            ],
            "answer": "continue",
            "explanation": "The continue statement skips the rest of the current iteration and moves to the next iteration of the loop."
        },
        {
            "question": "In which loop is the condition checked after executing the loop body?",
            "options": [
                "for loop",
                "while loop",
                "do-while loop",
                "None of the above"
            ],
            "answer": "do-while loop",
            "explanation": "In the do-while loop, the condition is checked after executing the loop body."
        },
        {
            "question": "Which data type is used to store a single character in C++?",
            "options": [
                "char",
                "str",
                "text",
                "character"
            ],
            "answer": "char",
            "explanation": "The char data type is used to store a single character in C++."
        },
        {
            "question": "What will be the size of int in a typical 32-bit architecture?",
            "options": [
                "2 bytes",
                "4 bytes",
                "8 bytes",
                "It varies"
            ],
            "answer": "4 bytes",
            "explanation": "In a typical 32-bit architecture, the size of int is 4 bytes."
        },
        {
            "question": "Which of the following is a floating-point data type in C++?",
            "options": [
                "double",
                "long",
                "short",
                "boolean"
            ],
            "answer": "double",
            "explanation": "double is a floating-point data type in C++."
        },
        {
            "question": "Which data type can store both true and false values?",
            "options": [
                "bool",
                "binary",
                "bit",
                "tf"
            ],
            "answer": "bool",
            "explanation": "The bool data type is used to store Boolean values, which can be either true or false."
        },
        {
            "question": "How many bytes does the long long int typically occupy?",
            "options": [
                "4 bytes",
                "6 bytes",
                "8 bytes",
                "10 bytes"
            ],
            "answer": "8 bytes",
            "explanation": "Typically, long long int occupies 8 bytes of memory."
        },
        {
            "question": "Which of the following data types does not have a signed and unsigned variant?",
            "options": [
                "char",
                "bool",
                "int",
                "short"
            ],
            "answer": "bool",
            "explanation": "The bool data type does not have signed and unsigned variants. It can only hold true or false values."
        },
        {
            "question": "Which of the following is not a standard C++ data type?",
            "options": [
                "float",
                "double",
                "string",
                "int"
            ],
            "answer": "string",
            "explanation": "Although string is commonly used in C++, it is not a fundamental data type. It is a class provided by the C++ Standard Library."
        },
        {
            "question": "What is the range of values for an unsigned char?",
            "options": [
                "-128 to 127",
                "0 to 255",
                "-255 to 255",
                "0 to 127"
            ],
            "answer": "0 to 255",
            "explanation": "An unsigned char can hold values from 0 to 255."
        },
        {
            "question": "Which of the following is the correct way to declare a floating-point variable in C++?",
            "options": [
                "float x = 10.5",
                "int x = 10.5",
                "decimal x = 10.5",
                "number x = 10.5"
            ],
            "answer": "float x = 10.5",
            "explanation": "The float data type is used for floating-point values, so the correct declaration is float x = 10.5."
        },
        {
            "question": "Which data type would be most suitable for storing the age of a person?",
            "options": [
                "float",
                "double",
                "char",
                "int"
            ],
            "answer": "int",
            "explanation": "Age is typically represented as a whole number, making int the most appropriate data type for this purpose."
        },
        {
            "question": "Which header file is necessary to perform file operations in C++?",
            "options": [
                "<fstream.h>",
                "<file.h>",
                "<ios.h>",
                "<iostream.h>"
            ],
            "answer": "<fstream.h>",
            "explanation": "The  header file contains the definitions for file stream classes like ifstream, ofstream, and fstream."
        },
        {
            "question": "Which class is used to read from a file in C++?",
            "options": [
                "ifstream",
                "ofstream",
                "fread",
                "fwrite"
            ],
            "answer": "ifstream",
            "explanation": "ifstream stands for input file stream and is used for reading operations."
        },
        {
            "question": "How do you open a file named “data.txt” in write mode?",
            "options": [
                "ofstream file(“data.txt”, ios::in);",
                "ifstream file(“data.txt”, ios::out);",
                "ofstream file(“data.txt”, ios::out);",
                "fstream file(“data.txt”, ios::read);"
            ],
            "answer": "ofstream file(“data.txt”, ios::out);",
            "explanation": "The ofstream class with the ios::out mode is used to open a file for writing."
        },
        {
            "question": "Which of the following is used to determine the end-of-file?",
            "options": [
                "eof()",
                "endfile()",
                "endoffile()",
                "exit()"
            ],
            "answer": "eof()",
            "explanation": "The eof() function returns true when the end of the file is reached."
        },
        {
            "question": "How can you check if a file failed to open?",
            "options": [
                "if(file.isopen())",
                "if(file.fail())",
                "if(file.error())",
                "if(file.read())"
            ],
            "answer": "if(file.fail())",
            "explanation": "The fail() function can be used to check if an operation on a file failed, including file opening."
        },
        {
            "question": "Which mode will allow you to append data to the end of an existing file?",
            "options": [
                "ios::in",
                "ios::out",
                "ios::app",
                "ios::write"
            ],
            "answer": "ios::app",
            "explanation": "The ios::app mode allows data to be appended to the end of an existing file."
        },
        {
            "question": "What is the purpose of the close() function?",
            "options": [
                "To terminate the program",
                "To save data to a file",
                "To close an opened file",
                "To delete a file"
            ],
            "answer": "To close an opened file",
            "explanation": "The close() function is used to close a file that has been opened."
        },
        {
            "question": "Which function can be used to read a single character from a file?",
            "options": [
                "get()",
                "read()",
                "fetch()",
                "retrieve()"
            ],
            "answer": "get()",
            "explanation": "The get() function is used to read a single character from a file."
        },
        {
            "question": "If you want to move the file pointer to the beginning of the file, which function will you use?",
            "options": [
                "file.start();",
                "file.reset();",
                "file.seekg(0);",
                "file.begin();"
            ],
            "answer": "file.seekg(0);",
            "explanation": "The seekg() function is used to move the file pointer, and file.seekg(0); will move it to the beginning of the file."
        },
        {
            "question": "How do you open a file in both read and write modes?",
            "options": [
                "fstream file(“data.txt”, ios::in | ios::out);",
                "fstream file(“data.txt”, ios::readwrite);",
                "fstream file(“data.txt”, ios::read | ios::write);",
                "fstream file(“data.txt”, ios::both);"
            ],
            "answer": "fstream file(“data.txt”, ios::in | ios::out);",
            "explanation": "To open a file in both read and write modes, you use ios::in combined with ios::out using the bitwise OR operator."
        },
        {
            "question": "Which of the following is used to dynamically allocate a single variable in C++?",
            "options": [
                "malloc()",
                "new",
                "alloc",
                "calloc()"
            ],
            "answer": "new",
            "explanation": "In C++, the new operator is primarily used to allocate memory for a variable or an array of variables."
        },
        {
            "question": "How do you deallocate memory assigned by the new operator?",
            "options": [
                "free()",
                "delete",
                "remove()",
                "dealloc"
            ],
            "answer": "delete",
            "explanation": "The delete operator is used to deallocate memory that was previously allocated by the new operator."
        },
        {
            "question": "Which function in C++ is used to dynamically allocate memory for an array?",
            "options": [
                "malloc()",
                "new[]",
                "alloc[]",
                "calloc()"
            ],
            "answer": "new[]",
            "explanation": "new[] is used for dynamic allocation of arrays in C++."
        },
        {
            "question": "What is the main problem with using raw pointers in C++?",
            "options": [
                "Performance overhead",
                "Memory leaks",
                "Reduced flexibility",
                "Slower execution"
            ],
            "answer": "Memory leaks",
            "explanation": "Raw pointers can lead to memory leaks if not handled correctly, as the programmer is responsible for both allocation and deallocation."
        },
        {
            "question": "What does a pointer variable store?",
            "options": [
                "A value",
                "A function",
                "Address of another variable",
                "Size of memory"
            ],
            "answer": "Address of another variable",
            "explanation": "A pointer stores the address of another variable."
        },
        {
            "question": "Which of the following is not a type of pointer?",
            "options": [
                "Wild pointer",
                "Null pointer",
                "Real pointer",
                "Dangling pointer"
            ],
            "answer": "Real pointer",
            "explanation": "There is no concept called a “Real pointer” in C++."
        },
        {
            "question": "What will happen if you forget to deallocate dynamically allocated memory?",
            "options": [
                "Syntax error",
                "Runtime error",
                "Memory leak",
                "Logic error"
            ],
            "answer": "Memory leak",
            "explanation": "Forgetting to deallocate dynamically allocated memory results in a memory leak."
        },
        {
            "question": "In which section of memory are local variables stored?",
            "options": [
                "Heap",
                "Stack",
                "Data",
                "Code"
            ],
            "answer": "Stack",
            "explanation": "Local variables are typically stored in the stack memory."
        },
        {
            "question": "How can you allocate memory for a 2D array in C++?",
            "options": [
                "new [x][y]",
                "new x*y",
                "new [x]*[y]",
                "new int[x][y]"
            ],
            "answer": "new int[x][y]",
            "explanation": "To allocate memory for a 2D array, you can use new int[x][y]."
        },
        {
            "question": "Which of these is the correct way to declare a pointer to an integer?",
            "options": [
                "int p*;",
                "*p int;",
                "int *p;",
                "p* int;"
            ],
            "answer": "int *p;",
            "explanation": "The correct way to declare a pointer to an integer is int *p;."
        },
        {
            "question": "Which keyword is used to handle an exception?",
            "options": [
                "catch",
                "throw",
                "try",
                "handle"
            ],
            "answer": "catch",
            "explanation": "The catch block is used to handle exceptions. It is paired with a try block which contains the code that might throw exceptions."
        },
        {
            "question": "Which keyword is used to signal the occurrence of an exception?",
            "options": [
                "signal",
                "raise",
                "alert",
                "throw"
            ],
            "answer": "throw",
            "explanation": "The throw keyword is used to signal or throw an exception."
        },
        {
            "question": "What is the purpose of the try block?",
            "options": [
                "To catch the exception",
                "To throw the exception",
                "To encapsulate potential exception-throwing code",
                "None of the above"
            ],
            "answer": "To encapsulate potential exception-throwing code",
            "explanation": "The try block contains the segment of code where an exception might occur."
        },
        {
            "question": "Which of the following can be thrown as an exception in C++?",
            "options": [
                "int",
                "char",
                "an object",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "In C++, almost any value or object can be thrown as an exception."
        },
        {
            "question": "If you have multiple catch blocks for a try block, how are they executed?",
            "options": [
                "All catch blocks are executed sequentially",
                "Only the first catch block is executed",
                "Only the catch block matching the thrown exception type is executed",
                "Last catch block is executed"
            ],
            "answer": "Only the catch block matching the thrown exception type is executed",
            "explanation": "When an exception is thrown, the catch blocks are examined in order: the first catch block that can handle the exception type is executed."
        },
        {
            "question": "Which standard library class can be used for exception handling in C++?",
            "options": [
                "exception",
                "stdexcept",
                "exceptions",
                "error"
            ],
            "answer": "exception",
            "explanation": "The exception class is the standard library class in C++ for exception handling."
        },
        {
            "question": "What will happen if an exception is not caught?",
            "options": [
                "The program continues normally",
                "The program crashes",
                "The exception is ignored",
                "The exception is caught by the OS"
            ],
            "answer": "The program crashes",
            "explanation": "If an exception is thrown but not caught, the C++ runtime system handles it by terminating the program."
        },
        {
            "question": "Which keyword is used to specify a block of code that must be executed after the try-catch block?",
            "options": [
                "finally",
                "lastly",
                "conclude",
                "None of the above"
            ],
            "answer": "None of the above",
            "explanation": "Unlike some other languages like Java, C++ doesn’t have a finally block."
        },
        {
            "question": "What is the base class for all standard exception classes?",
            "options": [
                "error",
                "std::exception",
                "std::base_exception",
                "throw"
            ],
            "answer": "std::exception",
            "explanation": "In C++, std::exception is the base class for all standard exceptions."
        },
        {
            "question": "Which of the following is not a standard exception derived from std::exception?",
            "options": [
                "std::bad_alloc",
                "std::out_of_range",
                "std::throws",
                "std::length_error"
            ],
            "answer": "std::throws",
            "explanation": "There isn’t any std::throws exception in the standard C++ library."
        },
        {
            "question": "What does a pointer store?",
            "options": [
                "A memory address",
                "A data type",
                "A value directly",
                "None of the above"
            ],
            "answer": "A memory address",
            "explanation": "A pointer is used to store the memory address of a variable."
        },
        {
            "question": "Which operator is used to get the memory address of a variable?",
            "options": [
                "*",
                "&",
                "->",
                "<<"
            ],
            "answer": "&",
            "explanation": "The address-of operator (&) is used to fetch the memory address of a variable."
        },
        {
            "question": "What will the following declaration create?",
            "options": [
                " *ptr = nullptr;",
                "Integer variable named ptr",
                "Pointer to a char",
                "Null pointer to an integer"
            ],
            "answer": "Pointer to a null integer",
            "explanation": "Answer: c) Null pointer to an integer"
        },
        {
            "question": "What is a reference in C++?",
            "options": [
                "Another name for a pointer",
                "An alias for an existing variable",
                "A memory location",
                "A type of function"
            ],
            "answer": "An alias for an existing variable",
            "explanation": "A reference is an alias, or another name, for an already existing variable."
        },
        {
            "question": "How do you declare a reference to an integer?",
            "options": [
                "int* ref;",
                "&int ref;",
                "int ref&;",
                "int& ref;"
            ],
            "answer": "int& ref;",
            "explanation": "A reference is declared using the ‘&’ symbol after the type but before the identifier (variable name)."
        },
        {
            "question": "Once a reference is initialized with a variable:",
            "options": [
                "It can be reassigned to another variable",
                "It can’t refer to any other variables",
                "It becomes a pointer",
                "None of the above"
            ],
            "answer": "It can’t refer to any other variables",
            "explanation": "Unlike pointers, once a reference is initialized with a variable, it cannot be reassigned to refer to another variable."
        },
        {
            "question": "Which of the following is the correct way to declare a pointer to an integer and assign it the address of an integer variable, num?",
            "options": [
                "int ptr = num;",
                "int ptr = #",
                "int ptr = #",
                "int &ptr = num;"
            ],
            "answer": "int* ptr = #",
            "explanation": "A pointer is declared using the * symbol and is assigned the address of a variable using the & operator."
        },
        {
            "question": "Which of the following accesses the value at the address stored in a pointer ‘ptr’?",
            "options": [
                "&ptr",
                "ptr",
                "ptr",
                "ptr"
            ],
            "answer": "*ptr",
            "explanation": "The * operator (dereference operator) is used to access the value at the address stored in the pointer."
        },
        {
            "question": "If ‘ref’ is a reference to a variable, which of the following is used to get its memory address?",
            "options": [
                "ref&",
                "&ref",
                "ref",
                "ref"
            ],
            "answer": "&ref",
            "explanation": "Just like any other variable, the memory address of a reference is obtained using the & operator."
        },
        {
            "question": "What does the following statement do?",
            "options": [
                " &ref = *ptr;",
                "It assigns the address of ptr to ref.",
                "It makes ref an alias for the value pointed to by ptr.",
                "It creates a new pointer ref and assigns it the value of ptr."
            ],
            "answer": "It gives a compile-time error.",
            "explanation": "Answer: b) It makes ref an alias for the value pointed to by ptr."
        }
    ],
    "Java": [
        {
            "question": "Which of the following is used to make a decision in Java?",
            "options": [
                "if-else",
                "switch",
                "both a and b",
                "none of the above"
            ],
            "answer": "wer:c) both a and b",
            "explanation": "Explanation:Both if-else and switch are control statements used to make decisions based on conditions."
        },
        {
            "question": "How many else if parts can an if statement have?",
            "options": [
                "None",
                "Only one",
                "At most two",
                "As many as needed"
            ],
            "answer": "As many as needed",
            "explanation": "An if statement can have multiple else-if parts. The conditions are checked in sequence until one is found to be true or all have been checked."
        },
        {
            "question": "Which control statement is best used when you need to check multiple conditions sequentially?",
            "options": [
                "if",
                "for",
                "switch",
                "while"
            ],
            "answer": "switch",
            "explanation": "The switch statement is designed for scenarios where a single variable or expression is checked against multiple potential values."
        },
        {
            "question": "What is the role of the break statement inside a switch?",
            "options": [
                "To start the next case",
                "To exit the switch statement",
                "To skip to the default case",
                "None of the above"
            ],
            "answer": "To exit the switch statement",
            "explanation": "The break statement is used to exit the current switch statement, ensuring that once a matching case is found, subsequent cases are not executed."
        },
        {
            "question": "How many times does a do-while loop guarantee to run its block of code?",
            "options": [
                "Never",
                "Once",
                "Twice",
                "Until the condition becomes false"
            ],
            "answer": "Once",
            "explanation": "A do-while loop checks its condition at the end of the loop. This means it will always execute its block of code at least once, regardless of whether the condition is initially true or false."
        },
        {
            "question": "What will happen if you don’t use a break statement inside a switch case?",
            "options": [
                "The program will not compile.",
                "It will only execute the matched case.",
                "It will execute all the cases after the first match, including the default, if no other break is encountered.",
                "The program will terminate."
            ],
            "answer": "It will execute all the cases after the first match, including the default, if no other break is encountered.",
            "explanation": "Without a break, the switch statement will exhibit “fall-through” behavior, executing subsequent case statements until a break is encountered or it reaches the end of the switch block."
        },
        {
            "question": "What does the continue statement do inside a loop?",
            "options": [
                "Stops the loop",
                "Skips the current iteration",
                "Restarts the loop",
                "Continues indefinitely"
            ],
            "answer": "Skips the current iteration",
            "explanation": "The continue statement causes the loop to skip the rest of the current iteration and jump to the next one."
        },
        {
            "question": "Which control statement can be used to selectively execute a block of code?",
            "options": [
                "switch",
                "if-else",
                "for",
                "break"
            ],
            "answer": "if-else",
            "explanation": "The if-else control statement is used to selectively execute blocks of code based on a condition."
        },
        {
            "question": "For how many values can a switch statement check a variable?",
            "options": [
                "One",
                "Two",
                "Three",
                "Any number"
            ],
            "answer": "Any number",
            "explanation": "A switch statement can check a variable against any number of values using different case labels."
        },
        {
            "question": "What is the primary difference between if and switch statements?",
            "options": [
                "if is a loop, a switch is conditional",
                "if checks for boolean values, switch checks against constant values",
                "if can only have two conditions, a switch can have multiple",
                "if and switch are the same"
            ],
            "answer": "if checks for boolean values, switch checks against constant values",
            "explanation": "An if statement evaluates boolean expressions (true or false). In contrast, a switch statement checks a variable or expression against multiple constant values."
        },
        {
            "question": "Which loop construct in Java is best suited when the number of iterations is known?",
            "options": [
                "for loop",
                "while loop",
                "do-while loop",
                "break statement"
            ],
            "answer": "for loop",
            "explanation": "The for loop in Java is used when the number of iterations is known or can be determined beforehand."
        },
        {
            "question": "What is the purpose of the continue statement in a loop?",
            "options": [
                "To exit the loop immediately",
                "To skip the current iteration and move to the next iteration",
                "To terminate the program",
                "To execute a specific block of code"
            ],
            "answer": "To skip the current iteration and move to the next iteration",
            "explanation": "The continue statement in Java is used to skip the current iteration of a loop and move to the next iteration."
        },
        {
            "question": "Which loop construct in Java is best suited when the number of iterations is unknown?",
            "options": [
                "for loop",
                "while loop",
                "do-while loop",
                "none"
            ],
            "answer": "while loop",
            "explanation": "The while loop in Java is used when the number of iterations is unknown or depends on a certain condition."
        },
        {
            "question": "What is the key difference between a while loop and a do-while loop in Java?",
            "options": [
                "The syntax used to define the loop",
                "The number of iterations performed",
                "The condition check timing",
                "The ability to use the break statement"
            ],
            "answer": "The condition check timing",
            "explanation": "The key difference between a while loop and a do-while loop in Java is the timing of the condition check. In a while loop, the condition is checked before the loop body is executed, whereas in a do-while loop, the condition is checked after the loop body is executed."
        },
        {
            "question": "Which loop construct guarantees that the loop body is executed at least once?",
            "options": [
                "for loop",
                "while loop",
                "do-while loop",
                "continue statement"
            ],
            "answer": "do-while loop",
            "explanation": "The do-while loop in Java guarantees that the loop body is executed at least once, as the condition is checked after the loop body is executed."
        },
        {
            "question": "What is an infinite loop?",
            "options": [
                "A loop that executes only once",
                "A loop that never terminates naturally",
                "A loop that contains an unreachable code block",
                "A loop that uses the continue statement"
            ],
            "answer": "A loop that never terminates naturally",
            "explanation": "An infinite loop in Java is a loop that never terminates naturally unless interrupted externally or using a break statement."
        },
        {
            "question": "Which statement is used to exit a loop prematurely?",
            "options": [
                "return statement",
                "continue statement",
                "break statement",
                "exit statement"
            ],
            "answer": "break statement",
            "explanation": "The break statement in Java is used to exit a loop prematurely and continue with the execution of the code outside the loop."
        },
        {
            "question": "Which loop construct is best suited for iterating over an array or a collection?",
            "options": [
                "for loop",
                "while loop",
                "do-while loop",
                "continue statement"
            ],
            "answer": "for loop",
            "explanation": "The for loop in Java is best suited for iterating over an array or a collection, as it provides a convenient way to control the iteration using an index or an iterator."
        },
        {
            "question": "Which type of loop is best known for its boolean condition that controls entry to the loop?",
            "options": [
                "do-while loop",
                "for (traditional)",
                "for-each",
                "while"
            ],
            "answer": "while",
            "explanation": "A while loop has a condition that returns a boolean that controls the loop."
        },
        {
            "question": "Which type of loop is best known for using an index or counter?",
            "options": [
                "do-while loop",
                "for (traditional)",
                "for-each",
                "while"
            ],
            "answer": "for (traditional)",
            "explanation": "A traditional for loop is best known for having a loop variable counting up or down as the loop progresses. Therefore, Option B is correct."
        },
        {
            "question": "Which of the following can loop through an array without referring to the elements by index?",
            "options": [
                "do-while loop",
                "for (traditional)",
                "for-each",
                "while"
            ],
            "answer": "for-each",
            "explanation": "While a traditional for loop often loop through an array, it uses an index to do so, making Option B incorrect.The for-each loop goes through each element, storing it in a variable. Option C is correct."
        },
        {
            "question": "If you want to skip to the next iteration without exiting the loop, which keyword would you use?",
            "options": [
                "continue",
                "break",
                "pass",
                "next"
            ],
            "answer": "continue",
            "explanation": "The continue statement skips the current iteration and jumps to the next one."
        },
        {
            "question": "In an enhanced for loop, is it possible to modify the current element?",
            "options": [
                "Yes",
                "No",
                "Only if it’s an array",
                "Only if it’s a collection"
            ],
            "answer": "No",
            "explanation": "The enhanced for loop provides a read-only view, making element modification directly not possible."
        },
        {
            "question": "Can a loop be nested inside another loop in Java?",
            "options": [
                "No",
                "Yes, but only a for loop inside a while loop",
                "Yes, any loop can be nested inside any other loop",
                "Yes, but only up to 2 levels deep"
            ],
            "answer": "Yes, any loop can be nested inside any other loop",
            "explanation": "Java supports the nesting of any loop within another, facilitating complex iteration patterns."
        },
        {
            "question": "Which of the following best describes an array in Java?",
            "options": [
                "An array is a data structure that can store multiple values of different data types sequentially.",
                "An array is a method in the Java standard library used to manipulate data.",
                "An array is a data structure that can store multiple values of the same data type sequentially.",
                "An array is a keyword in Java used for conditional checks."
            ],
            "answer": "An array is a data structure that can store multiple values of the same data type sequentially.",
            "explanation": "In Java, an array is a homogenous data structure that can store a fixed-size sequential collection of elements of the same type. The size of an array must be specified by an int value and not long or short."
        },
        {
            "question": "How do you declare an array of integers in Java?",
            "options": [
                "int array[]",
                "array int[]",
                "int[] array",
                "array[] int"
            ],
            "answer": "h a) int array[] and c) int[] array are correct.",
            "explanation": "In Java, you can declare an array in multiple ways. Both mentioned choices are commonly accepted methods."
        },
        {
            "question": "Which of the following initializes an array of size 5 with default integer values?",
            "options": [
                "int[] arr = new int[];",
                "int[] arr = new int[5];",
                "int arr[5];",
                "int arr[] = {5};"
            ],
            "answer": "int[] arr = new int[5];",
            "explanation": "This will initialize an array of size 5 with default values (0 for integers)."
        },
        {
            "question": "What will be the default value of array elements if the array is of type float?",
            "options": [
                "0",
                "null",
                "0.0",
                "Not defined"
            ],
            "answer": "0.0",
            "explanation": "For float arrays, the default values are 0.0."
        },
        {
            "question": "What does the length attribute of an array represent in Java?",
            "options": [
                "Width of the array",
                "Memory size of the array",
                "Number of elements the array can store",
                "Total capacity allocated for the array"
            ],
            "answer": "Number of elements the array can store",
            "explanation": "The length attribute represents the number of elements in the array."
        },
        {
            "question": "Which of the following is true about arrays in Java?",
            "options": [
                "Arrays are always dynamic",
                "Arrays can store different types of data",
                "The size of arrays can be changed after initialization",
                "Arrays are objects in Java"
            ],
            "answer": "Arrays are objects in Java",
            "explanation": "In Java, arrays are objects. They are not dynamic (their size is fixed after initialization), and they store only one type of data (e.g., only integers, or only strings)."
        },
        {
            "question": "How can you access the fifth element in an array named ‘data’?",
            "options": [
                "data(4)",
                "data(5)",
                "data[5]",
                "data[4]"
            ],
            "answer": "data[4]",
            "explanation": "Arrays are zero-indexed, so the fifth element is accessed with index 4."
        },
        {
            "question": "What exception will be thrown if you try to access an array element beyond its size?",
            "options": [
                "ArraySizeException",
                "ArrayIndexOutOfBoundsException",
                "IndexOutOfBoundException",
                "SizeExceededException"
            ],
            "answer": "ArrayIndexOutOfBoundsException",
            "explanation": "If you try to access an array element that doesn’t exist, Java will throw this exception."
        },
        {
            "question": "Which method is used to clone an array in Java?",
            "options": [
                "copy()",
                "clone()",
                "duplicate()",
                "replicate()"
            ],
            "answer": "clone()",
            "explanation": "The clone() method is used to create and return a copy of the array."
        },
        {
            "question": "What is the initial value of an array of booleans in Java?",
            "options": [
                "true",
                "false",
                "0",
                "null"
            ],
            "answer": "false",
            "explanation": "The default value for a boolean array in Java is false."
        },
        {
            "question": "How do you create a two-dimensional array with 3 rows and 4 columns?",
            "options": [
                "int[][] arr = new int[3][4];",
                "int[][] arr = new int[4][3];",
                "int[3][4] arr;",
                "int[4][3] arr;"
            ],
            "answer": "int[][] arr = new int[3][4];",
            "explanation": "In Java, multi-dimensional arrays are essentially “arrays of arrays”. The first dimension specifies the number of rows and the second dimension specifies the number of columns."
        },
        {
            "question": "How can you initialize an array with the values 1, 2, and 3?",
            "options": [
                "int[] arr = int[1, 2, 3];",
                "int[] arr = {1, 2, 3};",
                "int arr[] = (1, 2, 3);",
                "int[] arr = new {1, 2, 3};"
            ],
            "answer": "int[] arr = {1, 2, 3};",
            "explanation": "This is the standard way to declare and initialize an array with values in Java."
        },
        {
            "question": "What is the index range for the elements of an array in Java?",
            "options": [
                "0 to length – 1",
                "1 to length",
                "-1 to length – 1",
                "0 to length"
            ],
            "answer": "0 to length – 1",
            "explanation": "The index range for the elements of an array in Java is 0 to length – 1, where length is the number of elements in the array."
        },
        {
            "question": "Which Java package contains classes and interfaces for multithreading?",
            "options": [
                "java.util",
                "java.lang",
                "java.multi",
                "java.thread"
            ],
            "answer": "java.lang",
            "explanation": "The java.lang package provides classes and interfaces for multithreading, including Thread and Runnable."
        },
        {
            "question": "Which method is used to start the execution of a thread?",
            "options": [
                "run()",
                "execute()",
                "begin()",
                "start()"
            ],
            "answer": "start()",
            "explanation": "The start() method of the Thread class is used to start the execution of a thread."
        },
        {
            "question": "How many threads can be executed at a time in a Java program?",
            "options": [
                "Only one",
                "At least one",
                "At least two",
                "Multiple"
            ],
            "answer": "Multiple",
            "explanation": "A Java program can execute multiple threads concurrently."
        },
        {
            "question": "Which of the following is not a thread state in Java?",
            "options": [
                "Running",
                "Ready",
                "Sleeping",
                "Deleted"
            ],
            "answer": "Deleted",
            "explanation": "“Deleted” is not a state of a thread in Java."
        },
        {
            "question": "Which method moves a thread from the running state to the runnable state?",
            "options": [
                "wait()",
                "notify()",
                "sleep()",
                "yield()"
            ],
            "answer": "yield()",
            "explanation": "The yield() method moves the currently running thread back to the runnable state, allowing other threads to execute."
        },
        {
            "question": "Which class or interface defines the wait(), notify(), and notifyAll() methods in Java?",
            "options": [
                "Thread",
                "Runnable",
                "Object",
                "Executor"
            ],
            "answer": "Object",
            "explanation": "The methods wait(), notify(), and notifyAll() are defined in the Object class, and every object in Java inherits them."
        },
        {
            "question": "When a thread calls the join() method on another thread, what happens?",
            "options": [
                "The current thread gets terminated.",
                "The current thread waits for the other thread to finish.",
                "The other thread waits for the current thread to finish.",
                "The current thread immediately starts the other thread."
            ],
            "answer": "The current thread waits for the other thread to finish.",
            "explanation": "The join() method lets one thread wait for the completion of another thread."
        },
        {
            "question": "What is the primary purpose of the synchronized keyword in Java?",
            "options": [
                "To speed up thread execution",
                "To ensure methods run in parallel",
                "To prevent method interruption",
                "To prevent concurrent access to critical sections of code"
            ],
            "answer": "To prevent concurrent access to critical sections of code",
            "explanation": "The synchronized keyword ensures that only one thread can access the synchronized method or block at a given point in time, providing a mechanism to prevent race conditions."
        },
        {
            "question": "Which method must be provided when a class implements the Runnable interface for threads?",
            "options": [
                "run()",
                "start()",
                "execute()",
                "go()"
            ],
            "answer": "run()",
            "explanation": "The Runnable interface mandates the definition of the run() method. This method contains the code that constitutes the new thread."
        },
        {
            "question": "In the lifecycle of a thread, which state represents a thread that has terminated its lifecycle?",
            "options": [
                "New",
                "Runnable",
                "Waiting",
                "Terminated"
            ],
            "answer": "Terminated",
            "explanation": "The “Terminated” state indicates that a thread has completed its execution and has terminated its lifecycle."
        },
        {
            "question": "What is multithreading in Java?",
            "options": [
                "A programming language for concurrent execution.",
                "A technique to execute multiple programs simultaneously.",
                "A concept of executing multiple threads concurrently within a single program.",
                "A method for parallel processing of data."
            ],
            "answer": "A concept of executing multiple threads concurrently within a single program.",
            "explanation": "Multithreading refers to the ability of a program to execute multiple threads concurrently within a single process."
        },
        {
            "question": "What is a thread in Java?",
            "options": [
                "A lightweight process that executes a sequence of instructions.",
                "A memory allocation unit in Java.",
                "A Java keyword to define a loop construct.",
                "A data structure to store multiple values."
            ],
            "answer": "A lightweight process that executes a sequence of instructions.",
            "explanation": "A thread in Java is a lightweight, independent unit of execution that runs a sequence of instructions."
        },
        {
            "question": "Which class is used to create a thread in Java?",
            "options": [
                "Thread",
                "Runnable",
                "Process",
                "Executor"
            ],
            "answer": "Thread",
            "explanation": "The Thread class is used to create and control threads in Java."
        },
        {
            "question": "How can synchronization be achieved in Java threads?",
            "options": [
                "Using the synchronized keyword.",
                "Using the volatile keyword.",
                "Using the final keyword.",
                "Using the static keyword."
            ],
            "answer": "Using the synchronized keyword.",
            "explanation": "Synchronization in Java threads can be achieved by using the synchronized keyword to protect critical sections of code from concurrent access."
        },
        {
            "question": "What is the main advantage of multithreading in Java?",
            "options": [
                "Improved program performance.",
                "Simplified program structure.",
                "Reduced memory usage.",
                "Elimination of runtime errors."
            ],
            "answer": "Improved program performance.",
            "explanation": "One of the main advantages of Multithreading in Java is improved program performance by utilizing available CPU cores and concurrently executing tasks."
        },
        {
            "question": "How to create a new String object in Java?",
            "options": [
                "new String();",
                "String.new();",
                "String{};",
                "new Object(String);"
            ],
            "answer": "new String();",
            "explanation": "The new String(); syntax is used to create a new String object in Java."
        },
        {
            "question": "What is the output of “Java” == “Java” in Java?",
            "options": [
                "true",
                "false",
                "Compilation error",
                "Runtime error"
            ],
            "answer": "true",
            "explanation": "Both string literals point to the same object in the string pool, so == will return true."
        },
        {
            "question": "What does the charAt() method do?",
            "options": [
                "Returns the character at a specific index",
                "Changes the character at a specific index",
                "Removes the character at a specific index",
                "None of the above"
            ],
            "answer": "Returns the character at a specific index",
            "explanation": "The charAt(int index) method returns the character at the specified index in the string."
        },
        {
            "question": "What is the result of statement: String str = null;?",
            "options": [
                "Creates a new String with no characters",
                "Creates a String pointing to “null”",
                "Does not create any String",
                "Creates an empty String"
            ],
            "answer": "Does not create any String",
            "explanation": "Declaring a String variable as null means it does not point to any memory location for an object."
        },
        {
            "question": "How to convert a string to upper case in Java?",
            "options": [
                "toUpperCase()",
                "upperCase()",
                "toUppercase()",
                "Uppercase()"
            ],
            "answer": "toUpperCase()",
            "explanation": "The toUpperCase() method converts all the characters in a given string to upper case."
        },
        {
            "question": "What does the length() method return?",
            "options": [
                "ASCII value of first character",
                "Number of characters",
                "A new String",
                "None of the above"
            ],
            "answer": "Number of characters",
            "explanation": "The length() method returns the number of characters in a string."
        },
        {
            "question": "Which method is used to check the equality of the content of two strings in Java?",
            "options": [
                "==",
                "compareTo()",
                "equals()",
                "equalStrings()"
            ],
            "answer": "equals()",
            "explanation": "The equals() method is used to check if two strings have the same content. The == operator checks for reference equality, compareTo() is used for lexicographical comparison, and there is no built-in method named equalStrings() in Java."
        },
        {
            "question": "What is the result of “Java”.concat(“Script”)?",
            "options": [
                "Java Script",
                "JavaScript",
                "JavaconcatScript",
                "A compilation error"
            ],
            "answer": "JavaScript",
            "explanation": "The concat method appends the specified string to the end of another string."
        },
        {
            "question": "Which method replaces a character in a string?",
            "options": [
                "replace()",
                "replaceChar()",
                "setChar()",
                "changeChar()"
            ],
            "answer": "replace()",
            "explanation": "The replace() method replaces a character or a sequence of characters in a string."
        },
        {
            "question": "Which method removes whitespace from the beginning and end of a string?",
            "options": [
                "trim()",
                "strip()",
                "clean()",
                "chop()"
            ],
            "answer": "trim()",
            "explanation": "The trim() method removes whitespace from both the beginning and the end of the string."
        },
        {
            "question": "Is the String class in Java thread-safe?",
            "options": [
                "Yes",
                "No",
                "Only when synchronized",
                "Depends on the method being called"
            ],
            "answer": "Yes",
            "explanation": "Strings in Java are immutable, which means once a String object is created, its value cannot be modified. This inherent immutability makes them thread-safe, as multiple threads cannot change their value simultaneously."
        },
        {
            "question": "What is the String Constant Pool in Java?",
            "options": [
                "A pool where all string methods are stored",
                "A special area of the heap memory where string literals are stored and reused",
                "A memory space where string objects are stored temporarily",
                "A section of the Java library dedicated to string operations"
            ],
            "answer": "A special area of the heap memory where string literals are stored and reused",
            "explanation": "The String Constant Pool is a specific area in the heap memory where Java stores string literals. The primary purpose of this is to save memory by reusing existing strings."
        },
        {
            "question": "When does a string get added to the String Constant Pool?",
            "options": [
                "Whenever the new keyword is used",
                "Whenever a string is modified using string methods",
                "When a string literal is defined in the code",
                "Whenever a string is passed as an argument to a method"
            ],
            "answer": "When a string literal is defined in the code",
            "explanation": "String literals automatically get a spot in the String Constant Pool. Using the new keyword, on the other hand, ensures that the string object is created in the heap memory outside of this pool."
        },
        {
            "question": "How can you ensure that a string created using the new keyword gets placed in the String Constant Pool?",
            "options": [
                "By appending another string to it",
                "By using the intern() method of the String class",
                "By converting it to a string literal",
                "By calling the toString() method on it"
            ],
            "answer": "By using the intern() method of the String class",
            "explanation": "The intern() method ensures that the string is placed in the String Constant Pool. If a string with the same content already exists there, it returns the reference to that string; otherwise, it places the string in the pool and returns its reference."
        },
        {
            "question": "Why does Java utilize a String Constant Pool?",
            "options": [
                "To increase the complexity of string operations",
                "To ensure that each string object has a unique memory address",
                "To save memory by avoiding the storage of duplicate string values",
                "To improve the speed of string concatenation operations"
            ],
            "answer": "To save memory by avoiding the storage of duplicate string values",
            "explanation": "The primary reason for the existence of the String Constant Pool is memory optimization. By reusing references for string literals with the same value, Java ensures that memory is used efficiently."
        },
        {
            "question": "Which of the following is a valid variable declaration in Java?",
            "options": [
                "int 1variable;",
                "float myFloat = 5.6;",
                "char ‘a’;",
                "string name = “John”;"
            ],
            "answer": "float myFloat = 5.6;",
            "explanation": "In Java, variable names cannot begin with numbers (option a), cannot have single quotes (option c), and type names are case-sensitive, meaning string is incorrect, it should be String (option d)."
        },
        {
            "question": "Which data type is used to store a single character in Java?",
            "options": [
                "char",
                "String",
                "int",
                "single"
            ],
            "answer": "char",
            "explanation": "In Java, the char data type is used to store a single character."
        },
        {
            "question": "How many bytes does an int data type occupy in Java?",
            "options": [
                "1",
                "2",
                "4",
                "8"
            ],
            "answer": "4",
            "explanation": "In Java, an int data type occupies 4 bytes."
        },
        {
            "question": "Which of the following is the correct way to declare multiple variables of the same type?",
            "options": [
                "int a; int b; int c;",
                "int a, b, c;",
                "int a, b = 5, c;",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "All the given options are valid ways to declare multiple variables in Java."
        },
        {
            "question": "Which keyword in Java is used for constant variables?",
            "options": [
                "const",
                "static",
                "constant",
                "final"
            ],
            "answer": "final",
            "explanation": "In Java, the final keyword is used to declare constant variables."
        },
        {
            "question": "What will be the default value of an int variable if not initialized in a class?",
            "options": [
                "null",
                "0",
                "NaN",
                "-1"
            ],
            "answer": "0",
            "explanation": "If an int variable is a member of a class and is not initialized, its default value is 0."
        },
        {
            "question": "Which of the following is a valid variable name in Java?",
            "options": [
                "-myVar",
                "3times",
                "my_var",
                "float"
            ],
            "answer": "my_var",
            "explanation": "Variable names in Java can contain letters, digits, underscores, and dollar signs. They cannot start with a digit or contain Java-reserved words like float."
        },
        {
            "question": "The boolean data type in Java can have values:",
            "options": [
                "1 and 0",
                "true and false",
                "Yes and no",
                "Any integer value"
            ],
            "answer": "true and false",
            "explanation": "The boolean data type in Java can only have the values true or false."
        },
        {
            "question": "Which data type can be used to store large decimal numbers in Java?",
            "options": [
                "int",
                "float",
                "double",
                "char"
            ],
            "answer": "double",
            "explanation": "The double data type is used to store large decimal numbers in Java."
        },
        {
            "question": "What is the use of Variables in Java?",
            "options": [
                "Controlling the flow of the program",
                "Storing data values",
                "Generating random numbers",
                "Handling user inputs"
            ],
            "answer": "Storing data values",
            "explanation": "Variables in Java are containers for storing data values, allowing the program to manipulate or access these values."
        },
        {
            "question": "Which data type is used to store text value in Java?",
            "options": [
                "char",
                "String",
                "int",
                "boolean"
            ],
            "answer": "String",
            "explanation": "The 'String' data type in Java is used to store text values, which are enclosed in double quotes."
        },
        {
            "question": "What is the purpose of the 'final' keyword in variable declarations in Java?",
            "options": [
                "To make the variable global",
                "To make the variable immutable",
                "To optimize memory usage",
                "To declare a variable without a value"
            ],
            "answer": "To make the variable immutable",
            "explanation": "The 'final' keyword in Java is used to declare a variable as constant or unchangeable, making it read-only after its initial assignment."
        },
        {
            "question": "What type of variable in Java is best suited for storing large whole numbers?",
            "options": [
                "int",
                "float",
                "long",
                "double"
            ],
            "answer": "long",
            "explanation": "The 'long' data type in Java is used for storing large whole numbers, which are bigger than what 'int' can store."
        },
        {
            "question": "In Java, what is the default value of a boolean variable?",
            "options": [
                "0",
                "false",
                "null",
                "true"
            ],
            "answer": "false",
            "explanation": "The default value of a boolean variable in Java is 'false' if it is not explicitly initialized."
        },
        {
            "question": "What happens when you assign a new value to an existing variable in Java?",
            "options": [
                "The variable gets duplicated",
                "An error occurs",
                "The original value is overwritten",
                "The variable becomes undefined"
            ],
            "answer": "The original value is overwritten",
            "explanation": "When a new value is assigned to an existing variable in Java, the original value is overwritten with the new one."
        },
        {
            "question": "What is the primary use of operators in Java?",
            "options": [
                "To define variables",
                "To create methods",
                "To perform operations on variables and values",
                "To declare classes"
            ],
            "answer": "To perform operations on variables and values",
            "explanation": "Operators in Java are used to perform various operations on variables and values, such as arithmetic, assignment, comparison, and logical operations&#8203;“【oaicite:12】“&#8203;."
        },
        {
            "question": "Which operator is used in Java for addition?",
            "options": [
                "*",
                "+",
                "/",
                "%"
            ],
            "answer": "+",
            "explanation": "The '+' operator is used for addition in Java, allowing the addition of two values, a variable and a value, or two variables&#8203;“【oaicite:11】“&#8203;."
        },
        {
            "question": "What does the '++' operator do in Java?",
            "options": [
                "Divides a value by two",
                "Subtracts one from a value",
                "Multiplies a value by two",
                "Increments a value by one"
            ],
            "answer": "Increments a value by one",
            "explanation": "The '++' operator is an arithmetic operator in Java that increments the value of a variable by one&#8203;“【oaicite:10】“&#8203;."
        },
        {
            "question": "What is the function of the assignment operator '=' in Java?",
            "options": [
                "Compares two values",
                "Assigns a value to a variable",
                "Adds two values",
                "Subtracts one value from another"
            ],
            "answer": "Assigns a value to a variable",
            "explanation": "The assignment operator '=' is used to assign a value to a variable in Java&#8203;“【oaicite:9】“&#8203;."
        },
        {
            "question": "What does the '!=' operator do in Java?",
            "options": [
                "Assigns a value",
                "Checks for equality",
                "Checks for inequality",
                "Divides two values"
            ],
            "answer": "Checks for inequality",
            "explanation": "The '!=' operator is a comparison operator that checks if two values are not equal&#8203;“【oaicite:8】“&#8203;."
        },
        {
            "question": "What is the result of using the '&&' logical operator in Java?",
            "options": [
                "Returns true if both statements are true",
                "Returns true if either statement is true",
                "Concatenates two strings",
                "Compares two values for equality"
            ],
            "answer": "Returns true if both statements are true",
            "explanation": "The '&&' operator is a logical AND operator, returning true if both the operands are true&#8203;“【oaicite:7】“&#8203;."
        },
        {
            "question": "Which operator returns the remainder of a division in Java?",
            "options": [
                "/",
                "%",
                "*",
                "+"
            ],
            "answer": "%",
            "explanation": "The '%' operator, known as the modulus operator, is used in Java to return the remainder of a division&#8203;“【oaicite:6】“&#8203;."
        },
        {
            "question": "How does the '+=' assignment operator function in Java?",
            "options": [
                "Divides and assigns the result",
                "Multiplies and assigns the result",
                "Adds to the variable and assigns the result",
                "Subtracts from the variable and assigns the result"
            ],
            "answer": "Adds to the variable and assigns the result",
            "explanation": "The '+=' operator adds a value to a variable and then assigns the result to that variable&#8203;“【oaicite:5】“&#8203;."
        },
        {
            "question": "What is the purpose of the '<' operator in Java?",
            "options": [
                "To check if a value is less than another",
                "To assign a smaller value",
                "To subtract one value from another",
                "To decrement a value"
            ],
            "answer": "To check if a value is less than another",
            "explanation": "The '<' operator is a comparison operator used to check if a value is less than another value&#8203;“【oaicite:4】“&#8203;."
        },
        {
            "question": "Which operator is used to reverse the result of a boolean expression in Java?",
            "options": [
                "&&",
                "||",
                "!",
                "=="
            ],
            "answer": "!",
            "explanation": "The '!' operator is a logical NOT operator, used to reverse the result of a boolean expression&#8203;“【oaicite:3】“&#8203;."
        },
        {
            "question": "What is the function of the '>>=' operator in Java?",
            "options": [
                "Left shift and assign",
                "Right shift and assign",
                "Bitwise OR and assign",
                "Bitwise AND and assign"
            ],
            "answer": "Right shift and assign",
            "explanation": "The '>>=' operator is an assignment operator that performs right bitwise shift on the variable and then assigns the result&#8203;“【oaicite:2】“&#8203;."
        },
        {
            "question": "What does the '==' operator check in Java?",
            "options": [
                "If two values are not equal",
                "If two values are equal",
                "The sum of two values",
                "The difference between two values"
            ],
            "answer": "If two values are equal",
            "explanation": "The '==' operator is a comparison operator used to check if two values are equal&#8203;“【oaicite:1】“&#8203;."
        },
        {
            "question": "Which operator is used for concatenating two strings in Java?",
            "options": [
                "+",
                "*",
                "^",
                "18"
            ],
            "answer": "+",
            "explanation": "In Java, the + operator is overloaded for string concatenation."
        },
        {
            "question": "What will be the result of the expression 3 + 6 * 2?",
            "options": [
                "15",
                "12",
                "21",
                "="
            ],
            "answer": "15",
            "explanation": "According to operator precedence, multiplication is evaluated before addition. Thus, 6 * 2 equals 12, and then 3 is added, resulting in 15."
        },
        {
            "question": "Which operator checks if two references point to the same object in memory?",
            "options": [
                "==",
                "equals",
                "===",
                "++x"
            ],
            "answer": "==",
            "explanation": "In Java, == checks if two references point to the same memory location. The equals method is used to check for value equality, and there is no === operator in Java."
        },
        {
            "question": "Which of the following is a postfix increment operator?",
            "options": [
                "x++",
                "x+",
                "+x",
                "+"
            ],
            "answer": "x++",
            "explanation": "x++ is the postfix increment operator. It increments the value of x after its current value is used."
        },
        {
            "question": "Which of the following operators is ternary?",
            "options": [
                ":",
                "? :",
                "/",
                "x % 2 = 0"
            ],
            "answer": "? :",
            "explanation": "The ternary operator is represented by ? : and is the only operator in Java that takes three operands."
        },
        {
            "question": "How can you check if a number x is even using operators?",
            "options": [
                "x / 2 = 0",
                "x – 2 = 0",
                "x * 2 = 0",
                "%"
            ],
            "answer": "x % 2 = 0",
            "explanation": "If a number is divisible by 2 with no remainder (x % 2), then it's an even number."
        },
        {
            "question": "Which of the following is a modulus operator in Java?",
            "options": [
                "/",
                "#",
                "@",
                "2"
            ],
            "answer": "%",
            "explanation": "The % operator returns the remainder of a division operation."
        },
        {
            "question": "What is the output of the following program?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "1",
            "explanation": "The % operator is used for finding the remainder of the division operation. In this case, 5 divided by 2 leaves a remainder of 1."
        },
        {
            "question": "Which keyword is used to manually throw an exception in Java?",
            "options": [
                "throw",
                "throws",
                "toss",
                "trigger"
            ],
            "answer": "throw",
            "explanation": "The throw keyword is used to manually throw an exception in Java."
        },
        {
            "question": "Which of the following is a superclass of all exception classes?",
            "options": [
                "RuntimeException",
                "Error",
                "Throwable",
                "Exception"
            ],
            "answer": "Throwable",
            "explanation": "The Throwable class is the superclass of all exception and error classes in Java."
        },
        {
            "question": "What does the finally block do?",
            "options": [
                "Catches exceptions",
                "Throws exceptions",
                "Executes code regardless of an exception occurrence",
                "Executes code only when an exception occurs"
            ],
            "answer": "Executes code regardless of an exception occurrence",
            "explanation": "The finally block is used to execute code regardless of whether an exception has occurred or not."
        },
        {
            "question": "Which of these is a checked exception in Java?",
            "options": [
                "ArithmeticException",
                "NullPointerException",
                "IOException",
                "IndexOutOfBoundsException"
            ],
            "answer": "IOException",
            "explanation": "IOException is a checked exception. Checked exceptions need to be either caught or declared using the throws keyword."
        },
        {
            "question": "How many catch blocks can a try block have?",
            "options": [
                "0",
                "1",
                "3",
                "As many as needed"
            ],
            "answer": "As many as needed",
            "explanation": "A try block can be followed by multiple catch blocks to handle different types of exceptions."
        },
        {
            "question": "What is the purpose of the throws keyword?",
            "options": [
                "To throw an exception manually",
                "To propagate an exception",
                "To catch an exception",
                "To define a new exception"
            ],
            "answer": "To propagate an exception",
            "explanation": "The throws keyword is used in the method signature to declare that the method might throw the specified exception, thus propagating it to the caller."
        },
        {
            "question": "Which of these is an unchecked exception?",
            "options": [
                "ClassNotFoundException",
                "InstantiationException",
                "ArrayIndexOutOfBoundsException",
                "InterruptedException"
            ],
            "answer": "ArrayIndexOutOfBoundsException",
            "explanation": "ArrayIndexOutOfBoundsException is an unchecked exception. Unchecked exceptions are subclasses of RuntimeException."
        },
        {
            "question": "Which block must be defined first, a catch block or a finally block?",
            "options": [
                "catch",
                "finally",
                "Either can be defined first",
                "Both must be defined together"
            ],
            "answer": "catch",
            "explanation": "If both catch and finally blocks are present, the catch block must come before the finally block."
        },
        {
            "question": "If a method does not handle a checked exception, what must the method do?",
            "options": [
                "Call another method",
                "Use the throw keyword",
                "Use the throws keyword in its signature",
                "Use a default exception handler"
            ],
            "answer": "Use the throws keyword in its signature",
            "explanation": "If a method does not handle a checked exception, it must declare it using the throws keyword."
        },
        {
            "question": "Which of these is not an exception-handling keyword in Java?",
            "options": [
                "try",
                "catch",
                "exit",
                "finally"
            ],
            "answer": "exit",
            "explanation": "exit is not an exception-handling keyword in Java. It is a method (System.exit()) used to exit the program."
        },
        {
            "question": "Which of the following is not a part of the Java Collections Framework?",
            "options": [
                "HashMap",
                "HashSet",
                "TreeMap",
                "HashTable"
            ],
            "answer": "HashTable",
            "explanation": "HashTable is part of the Java Collections API but not a part of the Collections Framework introduced in Java 2. It is considered a legacy class."
        },
        {
            "question": "What does the 'Set' interface primarily ensure?",
            "options": [
                "Duplicate elements",
                "Ordered collection of elements",
                "Elements are indexed",
                "No duplicate elements"
            ],
            "answer": "No duplicate elements",
            "explanation": "The Set interface models the mathematical set abstraction and ensures that no duplicate elements are stored."
        },
        {
            "question": "Which class is used for resizable-array implementation of the List interface?",
            "options": [
                "LinkedList",
                "Vector",
                "ArrayList",
                "ArrayDeque"
            ],
            "answer": "ArrayList",
            "explanation": "ArrayList is used as it provides a resizable-array, which means that the size of the list can be increased or decreased dynamically."
        },
        {
            "question": "Which of the following is true about the PriorityQueue class?",
            "options": [
                "It does not guarantee to sort the elements",
                "It orders elements in a FIFO (First-In-First-Out) manner",
                "It is used to process elements based on priority",
                "It allows duplicate elements"
            ],
            "answer": "It is used to process elements based on priority",
            "explanation": "PriorityQueue is a queue implementation that orders elements based on their natural ordering or by a Comparator provided at queue construction time."
        },
        {
            "question": "What is the primary difference between a HashSet and a LinkedHashSet?",
            "options": [
                "LinkedHashSet is not a part of the Java Collections Framework",
                "LinkedHashSet maintains insertion order",
                "HashSet allows duplicate elements",
                "LinkedHashSet is slower than HashSet"
            ],
            "answer": "LinkedHashSet maintains insertion order",
            "explanation": "LinkedHashSet extends HashSet, but it also maintains a doubly-linked list across all elements, ensuring that the order of insertion is maintained."
        },
        {
            "question": "What interface represents a last-in-first-out (LIFO) stack of objects?",
            "options": [
                "Queue",
                "Set",
                "List",
                "Deque"
            ],
            "answer": "Deque",
            "explanation": "Deque interface extends Queue and allows insertion and removal of elements at both ends, thus functioning as a LIFO stack."
        },
        {
            "question": "What does the 'Map' interface in Java not allow?",
            "options": [
                "Duplicate keys",
                "Null values",
                "Duplicate values",
                "Iterating"
            ],
            "answer": "Duplicate keys",
            "explanation": "A Map cannot contain duplicate keys; each key can map to at most one value."
        },
        {
            "question": "In a TreeMap, which of the following is true about the ordering of the elements?",
            "options": [
                "The elements are ordered by hashcode",
                "The elements are stored in insertion order",
                "The elements are ordered in descending order",
                "The elements are ordered using their natural ordering or by a comparator"
            ],
            "answer": "The elements are ordered using their natural ordering or by a comparator",
            "explanation": "TreeMap stores its elements in a red-black tree, which orders them based on their natural ordering or by a comparator provided at map creation time."
        },
        {
            "question": "Which of these methods deletes all the elements from a collection?",
            "options": [
                "clear()",
                "delete()",
                "removeAll()",
                "reset()"
            ],
            "answer": "clear()",
            "explanation": "The clear() method is used to delete all the elements of a collection, resetting its size to zero."
        },
        {
            "question": "Which interface forms the root of the collection hierarchy in Java?",
            "options": [
                "List",
                "Set",
                "Map",
                "Collection"
            ],
            "answer": "Collection",
            "explanation": "The Collection interface is the root of the collection hierarchy. List, Set, and Queue interfaces extend Collection."
        },
        {
            "question": "What will Collections.emptySet() return?",
            "options": [
                "A new set instance with no elements",
                "A null pointer",
                "An UnsupportedOperationException",
                "A singleton set with a default value"
            ],
            "answer": "A new set instance with no elements",
            "explanation": "Collections.emptySet() returns a special immutable empty set. No elements can be added to this set."
        },
        {
            "question": "Which class provides a resizable array and implements the List interface?",
            "options": [
                "LinkedList",
                "ArrayList",
                "HashSet",
                "HashMap"
            ],
            "answer": "ArrayList",
            "explanation": "ArrayList provides a resizable-array, which can be expanded or contracted dynamically."
        },
        {
            "question": "Which of the following is true about the hashCode() method?",
            "options": [
                "It returns a unique identifier for each object",
                "It is used in the indexing of collections",
                "It can never return the same value for two different objects",
                "It is not relevant to collection classes"
            ],
            "answer": "It is used in the indexing of collections",
            "explanation": "hashCode() is used by hash-based collections like HashSet, HashMap, etc., for efficiently locating objects."
        },
        {
            "question": "Which of these is a FIFO (first-in-first-out) data structure?",
            "options": [
                "Stack",
                "PriorityQueue",
                "LinkedList",
                "TreeMap"
            ],
            "answer": "LinkedList",
            "explanation": "LinkedList can be used as a queue which follows FIFO order."
        },
        {
            "question": "What is the initial capacity of a Vector class in Java Collections Framework?",
            "options": [
                "10",
                "16",
                "5",
                "0"
            ],
            "answer": "10",
            "explanation": "The default initial capacity of a Vector is 10. If no capacity is specified, it uses this default value."
        },
        {
            "question": "Which of these is synchronized?",
            "options": [
                "ArrayList",
                "HashMap",
                "Vector",
                "HashSet"
            ],
            "answer": "Vector",
            "explanation": "Vector is synchronized, meaning it is thread-safe. The others are not synchronized."
        },
        {
            "question": "Which method is used to retrieve but not remove the head of a Queue?",
            "options": [
                "poll()",
                "peek()",
                "remove()",
                "extract()"
            ],
            "answer": "peek()",
            "explanation": "peek() retrieves the head of the queue without removing it. If the queue is empty, it returns null."
        },
        {
            "question": "Which of the following collections classes allows the storage of many null values?",
            "options": [
                "TreeSet",
                "TreeMap",
                "HashSet",
                "HashMap"
            ],
            "answer": "HashSet",
            "explanation": "HashSet allows the storage of many null values. TreeSet and TreeMap do not allow null keys (and in the case of TreeSet, not even null values)."
        },
        {
            "question": "Which collection class is typically used to represent a 'LIFO' stack?",
            "options": [
                "PriorityQueue",
                "LinkedList",
                "ArrayDeque",
                "ArrayList"
            ],
            "answer": "ArrayDeque",
            "explanation": "ArrayDeque can be used as a stack and is more efficient than Stack class."
        },
        {
            "question": "In a HashMap, when a key-value pair is stored, the key object is used as a ________.",
            "options": [
                "value",
                "reference",
                "index",
                "hashcode"
            ],
            "answer": "hashcode",
            "explanation": "In HashMap, the key object's hashcode is used to find the bucket where the Entry object (which contains the key-value pair) will be stored."
        },
        {
            "question": "The Collections Framework was introduced in which version of Java?",
            "options": [
                "Java 1.2",
                "Java 1.0",
                "Java 1.4",
                "Java 1.5"
            ],
            "answer": "Java 1.2",
            "explanation": "The Collections Framework was a major addition in JDK 1.2."
        },
        {
            "question": "What will be the result of invoking remove(0) on an empty LinkedList object?",
            "options": [
                "NullPointerException",
                "IndexOutOfBoundsException",
                "UnsupportedOperationException",
                "The method will simply return without any exception"
            ],
            "answer": "IndexOutOfBoundsException",
            "explanation": "Attempting to remove an element from an empty list at any index will result in IndexOutOfBoundsException."
        },
        {
            "question": "Which of these interfaces extends the Collection interface?",
            "options": [
                "Map",
                "List",
                "Both Map and List",
                "Neither Map nor List"
            ],
            "answer": "List",
            "explanation": "The List interface extends Collection. Map is not a true Collection, and it does not extend Collection interface."
        },
        {
            "question": "Which class implements a bit vector that allows users to set or clear individual bits?",
            "options": [
                "BitSet",
                "EnumSet",
                "BitSetMap",
                "Vector"
            ],
            "answer": "BitSet",
            "explanation": "BitSet creates a special type of array that holds bit values and can increase in size as needed."
        },
        {
            "question": "Which method in the Collections class is synchronized?",
            "options": [
                "sort()",
                "min()",
                "synchronizedCollection()",
                "reverse()"
            ],
            "answer": "synchronizedCollection()",
            "explanation": "synchronizedCollection() is used to return a synchronized (thread-safe) collection backed by the specified collection."
        },
        {
            "question": "What is the behavior of the add() method in a Set collection?",
            "options": [
                "It adds the element if it is not already present in the set",
                "It adds the element and returns true",
                "It replaces the existing element if it is already present",
                "It throws an exception if the element is already present"
            ],
            "answer": "It adds the element if it is not already present in the set",
            "explanation": "In a Set, the add() method will add the element only if it is not already present in the set, ensuring no duplicates."
        },
        {
            "question": "What will happen if you try to sort a list that contains null elements?",
            "options": [
                "NullPointerException",
                "The list will be sorted and null will be treated as the lowest value",
                "The sort operation will ignore null values",
                "A runtime exception other than NullPointerException"
            ],
            "answer": "NullPointerException",
            "explanation": "Attempting to sort a list that contains null elements will result in a NullPointerException, as null cannot be compared with non-null elements."
        },
        {
            "question": "Which of these is not a part of the Collections Framework?",
            "options": [
                "Iterator",
                "Enumeration",
                "Series",
                "ListIterator"
            ],
            "answer": "Series",
            "explanation": "Series is not a part of the Java Collections Framework. Iterator, Enumeration, and ListIterator are all interfaces provided in the framework."
        },
        {
            "question": "What does the Iterator interface provide?",
            "options": [
                "A way to efficiently process elements in parallel",
                "The ability to navigate forward and backward through a collection",
                "The ability to add elements to a collection",
                "A way to iterate over the elements of a collection"
            ],
            "answer": "A way to iterate over the elements of a collection",
            "explanation": "The Iterator interface provides methods to iterate over the elements of a collection one at a time."
        },
        {
            "question": "Which interface is used to represent a sequence where duplicates are allowed?",
            "options": [
                "Set",
                "List",
                "Map",
                "Queue"
            ],
            "answer": "List",
            "explanation": "The List interface allows a sequence of elements where duplicates are allowed."
        },
        {
            "question": "What distinguishes a HashMap from a Hashtable in Java Collections?",
            "options": [
                "HashMap is synchronized, while Hashtable is not",
                "Hashtable does not allow null keys or values, while HashMap does",
                "HashMap maintains insertion order, while Hashtable does not",
                "Hashtable is faster than HashMap"
            ],
            "answer": "Hashtable does not allow null keys or values, while HashMap does",
            "explanation": "Hashtable is a legacy class and is synchronized; it does not allow any null key or null value. HashMap, part of the Java Collections Framework, allows one null key and multiple null values."
        },
        {
            "question": "Which method in the List interface inserts the specified element at the specified position?",
            "options": [
                "add(int index, E element)",
                "set(int index, E element)",
                "insert(int index, E element)",
                "push(int index, E element)"
            ],
            "answer": "add(int index, E element)",
            "explanation": "The add(int index, E element) method inserts the element at the specified position in the list."
        },
        {
            "question": "How does a ConcurrentHashMap differ from a HashMap?",
            "options": [
                "ConcurrentHashMap does not allow null keys or values",
                "ConcurrentHashMap allows one null key",
                "ConcurrentHashMap is not thread-safe",
                "All of the above"
            ],
            "answer": "ConcurrentHashMap does not allow null keys or values",
            "explanation": "ConcurrentHashMap class does not allow null keys or values."
        },
        {
            "question": "What is the default load factor of a HashMap in Java?",
            "options": [
                "0.75",
                "1.0",
                "0.5",
                "0.25"
            ],
            "answer": "0.75",
            "explanation": "The default load factor for a HashMap is 0.75, which offers a good trade-off between time and space costs."
        },
        {
            "question": "Which of the following methods is defined in the Collection interface?",
            "options": [
                "keySet()",
                "values()",
                "entrySet()",
                "add(E e)"
            ],
            "answer": "add(E e)",
            "explanation": "add(E e) is a method defined in the Collection interface, used to add an element to the collection."
        },
        {
            "question": "What will happen if two different HashMap keys have the same hashcode?",
            "options": [
                "The second key will replace the first",
                "HashMap will store both keys in the same bucket with different entries",
                "A runtime exception will be thrown",
                "The second key will be rejected"
            ],
            "answer": "HashMap will store both keys in the same bucket with different entries",
            "explanation": "If two keys have the same hashcode, they will be stored in the same bucket but as separate entries (this is called a collision)."
        },
        {
            "question": "Which of these is not a feature of the Java Collections Framework?",
            "options": [
                "Reduces programming effort",
                "Increases the performance of data structures",
                "Restricts the usage of generics",
                "Provides high-quality data structures"
            ],
            "answer": "Restricts the usage of generics",
            "explanation": "The Java Collections Framework fully supports generics, which enhances type safety and reduces the need for type casting."
        },
        {
            "question": "What is the primary difference between Comparable and Comparator interfaces?",
            "options": [
                "Comparable is used for sorting and Comparator is not",
                "Comparator can be written for any class, but Comparable affects the original class",
                "Comparator is used for collections only",
                "Comparable is faster than Comparator"
            ],
            "answer": "Comparator can be written for any class, but Comparable affects the original class",
            "explanation": "Comparable is implemented by a class to compare its instances, while Comparator is a separate class used to compare instances of different classes."
        },
        {
            "question": "Which collection class provides constant-time performance for basic operations?",
            "options": [
                "LinkedList",
                "TreeMap",
                "HashSet",
                "ArrayList"
            ],
            "answer": "HashSet",
            "explanation": "HashSet offers constant time performance for basic operations like add, remove, contains, and size, assuming the hash function disperses elements properly."
        },
        {
            "question": "What is the advantage of using a LinkedHashMap over a HashMap?",
            "options": [
                "Faster access and insertion",
                "Maintains insertion order",
                "Allows one null key and multiple null values",
                "Better for threading"
            ],
            "answer": "Maintains insertion order",
            "explanation": "LinkedHashMap maintains a doubly-linked list running through all its entries, thus maintaining the order of insertion."
        },
        {
            "question": "What exception is thrown when an object is not found in a collection?",
            "options": [
                "ObjectNotFoundException",
                "NoSuchElementException",
                "ElementNotFoundException",
                "CollectionException"
            ],
            "answer": "NoSuchElementException",
            "explanation": "NoSuchElementException is thrown by methods like nextElement() of Enumeration when no more elements exist."
        },
        {
            "question": "Which of these methods is not part of the Map interface?",
            "options": [
                "clear()",
                "remove(Object key)",
                "get(Object key)",
                "add(Object key, Object value)"
            ],
            "answer": "add(Object key, Object value)",
            "explanation": "The Map interface does not have an add() method; it uses put(Object key, Object value) to insert elements."
        },
        {
            "question": "What does Collections.synchronizedList(list) return?",
            "options": [
                "A synchronized list backed by the specified list",
                "A copy of the original list",
                "A new list with the same elements in reverse order",
                "A list where all operations are performed using the wait-notify mechanism"
            ],
            "answer": "A synchronized list backed by the specified list",
            "explanation": "Collections.synchronizedList(list) returns a synchronized (thread-safe) list backed by the specified list."
        },
        {
            "question": "What is the primary purpose of the WeakHashMap class?",
            "options": [
                "To store weak references to its keys",
                "To improve performance using weak hash codes",
                "To allow garbage collection of keys when there are no longer any references to them",
                "To use less memory compared to HashMap"
            ],
            "answer": "To allow garbage collection of keys when there are no longer any references to them",
            "explanation": "WeakHashMap is a hashtable-based implementation that stores only weak references to its keys, allowing keys to be garbage-collected if they are no longer referenced elsewhere."
        },
        {
            "question": "Which interface represents a queue that supports operations at both ends?",
            "options": [
                "Set",
                "List",
                "Deque",
                "Map"
            ],
            "answer": "Deque",
            "explanation": "Deque (double-ended queue) allows us to add or remove elements from both ends."
        },
        {
            "question": "How does a CopyOnWriteArrayList differ from a regular ArrayList?",
            "options": [
                "It is not resizable",
                "Every modification creates a fresh copy of the underlying array",
                "It allows concurrent modification without throwing ConcurrentModificationException",
                "Both b and c"
            ],
            "answer": "Both b and c",
            "explanation": "CopyOnWriteArrayList creates a new array upon modification, thus allowing concurrent iterations without throwing ConcurrentModificationException."
        },
        {
            "question": "What will Collections.unmodifiableList(list) return?",
            "options": [
                "A modifiable copy of the original list",
                "An unmodifiable view of the specified list",
                "A list that allows only addition of new elements",
                "A list that automatically sorts itself"
            ],
            "answer": "An unmodifiable view of the specified list",
            "explanation": "Collections.unmodifiableList(list) returns an unmodifiable view of the specified list, which means no changes can be made to the List through this view."
        },
        {
            "question": "Which of the following best describes the properties of a TreeMap?",
            "options": [
                "It does not allow null keys and orders the keys in natural order",
                "It allows one null key and does not order the keys",
                "It is not synchronized and is slow",
                "It allows multiple null keys"
            ],
            "answer": "It does not allow null keys and orders the keys in natural order",
            "explanation": "TreeMap does not allow null keys and maintains the keys in sorted order (natural order or using a comparator)."
        },
        {
            "question": "Which method would you use to obtain an array from a Collection?",
            "options": [
                "toArray()",
                "toList()",
                "toSet()",
                "toMap()"
            ],
            "answer": "toArray()",
            "explanation": "The toArray() method is used to obtain an array containing all of the elements in the collection."
        },
        {
            "question": "What is the behavior of the retainAll() method in the Collection interface?",
            "options": [
                "It removes all the elements from the collection",
                "It retains only those elements that are also in the specified collection",
                "It adds a collection of elements to the existing collection",
                "It compares two collections and returns true if they have the same elements"
            ],
            "answer": "It retains only those elements that are also in the specified collection",
            "explanation": "The retainAll() method is used to retain only the elements in the collection that are contained in the specified collection."
        },
        {
            "question": "How many primitive data types are there in Java?",
            "options": [
                "6",
                "8",
                "10",
                "12"
            ],
            "answer": "8",
            "explanation": "Java has eight primitive data types: byte, short, int, long, float, double, boolean, and char."
        },
        {
            "question": "What is the size of a 'byte' data type in Java?",
            "options": [
                "1 bit",
                "2 bytes",
                "1 byte",
                "4 bytes"
            ],
            "answer": "1 byte",
            "explanation": "The 'byte' data type in Java is 1 byte in size and stores whole numbers from -128 to 127."
        },
        {
            "question": "Which Java data type is used to store true or false values?",
            "options": [
                "char",
                "int",
                "boolean",
                "double"
            ],
            "answer": "boolean",
            "explanation": "The 'boolean' data type in Java is used to store true or false values."
        },
        {
            "question": "What is the size of the 'int' data type in Java?",
            "options": [
                "1 byte",
                "2 bytes",
                "4 bytes",
                "8 bytes"
            ],
            "answer": "4 bytes",
            "explanation": "The 'int' data type in Java has a size of 4 bytes and is used to store whole numbers."
        },
        {
            "question": "Which of these is not a primitive data type in Java?",
            "options": [
                "String",
                "float",
                "short",
                "byte"
            ],
            "answer": "String",
            "explanation": "'String' is a non-primitive data type in Java, whereas float, short, and byte are primitive data types."
        },
        {
            "question": "What is the range of the 'short' data type in Java?",
            "options": [
                "-128 to 127",
                "-32,768 to 32,767",
                "-2,147,483,648 to 2,147,483,647",
                "-9,223,372,036,854,775,808 to 9,223,372,036,854,775,807"
            ],
            "answer": "-32,768 to 32,767",
            "explanation": "The 'short' data type in Java can store whole numbers ranging from -32,768 to 32,767."
        },
        {
            "question": "What is the size of a 'char' data type in Java?",
            "options": [
                "1 byte",
                "2 bytes",
                "4 bytes",
                "8 bytes"
            ],
            "answer": "2 bytes",
            "explanation": "The 'char' data type in Java is 2 bytes in size and is used to store a single character or ASCII values."
        },
        {
            "question": "Which Java data type is used for storing large whole numbers?",
            "options": [
                "int",
                "long",
                "float",
                "double"
            ],
            "answer": "long",
            "explanation": "The 'long' data type in Java is used to store large whole numbers and has a range much larger than 'int'."
        },
        {
            "question": "What is the size of the 'double' data type in Java?",
            "options": [
                "2 bytes",
                "4 bytes",
                "6 bytes",
                "8 bytes"
            ],
            "answer": "8 bytes",
            "explanation": "The 'double' data type in Java is 8 bytes in size and is used to store fractional numbers with more precision."
        },
        {
            "question": "Which data type would you choose to store a letter 'A' in Java?",
            "options": [
                "String",
                "char",
                "int",
                "byte"
            ],
            "answer": "char",
            "explanation": "The 'char' data type is used in Java to store single characters like 'A'."
        },
        {
            "question": "How many decimal digits can a 'float' data type store approximately?",
            "options": [
                "6 to 7",
                "10 to 11",
                "15",
                "20"
            ],
            "answer": "6 to 7",
            "explanation": "The 'float' data type in Java can store approximately 6 to 7 decimal digits."
        },
        {
            "question": "What is the purpose of primitive data types in Java?",
            "options": [
                "To provide additional methods",
                "To specify the size and type of variable values",
                "To handle complex data structures",
                "To define user interfaces"
            ],
            "answer": "To specify the size and type of variable values",
            "explanation": "Primitive data types in Java specify the size and type of variable values and do not have additional methods."
        },
        {
            "question": "What is the return type of a method that does not return any value?",
            "options": [
                "null",
                "void",
                "0",
                "empty"
            ],
            "answer": "void",
            "explanation": "A method that doesn’t return any value has a return type of void."
        },
        {
            "question": "Which keyword is used to define a method in Java?",
            "options": [
                "method",
                "function",
                "void",
                "def"
            ],
            "answer": "void",
            "explanation": "In Java, methods can be defined using various return types, one of which is void (indicating no return value). Neither method, function, nor def is used for this purpose in Java."
        },
        {
            "question": "In Java, every method must be part of …?",
            "options": [
                "an object",
                "a class",
                "a package",
                "a project"
            ],
            "answer": "a class",
            "explanation": "In Java, every method must be part of a class."
        },
        {
            "question": "What are the variables defined in a method header called?",
            "options": [
                "arguments",
                "parameters",
                "values",
                "both a and b"
            ],
            "answer": "both a and b",
            "explanation": "The terms “arguments” and “parameters” can both refer to variables defined in a method header, though the context may differentiate their exact meanings."
        },
        {
            "question": "Which of these is NOT a valid method name in Java?",
            "options": [
                "myMethod",
                "_myMethod",
                "2myMethod",
                "myMethod2"
            ],
            "answer": "2myMethod",
            "explanation": "In Java, method names cannot begin with a number."
        },
        {
            "question": "If a method does not access instance variables, it can be declared as…?",
            "options": [
                "void",
                "public",
                "private",
                "static"
            ],
            "answer": "static",
            "explanation": "If a method does not access instance variables, it can be declared as static. This means the method belongs to the class, not any specific instance of the class."
        },
        {
            "question": "What does the method signature consist of?",
            "options": [
                "Method name only",
                "Method name and parameters",
                "Method name, parameters, and return type",
                "Method name and return type"
            ],
            "answer": "Method name and parameters",
            "explanation": "The method signature consists of the method name and its parameters. The return type is not considered a part of the method signature."
        },
        {
            "question": "Which of the following is not a purpose of methods in Java?",
            "options": [
                "Increase code reusability",
                "Provide a structured and organized approach",
                "Store data",
                "Break a complex problem into simpler ones"
            ],
            "answer": "Store data",
            "explanation": "Methods are used to perform operations and are not primarily designed for storing data. That’s what variables and data structures are for."
        },
        {
            "question": "When are method parameters evaluated?",
            "options": [
                "At compile time",
                "At runtime",
                "At load time",
                "After method completion"
            ],
            "answer": "At runtime",
            "explanation": "Method parameters are evaluated at runtime, which means when the method is called."
        },
        {
            "question": "Which of the following is a correct way to call a static method named calculate from a class named MathUtility?",
            "options": [
                "calculate.MathUtility()",
                "new MathUtility().calculate()",
                "MathUtility.calculate()",
                "calculate()"
            ],
            "answer": "MathUtility.calculate()",
            "explanation": "Static methods are called on the class itself, not on an instance of the class."
        },
        {
            "question": "What is method overloading in Java?",
            "options": [
                "Calling a method from another method.",
                "Renaming a method at runtime.",
                "Having multiple methods with the same name but different parameters in a class.",
                "Overriding a superclass method in a subclass."
            ],
            "answer": "Having multiple methods with the same name but different parameters in a class.",
            "explanation": "Method overloading allows a class to have multiple methods with the same name, differentiated by the number or type of their parameters."
        },
        {
            "question": "Which of the following is a correct definition of a class?",
            "options": [
                "An instance of an object",
                "A blueprint or prototype for creating objects",
                "A method in Java",
                "A package in Java"
            ],
            "answer": "A blueprint or prototype for creating objects",
            "explanation": "A class in Java is a blueprint or prototype from which individual objects are created."
        },
        {
            "question": "What is an object in Java?",
            "options": [
                "A reference to a class",
                "A runtime entity",
                "A method",
                "An attribute"
            ],
            "answer": "A runtime entity",
            "explanation": "An object is a runtime entity, or in other words, a real-world entity, which is created based on a class."
        },
        {
            "question": "Which keyword is used to create a new instance of a class?",
            "options": [
                "new",
                "this",
                "instance",
                "object"
            ],
            "answer": "new",
            "explanation": "The new keyword is used in Java to instantiate a new object of a class."
        },
        {
            "question": "What do we mean by the “state” of an object?",
            "options": [
                "Its behavior",
                "The values assigned to its instance variables",
                "Its methods",
                "Its interface"
            ],
            "answer": "The values assigned to its instance variables",
            "explanation": "The state of an object refers to the values assigned to its instance variables at any given moment."
        },
        {
            "question": "What are the main components of a class?",
            "options": [
                "Attributes and Packages",
                "Objects and References",
                "Methods and Attributes",
                "Constructors and Destructors"
            ],
            "answer": "Methods and Attributes",
            "explanation": "A class in Java mainly consists of attributes (variables) and methods (functions)."
        },
        {
            "question": "Which keyword is used to refer to the current instance of an object within a class?",
            "options": [
                "object",
                "this",
                "self",
                "class"
            ],
            "answer": "this",
            "explanation": "The this keyword in Java is used to refer to the current instance of an object within a class."
        },
        {
            "question": "Which of these best describes “Encapsulation”?",
            "options": [
                "Breaking a complex problem into simpler pieces",
                "Wrapping up of data and methods into a single unit",
                "Inheriting properties from a parent class",
                "Implementing multiple interfaces"
            ],
            "answer": "Wrapping up of data and methods into a single unit",
            "explanation": "Encapsulation refers to the OOP principle where data (attributes) and methods are wrapped up together into a single unit (i.e., a class)."
        },
        {
            "question": "Which of these is NOT an advantage of using classes and objects in Java?",
            "options": [
                "Improved performance",
                "Modular structure",
                "Reusability of code",
                "Easy to manage and control access"
            ],
            "answer": "Improved performance",
            "explanation": "While OOP principles make code more organized, modular, and reusable, they do not inherently improve performance."
        },
        {
            "question": "When a class inherits a property from another class, it is termed as…?",
            "options": [
                "Encapsulation",
                "Polymorphism",
                "Inheritance",
                "Instantiation"
            ],
            "answer": "Inheritance",
            "explanation": "Inheritance is an OOP principle where one class inherits properties and behaviors from another class."
        },
        {
            "question": "Can a class have multiple constructors?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "Yes",
            "explanation": "A class in Java can have multiple constructors, as long as they have different parameter lists. This is known as constructor overloading."
        },
        {
            "question": "What does abstraction in Java focus on?",
            "options": [
                "Implementation",
                "Visibility",
                "Essentials",
                "Specifics"
            ],
            "answer": "Essentials",
            "explanation": "Abstraction emphasizes showcasing only the essential features of an object while keeping its intricate details concealed."
        },
        {
            "question": "Which keyword is used to create an abstract class in Java?",
            "options": [
                "abstract",
                "encapsulate",
                "private",
                "Virtual"
            ],
            "answer": "abstract",
            "explanation": "The abstract keyword in Java is used to declare an abstract class."
        },
        {
            "question": "Which of these can an abstract class contain?",
            "options": [
                "Only concrete methods",
                "Only abstract methods",
                "Both abstract and concrete methods",
                "None of the above"
            ],
            "answer": "Both abstract and concrete methods",
            "explanation": "An abstract class can contain both abstract methods (without a body) and concrete methods (with a body)."
        },
        {
            "question": "What is the primary purpose of an interface in Java?",
            "options": [
                "To provide a concrete implementation of methods",
                "To define the signature of methods without implementing them",
                "To instantiate objects",
                "To replace abstract classes"
            ],
            "answer": "To define the signature of methods without implementing them",
            "explanation": "An interface in Java is used primarily to define the signature of methods without implementing them. It ensures a form of contract that the implementing classes need to follow."
        },
        {
            "question": "How many interfaces can a Java class implement?",
            "options": [
                "None",
                "One",
                "Two",
                "As many as required"
            ],
            "answer": "As many as required",
            "explanation": "In Java, a class can implement multiple interfaces, allowing for a type of multiple inheritance."
        },
        {
            "question": "Can you declare variables inside an interface?",
            "options": [
                "Yes, and they are implicitly public and static",
                "No, interfaces can only have methods",
                "Yes, but they must be private",
                "Only if they are final and static"
            ],
            "answer": "Yes, and they are implicitly public and static",
            "explanation": "Variables declared inside an interface are implicitly public, static, and final. They must be initialized."
        },
        {
            "question": "How can you achieve abstraction in Java?",
            "options": [
                "Only through abstract classes",
                "Only through interfaces",
                "Through both abstract classes and interfaces",
                "Through private methods"
            ],
            "answer": "Through both abstract classes and interfaces",
            "explanation": "Abstraction in Java can be achieved using both abstract classes and interfaces."
        },
        {
            "question": "In relation to abstraction, what does an abstract method represent?",
            "options": [
                "A method with a detailed implementation",
                "A method that is complete and cannot be overridden",
                "A method with no body, meant to be overridden in derived classes",
                "A method that cannot be used in an interface"
            ],
            "answer": "A method with no body, meant to be overridden in derived classes",
            "explanation": "An abstract method is a method that is declared without an implementation (without braces, and followed by a semicolon). Derived classes that extend an abstract class with abstract methods must provide an implementation for those methods."
        },
        {
            "question": "Can an abstract class in Java be instantiated directly?",
            "options": [
                "Yes",
                "No",
                "Yes",
                "No"
            ],
            "answer": "Yes",
            "explanation": "An abstract class cannot be instantiated directly. Its primary purpose is to be extended (subclassed) by other classes."
        },
        {
            "question": "Can an interface contain a constructor in Java?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "No",
            "explanation": "Interfaces in Java cannot contain constructors. Their purpose is to define method signatures without concrete implementations."
        },
        {
            "question": "Which of the following best describes the concept of encapsulation?",
            "options": [
                "Showing only essential features and hiding details",
                "Implementing multiple interfaces",
                "Inheriting properties from a base class",
                "Overloading methods"
            ],
            "answer": "Showing only essential features and hiding details",
            "explanation": "Encapsulation is about bundling data and methods that operate on that data within a single unit and restricting the direct access to some of the object’s components."
        },
        {
            "question": "How can you restrict access to the attributes of a class in Java?",
            "options": [
                "By declaring them as private",
                "By declaring them as public",
                "By not declaring any access modifier",
                "By declaring them as protected"
            ],
            "answer": "By declaring them as private",
            "explanation": "By declaring attributes as private, you ensure that they cannot be accessed directly from outside the class."
        },
        {
            "question": "In encapsulation, how can you access the private attributes of a class?",
            "options": [
                "Directly, by referencing the attribute name",
                "By using special keywords",
                "By using public methods provided by the class",
                "By declaring the attributes as static"
            ],
            "answer": "By using public methods provided by the class",
            "explanation": "In encapsulation, private attributes of a class can be accessed from outside the class using public methods, typically known as getters and setters."
        },
        {
            "question": "What is the primary role of a setter method?",
            "options": [
                "To retrieve the value of a private attribute",
                "To set or update the value of a private attribute",
                "To delete an attribute",
                "To display the class information"
            ],
            "answer": "To set or update the value of a private attribute",
            "explanation": "A setter method in Java is used to set or update the value of a private attribute."
        },
        {
            "question": "What is the main role of a getter method?",
            "options": [
                "To create a new attribute",
                "To retrieve the value of a private attribute",
                "To update an attribute’s value",
                "To remove the attribute’s value"
            ],
            "answer": "To retrieve the value of a private attribute",
            "explanation": "A getter method in Java is used to retrieve the value of a private attribute."
        },
        {
            "question": "Which of these is a primary advantage of encapsulation?",
            "options": [
                "Increases code complexity",
                "Enhances performance",
                "Code redundancy",
                "Improved control over data access and modification"
            ],
            "answer": "Improved control over data access and modification",
            "explanation": "One of the main benefits of encapsulation is that it provides better control over data access and modification, ensuring data integrity and security."
        },
        {
            "question": "In Java, which keyword is used to denote that a method or attribute belongs to the class itself and not to any particular instance?",
            "options": [
                "class",
                "private",
                "static",
                "public"
            ],
            "answer": "static",
            "explanation": "The static keyword in Java indicates that a particular method or attribute belongs to the class itself rather than any specific instance."
        },
        {
            "question": "If a class encapsulates data and methods into a single unit, what is it preventing?",
            "options": [
                "Code reusability",
                "Direct manipulation of its data",
                "Use of inheritance",
                "Implementation of interfaces"
            ],
            "answer": "Direct manipulation of its data",
            "explanation": "Encapsulation prevents unauthorized direct manipulation of the class’s data, ensuring that data can only be accessed or modified in well-defined ways."
        },
        {
            "question": "Which of the following encapsulation levels provides the widest accessibility in Java?",
            "options": [
                "private",
                "public",
                "protected",
                "default (no modifier)"
            ],
            "answer": "public",
            "explanation": "The public access level provides the widest accessibility, allowing the class, method, or attribute to be accessed from any other class."
        },
        {
            "question": "Which keyword is used to implement inheritance in Java?",
            "options": [
                "imports",
                "extends",
                "inherits",
                "uses"
            ],
            "answer": "extends",
            "explanation": "In Java, the extends keyword is used to declare inheritance, allowing a subclass to inherit properties and methods from a superclass."
        },
        {
            "question": "What is a superclass (or parent class)?",
            "options": [
                "The class that inherits from another class",
                "The class from which another class inherits",
                "An interface in Java",
                "A final class in Java"
            ],
            "answer": "The class from which another class inherits",
            "explanation": "A superclass (or parent class) provides the basis from which subclasses can inherit properties and methods."
        },
        {
            "question": "Which of the following concepts allows Java classes to inherit methods and properties from multiple classes?",
            "options": [
                "Multiple Inheritance",
                "Single Inheritance",
                "Polymorphism",
                "Encapsulation"
            ],
            "answer": "Multiple Inheritance",
            "explanation": "Multiple Inheritance allows a class to inherit properties and methods from multiple classes. However, Java doesn’t support multiple inheritance with classes but achieves it through interfaces."
        },
        {
            "question": "Which keyword in Java is used to access the superclass’s members (methods/variables)?",
            "options": [
                "super",
                "this",
                "extends",
                "parent"
            ],
            "answer": "super",
            "explanation": "The super keyword in Java is used to refer to the immediate parent class instance variable or method."
        },
        {
            "question": "Which method is called automatically when an object is created?",
            "options": [
                "init",
                "main",
                "new",
                "constructor"
            ],
            "answer": "constructor",
            "explanation": "A constructor is a special method that gets called automatically when an object is instantiated. It typically initializes the newly created object."
        },
        {
            "question": "In Java, if a class does not have any constructor, what will Java do?",
            "options": [
                "Display an error",
                "Provide a default constructor",
                "Create an empty class",
                "None of the above"
            ],
            "answer": "Provide a default constructor",
            "explanation": "If a class doesn’t have a constructor, Java automatically provides a default no-argument constructor."
        },
        {
            "question": "What will happen if a subclass provides a constructor explicitly and does not invoke the parent class constructor?",
            "options": [
                "The program will fail to compile",
                "The parent class constructor is called automatically",
                "The subclass constructor will override the parent constructor",
                "None of the above"
            ],
            "answer": "The parent class constructor is called automatically",
            "explanation": "Even if the subclass provides its constructor and doesn’t explicitly invoke the superclass’s constructor, Java automatically calls the no-argument constructor of the superclass."
        },
        {
            "question": "Which of these can be inherited from a superclass?",
            "options": [
                "Private methods",
                "Public methods",
                "Both private and public methods",
                "Only constructors"
            ],
            "answer": "Public methods",
            "explanation": "Only public and protected members (methods and variables) of a superclass are inherited by a subclass. Private members are not inherited."
        },
        {
            "question": "What is the purpose of inheritance in Java?",
            "options": [
                "To improve security",
                "To enhance the readability of the code",
                "To provide a clear interface",
                "To promote code reusability"
            ],
            "answer": "To promote code reusability",
            "explanation": "The primary purpose of inheritance is to promote code reusability. By allowing one class to inherit properties and methods from another, developers can avoid redundant code."
        },
        {
            "question": "Which of the following is false about inheritance in Java?",
            "options": [
                "A subclass can be a superclass for another class",
                "Inheritance supports the concept of hierarchical classification",
                "A class can only inherit from one superclass",
                "A subclass can override all the superclass methods"
            ],
            "answer": "A subclass can override all the superclass methods",
            "explanation": "While a subclass can override many superclass methods, it cannot override private superclass methods because private methods are not accessible in the subclass."
        },
        {
            "question": "What does the word ‘Polymorphism’ mean in Greek?",
            "options": [
                "Many forms",
                "Single form",
                "No form",
                "Final form"
            ],
            "answer": "Many forms",
            "explanation": "‘Polymorphism’ originates from the Greek words ‘poly’ (many) and ‘morph’ (form), literally translating to ‘many forms’."
        },
        {
            "question": "Which principle allows different classes to be treated as instances of the same class through inheritance?",
            "options": [
                "Encapsulation",
                "Abstraction",
                "Inheritance",
                "Polymorphism"
            ],
            "answer": "Polymorphism",
            "explanation": "Polymorphism allows objects of different classes to be treated as objects of a common superclass, enabling generic processing and diverse class behaviors."
        },
        {
            "question": "In Java, what allows us to implement runtime polymorphism?",
            "options": [
                "Method overloading",
                "Method overriding",
                "Constructors",
                "Static methods"
            ],
            "answer": "Method overriding",
            "explanation": "Runtime polymorphism or dynamic method dispatch is a process in which a call to an overridden method is resolved during runtime rather than at compile-time. This is achieved through method overriding."
        },
        {
            "question": "Which of these allows compile-time polymorphism?",
            "options": [
                "Method overloading",
                "Method overriding",
                "Both",
                "None of the above"
            ],
            "answer": "Method overloading",
            "explanation": "Compile-time polymorphism is achieved when we overload a method. The method call is resolved at compile time based on the method signature."
        },
        {
            "question": "Which statement is true regarding polymorphism?",
            "options": [
                "An overridden method can be less restrictive than the superclass method",
                "An overridden method can be more restrictive than the superclass method",
                "Overloaded methods cannot change the return type",
                "Constructors can be overridden"
            ],
            "answer": "An overridden method can be more restrictive than the superclass method",
            "explanation": "When overriding a method, the subclass method cannot have a more restrictive access modifier than the method in the parent class."
        },
        {
            "question": "Can we override static methods in Java?",
            "options": [
                "Yes",
                "No",
                "Sometimes",
                "Only in abstract classes"
            ],
            "answer": "No",
            "explanation": "Static methods are bound to a class, not an instance. Thus, they cannot be overridden for polymorphic behavior."
        },
        {
            "question": "In which scenario does Java NOT allow polymorphism?",
            "options": [
                "When overriding private methods",
                "When using method overloading",
                "When using interface methods",
                "When using abstract methods"
            ],
            "answer": "When overriding private methods",
            "explanation": "Private methods are confined to their class and are not visible in subclasses, so they cannot be overridden or partake in polymorphism."
        },
        {
            "question": "In polymorphism, a reference variable of the superclass can refer to the object of which classes?",
            "options": [
                "Only the superclass",
                "Only the subclass",
                "Any class",
                "The superclass or any of its subclasses"
            ],
            "answer": "The superclass or any of its subclasses",
            "explanation": "A reference variable of a superclass can refer to an object of the superclass itself or any of its subclasses."
        },
        {
            "question": "Which keyword is used to call the superclass method in the overridden method?",
            "options": [
                "this",
                "super",
                "extends",
                "instanceof"
            ],
            "answer": "super",
            "explanation": "The super keyword can be used in the subclass to call the method of the superclass, especially useful when overriding methods."
        },
        {
            "question": "What would be the output if you attempt to compile and run a class that has multiple methods with the same name but a different number of parameters?",
            "options": [
                "Compilation error",
                "Runtime error",
                "The method with the correct number of parameters will be executed",
                "All the methods will be executed sequentially"
            ],
            "answer": "The method with the correct number of parameters will be executed",
            "explanation": "This scenario describes method overloading. At compile time, Java uses the method signature to determine which method to call. At runtime, the JVM uses the method signature to determine the method to run."
        },
        {
            "question": "What primarily differentiates an interface from a class in Java?",
            "options": [
                "Ability to be instantiated",
                "Presence of instance variables",
                "Absence of method implementations",
                "All of the above"
            ],
            "answer": "Absence of method implementations.",
            "explanation": "Before Java 8, interfaces primarily contained method declarations without implementations. While d) seems correct, interfaces can have static final variables and with Java 8, they can have method implementations via default methods."
        },
        {
            "question": "Why are interfaces crucial in Java?",
            "options": [
                "For multi-threading",
                "For memory management",
                "For multiple inheritance",
                "For package management"
            ],
            "answer": "For multiple inheritance.",
            "explanation": "Interfaces enable Java classes to achieve a form of multiple inheritance by implementing multiple interfaces."
        },
        {
            "question": "What is the default access modifier of a method in an interface in Java?",
            "options": [
                "private",
                "protected",
                "public",
                "None of the above"
            ],
            "answer": "public.",
            "explanation": "Interface methods are public by default since the idea is for them to be implemented by other classes."
        },
        {
            "question": "Which of these is not allowed in an interface?",
            "options": [
                "Instance variables",
                "Static methods",
                "Default methods",
                "Abstract methods"
            ],
            "answer": "Instance variables.",
            "explanation": "Interfaces can have static final variables (constants) but not instance variables."
        },
        {
            "question": "Why were default methods introduced in Java 8 interfaces?",
            "options": [
                "To provide multiple inheritance",
                "To add utility functions",
                "To provide backward compatibility with older interface versions",
                "For better performance"
            ],
            "answer": "To provide backward compatibility with older interface versions.",
            "explanation": "Default methods allow developers to add new methods to interfaces with an implementation without affecting classes that already use this interface."
        },
        {
            "question": "Which keyword is used to implement an interface in a class?",
            "options": [
                "implements",
                "extends",
                "interface",
                "import"
            ],
            "answer": "mplements",
            "explanation": "In Java, the implements keyword is used by classes to adopt the contract specified by an interface."
        },
        {
            "question": "How many interfaces can a Java class implement?",
            "options": [
                "One",
                "Two",
                "Four",
                "Any number"
            ],
            "answer": "Any number",
            "explanation": "A Java class can implement any number of interfaces, which is how Java achieves a form of multiple inheritance."
        },
        {
            "question": "Starting from which Java version can an interface contain method implementations?",
            "options": [
                "Java 5",
                "Java 7",
                "Java 8",
                "Java 9"
            ],
            "answer": "Java 8",
            "explanation": "From Java 8 onwards, interfaces can have default and static method implementations."
        },
        {
            "question": "Can an interface extend another interface?",
            "options": [
                "Yes",
                "No",
                "Only if it provides default implementations",
                "Only before Java 8"
            ],
            "answer": "Yes",
            "explanation": "Interfaces can extend other interfaces, allowing for a hierarchical structure of abstract method declarations."
        },
        {
            "question": "Can a class extend an interface?",
            "options": [
                "Yes",
                "No",
                "Only abstract classes",
                "Only final classes"
            ],
            "answer": "No",
            "explanation": "Classes implement interfaces, they don’t extend them. Only interfaces can extend other interfaces."
        },
        {
            "question": "How can we achieve multiple inheritance in Java?",
            "options": [
                "Extending multiple classes",
                "Implementing multiple classes",
                "Extending multiple interfaces",
                "Implementing multiple interfaces"
            ],
            "answer": "Implementing multiple interfaces",
            "explanation": "Java doesn’t support multiple inheritance with classes. However, it can be achieved by implementing multiple interfaces in a single class."
        },
        {
            "question": "The “diamond problem” in programming refers to…",
            "options": [
                "Memory issues in OOP",
                "Multiple inheritance ambiguity",
                "Lack of abstraction",
                "Too many static methods"
            ],
            "answer": "Multiple inheritance ambiguity.",
            "explanation": "The diamond problem occurs when a class inherits from two classes that have a method with the same name, leading to ambiguity. Java avoids this problem by not supporting multiple inheritance of classes."
        },
        {
            "question": "Which of the following best describes an enum in Java?",
            "options": [
                "A special kind of interface",
                "A type of method",
                "A way to declare arrays",
                "A special class that represents a group of constants"
            ],
            "answer": "A special class that represents a group of constants",
            "explanation": "Enums are special classes in Java used to define collections of constants."
        },
        {
            "question": "How do you define an enum that represents days of the week?",
            "options": [
                "enum DAYS {MON, TUE, WED, THU, FRI, SAT, SUN}",
                "enum DAYS [MON, TUE, WED, THU, FRI, SAT, SUN]",
                "Days enum = {MON, TUE, WED, THU, FRI, SAT, SUN}",
                "enum DAYS"
            ],
            "answer": "enum DAYS {MON, TUE, WED, THU, FRI, SAT, SUN}",
            "explanation": "Enums are defined using the enum keyword followed by the enum name and constants enclosed in curly braces."
        },
        {
            "question": "Which method can be used to get the ordinal value of an enum constant?",
            "options": [
                "getValue()",
                "getOrdinal()",
                "getOrder()",
                "ordinal()"
            ],
            "answer": "ordinal()",
            "explanation": "The ordinal() method of an enum returns the ordinal value (position) of the enum constant, starting from 0."
        },
        {
            "question": "Can an enum have a constructor?",
            "options": [
                "Yes, and it can be public",
                "Yes, but it must always be private",
                "No, enums cannot have constructors",
                "Yes, but it must be protected"
            ],
            "answer": "Yes, but it must always be private",
            "explanation": "Enums can have constructors, but they are always private. This is to prevent the creation of new enum instances."
        },
        {
            "question": "Can you override the toString() method in an enum?",
            "options": [
                "Yes",
                "No",
                "Only in abstract enums",
                "Only if the enum has attributes"
            ],
            "answer": "Yes",
            "explanation": "Just like any other class in Java, you can override the toString() method in an enum to provide a custom string representation of the enum constant."
        },
        {
            "question": "Which method can be used to get an enum constant by its string name?",
            "options": [
                "Enum.valueOf()",
                "Enum.getByName()",
                "Enum.get()",
                "Enum.fromString()"
            ],
            "answer": "Enum.valueOf()",
            "explanation": "The static valueOf() method in the enum can be used to retrieve an enum constant by its string name."
        },
        {
            "question": "Can enums extend other classes in Java?",
            "options": [
                "Yes",
                "No",
                "Only abstract classes",
                "Only other enums"
            ],
            "answer": "No",
            "explanation": "Enums cannot extend other classes in Java because they implicitly extend the java.lang.Enum class. However, they can implement interfaces."
        },
        {
            "question": "What happens when you try to print an enum constant directly?",
            "options": [
                "It throws an error",
                "It prints the ordinal value",
                "It prints the name of the constant",
                "It prints the fully qualified class name of the enum constant"
            ],
            "answer": "It prints the name of the constant",
            "explanation": "The default toString() method in enums returns the name of the constant. So when you print an enum constant directly, it shows the constant’s name."
        },
        {
            "question": "Can an enum be declared inside a class?",
            "options": [
                "Yes, and it is always static",
                "No",
                "Only if the class is abstract",
                "Only in the main class"
            ],
            "answer": "Yes, and it is always static",
            "explanation": "An enum can be declared inside a class, and when it’s done this way, it’s implicitly static."
        },
        {
            "question": "Which of the following statements about enums is NOT correct?",
            "options": [
                "Enums can implement interfaces",
                "Enums can have attributes and methods",
                "Enums can be instantiated using the new keyword",
                "Enums can have constructors"
            ],
            "answer": "Enums can be instantiated using the new keyword",
            "explanation": "Enums cannot be instantiated using the new keyword. The constants defined in an enum are the only instances that can exist for that enum type."
        },
        {
            "question": "What is the purpose of an 'if' statement in Java?",
            "options": [
                "To define a new method",
                "To declare a variable",
                "To execute a block of code if a condition is true",
                "To iterate over a collection"
            ],
            "answer": "To execute a block of code if a condition is true",
            "explanation": "An 'if' statement in Java is used to specify a block of code that should be executed if a specified condition is true."
        },
        {
            "question": "How does Java compare two values for equality in an 'if' statement?",
            "options": [
                "=",
                "==",
                "===",
                "!="
            ],
            "answer": "==",
            "explanation": "In Java, '==' is used to compare two values for equality within an 'if' statement."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "Error",
                "Greater than 5",
                "No output",
                "5"
            ],
            "answer": "Greater than 5",
            "explanation": "Since x is 10, which is greater than 5, the code inside the 'if' statement will execute, printing \"Greater than 5\"."
        },
        {
            "question": "Which statement is used with 'if' to execute a block of code when the 'if' condition is false?",
            "options": [
                "else",
                "then",
                "elseif",
                "or"
            ],
            "answer": "else",
            "explanation": "The 'else' statement is used alongside 'if' to specify a block of code that should be executed if the 'if' condition is false."
        },
        {
            "question": "In an 'if' statement, what is the correct way to check if a variable 'a' is not equal to 10?",
            "options": [
                "if (a != 10)",
                "if (a == 10)",
                "if (a =! 10)",
                "if (a < > 10)"
            ],
            "answer": "if (a != 10)",
            "explanation": "The '!=' operator is used to check for inequality in an 'if' statement."
        },
        {
            "question": "How do you specify multiple conditions in an 'if' statement?",
            "options": [
                "Using multiple 'if' statements",
                "Using the '&&' operator",
                "Using the '||' operator",
                "Both b and c"
            ],
            "answer": "Both b and c",
            "explanation": "Multiple conditions in an 'if' statement can be specified using logical operators like '&&' (and) and '||' (or)."
        },
        {
            "question": "Which statement is used to specify a new condition to test if the 'if' condition is false?",
            "options": [
                "else",
                "else if",
                "then",
                "switch"
            ],
            "answer": "else if",
            "explanation": "The 'else if' statement is used to specify a new condition to be tested if the initial 'if' condition is false."
        },
        {
            "question": "What is the correct syntax for an 'if' statement in Java?",
            "options": [
                "if condition { }",
                "if (condition) { }",
                "if [condition] { }",
                "if <condition> { }"
            ],
            "answer": "if (condition) { }",
            "explanation": "The correct syntax for an 'if' statement in Java includes the condition within parentheses followed by a block of code enclosed in curly braces."
        },
        {
            "question": "What does the following code output?",
            "options": [
                "Good day.",
                "Good evening.",
                "No output",
                "Error"
            ],
            "answer": "Good evening.",
            "explanation": "Since the value of 'time' (20) is not less than 18, the 'else' block will execute, outputting \"Good evening.\"."
        },
        {
            "question": "If 'a' is 5, what will be the output of the following code?",
            "options": [
                "Ten",
                "Less than Ten",
                "More than Ten",
                "No output"
            ],
            "answer": "Less than Ten",
            "explanation": "Since 'a' is 5, which is less than 10, the 'else if' block will execute, printing \"Less than Ten\"."
        },
        {
            "question": "Which operator checks if two values are not equal in an 'if' statement?",
            "options": [
                "!=",
                "==",
                ">",
                "<"
            ],
            "answer": "!=",
            "explanation": "In an 'if' statement, the '!=' operator is used to check if two values are not equal."
        },
        {
            "question": "How is the 'else if' statement used in Java?",
            "options": [
                "To specify an alternate condition only if the 'if' condition is true",
                "To execute a block of code regardless of the 'if' condition",
                "To specify a new condition to test, if the first condition is false",
                "To repeat the 'if' condition"
            ],
            "answer": "To specify a new condition to test, if the first condition is false",
            "explanation": "The 'else if' statement is used to specify a new condition that will be tested if the initial 'if' condition evaluates to false."
        },
        {
            "question": "What is the main purpose of the switch statement in Java?",
            "options": [
                "To execute a specific block of code among many options based on a condition",
                "To iterate over a collection of elements",
                "To execute the same block of code multiple times",
                "To define a new method"
            ],
            "answer": "To execute a specific block of code among many options based on a condition",
            "explanation": "The switch statement is used to select one of many code blocks to be executed based on the evaluation of an expression."
        },
        {
            "question": "How is the expression in a switch statement evaluated?",
            "options": [
                "Multiple times, once for each case",
                "Only once at the start of the statement",
                "Each time a case is matched",
                "It is not evaluated; the cases are executed sequentially"
            ],
            "answer": "Only once at the start of the statement",
            "explanation": "The expression in a switch statement is evaluated once, and its value is compared against the values of each case."
        },
        {
            "question": "What is the role of the 'break' keyword in a switch statement?",
            "options": [
                "To pause the execution of the program",
                "To exit the switch block when a case is matched",
                "To break the program into multiple threads",
                "To continue execution to the next case"
            ],
            "answer": "To exit the switch block when a case is matched",
            "explanation": "The 'break' keyword is used to break out of the switch block, stopping the execution of more code and case testing inside the block."
        },
        {
            "question": "What does the 'default' keyword do in a switch statement?",
            "options": [
                "Sets the default value of the switch expression",
                "Executes a block of code if none of the cases are matched",
                "Acts as the first case to be evaluated",
                "Specifies the default action to be taken at the end of all cases"
            ],
            "answer": "Executes a block of code if none of the cases are matched",
            "explanation": "The 'default' keyword specifies some code to run if there is no case match in the switch statement."
        },
        {
            "question": "How does a switch statement compare the switch expression with case values?",
            "options": [
                "Using logical operators",
                "Using relational operators",
                "Using strict type comparison",
                "Using equality comparison"
            ],
            "answer": "Using equality comparison",
            "explanation": "In a switch statement, the value of the switch expression is compared using equality comparison with the values of each case."
        },
        {
            "question": "What happens if the 'break' keyword is omitted in a case of a switch statement?",
            "options": [
                "The program will crash",
                "The switch statement will execute all subsequent cases",
                "The matching case will not execute",
                "The default case will execute immediately"
            ],
            "answer": "The switch statement will execute all subsequent cases",
            "explanation": "If the 'break' keyword is omitted, the switch statement continues to execute the following cases until a break is encountered or the switch block ends."
        },
        {
            "question": "Is the 'default' case mandatory in a switch statement?",
            "options": [
                "Yes, it must always be included",
                "No, but it is recommended for comprehensive case handling",
                "Yes, but only if there are more than two cases",
                "No, it can be omitted if all possible cases are covered"
            ],
            "answer": "No, it can be omitted if all possible cases are covered",
            "explanation": "The 'default' case in a switch statement is not mandatory and can be omitted if all possible cases are explicitly handled."
        },
        {
            "question": "What is the correct syntax for a switch statement in Java?",
            "options": [
                "switch(expression) { case x: //code }",
                "switch x: { case(expression): //code }",
                "switch (expression) { when x: //code }",
                "switch { case(expression): //code }"
            ],
            "answer": "switch(expression) { case x: //code }",
            "explanation": "The correct syntax for a switch statement includes the keyword 'switch', followed by the expression in parentheses, and the case labels with the code blocks."
        },
        {
            "question": "In a switch statement, what type of values can the cases have?",
            "options": [
                "Only integer values",
                "Only string values",
                "Constant expressions",
                "Any data type"
            ],
            "answer": "Constant expressions",
            "explanation": "In a switch statement, each case label must be a constant expression, typically literals or final variables."
        },
        {
            "question": "Which of the following is a valid case label in a switch statement for an integer variable?",
            "options": [
                "case > 5:",
                "case \"5\":",
                "case 5:",
                "case x > 5:"
            ],
            "answer": "case 5:",
            "explanation": "In a switch statement for an integer variable, the case label must be a constant expression of an integer value, such as 'case 5:."
        },
        {
            "question": "Can a switch statement in Java be used with String variables?",
            "options": [
                "Yes, but only in Java 8 and later versions",
                "No, switch statements only work with numeric values",
                "Yes, in all versions of Java",
                "Only if the strings are converted to integer values first"
            ],
            "answer": "Yes, but only in Java 8 and later versions",
            "explanation": "Starting from Java 8, switch statements can be used with String variables, allowing case labels to be String literals."
        },
        {
            "question": "What is the output of the following Java code?",
            "options": [
                "Monday",
                "Tuesday",
                "Wednesday",
                "No output"
            ],
            "answer": "Tuesday",
            "explanation": "The switch statement evaluates the 'day' variable, and since its value is 2, it matches the case labeled 2, printing \"Tuesday\"."
        },
        {
            "question": "What is the primary function of the while loop in Java?",
            "options": [
                "To execute a block of code a fixed number of times",
                "To execute a block of code as long as a specified condition is true",
                "To iterate over elements of an array",
                "To execute a block of code at least once regardless of condition"
            ],
            "answer": "To execute a block of code as long as a specified condition is true",
            "explanation": "The while loop in Java is used to loop through a block of code repeatedly, as long as a specified condition remains true【95†source】."
        },
        {
            "question": "In a while loop, when is the condition checked?",
            "options": [
                "After the code block is executed",
                "Before the code block is executed",
                "Only once at the beginning of the loop",
                "At the end of the loop's execution"
            ],
            "answer": "Before the code block is executed",
            "explanation": "In a while loop, the condition is checked before the execution of the code block within the loop【95†source】."
        },
        {
            "question": "How does a do/while loop differ from a while loop?",
            "options": [
                "It executes the code block regardless of the condition",
                "It checks the condition before executing the code block",
                "It executes the code block at least once, even if the condition is false",
                "It only runs if the condition is true at the start"
            ],
            "answer": "It executes the code block at least once, even if the condition is false",
            "explanation": "The do/while loop differs from a while loop in that it executes the code block once before checking the condition, ensuring the code block is executed at least once【96†source】."
        },
        {
            "question": "What is the syntax to increment a counter variable in a while loop?",
            "options": [
                "i += 1",
                "i++",
                "count(i)",
                "++i"
            ],
            "answer": "i++",
            "explanation": "Commonly, 'i++' is used within a while loop to increment a counter variable, although 'i += 1' or '++i' are also valid."
        },
        {
            "question": "In a do/while loop, where is the condition written?",
            "options": [
                "Inside the do block",
                "After the do block, before the while keyword",
                "After the while keyword",
                "Before the do block"
            ],
            "answer": "After the while keyword",
            "explanation": "In a do/while loop, the condition is written after the while keyword, following the code block enclosed in the do block【96†source】."
        },
        {
            "question": "What is the risk of not updating the loop variable in a while loop?",
            "options": [
                "The loop may execute more times than expected",
                "The loop might not execute at all",
                "The loop could become an infinite loop",
                "There is no risk; the loop will terminate correctly"
            ],
            "answer": "The loop could become an infinite loop",
            "explanation": "If the loop variable is not updated within a while loop, it may result in an infinite loop as the condition might never become false【95†source】."
        },
        {
            "question": "Can a while loop be used to iterate over an array?",
            "options": [
                "Yes, by using an index variable",
                "No, it can only loop a fixed number of times",
                "Yes, but only with single-dimensional arrays",
                "No, only for loops can iterate over arrays"
            ],
            "answer": "Yes, by using an index variable",
            "explanation": "A while loop can iterate over an array by using an index variable to access each element in sequence."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "0 1 2 3",
                "0 1 2",
                "1 2 3",
                "No output"
            ],
            "answer": "0 1 2",
            "explanation": "The while loop will print the values 0, 1, and 2, as it increments 'i' from 0 to 2 and stops when 'i' becomes 3【95†source】."
        },
        {
            "question": "In a do/while loop, is the condition checked during the first iteration?",
            "options": [
                "Yes, before the code block is executed",
                "No, after the first execution of the code block",
                "Yes, after the first execution of the code block",
                "No, it is checked only in the last iteration"
            ],
            "answer": "No, after the first execution of the code block",
            "explanation": "In a do/while loop, the condition is checked after the first execution of the code block, ensuring the code block runs at least once【96†source】."
        },
        {
            "question": "What is a common use case for a do/while loop?",
            "options": [
                "When the number of iterations is known in advance",
                "When the code block needs to execute at least once regardless of the condition",
                "For iterating over collections",
                "For executing multiple conditions"
            ],
            "answer": "When the code block needs to execute at least once regardless of the condition",
            "explanation": "A do/while loop is typically used when the code block needs to be executed at least once, even if the loop condition is false at the start&#8203;“【oaicite:3】“&#8203;."
        },
        {
            "question": "Which loop is guaranteed to execute its code block at least once?",
            "options": [
                "For loop",
                "While loop",
                "Do/while loop",
                "Infinite loop"
            ],
            "answer": "Do/while loop",
            "explanation": "The do/while loop is guaranteed to execute its code block at least once because the condition is checked after the execution of the code block&#8203;“【oaicite:2】“&#8203;."
        },
        {
            "question": "How can an infinite loop be created using a while loop?",
            "options": [
                "By not including a condition",
                "By setting the condition to always be true",
                "By omitting the loop variable",
                "By using a break statement"
            ],
            "answer": "By setting the condition to always be true",
            "explanation": "An infinite loop can occur in a while loop if the condition is set in such a way that it always evaluates to true, and there's no mechanism within the loop to break out of it&#8203;“【oaicite:1】“&#8203;."
        },
        {
            "question": "What is the basic structure of a for loop in Java?",
            "options": [
                "for (initialization; condition; update) { // code }",
                "for (condition; initialization; update) { // code }",
                "for (condition) { // code }",
                "for (initialization; update; condition) { // code }"
            ],
            "answer": "for (initialization; condition; update) { // code }",
            "explanation": "The standard for loop in Java consists of an initialization, a condition, and an update expression, all enclosed in parentheses."
        },
        {
            "question": "Which part of a for loop is executed only once?",
            "options": [
                "The condition",
                "The initialization",
                "The update statement",
                "The code block"
            ],
            "answer": "The initialization",
            "explanation": "The initialization part of a for loop is executed only once at the beginning of the loop."
        },
        {
            "question": "What is the For-Each loop primarily used for in Java?",
            "options": [
                "To iterate over arrays or collections",
                "To execute a block of code a specific number of times",
                "To create infinite loops",
                "To iterate in reverse order"
            ],
            "answer": "To iterate over arrays or collections",
            "explanation": "The For-Each loop in Java is used to iterate over elements in arrays or collections."
        },
        {
            "question": "What is the syntax of a For-Each loop in Java?",
            "options": [
                "for (type var : array) { // code }",
                "for (type var = 0; var < array.length; var++) { // code }",
                "foreach (type var in array) { // code }",
                "for (var : type in array) { // code }"
            ],
            "answer": "for (type var : array) { // code }",
            "explanation": "The For-Each loop in Java uses the syntax 'for (type var : array)' where 'type' is the data type and 'var' is the variable that iterates over the array or collection."
        },
        {
            "question": "What happens if the condition in a for loop is initially false?",
            "options": [
                "The loop executes once",
                "The loop's body does not execute",
                "The loop becomes infinite",
                "The loop skips to its last iteration"
            ],
            "answer": "The loop's body does not execute",
            "explanation": "If the condition in a for loop is initially false, the loop's body does not execute at all."
        },
        {
            "question": "Which component of a for loop is optional?",
            "options": [
                "Initialization",
                "Condition",
                "Update statement",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "All components of a for loop (initialization, condition, and update statement) are optional. Omitting the condition can lead to an infinite loop."
        },
        {
            "question": "Can the initialization block of a for loop declare multiple variables?",
            "options": [
                "Yes, but only of the same type",
                "Yes, of different types as well",
                "No, it can only declare one variable",
                "No, the initialization block is not for declaring variables"
            ],
            "answer": "Yes, but only of the same type",
            "explanation": "The initialization block of a for loop can declare multiple variables, but they must all be of the same type."
        },
        {
            "question": "In a For-Each loop, is it possible to modify the current element?",
            "options": [
                "Yes, the current element can be modified",
                "No, the For-Each loop is read-only",
                "Yes, but only in certain cases",
                "No, unless using a special iterator"
            ],
            "answer": "No, the For-Each loop is read-only",
            "explanation": "The For-Each loop does not allow modification of the current element being iterated over. It is typically used for read-only operations."
        },
        {
            "question": "What is the correct way to iterate over an array using a for loop?",
            "options": [
                "for (int i = 0; i <= array.length; i++) { // code }",
                "for (int i = 0; i < array.length; i++) { // code }",
                "for (int i : array) { // code }",
                "for (i = 0; i < array.length; i++) { // code }"
            ],
            "answer": "for (int i = 0; i < array.length; i++) { // code }",
            "explanation": "The correct way to iterate over an array using a for loop involves initializing 'i' to 0 and continuing while 'i' is less than the array's length."
        },
        {
            "question": "How is the update statement in a for loop typically used?",
            "options": [
                "To increment or decrement a loop counter",
                "To check the loop's termination condition",
                "To initialize loop variables",
                "To perform a task at the end of each iteration"
            ],
            "answer": "To increment or decrement a loop counter",
            "explanation": "The update statement in a for loop is typically used to increment or decrement a loop counter, thereby progressing the loop towards its termination condition."
        },
        {
            "question": "What will be the output of the following For-Each loop?",
            "options": [
                "1 2 3",
                "0 1 2",
                "1 2 3 4",
                "An error occurs"
            ],
            "answer": "1 2 3",
            "explanation": "The For-Each loop will iterate through each element of the array 'nums', printing each number followed by a space, resulting in the output \"1 2 3\"."
        },
        {
            "question": "Which statement is true about the initialization block in a for loop?",
            "options": [
                "It can contain method calls.",
                "It is executed before each iteration.",
                "It must declare a new variable.",
                "It can only initialize a single variable."
            ],
            "answer": "It can contain method calls.",
            "explanation": "The initialization block of a for loop can contain method calls, variable declarations, or any other valid Java statement. It is executed only once, at the start of the loop."
        },
        {
            "question": "Which access modifier in Java specifies the highest level of access?",
            "options": [
                "private",
                "protected",
                "public",
                "default"
            ],
            "answer": "public",
            "explanation": "The public access modifier allows the widest level of access, making the class or class member accessible from anywhere."
        },
        {
            "question": "What is the default access modifier in Java?",
            "options": [
                "public",
                "private",
                "protected",
                "None of the above"
            ],
            "answer": "None of the above",
            "explanation": "If no access modifier is specified, it defaults to package-private, meaning the class or member is accessible within its own package."
        },
        {
            "question": "Which access modifier allows visibility only within the same class?",
            "options": [
                "public",
                "private",
                "protected",
                "default"
            ],
            "answer": "private",
            "explanation": "The private access modifier restricts visibility to within the same class only."
        },
        {
            "question": "Can a top-level class in Java be declared as private?",
            "options": [
                "Yes",
                "No",
                "Only in inner classes",
                "Only if it's a static class"
            ],
            "answer": "No",
            "explanation": "A top-level class cannot be declared as private in Java. Private is only applicable to inner classes and members."
        },
        {
            "question": "Which access modifier in Java allows access within the same package and subclasses?",
            "options": [
                "public",
                "private",
                "protected",
                "default"
            ],
            "answer": "protected",
            "explanation": "The protected access modifier allows access within the same package and also in subclasses, even if they are in different packages."
        },
        {
            "question": "What does the protected access modifier not allow?",
            "options": [
                "Access from within the same class",
                "Access from within the same package",
                "Access from subclasses in different packages",
                "Access from non-subclass classes in different packages"
            ],
            "answer": "Access from non-subclass classes in different packages",
            "explanation": "The protected access modifier does not allow access from non-subclass classes outside its own package."
        },
        {
            "question": "Which access modifier is most restrictive in Java?",
            "options": [
                "public",
                "private",
                "protected",
                "default"
            ],
            "answer": "private",
            "explanation": "The private access modifier is the most restrictive, limiting access to only within the class it is declared in."
        },
        {
            "question": "How does the default (package-private) access modifier restrict access?",
            "options": [
                "Allows access only within the same class",
                "Allows access only within the same package",
                "Allows access from anywhere",
                "Allows access only from subclasses"
            ],
            "answer": "Allows access only within the same package",
            "explanation": "The default (package-private) access modifier restricts access to within the same package."
        },
        {
            "question": "Can a method with a private access modifier be inherited by a subclass in Java?",
            "options": [
                "Yes",
                "No",
                "Only in the same package",
                "Only if overridden"
            ],
            "answer": "No",
            "explanation": "Private methods are not visible to subclasses and therefore cannot be inherited."
        },
        {
            "question": "Which statement is true about the public access modifier?",
            "options": [
                "It restricts access to within the same package",
                "It allows access from anywhere in the program",
                "It is the default access level",
                "It is only applicable to methods"
            ],
            "answer": "It allows access from anywhere in the program",
            "explanation": "The public access modifier allows unrestricted access from anywhere in the program."
        },
        {
            "question": "In which scenario would you use the protected access modifier?",
            "options": [
                "To hide a class member from other classes in the same package",
                "To allow access only within the same class",
                "To allow access to subclasses, including those in different packages",
                "To allow access to any class within the same package"
            ],
            "answer": "To allow access to subclasses, including those in different packages",
            "explanation": "The protected access modifier is used to allow access to a class member in subclasses, including those that are in different packages."
        },
        {
            "question": "Is it possible to restrict access to a constructor in Java?",
            "options": [
                "Yes, using any access modifier",
                "No, constructors must always be public",
                "Yes, but only with the private modifier",
                "No, constructors cannot have access modifiers"
            ],
            "answer": "Yes, using any access modifier",
            "explanation": "Constructors in Java can have access modifiers, including public, protected, private, or package-private (default), to control instantiation."
        },
        {
            "question": "What is the default access level for a class in Java if no access modifier is specified?",
            "options": [
                "public",
                "private",
                "protected",
                "package-private"
            ],
            "answer": "package-private",
            "explanation": "If no access modifier is specified for a class, it defaults to package-private, meaning it's accessible only within its own package."
        },
        {
            "question": "What does the `final` modifier indicate when applied to a class?",
            "options": [
                "The class is abstract",
                "The class can be inherited",
                "The class cannot be inherited",
                "The class is public"
            ],
            "answer": "The class cannot be inherited",
            "explanation": "When the `final` modifier is applied to a class, it indicates that the class cannot be inherited by other classes&#8203;“【oaicite:6】“&#8203;."
        },
        {
            "question": "What is the role of the `abstract` modifier in Java?",
            "options": [
                "To make a class or method final",
                "To indicate that a class can create objects",
                "To declare a class that cannot be instantiated",
                "To make a method private"
            ],
            "answer": "To declare a class that cannot be instantiated",
            "explanation": "The `abstract` modifier is used to declare a class that cannot be instantiated on its own and must be inherited&#8203;“【oaicite:5】“&#8203;."
        },
        {
            "question": "Which modifier indicates that a method can only be accessed by one thread at a time?",
            "options": [
                "transient",
                "volatile",
                "synchronized",
                "static"
            ],
            "answer": "synchronized",
            "explanation": "The `synchronized` modifier indicates that a method can be accessed by only one thread at a time, making it useful for concurrency control&#8203;“【oaicite:4】“&#8203;."
        },
        {
            "question": "What is the function of the `static` modifier in Java?",
            "options": [
                "Makes a method synchronized",
                "Indicates that an attribute or method belongs to the class, rather than an object",
                "Makes an attribute final and unchangeable",
                "Indicates that a method is abstract"
            ],
            "answer": "Indicates that an attribute or method belongs to the class, rather than an object",
            "explanation": "The `static` modifier indicates that the member (method or field) belongs to the class itself rather than to a specific instance of the class&#8203;“【oaicite:3】“&#8203;."
        },
        {
            "question": "How does the `transient` modifier affect serialization?",
            "options": [
                "It makes an attribute serializable",
                "It prevents an attribute from being serialized",
                "It makes a method transient",
                "It has no effect on serialization"
            ],
            "answer": "It prevents an attribute from being serialized",
            "explanation": "The `transient` modifier is used to indicate that an attribute should not be serialized when the object containing it is serialized&#8203;“【oaicite:2】“&#8203;."
        },
        {
            "question": "What is the effect of the `volatile` modifier on a variable?",
            "options": [
                "It makes the variable immutable",
                "It ensures the variable is read from and written to main memory",
                "It synchronizes access to the variable",
                "It makes the variable static"
            ],
            "answer": "It ensures the variable is read from and written to main memory",
            "explanation": "The `volatile` modifier ensures that a variable's value is always read from and written to the main memory, not cached by threads&#8203;“【oaicite:1】“&#8203;."
        },
        {
            "question": "When is it appropriate to use the `abstract` modifier for methods?",
            "options": [
                "In any class",
                "Only in final classes",
                "Only in abstract classes",
                "In static methods"
            ],
            "answer": "Only in abstract classes",
            "explanation": "The `abstract` modifier for methods can only be used in abstract classes, and such methods must be overridden in subclasses&#8203;“【oaicite:0】“&#8203;."
        },
        {
            "question": "What does OOP stand for in Java?",
            "options": [
                "Object-Oriented Programming",
                "Operational Object Programming",
                "Organized Oriented Programming",
                "Oriented Operational Programming"
            ],
            "answer": "Object-Oriented Programming",
            "explanation": "OOP stands for Object-Oriented Programming, a paradigm centered around objects and classes."
        },
        {
            "question": "What is a Class in Java?",
            "options": [
                "A blueprint for creating objects",
                "A specific instance of an object",
                "A method",
                "A variable"
            ],
            "answer": "A blueprint for creating objects",
            "explanation": "In Java, a class is a blueprint from which individual objects are created."
        },
        {
            "question": "What is an Object in Java?",
            "options": [
                "A reference to a class",
                "A type of variable",
                "An instance of a class",
                "A method"
            ],
            "answer": "An instance of a class",
            "explanation": "An object is an instance of a class, containing both state (attributes) and behavior (methods)."
        },
        {
            "question": "What is Inheritance in Java?",
            "options": [
                "Sharing variables between classes",
                "Copying properties and behaviors from one class to another",
                "A method calling another method",
                "Dividing a class into subparts"
            ],
            "answer": "Copying properties and behaviors from one class to another",
            "explanation": "Inheritance is a mechanism where one class acquires the properties (fields) and behaviors (methods) of another class."
        },
        {
            "question": "What is Encapsulation in Java?",
            "options": [
                "The binding of data and methods that manipulate the data",
                "The separation of data from methods",
                "The ability to inherit methods",
                "Creating multiple copies of the same method"
            ],
            "answer": "The binding of data and methods that manipulate the data",
            "explanation": "Encapsulation in Java is about binding the data (variables) and the methods (functions) that manipulate the data into a single unit, typically a class."
        },
        {
            "question": "What is Polymorphism in Java?",
            "options": [
                "The ability of a variable to hold multiple types",
                "The ability of a method to perform different tasks based on the object",
                "Changing the structure of a class",
                "Breaking down methods into smaller parts"
            ],
            "answer": "The ability of a method to perform different tasks based on the object",
            "explanation": "Polymorphism in Java is the ability of an object to take on many forms, allowing methods to perform different operations based on the object type."
        },
        {
            "question": "What is Abstraction in Java?",
            "options": [
                "Hiding the implementation details and showing only functionality",
                "Removing data from a class",
                "Splitting a class into multiple classes",
                "Combining similar methods into a single method"
            ],
            "answer": "Hiding the implementation details and showing only functionality",
            "explanation": "Abstraction in Java is about hiding the internal implementation and showing only the necessary functionalities to the user."
        },
        {
            "question": "What is the main feature of OOP?",
            "options": [
                "Speed",
                "Simplicity",
                "Reusability",
                "Performance"
            ],
            "answer": "Reusability",
            "explanation": "One of the main features of OOP is reusability, which allows code to be reused through mechanisms like inheritance and polymorphism."
        },
        {
            "question": "Which principle of OOP helps to reduce redundancy?",
            "options": [
                "Abstraction",
                "Encapsulation",
                "Inheritance",
                "Polymorphism"
            ],
            "answer": "Inheritance",
            "explanation": "Inheritance helps to reduce redundancy in code by inheriting common properties from a base class."
        },
        {
            "question": "What is a Constructor in Java?",
            "options": [
                "A method that constructs variable names",
                "A block of code used for initializing an object",
                "A special variable inside a class",
                "A return type of a method"
            ],
            "answer": "A block of code used for initializing an object",
            "explanation": "A constructor in Java is a special method used to initialize objects."
        },
        {
            "question": "Which of these is a valid class in Java?",
            "options": [
                "class@MyClass {}",
                "class 123MyClass {}",
                "class MyClass {}",
                "class *MyClass {}"
            ],
            "answer": "class MyClass {}",
            "explanation": "In Java, a valid class name starts with a letter and uses camel case notation."
        },
        {
            "question": "Can a class in Java be both abstract and final?",
            "options": [
                "Yes",
                "No",
                "Only in special cases",
                "Only if it does not have methods"
            ],
            "answer": "No",
            "explanation": "A class cannot be both abstract and final in Java because an abstract class is meant to be inherited, while a final class cannot be inherited."
        },
        {
            "question": "What does overriding a method mean?",
            "options": [
                "Changing the method's return type",
                "Providing a new implementation for a method in a subclass",
                "Renaming a method in a subclass",
                "Deleting a method from a superclass"
            ],
            "answer": "Providing a new implementation for a method in a subclass",
            "explanation": "Method overriding means defining a method in a subclass that already exists in the superclass with the same signature (name and parameters)."
        },
        {
            "question": "What is an Interface in Java?",
            "options": [
                "A concrete class with all methods implemented",
                "A collection of abstract methods and constants",
                "A special type of class with only static methods",
                "A method without a body"
            ],
            "answer": "A collection of abstract methods and constants",
            "explanation": "An interface in Java is a reference type that can contain constants and abstract methods."
        },
        {
            "question": "What does the 'extends' keyword indicate in a Java class declaration?",
            "options": [
                "The class is extending its functionality",
                "The class is inheriting from a superclass",
                "The class is abstract",
                "The class will be extended in the future"
            ],
            "answer": "The class is inheriting from a superclass",
            "explanation": "The 'extends' keyword in a class declaration indicates that the class is inheriting from another class, known as the superclass."
        },
        {
            "question": "Which OOP concept is best for separating interface from implementation?",
            "options": [
                "Encapsulation",
                "Inheritance",
                "Abstraction",
                "Polymorphism"
            ],
            "answer": "Abstraction",
            "explanation": "Abstraction separates the interface (what the object can do) from the implementation (how the object does it)."
        },
        {
            "question": "What is the purpose of the 'this' keyword in Java?",
            "options": [
                "To refer to the current class instance",
                "To create a new object",
                "To call a static method",
                "To declare a variable"
            ],
            "answer": "To refer to the current class instance",
            "explanation": "The 'this' keyword in Java is used within an instance method or a constructor to refer to the current object."
        },
        {
            "question": "What is a package in Java?",
            "options": [
                "A collection of classes and interfaces",
                "A type of data structure",
                "A method",
                "An operator"
            ],
            "answer": "A collection of classes and interfaces",
            "explanation": "A package in Java is a namespace that groups related classes and interfaces, helping to organize the code."
        },
        {
            "question": "What does it mean for a class to be 'abstract' in Java?",
            "options": [
                "The class cannot be instantiated",
                "The class does not contain any methods",
                "The class is incomplete and must be inherited",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "An abstract class in Java cannot be instantiated and is meant to be a superclass for other classes."
        },
        {
            "question": "What is a 'final' class in Java?",
            "options": [
                "A class that cannot be extended",
                "A class that is complete and cannot be changed",
                "A class that can be instantiated",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "A final class cannot be subclassed (extended) and is considered to be complete as it is."
        },
        {
            "question": "Can an interface in Java contain a constructor?",
            "options": [
                "Yes",
                "No",
                "Only if it's an abstract interface",
                "Only if it extends a class"
            ],
            "answer": "No",
            "explanation": "Interfaces in Java cannot have constructors because they cannot be instantiated."
        },
        {
            "question": "What are the main pillars of Object-Oriented Programming?",
            "options": [
                "Encapsulation, Inheritance, Polymorphism, Abstraction",
                "Class, Object, Methods, Variables",
                "Syntax, Semantics, Compilation, Execution",
                "Functions, Procedures, Modules, Packages"
            ],
            "answer": "Encapsulation, Inheritance, Polymorphism, Abstraction",
            "explanation": "The four main pillars of OOP are Encapsulation, Inheritance, Polymorphism, and Abstraction."
        },
        {
            "question": "Which keyword is used to prevent method overriding?",
            "options": [
                "static",
                "final",
                "abstract",
                "private"
            ],
            "answer": "final",
            "explanation": "When a method is marked as 'final', it cannot be overridden by subclasses."
        },
        {
            "question": "What is a 'super' keyword used for in Java?",
            "options": [
                "To call a superclass's constructor",
                "To refer to the immediate parent class object",
                "Both a and b",
                "To declare a variable as superior"
            ],
            "answer": "Both a and b",
            "explanation": "The 'super' keyword is used to refer to the immediate parent class object and can be used to call a superclass's constructor or methods."
        },
        {
            "question": "What is the key benefit of encapsulation in Java?",
            "options": [
                "Improved performance",
                "Better security and data hiding",
                "Increased complexity",
                "Enhanced polymorphism"
            ],
            "answer": "Better security and data hiding",
            "explanation": "Encapsulation provides better control over the data by hiding it from the outside world and only exposing the necessary parts through methods."
        },
        {
            "question": "What is the primary purpose of a class in Java?",
            "options": [
                "To create a new data type",
                "To serve as a blueprint for objects",
                "To execute a program",
                "To store variables"
            ],
            "answer": "To serve as a blueprint for objects",
            "explanation": "A class in Java acts as a blueprint for creating objects, defining the state and behavior that the objects of the class will have【146†source】."
        },
        {
            "question": "How do you create a class in Java?",
            "options": [
                "Using the 'new' keyword",
                "Using the 'object' keyword",
                "Using the 'class' keyword",
                "Using the 'create' keyword"
            ],
            "answer": "Using the 'class' keyword",
            "explanation": "A class in Java is created by using the 'class' keyword, followed by the class name【146†source】."
        },
        {
            "question": "What is an object in Java?",
            "options": [
                "A type of variable",
                "An instance of a class",
                "A function",
                "A data structure"
            ],
            "answer": "An instance of a class",
            "explanation": "An object in Java is an instance of a class, created using the class blueprint and containing its own state and behavior【146†source】."
        },
        {
            "question": "How do you create an object in Java?",
            "options": [
                "By defining a class",
                "By using the 'new' keyword",
                "By declaring a variable",
                "By calling a method"
            ],
            "answer": "By using the 'new' keyword",
            "explanation": "An object in Java is created by specifying the class name, followed by the object name, and using the 'new' keyword【146†source】."
        },
        {
            "question": "Which of the following is a valid class declaration in Java?",
            "options": [
                "new class MyClass {}",
                "class MyClass {}",
                "MyClass class {}",
                "create MyClass {}"
            ],
            "answer": "class MyClass {}",
            "explanation": "A class in Java is declared using the 'class' keyword followed by the class name, which should start with an uppercase letter【146†source】."
        },
        {
            "question": "What does the following code snippet do?",
            "options": [
                "Creates a class named 'Main' with a method 'x'",
                "Creates an object 'x' in the class 'Main'",
                "Declares a variable 'x' inside the class 'Main'",
                "Executes a method 'x' in the class 'Main'"
            ],
            "answer": "Declares a variable 'x' inside the class 'Main'",
            "explanation": "This code snippet creates a class named 'Main' and declares an integer variable 'x' inside it, initializing 'x' to 5【146†source】."
        },
        {
            "question": "What is the purpose of the 'new' keyword in Java?",
            "options": [
                "To create a new variable",
                "To create a new class",
                "To create a new method",
                "To create a new object"
            ],
            "answer": "To create a new object",
            "explanation": "The 'new' keyword in Java is used to create new objects of a class【146†source】."
        },
        {
            "question": "In the context of Java classes and objects, what are attributes?",
            "options": [
                "Methods within a class",
                "Variables within a class",
                "Parameters of a method",
                "Return values of methods"
            ],
            "answer": "Variables within a class",
            "explanation": "Attributes in Java classes refer to the variables that are declared within a class, representing the state of objects of that class【146†source】."
        },
        {
            "question": "How are methods associated with objects in Java?",
            "options": [
                "Methods operate independently of objects",
                "Methods define the behavior of objects",
                "Methods are used to create objects",
                "Methods store data for objects"
            ],
            "answer": "Methods define the behavior of objects",
            "explanation": "Methods in Java classes define the behavior of the objects, allowing the objects to perform operations or exhibit behaviors【146†source】."
        },
        {
            "question": "What does the following code example illustrate?",
            "options": [
                "Creating a class named 'Main'",
                "Declaring a variable 'myObj'",
                "Creating an object 'myObj' of the class 'Main'",
                "Initializing a method 'myObj'"
            ],
            "answer": "Creating an object 'myObj' of the class 'Main'",
            "explanation": "This code demonstrates creating an object named 'myObj' of the class 'Main' using the 'new' keyword【146†source】."
        },
        {
            "question": "In Java, what is the relationship between a class and an object?",
            "options": [
                "A class is a special type of object",
                "An object is a specific instance of a class",
                "A class and an object are the same",
                "An object is a blueprint for a class"
            ],
            "answer": "An object is a specific instance of a class",
            "explanation": "An object is a specific instance of a class, embodying the structure and behavior defined by the class."
        },
        {
            "question": "What is the output of the following Java code?",
            "options": [
                "0",
                "5",
                "Error",
                "null"
            ],
            "answer": "5",
            "explanation": "The code creates an object of the class 'Main', and then it prints the value of the variable 'x' of that object, which is 5&#8203;“【oaicite:2】“&#8203;."
        },
        {
            "question": "What is the standard naming convention for classes in Java?",
            "options": [
                "Start with a lowercase letter and use camel case",
                "Start with an uppercase letter and use camel case",
                "All uppercase letters",
                "All lowercase letters"
            ],
            "answer": "Start with an uppercase letter and use camel case",
            "explanation": "The standard naming convention for classes in Java is to start with an uppercase letter and follow camel case notation."
        },
        {
            "question": "Can a class in Java contain another class?",
            "options": [
                "Yes, it's called a nested class",
                "No, classes cannot contain other classes",
                "Yes, but only if it's abstract",
                "No, classes can only contain methods and variables"
            ],
            "answer": "Yes, it's called a nested class",
            "explanation": "In Java, a class can contain another class, known as a nested class."
        },
        {
            "question": "What is an instance variable in Java?",
            "options": [
                "A variable defined within a method",
                "A static variable defined at the class level",
                "A variable defined at the class level",
                "A final variable in a method"
            ],
            "answer": "A variable defined at the class level",
            "explanation": "An instance variable in Java is a variable that is declared inside a class but outside any method and is not declared as static."
        },
        {
            "question": "What is the main method in a Java class?",
            "options": [
                "The method that initializes variables",
                "The first method that runs in any Java program",
                "The final method in a class",
                "Any public method in a class"
            ],
            "answer": "The first method that runs in any Java program",
            "explanation": "The main method in Java is the entry point of any Java application and is the first method that gets executed."
        },
        {
            "question": "Can an object in Java exist without a class?",
            "options": [
                "Yes",
                "No",
                "Only if it's a primitive type",
                "Only if it's a static object"
            ],
            "answer": "No",
            "explanation": "Objects in Java are instances of classes, so they cannot exist without a class."
        },
        {
            "question": "What happens if two objects of the same class in Java have different values in their instance variables?",
            "options": [
                "They are still considered the same",
                "They represent different states of the same object",
                "They represent two distinct objects",
                "An error occurs"
            ],
            "answer": "They represent two distinct objects",
            "explanation": "Objects of the same class can have different states (values in their instance variables), representing distinct objects."
        },
        {
            "question": "What is the purpose of a constructor in a class in Java?",
            "options": [
                "To construct methods in the class",
                "To initialize the object's state when it is created",
                "To declare variables in the class",
                "To perform calculations"
            ],
            "answer": "To initialize the object's state when it is created",
            "explanation": "A constructor in Java is used to initialize the state of an object when it is created."
        },
        {
            "question": "How is a class in Java similar to a template?",
            "options": [
                "It specifies the exact values of objects",
                "It provides a structure that can be used to create objects",
                "It compiles the Java program",
                "It runs the Java application"
            ],
            "answer": "It provides a structure that can be used to create objects",
            "explanation": "A class in Java acts like a template, providing the structure and behavior that objects created from the class will possess&#8203;“【oaicite:1】“&#8203;."
        },
        {
            "question": "What is a constructor in Java?",
            "options": [
                "A method that returns a value",
                "A special method used to initialize objects",
                "A static method called at class loading",
                "A final method in a class"
            ],
            "answer": "A special method used to initialize objects",
            "explanation": "A constructor in Java is a special method that is used to initialize objects."
        },
        {
            "question": "How is a constructor in Java identified?",
            "options": [
                "It has the same name as the class and a return type",
                "It has a different name from the class and no return type",
                "It has the same name as the class and no return type",
                "It is marked with the 'constructor' keyword"
            ],
            "answer": "It has the same name as the class and no return type",
            "explanation": "Constructors are special methods that have the same name as the class and do not have a return type."
        },
        {
            "question": "Can a Java class have more than one constructor?",
            "options": [
                "Yes, it's called constructor overloading",
                "No, it can only have one constructor",
                "Yes, but they must have the same parameters",
                "No, constructors are static and unique"
            ],
            "answer": "Yes, it's called constructor overloading",
            "explanation": "A Java class can have more than one constructor with different parameter lists, known as constructor overloading."
        },
        {
            "question": "What happens if no constructor is defined in a Java class?",
            "options": [
                "The class cannot create objects",
                "A default constructor is provided by the Java compiler",
                "An error occurs during compilation",
                "The class uses the constructor of its superclass"
            ],
            "answer": "A default constructor is provided by the Java compiler",
            "explanation": "If no constructor is explicitly defined in a Java class, the Java compiler automatically provides a default constructor."
        },
        {
            "question": "What is a default constructor in Java?",
            "options": [
                "A constructor provided by the user without parameters",
                "A constructor that sets all object properties to default values",
                "A constructor automatically provided by Java with no parameters",
                "The first constructor in a class"
            ],
            "answer": "A constructor automatically provided by Java with no parameters",
            "explanation": "A default constructor in Java is a no-argument constructor automatically provided by the compiler if no constructors are explicitly defined in the class."
        },
        {
            "question": "What is the purpose of a parameterized constructor in Java?",
            "options": [
                "To initialize objects with different methods",
                "To initialize objects with specific values",
                "To define static initializations",
                "To overload the main method"
            ],
            "answer": "To initialize objects with specific values",
            "explanation": "A parameterized constructor allows initializing objects with specific values provided as parameters at the time of object creation."
        },
        {
            "question": "Can a constructor be private in Java?",
            "options": [
                "Yes, for singleton class pattern",
                "No, constructors must always be public",
                "Yes, but only in abstract classes",
                "No, constructors cannot have access modifiers"
            ],
            "answer": "Yes, for singleton class pattern",
            "explanation": "Private constructors can be used in Java, commonly in the singleton pattern, where only one instance of a class is allowed."
        },
        {
            "question": "How do you call a superclass constructor in Java?",
            "options": [
                "super()",
                "this()",
                "superClass()",
                "extend()"
            ],
            "answer": "super()",
            "explanation": "The 'super()' keyword is used to explicitly call a superclass constructor from a subclass constructor."
        },
        {
            "question": "What is constructor chaining in Java?",
            "options": [
                "Calling one constructor from another within the same class",
                "Creating multiple constructors with the same name",
                "Connecting two different classes through their constructors",
                "A sequence of constructors calling each other in different classes"
            ],
            "answer": "Calling one constructor from another within the same class",
            "explanation": "Constructor chaining refers to a scenario in Java where one constructor calls another constructor in the same class using 'this()'."
        },
        {
            "question": "Which of these is not a feature of constructors in Java?",
            "options": [
                "They can return values",
                "They have the same name as the class",
                "They do not have a return type",
                "They are used to initialize objects"
            ],
            "answer": "They can return values",
            "explanation": "Constructors in Java do not return any value, not even 'void'."
        },
        {
            "question": "What is the use of the 'this' keyword in constructors?",
            "options": [
                "To call another constructor in the same class",
                "To refer to the current class instance",
                "To call a method in the same class",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "The 'this' keyword is used in constructors to call another constructor in the same class and to refer to the current class instance."
        },
        {
            "question": "What differentiates constructors from regular methods in Java?",
            "options": [
                "Constructors cannot be called directly",
                "Constructors have a return type",
                "Constructors cannot have parameters",
                "Constructors are named after the class"
            ],
            "answer": "Constructors are named after the class",
            "explanation": "The key difference is that constructors have the same name as the class they are in and are used to initialize objects of that class. Unlike methods, they do not have a return type, not even void."
        },
        {
            "question": "What is the primary purpose of a package in Java?",
            "options": [
                "To provide a library of executable methods",
                "To group related classes and interfaces",
                "To enhance the performance of Java applications",
                "To compile Java programs"
            ],
            "answer": "To group related classes and interfaces",
            "explanation": "Packages in Java are used to group related classes and interfaces, making the code easier to manage and avoiding name conflicts&#8203;“【oaicite:10】“&#8203;."
        },
        {
            "question": "What are built-in packages in Java?",
            "options": [
                "Packages created by the user",
                "Packages from the Java API",
                "Default packages used by the Java compiler",
                "Packages that come with the Java Development Environment"
            ],
            "answer": "Packages from the Java API",
            "explanation": "Built-in packages, also known as packages from the Java API, are prewritten classes that are included in the Java Development Environment&#8203;“【oaicite:9】“&#8203;."
        },
        {
            "question": "How do you import a single class from a package in Java?",
            "options": [
                "import package.name.*;",
                "package import class.name;",
                "import package.name.Class;",
                "import class.name.package;"
            ],
            "answer": "import package.name.Class;",
            "explanation": "To import a single class from a package, the syntax 'import package.name.Class;' is used&#8203;“【oaicite:8】“&#8203;."
        },
        {
            "question": "How can you import all the classes from a package in Java?",
            "options": [
                "import package.name.*;",
                "import all.package.name;",
                "package.name.import.*;",
                "import *.package.name;"
            ],
            "answer": "import package.name.*;",
            "explanation": "To import all classes from a package, the syntax 'import package.name.*;' is used&#8203;“【oaicite:7】“&#8203;."
        },
        {
            "question": "What is a user-defined package in Java?",
            "options": [
                "A package that comes pre-installed with Java",
                "A package defined and created by the Java developer",
                "A special type of built-in package",
                "An automatically generated package by the Java compiler"
            ],
            "answer": "A package defined and created by the Java developer",
            "explanation": "User-defined packages are those that are created by the Java developer for organizing classes and interfaces&#8203;“【oaicite:6】“&#8203;."
        },
        {
            "question": "What keyword is used to create a package in Java?",
            "options": [
                "package",
                "import",
                "class",
                "public"
            ],
            "answer": "package",
            "explanation": "The 'package' keyword is used to create a package in Java&#8203;“【oaicite:5】“&#8203;."
        },
        {
            "question": "Where are user-defined packages typically stored in Java?",
            "options": [
                "In a separate Java Development Environment",
                "In the main method of the Java application",
                "In a file system directory, similar to folders on a computer",
                "Within the Java API"
            ],
            "answer": "In a file system directory, similar to folders on a computer",
            "explanation": "User-defined packages are stored in a file system directory, much like folders on a computer&#8203;“【oaicite:4】“&#8203;."
        },
        {
            "question": "Why are packages important in Java?",
            "options": [
                "They increase the execution speed of programs",
                "They are required for the application to run",
                "They help in avoiding name conflicts and organizing code",
                "They define the main method of the application"
            ],
            "answer": "They help in avoiding name conflicts and organizing code",
            "explanation": "Packages are important in Java for avoiding name conflicts and for better management and organization of code&#8203;“【oaicite:3】“&#8203;."
        },
        {
            "question": "What does the 'import' keyword do in Java?",
            "options": [
                "It compiles the Java classes",
                "It creates a new package",
                "It allows the use of classes from different packages",
                "It exports Java classes to external environments"
            ],
            "answer": "It allows the use of classes from different packages",
            "explanation": "The 'import' keyword in Java is used to bring certain classes or entire packages into visibility, allowing their usage in the program&#8203;“【oaicite:2】“&#8203;."
        },
        {
            "question": "What is the result of not using the 'import' statement for a class in another package?",
            "options": [
                "The class can still be used without any issues",
                "A runtime error occurs",
                "The class must be redefined in the current package",
                "The class from the other package cannot be used directly"
            ],
            "answer": "The class from the other package cannot be used directly",
            "explanation": "Without using the 'import' statement, classes from other packages cannot be used directly in the program&#8203;“【oaicite:1】“&#8203;."
        },
        {
            "question": "How do you access a class from a package that is not imported?",
            "options": [
                "By redefining the class in the current package",
                "By using the fully qualified name of the class",
                "By creating an alias for the package",
                "It is not possible to access a class from a non-imported package"
            ],
            "answer": "By using the fully qualified name of the class",
            "explanation": "If a package is not imported, a class can still be accessed by using its fully qualified name, which includes the package name&#8203;“【oaicite:0】“&#8203;."
        },
        {
            "question": "What is the primary benefit of importing specific classes instead of entire packages?",
            "options": [
                "It enhances the performance of the program",
                "It makes the program easier to read",
                "It reduces memory usage",
                "It prevents naming conflicts and reduces potential ambiguity"
            ],
            "answer": "It prevents naming conflicts and reduces potential ambiguity",
            "explanation": "Importing specific classes rather than entire packages helps in avoiding naming conflicts and reduces potential ambiguity, as it clearly specifies which classes are being used in the program&#8203;“【oaicite:1】“&#8203;."
        },
        {
            "question": "What is inheritance in Java?",
            "options": [
                "Copying methods from one class to another",
                "The process where one class acquires the properties of another",
                "The ability to run methods concurrently",
                "The process of encapsulating data"
            ],
            "answer": "The process where one class acquires the properties of another",
            "explanation": "Inheritance in Java is a mechanism where one class inherits the attributes and methods of another class."
        },
        {
            "question": "Which keyword is used for inheritance in Java?",
            "options": [
                "super",
                "extends",
                "implements",
                "inherit"
            ],
            "answer": "extends",
            "explanation": "The 'extends' keyword is used in Java to indicate that a class is inheriting from a superclass."
        },
        {
            "question": "Can a subclass in Java inherit private members of its superclass?",
            "options": [
                "Yes, always",
                "No, never",
                "Only if the subclass is in the same package",
                "Only through getter and setter methods"
            ],
            "answer": "No, never",
            "explanation": "A subclass in Java cannot inherit private members (methods or variables) of its superclass."
        },
        {
            "question": "What is a superclass in Java?",
            "options": [
                "A class that inherits from another class",
                "The highest class in the inheritance hierarchy",
                "A class that is extended by another class",
                "A class that implements an interface"
            ],
            "answer": "A class that is extended by another class",
            "explanation": "A superclass is a class that is extended by another class, known as the subclass."
        },
        {
            "question": "What is method overriding in Java?",
            "options": [
                "Changing the method's return type in the subclass",
                "Creating a new method in the subclass",
                "Providing a new implementation for an inherited method in the subclass",
                "Calling a superclass method from the subclass"
            ],
            "answer": "Providing a new implementation for an inherited method in the subclass",
            "explanation": "Method overriding occurs when a subclass provides its own implementation of a method already defined in its superclass."
        },
        {
            "question": "What does the 'super' keyword do in Java?",
            "options": [
                "Refers to the superclass object",
                "Creates an instance of the superclass",
                "Deletes an instance of the superclass",
                "Overloads a method in the superclass"
            ],
            "answer": "Refers to the superclass object",
            "explanation": "The 'super' keyword is used to refer to the immediate parent class object."
        },
        {
            "question": "Can a class in Java extend multiple classes?",
            "options": [
                "Yes, always",
                "No, Java supports only single inheritance",
                "Yes, but only abstract classes",
                "Yes, using the 'implements' keyword"
            ],
            "answer": "No, Java supports only single inheritance",
            "explanation": "Java does not support multiple inheritance with classes. A class can extend only one class, but it can implement multiple interfaces."
        },
        {
            "question": "What is the purpose of inheritance in Java?",
            "options": [
                "To improve code readability",
                "To increase the execution speed of the program",
                "To provide data encapsulation",
                "To promote code reuse and enhance maintainability"
            ],
            "answer": "To promote code reuse and enhance maintainability",
            "explanation": "Inheritance is used in Java to promote code reuse, reduce redundancy, and enhance the maintainability of the code."
        },
        {
            "question": "What is a subclass in Java?",
            "options": [
                "A class that inherits from a superclass",
                "A class that is only used for subclassing",
                "A class that cannot be instantiated",
                "A class that does not inherit from any other class"
            ],
            "answer": "A class that inherits from a superclass",
            "explanation": "A subclass is a class that extends (inherits from) another class, known as the superclass."
        },
        {
            "question": "Can a constructor be inherited in Java?",
            "options": [
                "Yes",
                "No",
                "Only if it's public",
                "Only if it's a default constructor"
            ],
            "answer": "No",
            "explanation": "Constructors are not inherited in Java. Each class has its own constructors."
        },
        {
            "question": "What is an 'IS-A' relationship in Java?",
            "options": [
                "A relationship where a class is a type of another class",
                "A relationship where a class contains an instance of another class",
                "A relationship between methods of different classes",
                "A relationship where two classes share the same methods"
            ],
            "answer": "A relationship where a class is a type of another class",
            "explanation": "An 'IS-A' relationship in Java is an inheritance relationship where a subclass is a type of its superclass."
        },
        {
            "question": "How does inheritance support polymorphism in Java?",
            "options": [
                "By allowing different classes to have methods with the same name",
                "By enabling a subclass to have multiple forms",
                "By allowing a subclass to define its own unique behavior",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "Inheritance supports polymorphism by allowing subclasses to define their own unique behaviors and by enabling methods in different classes to have the same name but different implementations."
        },
        {
            "question": "What is polymorphism in Java?",
            "options": [
                "The ability of a variable to hold different data types",
                "The concept of allowing methods to perform different tasks based on the object",
                "The process of changing the state of an object",
                "The ability to define multiple variables in a single declaration"
            ],
            "answer": "The concept of allowing methods to perform different tasks based on the object",
            "explanation": "Polymorphism in Java allows methods to perform different tasks based on the object that invokes them, enhancing flexibility and reusability."
        },
        {
            "question": "How is polymorphism typically achieved in Java?",
            "options": [
                "Through the use of interfaces",
                "By overloading methods",
                "By overriding methods",
                "Both b and c"
            ],
            "answer": "Both b and c",
            "explanation": "Polymorphism in Java is commonly achieved through method overloading (compile-time polymorphism) and method overriding (runtime polymorphism)."
        },
        {
            "question": "What is method overloading in Java?",
            "options": [
                "Redefining a method in a subclass",
                "Changing the return type of a method",
                "Creating multiple methods with the same name but different parameters in the same class",
                "Extending a method from a superclass"
            ],
            "answer": "Creating multiple methods with the same name but different parameters in the same class",
            "explanation": "Method overloading, a form of compile-time polymorphism, involves defining multiple methods with the same name but different parameter lists in the same class."
        },
        {
            "question": "What is method overriding in Java?",
            "options": [
                "Providing a new implementation for an inherited method in a subclass",
                "Creating a method with the same name and parameters in the same class",
                "Changing the return type of a method in a subclass",
                "Defining a method in an interface"
            ],
            "answer": "Providing a new implementation for an inherited method in a subclass",
            "explanation": "Method overriding, a form of runtime polymorphism, occurs when a subclass provides a specific implementation for a method already defined in its superclass."
        },
        {
            "question": "Which keyword is used to achieve runtime polymorphism in Java?",
            "options": [
                "static",
                "final",
                "super",
                "override"
            ],
            "answer": "super",
            "explanation": "The 'super' keyword is used in method overriding, which is a mechanism of runtime polymorphism, to refer to the method defined in the superclass."
        },
        {
            "question": "Can a static method be overridden in Java?",
            "options": [
                "Yes",
                "No",
                "Only if it's in a superclass",
                "Only if it's in a subclass"
            ],
            "answer": "No",
            "explanation": "Static methods belong to the class, not instances, and cannot be overridden. They can be hidden by a method in a subclass with the same signature."
        },
        {
            "question": "What is dynamic method dispatch in Java?",
            "options": [
                "Compiling multiple methods at once",
                "Deciding at runtime which method to call",
                "Overloading methods in runtime",
                "Dispatching methods to different classes"
            ],
            "answer": "Deciding at runtime which method to call",
            "explanation": "Dynamic method dispatch is a mechanism in Java where the method to be executed is determined at runtime, a key aspect of runtime polymorphism."
        },
        {
            "question": "What is the main advantage of polymorphism in Java?",
            "options": [
                "It increases the execution speed of programs",
                "It allows methods to be called without specifying the exact class type",
                "It simplifies code maintenance and readability",
                "It reduces the size of the code"
            ],
            "answer": "It simplifies code maintenance and readability",
            "explanation": "Polymorphism enhances code maintainability and readability by allowing the same method to be used on different objects, reducing the complexity of the code."
        },
        {
            "question": "What does polymorphism mean in terms of OOP principles?",
            "options": [
                "Single inheritance",
                "Multiple methods with the same name",
                "Many forms or the ability to take on different forms",
                "Encapsulation of methods and variables"
            ],
            "answer": "Many forms or the ability to take on different forms",
            "explanation": "Polymorphism in OOP principles refers to the ability of an entity, such as methods or objects, to take on many forms."
        },
        {
            "question": "How does polymorphism benefit code reusability?",
            "options": [
                "By using the same method for different purposes",
                "By copying methods from one class to another",
                "By allowing methods to run faster",
                "By reducing the amount of memory used by the program"
            ],
            "answer": "By using the same method for different purposes",
            "explanation": "Polymorphism promotes code reusability by allowing the same method to be used for different purposes on different objects."
        },
        {
            "question": "In Java, which type of polymorphism is supported by method overloading?",
            "options": [
                "Runtime polymorphism",
                "Compile-time polymorphism",
                "Dynamic polymorphism",
                "Static polymorphism"
            ],
            "answer": "Compile-time polymorphism",
            "explanation": "Method overloading is an example of compile-time polymorphism, where the method to be executed is determined by the compiler based on the method signature."
        },
        {
            "question": "Can interfaces in Java be used to achieve polymorphism?",
            "options": [
                "Yes",
                "No",
                "Only if they are abstract",
                "Only if they extend a class"
            ],
            "answer": "Yes",
            "explanation": "Interfaces in Java are used to achieve polymorphism. A class can implement an interface and provide its own implementation of the interface's methods, allowing objects to take multiple forms."
        },
        {
            "question": "What is method overloading in Java?",
            "options": [
                "Defining multiple methods with the same name in different classes",
                "Defining a method in a subclass with the same name as the superclass",
                "Defining multiple methods with the same name but different parameter lists in a class",
                "Changing the return type of an existing method"
            ],
            "answer": "Defining multiple methods with the same name but different parameter lists in a class",
            "explanation": "Method overloading in Java is the process of defining more than one method with the same name in a class, but with different parameter lists."
        },
        {
            "question": "Which aspect of a method is considered in method overloading?",
            "options": [
                "Method name",
                "Return type",
                "Number and type of parameters",
                "Access modifier"
            ],
            "answer": "Number and type of parameters",
            "explanation": "Method overloading is determined by the number and type of parameters in the method signature, not by the return type or access modifier."
        },
        {
            "question": "Can overloaded methods have different return types in Java?",
            "options": [
                "Yes",
                "No",
                "Only if the parameters are different",
                "Only if the method is static"
            ],
            "answer": "Yes",
            "explanation": "Overloaded methods in Java can have different return types, provided they have different parameter lists."
        },
        {
            "question": "Is it possible to overload a method by changing only its return type?",
            "options": [
                "Yes",
                "No",
                "Only if the method is private",
                "Only if the method is in an interface"
            ],
            "answer": "No",
            "explanation": "Overloading a method requires a change in the parameter list. Changing only the return type is not sufficient for method overloading."
        },
        {
            "question": "What is the main advantage of method overloading?",
            "options": [
                "Increased program speed",
                "Improved code readability and reusability",
                "Enhanced security",
                "Reduced memory usage"
            ],
            "answer": "Improved code readability and reusability",
            "explanation": "Method overloading improves code readability and reusability by allowing different implementations under the same method name based on different parameters."
        },
        {
            "question": "Which of these is a correct example of method overloading?",
            "options": [
                "int add(int a, int b) and double add(double x, double y)",
                "int add(int a, int b) and int add(int a)",
                "void add(int a, int b) and int add(int a, int b)",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "Both examples show different parameter lists (either in number or type), which is a valid case of method overloading."
        },
        {
            "question": "Can constructors in Java be overloaded?",
            "options": [
                "Yes",
                "No",
                "Only in abstract classes",
                "Only if the class is final"
            ],
            "answer": "Yes",
            "explanation": "Constructors in Java can be overloaded, similar to methods, by having different sets of parameters."
        },
        {
            "question": "What happens if two overloaded methods have the same parameters but different return types?",
            "options": [
                "The program will not compile",
                "The program will compile, and the return type will be decided at runtime",
                "The program will compile, but an exception will occur at runtime",
                "The program will compile and execute without issues"
            ],
            "answer": "The program will not compile",
            "explanation": "In Java, methods cannot be overloaded by return type alone. If two methods have the same name and parameters but different return types, it will result in a compile-time error."
        },
        {
            "question": "How does method overloading support polymorphism?",
            "options": [
                "By allowing runtime method binding",
                "By enabling compile-time method selection",
                "By providing inheritance mechanisms",
                "By enabling dynamic method dispatch"
            ],
            "answer": "By enabling compile-time method selection",
            "explanation": "Method overloading is a form of compile-time polymorphism where the method to be executed is determined by the compiler based on the method's signature."
        },
        {
            "question": "Can method overloading be achieved by changing the order of parameters?",
            "options": [
                "Yes",
                "No",
                "Only if parameters are of different types",
                "Only if parameters are of the same type"
            ],
            "answer": "Yes",
            "explanation": "Method overloading can be achieved by changing the order of parameters, especially if the parameters are of different types."
        },
        {
            "question": "Why is method overloading not possible across different classes in Java?",
            "options": [
                "Due to inheritance",
                "It violates encapsulation",
                "Method overloading is class-specific",
                "Due to polymorphism"
            ],
            "answer": "Method overloading is class-specific",
            "explanation": "Method overloading is specific to the class in which the methods are defined. Overloading implies multiple methods with the same name in the same class."
        },
        {
            "question": "What is the role of the 'this' keyword in method overloading?",
            "options": [
                "To call an overloaded method",
                "To refer to the current class instance variables",
                "To distinguish between local and instance variables",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "The 'this' keyword in method overloading can be used to call another constructor (overloaded method) within the same class or to distinguish between instance variables and parameters when they have the same name."
        },
        {
            "question": "What is method overriding in Java?",
            "options": [
                "Renaming a method in a subclass",
                "Changing the return type of a method in a subclass",
                "Defining a method in a subclass that already exists in the superclass",
                "Creating a new method in a subclass that does not exist in the superclass"
            ],
            "answer": "Defining a method in a subclass that already exists in the superclass",
            "explanation": "Method overriding in Java occurs when a subclass provides its own specific implementation for a method that already exists in its superclass."
        },
        {
            "question": "What is required for a method to be overridden?",
            "options": [
                "The method must be static",
                "The method must have a different name",
                "The method must have the same name and same parameter list",
                "The method must have the same name but a different parameter list"
            ],
            "answer": "The method must have the same name and same parameter list",
            "explanation": "For a method to be overridden in Java, it must have the same name and the same parameter list as the method in the superclass."
        },
        {
            "question": "Can private methods be overridden in Java?",
            "options": [
                "Yes",
                "No",
                "Only if they are static",
                "Only if they are final"
            ],
            "answer": "No",
            "explanation": "Private methods in Java cannot be overridden because they are not accessible to subclasses."
        },
        {
            "question": "Which keyword is used to call an overridden method from a subclass in Java?",
            "options": [
                "this",
                "super",
                "extend",
                "override"
            ],
            "answer": "super",
            "explanation": "The 'super' keyword is used in a subclass to call the overridden method from the superclass."
        },
        {
            "question": "What is dynamic method dispatch in Java?",
            "options": [
                "Calling a static method of a class",
                "Deciding which method to call at compile time",
                "Resolving a method call at runtime",
                "Changing the method signature at runtime"
            ],
            "answer": "Resolving a method call at runtime",
            "explanation": "Dynamic method dispatch is a runtime polymorphism feature in Java where the call to an overridden method is resolved at runtime."
        },
        {
            "question": "Can an overridden method change the access level of the base method?",
            "options": [
                "Yes, to any level",
                "No, it must be the same",
                "Yes, but it cannot be more restrictive",
                "Yes, but it must be more restrictive"
            ],
            "answer": "Yes, but it cannot be more restrictive",
            "explanation": "An overridden method in Java can have a less restrictive access modifier than the method in the superclass but cannot be more restrictive."
        },
        {
            "question": "Can a final method be overridden in Java?",
            "options": [
                "Yes",
                "No",
                "Only if it's also static",
                "Only in the same package"
            ],
            "answer": "No",
            "explanation": "Final methods in Java cannot be overridden as they are declared to prevent any modification."
        },
        {
            "question": "What happens if the 'super' keyword is not used in an overridden method?",
            "options": [
                "The superclass method is automatically called",
                "An error occurs",
                "The overridden method will not execute",
                "Only the subclass's version of the method is executed"
            ],
            "answer": "Only the subclass's version of the method is executed",
            "explanation": "If 'super' is not used, the overridden method in the subclass will execute without calling the superclass version of the method."
        },
        {
            "question": "Why is method overriding used in Java?",
            "options": [
                "To improve the readability of the code",
                "To allow the subclass to provide a specific implementation of a method",
                "To increase the efficiency of the code",
                "To prevent changes in the superclass method"
            ],
            "answer": "To allow the subclass to provide a specific implementation of a method",
            "explanation": "Method overriding is used in Java to allow a subclass to provide its own specific implementation of a method already defined in its superclass."
        },
        {
            "question": "What is the significance of @Override annotation in Java?",
            "options": [
                "It changes the behavior of the overridden method",
                "It indicates that a method is being overridden",
                "It is mandatory for method overriding",
                "It improves the performance of the method"
            ],
            "answer": "It indicates that a method is being overridden",
            "explanation": "The @Override annotation is used in Java to indicate that a method is intended to override a method in a superclass."
        },
        {
            "question": "Can constructors be overridden in Java?",
            "options": [
                "Yes",
                "No",
                "Only if they are public",
                "Only if they are protected"
            ],
            "answer": "No",
            "explanation": "Constructors cannot be overridden in Java as they are not inherited by subclasses."
        },
        {
            "question": "Is it possible to override a method in the same class?",
            "options": [
                "Yes",
                "No",
                "Only if the method is static",
                "Only if the method is private"
            ],
            "answer": "No",
            "explanation": "Overriding a method requires having a method with the same signature in a subclass. It is not possible to override a method within the same class."
        },
        {
            "question": "What is a thread in Java?",
            "options": [
                "A sequence of executed statements",
                "A lightweight process",
                "A library for handling data",
                "A type of array"
            ],
            "answer": "A lightweight process",
            "explanation": "In Java, a thread is a lightweight process that allows for concurrent execution within a program."
        },
        {
            "question": "How do you start a thread in Java?",
            "options": [
                "By calling the run() method",
                "By calling the start() method",
                "By creating an instance of Thread",
                "By using a loop"
            ],
            "answer": "By calling the start() method",
            "explanation": "To start a thread in Java, you create an instance of the Thread class and call its start() method."
        },
        {
            "question": "What does the Runnable interface contain?",
            "options": [
                "Multiple methods",
                "Only the run() method",
                "A variable",
                "Several constructors"
            ],
            "answer": "Only the run() method",
            "explanation": "The Runnable interface in Java contains only one method, run(), which is implemented by classes that intend to execute code on a thread."
        },
        {
            "question": "What is the purpose of the run() method in a thread?",
            "options": [
                "To initialize thread properties",
                "To define the code executed by the thread",
                "To stop the thread",
                "To pause the thread execution"
            ],
            "answer": "To define the code executed by the thread",
            "explanation": "The run() method defines the code that is executed when the thread starts running."
        },
        {
            "question": "Which method is used to check if a thread is alive?",
            "options": [
                "isRunning()",
                "isAlive()",
                "checkStatus()",
                "getStatus()"
            ],
            "answer": "isAlive()",
            "explanation": "The isAlive() method in the Thread class is used to check if a thread is still running."
        },
        {
            "question": "Can we call the run() method directly to start a thread?",
            "options": [
                "Yes",
                "No",
                "Only in certain conditions",
                "Only after calling start()"
            ],
            "answer": "No",
            "explanation": "Calling the run() method directly does not start a new thread; it just executes the run() method in the current thread."
        },
        {
            "question": "What is thread priority in Java?",
            "options": [
                "The order in which threads are created",
                "The order in which threads are executed",
                "A measure of how often a thread should be executed",
                "A setting that determines thread behavior"
            ],
            "answer": "A measure of how often a thread should be executed",
            "explanation": "Thread priority in Java is a measure that indicates how often a thread should be given time to execute, relative to other threads."
        },
        {
            "question": "What happens when you call the sleep() method on a thread?",
            "options": [
                "The thread starts executing immediately",
                "The thread stops permanently",
                "The thread execution is paused for a specified duration",
                "The thread's execution is permanently terminated"
            ],
            "answer": "The thread execution is paused for a specified duration",
            "explanation": "The sleep() method pauses the execution of the current thread for a specified duration."
        },
        {
            "question": "Can two threads share the same instance of a variable?",
            "options": [
                "Yes",
                "No",
                "Only static variables",
                "Only final variables"
            ],
            "answer": "Yes",
            "explanation": "Threads can share the same instance of a variable, especially if the variable is a member of an object accessed by multiple threads."
        },
        {
            "question": "What is synchronization in the context of Java threads?",
            "options": [
                "Running multiple threads simultaneously",
                "Ensuring only one thread accesses a resource at a time",
                "Speeding up thread execution",
                "Creating multiple instances of a thread"
            ],
            "answer": "Ensuring only one thread accesses a resource at a time",
            "explanation": "Synchronization is a mechanism that ensures that only one thread at a time accesses a shared resource or critical section."
        },
        {
            "question": "What keyword is used to synchronize a method or block in Java?",
            "options": [
                "sync",
                "synchronized",
                "lock",
                "atomic"
            ],
            "answer": "synchronized",
            "explanation": "The synchronized keyword is used to lock a method or a block so that only one thread can access it at a time."
        },
        {
            "question": "What is a deadlock in multithreading?",
            "options": [
                "When a thread is terminated unexpectedly",
                "When a thread runs indefinitely",
                "When two or more threads are waiting forever for each other to release resources",
                "When a thread is paused"
            ],
            "answer": "When two or more threads are waiting forever for each other to release resources",
            "explanation": "A deadlock is a situation in multithreading where two or more threads are blocked forever, waiting for each other to release the resources they need."
        },
        {
            "question": "What is the Thread class's join() method used for?",
            "options": [
                "To start a thread",
                "To pause a thread",
                "To make a thread wait for another thread's completion",
                "To check the status of a thread"
            ],
            "answer": "To make a thread wait for another thread's completion",
            "explanation": "The join() method is used in a thread to make the current thread wait until the specified thread completes its execution."
        },
        {
            "question": "Which method is used to yield execution to another thread?",
            "options": [
                "yield()",
                "sleep()",
                "stop()",
                "wait()"
            ],
            "answer": "yield()",
            "explanation": "The yield() method in the Thread class causes the currently executing thread to pause and allow other threads to execute."
        },
        {
            "question": "What does thread safety mean in Java?",
            "options": [
                "Executing threads in a sequential manner",
                "Ensuring a thread runs without interruption",
                "Protecting data from corruption when accessed by multiple threads",
                "Locking a thread until its execution is complete"
            ],
            "answer": "Protecting data from corruption when accessed by multiple threads",
            "explanation": "Thread safety refers to the protection of data from corruption or inconsistent results when it is accessed by multiple threads simultaneously."
        },
        {
            "question": "What is a daemon thread in Java?",
            "options": [
                "A high-priority thread",
                "A low-priority thread",
                "A thread that runs in the background",
                "The main thread of an application"
            ],
            "answer": "A thread that runs in the background",
            "explanation": "Daemon threads in Java are background threads that provide services to user threads. They do not prevent the JVM from exiting when all user threads have finished executing."
        },
        {
            "question": "How do you set a thread as a daemon thread in Java?",
            "options": [
                "Using the setDaemon() method",
                "By calling the start() method",
                "Using the daemon keyword",
                "By inheriting from the Daemon class"
            ],
            "answer": "Using the setDaemon() method",
            "explanation": "The setDaemon() method of the Thread class is used to mark a thread as a daemon thread."
        },
        {
            "question": "In Java, what happens when a thread's start() method is called more than once?",
            "options": [
                "The thread is executed multiple times",
                "The thread's priority is increased",
                "An IllegalThreadStateException is thrown",
                "The thread's execution is paused"
            ],
            "answer": "An IllegalThreadStateException is thrown",
            "explanation": "Calling the start() method more than once on a thread in Java results in an IllegalThreadStateException."
        },
        {
            "question": "What is the initial state of a thread when it is created?",
            "options": [
                "Running",
                "Runnable",
                "New",
                "Waiting"
            ],
            "answer": "New",
            "explanation": "When a thread is created in Java, its initial state is 'New'. It has not yet started running."
        },
        {
            "question": "What is the purpose of the interrupt() method in Java threads?",
            "options": [
                "To stop a thread immediately",
                "To pause a thread's execution",
                "To request a thread to stop",
                "To increase a thread's priority"
            ],
            "answer": "To request a thread to stop",
            "explanation": "The interrupt() method is used to send an interrupt signal to a thread, which can be used to request the thread to stop its execution."
        },
        {
            "question": "How can you check if a thread has been interrupted?",
            "options": [
                "Using the isInterrupted() method",
                "By checking the thread's state",
                "Using the hasStopped() method",
                "By catching an InterruptedException"
            ],
            "answer": "Using the isInterrupted() method",
            "explanation": "The isInterrupted() method in the Thread class is used to check if a thread has been interrupted."
        },
        {
            "question": "Can you access local variables of a method in a thread's run() method?",
            "options": [
                "Yes, always",
                "No, never",
                "Only if they are final",
                "Only if they are static"
            ],
            "answer": "Only if they are final",
            "explanation": "Local variables of a method can be accessed in a thread's run() method only if they are declared final."
        },
        {
            "question": "What is the difference between the wait() and sleep() methods in Java threads?",
            "options": [
                "wait() releases the lock, sleep() does not",
                "sleep() releases the lock, wait() does not",
                "There is no difference",
                "wait() can be interrupted, sleep() cannot"
            ],
            "answer": "wait() releases the lock, sleep() does not",
            "explanation": "The wait() method releases the monitor's lock held by the thread, whereas sleep() keeps the monitor's lock until it wakes up or is interrupted."
        },
        {
            "question": "What is the primary use of the notify() and notifyAll() methods in Java threads?",
            "options": [
                "To terminate threads",
                "To resume threads from waiting state",
                "To create new threads",
                "To change thread priorities"
            ],
            "answer": "To resume threads from waiting state",
            "explanation": "The notify() and notifyAll() methods are used to signal one or all threads that are waiting on the object's monitor to resume execution."
        },
        {
            "question": "What does it mean for a method to be thread-safe?",
            "options": [
                "The method can only be executed by one thread at a time",
                "The method can be safely ignored by threads",
                "The method can be executed by multiple threads simultaneously without causing issues",
                "The method prioritizes certain threads over others"
            ],
            "answer": "The method can be executed by multiple threads simultaneously without causing issues",
            "explanation": "A thread-safe method is one that can be safely invoked by multiple threads at the same time without leading to problems such as data corruption or inconsistent results."
        },
        {
            "question": "What is an exception in Java?",
            "options": [
                "An error in the code syntax",
                "A runtime error disrupting the normal flow of the program",
                "A compile-time error",
                "A warning during program execution"
            ],
            "answer": "A runtime error disrupting the normal flow of the program",
            "explanation": "An exception in Java is a runtime error that disrupts the normal flow of the program's instructions."
        },
        {
            "question": "Which keyword is used to handle exceptions in Java?",
            "options": [
                "throw",
                "catch",
                "try",
                "error"
            ],
            "answer": "try",
            "explanation": "The 'try' keyword is used to specify a block where exceptions can occur and to initiate exception handling."
        },
        {
            "question": "What is the purpose of the 'catch' block in Java?",
            "options": [
                "To declare an exception",
                "To throw an exception",
                "To handle an exception",
                "To test a block of code for errors"
            ],
            "answer": "To handle an exception",
            "explanation": "The 'catch' block in Java is used to handle the exception that might be thrown in the 'try' block."
        },
        {
            "question": "What is a checked exception in Java?",
            "options": [
                "An exception that is checked at compile time",
                "An exception that occurs at runtime",
                "An exception that can be ignored",
                "An exception that must be caught using a try-catch block"
            ],
            "answer": "An exception that is checked at compile time",
            "explanation": "Checked exceptions are exceptions that are checked at compile time, and the programmer is required to handle them."
        },
        {
            "question": "Which of these is a checked exception?",
            "options": [
                "NullPointerException",
                "ArithmeticException",
                "IOException",
                "ArrayIndexOutOfBoundsException"
            ],
            "answer": "IOException",
            "explanation": "IOException is a checked exception, as it must be either caught or declared in the method signature."
        },
        {
            "question": "What is an unchecked exception in Java?",
            "options": [
                "An exception that is checked at compile time",
                "An exception that occurs due to logical errors",
                "An exception that is not checked at compile time",
                "An exception that can be ignored"
            ],
            "answer": "An exception that is not checked at compile time",
            "explanation": "Unchecked exceptions are runtime exceptions that are not checked at compile time, such as NullPointerException."
        },
        {
            "question": "How can a method declare an exception?",
            "options": [
                "Using the 'throw' keyword",
                "Using the 'throws' keyword",
                "Using the 'exception' keyword",
                "By including it in the method body"
            ],
            "answer": "Using the 'throws' keyword",
            "explanation": "A method can declare an exception in its signature using the 'throws' keyword followed by the exception type."
        },
        {
            "question": "What is the 'finally' block used for in Java?",
            "options": [
                "To finally execute the code after several tries",
                "To execute code, regardless of whether an exception was thrown or not",
                "To declare final variables",
                "To finalize object creation"
            ],
            "answer": "To execute code, regardless of whether an exception was thrown or not",
            "explanation": "The 'finally' block in Java is used to execute code regardless of whether or not an exception occurs in the try-catch block."
        },
        {
            "question": "What does the 'throw' keyword do in Java?",
            "options": [
                "Catches an exception",
                "Declares an exception",
                "Manually throws an exception",
                "Tests a block of code for errors"
            ],
            "answer": "Manually throws an exception",
            "explanation": "The 'throw' keyword is used to manually throw an exception in Java."
        },
        {
            "question": "What is the base class for all exceptions in Java?",
            "options": [
                "RuntimeException",
                "Error",
                "Throwable",
                "Exception"
            ],
            "answer": "Throwable",
            "explanation": "The Throwable class is the superclass of all errors and exceptions in the Java language."
        },
        {
            "question": "Can multiple catch blocks be used with a single try block?",
            "options": [
                "Yes",
                "No",
                "Only if they catch the same type of exception",
                "Only in a nested try block"
            ],
            "answer": "Yes",
            "explanation": "Multiple catch blocks can be associated with a single try block to handle different types of exceptions."
        },
        {
            "question": "What is the correct order of catch blocks when handling multiple exceptions?",
            "options": [
                "From more specific to more general exceptions",
                "From more general to more specific exceptions",
                "Alphabetical order",
                "Order does not matter"
            ],
            "answer": "From more specific to more general exceptions",
            "explanation": "When using multiple catch blocks, they should be ordered from most specific to most general to avoid unreachable code."
        },
        {
            "question": "What happens if an exception is not caught?",
            "options": [
                "The program will re-try the code block",
                "The program will continue execution",
                "The exception is ignored",
                "The program terminates abnormally"
            ],
            "answer": "The program terminates abnormally",
            "explanation": "If an exception is not caught, it causes the program to terminate abruptly."
        },
        {
            "question": "Can the 'finally' block be used without a 'catch' block?",
            "options": [
                "Yes",
                "No",
                "Only in combination with a 'throw' block",
                "Only if there is no exception"
            ],
            "answer": "Yes",
            "explanation": "The 'finally' block can be used after a 'try' block without a 'catch' block. It is typically used to execute important code such as closing resources, regardless of whether an exception occurs."
        },
        {
            "question": "What is exception propagation in Java?",
            "options": [
                "Throwing an exception from a method to its caller",
                "Generating exceptions randomly",
                "Spreading an exception to multiple classes",
                "Ignoring an exception"
            ],
            "answer": "Throwing an exception from a method to its caller",
            "explanation": "Exception propagation in Java refers to the process where an exception is thrown from the method where it occurred to the method that called it."
        },
        {
            "question": "What is a custom exception in Java?",
            "options": [
                "An exception provided by Java",
                "A user-defined exception class",
                "A built-in runtime exception",
                "An error during execution"
            ],
            "answer": "A user-defined exception class",
            "explanation": "A custom exception in Java is an exception defined by the user, created by extending the Exception class."
        },
        {
            "question": "What is a stack trace in the context of exceptions?",
            "options": [
                "A memory allocation method",
                "A list of methods that were called before an exception occurred",
                "A type of unchecked exception",
                "A data structure for storing exceptions"
            ],
            "answer": "A list of methods that were called before an exception occurred",
            "explanation": "A stack trace is a report that provides information about the methods that were invoked before an exception was thrown."
        },
        {
            "question": "What keyword is used to create a custom exception in Java?",
            "options": [
                "throw",
                "throws",
                "exception",
                "extend"
            ],
            "answer": "extend",
            "explanation": "To create a custom exception, the 'extend' keyword is used to make a new class that extends either Exception or RuntimeException."
        },
        {
            "question": "How can you handle multiple types of exceptions in a single catch block?",
            "options": [
                "By using the '|' operator",
                "By separating exception types with commas",
                "By using the '&' operator",
                "It is not possible"
            ],
            "answer": "By using the '|' operator",
            "explanation": "In Java, you can handle multiple types of exceptions in a single catch block by separating the exception types with the '|' (pipe) operator."
        },
        {
            "question": "What is a RuntimeException in Java?",
            "options": [
                "An exception that is checked at compile time",
                "An exception that is thrown at runtime and not checked at compile time",
                "An exception that occurs during the compilation",
                "A type of error"
            ],
            "answer": "An exception that is thrown at runtime and not checked at compile time",
            "explanation": "RuntimeExceptions are exceptions that are thrown at runtime and do not need to be declared or caught."
        },
        {
            "question": "Can you throw an exception manually in Java?",
            "options": [
                "Yes, using the 'throw' keyword",
                "No, exceptions occur naturally",
                "Only system exceptions can be thrown",
                "Only in a catch block"
            ],
            "answer": "Yes, using the 'throw' keyword",
            "explanation": "You can manually throw an exception in Java using the 'throw' keyword followed by an instance of the exception."
        },
        {
            "question": "Why is it advisable to handle exceptions?",
            "options": [
                "To improve the performance of the application",
                "To provide a user-friendly response to errors",
                "To increase the speed of code execution",
                "To debug the program"
            ],
            "answer": "To provide a user-friendly response to errors",
            "explanation": "Handling exceptions is important to provide a user-friendly response and to maintain the normal flow of the application when errors occur."
        },
        {
            "question": "What does it mean to \"catch\" an exception?",
            "options": [
                "To ignore an exception",
                "To log the occurrence of an exception",
                "To respond to an exception being thrown",
                "To prevent an exception"
            ],
            "answer": "To respond to an exception being thrown",
            "explanation": "Catching an exception means writing code to respond to and handle the exception that has been thrown."
        },
        {
            "question": "What type of exceptions need to be declared in a method's 'throws' clause?",
            "options": [
                "All exceptions",
                "Only unchecked exceptions",
                "Only checked exceptions",
                "Only RuntimeExceptions"
            ],
            "answer": "Only checked exceptions",
            "explanation": "Checked exceptions that might be thrown within a method must be declared in the method's 'throws' clause."
        },
        {
            "question": "What is the difference between the Error and Exception classes in Java?",
            "options": [
                "No difference, they are the same",
                "Error is for compile-time issues, Exception is for runtime issues",
                "Error represents serious problems that applications should not try to handle, Exception represents conditions that applications might want to handle",
                "Error is a subclass of Exception"
            ],
            "answer": "Error represents serious problems that applications should not try to handle, Exception represents conditions that applications might want to handle",
            "explanation": "Error is used for serious system-level problems that applications generally should not try to handle, while Exception is used for conditions that applications might want to catch and handle."
        },
        {
            "question": "What is an ArrayList in Java?",
            "options": [
                "A dynamic array",
                "A static array",
                "A linked list",
                "A hash table"
            ],
            "answer": "A dynamic array",
            "explanation": "ArrayList in Java is a resizable array implementation of the List interface."
        },
        {
            "question": "How do you instantiate an ArrayList in Java?",
            "options": [
                "List myList = new ArrayList();",
                "Array myList = new ArrayList();",
                "ArrayList myList = new ArrayList();",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "An ArrayList can be instantiated using either the ArrayList type or the List interface."
        },
        {
            "question": "Which of these is a valid way to add elements to an ArrayList?",
            "options": [
                "add()",
                "put()",
                "insert()",
                "append()"
            ],
            "answer": "add()",
            "explanation": "The add() method is used to add elements to an ArrayList."
        },
        {
            "question": "How do you remove an element from an ArrayList?",
            "options": [
                "remove()",
                "delete()",
                "clear()",
                "discard()"
            ],
            "answer": "remove()",
            "explanation": "The remove() method is used to remove an element from an ArrayList."
        },
        {
            "question": "How do you find the size of an ArrayList?",
            "options": [
                "size()",
                "length()",
                "count()",
                "getSize()"
            ],
            "answer": "size()",
            "explanation": "The size() method returns the number of elements in an ArrayList."
        },
        {
            "question": "Can an ArrayList contain multiple references to the same object?",
            "options": [
                "Yes",
                "No",
                "Only if the object is immutable",
                "Only if the object is a String"
            ],
            "answer": "Yes",
            "explanation": "An ArrayList can contain multiple references to the same object."
        },
        {
            "question": "What happens when you add elements to an ArrayList beyond its current capacity?",
            "options": [
                "The add operation fails",
                "The ArrayList is resized automatically",
                "It throws an exception",
                "The elements are not added"
            ],
            "answer": "The ArrayList is resized automatically",
            "explanation": "When elements are added beyond the ArrayList's capacity, it automatically resizes itself to accommodate the new elements."
        },
        {
            "question": "How do you access an element in an ArrayList?",
            "options": [
                "get(index)",
                "retrieve(index)",
                "fetch(index)",
                "access(index)"
            ],
            "answer": "get(index)",
            "explanation": "The get(index) method is used to access an element from an ArrayList at the specified index."
        },
        {
            "question": "Can an ArrayList contain different types of elements?",
            "options": [
                "Yes, but only if declared with a wildcard",
                "No, it can contain only one type",
                "Yes, it can contain any type of object",
                "Only primitive types"
            ],
            "answer": "Yes, it can contain any type of object",
            "explanation": "ArrayList can contain different types of objects since it stores its elements as Object references."
        },
        {
            "question": "How do you update an element in an ArrayList?",
            "options": [
                "update(index, element)",
                "set(index, element)",
                "change(index, element)",
                "modify(index, element)"
            ],
            "answer": "set(index, element)",
            "explanation": "The set(index, element) method is used to update an element at the specified index in an ArrayList."
        },
        {
            "question": "What is the return type of the remove() method in ArrayList?",
            "options": [
                "void",
                "boolean",
                "the type of the element removed",
                "int"
            ],
            "answer": "the type of the element removed",
            "explanation": "The remove() method returns the element that was removed from the list."
        },
        {
            "question": "What does the clear() method do in an ArrayList?",
            "options": [
                "Removes all elements",
                "Clears the first element",
                "Resets all elements to null",
                "Shrinks the ArrayList size to zero"
            ],
            "answer": "Removes all elements",
            "explanation": "The clear() method removes all of the elements from the ArrayList, leaving it empty."
        },
        {
            "question": "How can you iterate over the elements of an ArrayList?",
            "options": [
                "Using a while loop",
                "Using a for loop",
                "Using an iterator or enhanced for loop",
                "Both b and c"
            ],
            "answer": "Both b and c",
            "explanation": "Elements of an ArrayList can be iterated using a for loop, an enhanced for loop, or an Iterator."
        },
        {
            "question": "What happens if you try to access an index that is out of bounds in an ArrayList?",
            "options": [
                "Returns null",
                "Adds a new element",
                "Throws an IndexOutOfBoundsException",
                "Automatically resizes the ArrayList"
            ],
            "answer": "Throws an IndexOutOfBoundsException",
            "explanation": "Accessing an out-of-bounds index in an ArrayList results in an IndexOutOfBoundsException."
        },
        {
            "question": "Is ArrayList synchronized in Java?",
            "options": [
                "Yes",
                "No",
                "Only when explicitly synchronized",
                "Synchronization is not applicable"
            ],
            "answer": "No",
            "explanation": "ArrayList is not synchronized. If multiple threads access it concurrently and at least one of the threads modifies it structurally, it must be synchronized externally."
        },
        {
            "question": "What is a LinkedList in Java?",
            "options": [
                "A type of array",
                "A static data structure",
                "A dynamic data structure allowing sequential access",
                "A collection of nodes linked together"
            ],
            "answer": "A collection of nodes linked together",
            "explanation": "A LinkedList in Java is a linear data structure where each element (node) is linked to its next and previous elements."
        },
        {
            "question": "How does a LinkedList differ from an ArrayList in Java?",
            "options": [
                "LinkedList uses dynamic arrays",
                "LinkedList allows for constant time insertions or removals",
                "LinkedList cannot store objects",
                "LinkedList is always faster than ArrayList"
            ],
            "answer": "LinkedList allows for constant time insertions or removals",
            "explanation": "Unlike ArrayLists, LinkedLists in Java are designed for efficient insertion and removal operations."
        },
        {
            "question": "Which interface does LinkedList implement in Java?",
            "options": [
                "List",
                "Map",
                "Set",
                "Queue"
            ],
            "answer": "List",
            "explanation": "LinkedList implements the List interface, providing ordered collection behavior."
        },
        {
            "question": "Can a Java LinkedList contain duplicate elements?",
            "options": [
                "Yes",
                "No",
                "Only if the elements are integers",
                "Only if the LinkedList is synchronized"
            ],
            "answer": "Yes",
            "explanation": "LinkedList can contain duplicate elements, as it allows multiple null and duplicate values."
        },
        {
            "question": "How do you add an element at the beginning of a LinkedList?",
            "options": [
                "addFirst()",
                "prepend()",
                "insertFirst()",
                "addToStart()"
            ],
            "answer": "addFirst()",
            "explanation": "The addFirst() method is used to insert an element at the beginning of a LinkedList."
        },
        {
            "question": "What method is used to remove the last element of a LinkedList?",
            "options": [
                "removeLast()",
                "deleteLast()",
                "pop()",
                "drop()"
            ],
            "answer": "removeLast()",
            "explanation": "The removeLast() method removes and returns the last element of the LinkedList."
        },
        {
            "question": "Which of these methods retrieves, but does not remove, the head of a LinkedList?",
            "options": [
                "getFirst()",
                "peek()",
                "element()",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "getFirst(), peek(), and element() methods retrieve but do not remove the head of the LinkedList."
        },
        {
            "question": "What is the complexity of removing an element from the middle of a LinkedList?",
            "options": [
                "O(1)",
                "O(n)",
                "O(log n)",
                "O(n^2)"
            ],
            "answer": "O(n)",
            "explanation": "Removing an element from the middle of a LinkedList has a time complexity of O(n) because it may require traversing the list."
        },
        {
            "question": "How do you reverse a LinkedList in Java?",
            "options": [
                "Using the reverse() method",
                "By manually swapping nodes",
                "Using Collections.reverse()",
                "LinkedLists cannot be reversed"
            ],
            "answer": "Using Collections.reverse()",
            "explanation": "Collections.reverse() can be used to reverse a LinkedList in Java."
        },
        {
            "question": "What happens when you add elements to a LinkedList using add() method?",
            "options": [
                "Elements are added to the start",
                "Elements are added to the end",
                "Elements replace the first element",
                "Elements are added randomly"
            ],
            "answer": "Elements are added to the end",
            "explanation": "The add() method in LinkedList adds elements to the end of the list."
        },
        {
            "question": "Can you use a for-each loop to iterate over a LinkedList?",
            "options": [
                "Yes",
                "No",
                "Only if the LinkedList is not empty",
                "Only if the LinkedList contains specific types"
            ],
            "answer": "Yes",
            "explanation": "LinkedLists in Java can be iterated over using a for-each loop."
        },
        {
            "question": "What is the method to retrieve and remove the first element of a LinkedList?",
            "options": [
                "removeFirst()",
                "poll()",
                "pop()",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "The removeFirst() and pop() methods both retrieve and remove the first element of the LinkedList."
        },
        {
            "question": "What happens if you try to access an index that is out of bounds in a LinkedList?",
            "options": [
                "Returns null",
                "An IndexOutOfBoundsException is thrown",
                "The request is ignored",
                "A new element is added at that index"
            ],
            "answer": "An IndexOutOfBoundsException is thrown",
            "explanation": "Accessing an out-of-bounds index in a LinkedList results in an IndexOutOfBoundsException."
        },
        {
            "question": "Is LinkedList synchronized in Java?",
            "options": [
                "Yes",
                "No",
                "Only if explicitly synchronized",
                "Synchronization is not applicable to LinkedLists"
            ],
            "answer": "No",
            "explanation": "LinkedList is not synchronized by default. If multiple threads access it concurrently, external synchronization is required."
        },
        {
            "question": "How can you convert a LinkedList to an array in Java?",
            "options": [
                "Using the toArray() method",
                "By iterating over the LinkedList and adding elements to an array",
                "LinkedLists cannot be converted to arrays",
                "Using the convert() method"
            ],
            "answer": "Using the toArray() method",
            "explanation": "The toArray() method can be used to convert a LinkedList into an array, making it an effective way to transition between these two data structures."
        },
        {
            "question": "What is a HashSet in Java?",
            "options": [
                "A dynamic array",
                "A collection that uses a hash table for storage",
                "A linked list",
                "A data structure for key-value pairs"
            ],
            "answer": "A collection that uses a hash table for storage",
            "explanation": "HashSet in Java is a collection that uses a hash table, providing efficient storage and retrieval."
        },
        {
            "question": "What is the primary characteristic of a HashSet?",
            "options": [
                "Ordered elements",
                "Duplicate elements",
                "Sorted elements",
                "Unique elements"
            ],
            "answer": "Unique elements",
            "explanation": "HashSet stores unique elements only; it does not allow duplicates."
        },
        {
            "question": "Which interface does HashSet implement?",
            "options": [
                "List",
                "Map",
                "Set",
                "Queue"
            ],
            "answer": "Set",
            "explanation": "HashSet implements the Set interface."
        },
        {
            "question": "How does HashSet store its elements?",
            "options": [
                "In index-based order",
                "In a sequential list",
                "Based on hash codes of the elements",
                "In sorted order"
            ],
            "answer": "Based on hash codes of the elements",
            "explanation": "HashSet stores elements by using a hash table, where elements are placed according to their hash codes."
        },
        {
            "question": "Can HashSet contain null values?",
            "options": [
                "Yes",
                "No",
                "Only one null value",
                "Only if it's empty"
            ],
            "answer": "Only one null value",
            "explanation": "HashSet can contain one null value."
        },
        {
            "question": "What is the time complexity of basic operations such as add, remove, and contains in HashSet?",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n^2)"
            ],
            "answer": "O(1)",
            "explanation": "Basic operations like add, remove, and contains have a constant time complexity O(1) in a HashSet."
        },
        {
            "question": "How do you add elements to a HashSet?",
            "options": [
                "add()",
                "put()",
                "insert()",
                "append()"
            ],
            "answer": "add()",
            "explanation": "The add() method is used to add elements to a HashSet."
        },
        {
            "question": "How do you check if a HashSet contains a specific element?",
            "options": [
                "find()",
                "search()",
                "contains()",
                "hasElement()"
            ],
            "answer": "contains()",
            "explanation": "The contains() method is used to check if an element exists in a HashSet."
        },
        {
            "question": "What happens if you try to add a duplicate element to a HashSet?",
            "options": [
                "The element is added at the end",
                "The element replaces the existing one",
                "The duplicate is ignored",
                "An exception is thrown"
            ],
            "answer": "The duplicate is ignored",
            "explanation": "If a duplicate element is added to a HashSet, it is simply ignored."
        },
        {
            "question": "How do you remove all elements from a HashSet?",
            "options": [
                "clear()",
                "removeAll()",
                "deleteAll()",
                "empty()"
            ],
            "answer": "clear()",
            "explanation": "The clear() method is used to remove all elements from a HashSet, making it empty."
        },
        {
            "question": "What happens when you iterate over a HashSet?",
            "options": [
                "The elements are returned in sorted order",
                "The elements are returned in the order they were added",
                "The order of elements is unpredictable",
                "Elements are returned in reverse order"
            ],
            "answer": "The order of elements is unpredictable",
            "explanation": "Iterating over a HashSet does not guarantee any specific order of elements."
        },
        {
            "question": "Can a HashSet be synchronized?",
            "options": [
                "Yes",
                "No",
                "Only in multi-threaded applications",
                "Only if it's empty"
            ],
            "answer": "Yes",
            "explanation": "A HashSet can be synchronized by wrapping it with Collections.synchronizedSet()."
        },
        {
            "question": "Is it possible to convert a HashSet to an ArrayList?",
            "options": [
                "Yes",
                "No",
                "Only if it has less than 10 elements",
                "Only if it's sorted"
            ],
            "answer": "Yes",
            "explanation": "A HashSet can be converted to an ArrayList by passing the set to the ArrayList constructor."
        },
        {
            "question": "What constructor can be used to create a HashSet with a specified initial capacity?",
            "options": [
                "HashSet(int capacity)",
                "HashSet()",
                "HashSet(Collection c)",
                "HashSet(int capacity, float loadFactor)"
            ],
            "answer": "HashSet(int capacity)",
            "explanation": "The HashSet(int capacity) constructor creates a HashSet with the specified initial capacity."
        },
        {
            "question": "How can you ensure the elements of a HashSet are sorted?",
            "options": [
                "By using the sort() method",
                "HashSet elements cannot be sorted",
                "By converting it to a TreeSet",
                "By using Collections.sort()"
            ],
            "answer": "By converting it to a TreeSet",
            "explanation": "Elements in a HashSet cannot be sorted directly; however, you can convert the HashSet to a TreeSet to sort the elements."
        },
        {
            "question": "What is a LinkedHashSet in Java?",
            "options": [
                "A type of list",
                "A type of map",
                "A hashed linked list",
                "A set implementation that maintains a linked list across its elements"
            ],
            "answer": "A set implementation that maintains a linked list across its elements",
            "explanation": "LinkedHashSet is a HashSet with a linked list running through its entries to maintain order."
        },
        {
            "question": "How does LinkedHashSet maintain insertion order?",
            "options": [
                "By sorting the elements",
                "By using a hash table",
                "By using a linked list",
                "By using an array"
            ],
            "answer": "By using a linked list",
            "explanation": "LinkedHashSet maintains insertion order through a doubly-linked list across its elements."
        },
        {
            "question": "What interfaces does LinkedHashSet implement?",
            "options": [
                "Set and List",
                "Set and Map",
                "Set and SortedSet",
                "Set only"
            ],
            "answer": "Set only",
            "explanation": "LinkedHashSet implements the Set interface."
        },
        {
            "question": "Can a LinkedHashSet contain duplicate elements?",
            "options": [
                "Yes",
                "No",
                "Only null values can be duplicated",
                "Only if elements are strings"
            ],
            "answer": "No",
            "explanation": "LinkedHashSet does not allow duplicate elements, similar to HashSet."
        },
        {
            "question": "Which method do you use to add elements in a LinkedHashSet?",
            "options": [
                "put()",
                "add()",
                "insert()",
                "append()"
            ],
            "answer": "add()",
            "explanation": "Elements are added to a LinkedHashSet using the add() method."
        },
        {
            "question": "Does LinkedHashSet allow null elements?",
            "options": [
                "Yes",
                "No",
                "Only one null element",
                "Only if it's the first element"
            ],
            "answer": "Yes",
            "explanation": "LinkedHashSet allows null elements."
        },
        {
            "question": "How do you remove an element from a LinkedHashSet?",
            "options": [
                "removeElement()",
                "delete()",
                "remove()",
                "discard()"
            ],
            "answer": "remove()",
            "explanation": "The remove() method is used to remove an element from a LinkedHashSet."
        },
        {
            "question": "What is the initial default capacity of a LinkedHashSet?",
            "options": [
                "10",
                "16",
                "32",
                "8"
            ],
            "answer": "16",
            "explanation": "The default initial capacity of a LinkedHashSet is 16."
        },
        {
            "question": "What is the time complexity of basic operations like add, remove, and contains in a LinkedHashSet?",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n^2)"
            ],
            "answer": "O(1)",
            "explanation": "The basic operations in LinkedHashSet typically have a constant time complexity."
        },
        {
            "question": "What advantage does LinkedHashSet have over HashSet?",
            "options": [
                "Faster performance",
                "Maintains insertion order",
                "Allows duplicates",
                "Smaller memory footprint"
            ],
            "answer": "Maintains insertion order",
            "explanation": "The main advantage of LinkedHashSet over HashSet is that it maintains the order of elements as they were inserted."
        },
        {
            "question": "What method is used to get the number of elements in a LinkedHashSet?",
            "options": [
                "length()",
                "size()",
                "count()",
                "getSize()"
            ],
            "answer": "size()",
            "explanation": "The size() method returns the number of elements in the LinkedHashSet."
        },
        {
            "question": "Can LinkedHashSet be synchronized?",
            "options": [
                "Yes",
                "No",
                "Only in multi-threaded applications",
                "Only if it's empty"
            ],
            "answer": "Yes",
            "explanation": "LinkedHashSet can be synchronized by using Collections.synchronizedSet()."
        },
        {
            "question": "What happens when you iterate over a LinkedHashSet?",
            "options": [
                "The elements are returned in random order",
                "The elements are returned in sorted order",
                "The elements are returned in the order of insertion",
                "The elements are returned in reverse order"
            ],
            "answer": "The elements are returned in the order of insertion",
            "explanation": "When iterating over a LinkedHashSet, the elements are returned in the order they were inserted."
        },
        {
            "question": "How do you clear all elements from a LinkedHashSet?",
            "options": [
                "clear()",
                "removeAll()",
                "reset()",
                "emptySet()"
            ],
            "answer": "clear()",
            "explanation": "The clear() method removes all elements from the LinkedHashSet."
        },
        {
            "question": "What happens if you add a duplicate element to a LinkedHashSet?",
            "options": [
                "The element is added at the end",
                "The element replaces the existing one",
                "The duplicate is ignored",
                "An exception is thrown"
            ],
            "answer": "The duplicate is ignored",
            "explanation": "If a duplicate element is added to a LinkedHashSet, it is not added again, maintaining the uniqueness of elements."
        },
        {
            "question": "What is a TreeSet in Java?",
            "options": [
                "A dynamic array",
                "A type of linked list",
                "A collection that uses a tree for storage",
                "A hash table implementation"
            ],
            "answer": "A collection that uses a tree for storage",
            "explanation": "TreeSet in Java is a NavigableSet implementation that uses a Red-Black tree for storage."
        },
        {
            "question": "How are elements stored in a TreeSet?",
            "options": [
                "In random order",
                "In the order of insertion",
                "In sorted order",
                "In reverse order"
            ],
            "answer": "In sorted order",
            "explanation": "Elements in a TreeSet are stored in a sorted (ascending) order."
        },
        {
            "question": "Can a TreeSet contain duplicate elements?",
            "options": [
                "Yes",
                "No",
                "Only null elements can be duplicated",
                "Only numeric elements can be duplicated"
            ],
            "answer": "No",
            "explanation": "TreeSet cannot contain duplicate elements; it only allows unique elements."
        },
        {
            "question": "What must elements of a TreeSet implement?",
            "options": [
                "The Set interface",
                "The List interface",
                "The Comparable or Comparator interface",
                "The Serializable interface"
            ],
            "answer": "The Comparable or Comparator interface",
            "explanation": "Elements in a TreeSet must implement the Comparable interface, or you can provide a Comparator at TreeSet creation time for custom sorting."
        },
        {
            "question": "What happens if you try to add a null element to a TreeSet?",
            "options": [
                "It's added to the start of the set",
                "It's added to the end of the set",
                "A NullPointerException is thrown",
                "It replaces the smallest element"
            ],
            "answer": "A NullPointerException is thrown",
            "explanation": "Attempting to add a null element to a TreeSet will result in a NullPointerException."
        },
        {
            "question": "How do you remove an element from a TreeSet?",
            "options": [
                "remove()",
                "delete()",
                "discard()",
                "clearElement()"
            ],
            "answer": "remove()",
            "explanation": "The remove() method is used to remove a specific element from a TreeSet."
        },
        {
            "question": "How do you access the first element in a TreeSet?",
            "options": [
                "first()",
                "getFirst()",
                "begin()",
                "head()"
            ],
            "answer": "first()",
            "explanation": "The first() method returns the first (lowest) element currently in the TreeSet."
        },
        {
            "question": "What is the time complexity of basic operations like add, remove, and search in a TreeSet?",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n^2)"
            ],
            "answer": "O(log n)",
            "explanation": "Basic operations in a TreeSet, such as add, remove, and search, have a time complexity of O(log n)."
        },
        {
            "question": "Can a TreeSet be synchronized?",
            "options": [
                "Yes",
                "No",
                "Only in multi-threaded applications",
                "Only if it's empty"
            ],
            "answer": "Yes",
            "explanation": "A TreeSet can be synchronized by using Collections.synchronizedSortedSet()."
        },
        {
            "question": "How do you get a reverse order view of the elements in a TreeSet?",
            "options": [
                "reverse()",
                "descendingSet()",
                "invert()",
                "reverseOrder()"
            ],
            "answer": "descendingSet()",
            "explanation": "The descendingSet() method returns a reverse order view of the elements contained in the TreeSet."
        },
        {
            "question": "What is HashMap in Java?",
            "options": [
                "A list-based collection",
                "A set-based collection",
                "A key-value pair collection",
                "A stack-based collection"
            ],
            "answer": "A key-value pair collection",
            "explanation": "HashMap is a collection in Java that stores data in key-value pairs, allowing for fast retrieval."
        },
        {
            "question": "What interface does HashMap implement?",
            "options": [
                "List",
                "Set",
                "Map",
                "Queue"
            ],
            "answer": "Map",
            "explanation": "HashMap implements the Map interface in Java."
        },
        {
            "question": "Can a HashMap contain duplicate keys?",
            "options": [
                "Yes",
                "No",
                "Only null keys",
                "Only integer keys"
            ],
            "answer": "No",
            "explanation": "In a HashMap, each key is unique. Adding a new entry with an existing key replaces the old value with the new one."
        },
        {
            "question": "Is HashMap ordered?",
            "options": [
                "Yes, insertion order",
                "Yes, natural ordering",
                "No, it's unordered",
                "Yes, alphabetical order"
            ],
            "answer": "No, it's unordered",
            "explanation": "HashMap does not maintain any order of its entries, neither insertion order nor natural ordering."
        },
        {
            "question": "Can a HashMap contain null values?",
            "options": [
                "Yes",
                "No",
                "Only one null value",
                "Only null keys, not values"
            ],
            "answer": "Yes",
            "explanation": "HashMap allows null values and even one null key."
        },
        {
            "question": "What is the default initial capacity of a HashMap in Java?",
            "options": [
                "8",
                "10",
                "12",
                "16"
            ],
            "answer": "16",
            "explanation": "The default initial capacity of a HashMap is 16."
        },
        {
            "question": "How does HashMap handle collisions?",
            "options": [
                "By resizing the map",
                "By using a linked list or tree at each entry",
                "By skipping the addition of new elements",
                "By removing the existing element"
            ],
            "answer": "By using a linked list or tree at each entry",
            "explanation": "HashMap handles collisions by storing collided elements in a linked list or tree structure at the same index."
        },
        {
            "question": "What method do you use to get a value from a HashMap?",
            "options": [
                "getValue()",
                "findValue()",
                "get()",
                "lookup()"
            ],
            "answer": "get()",
            "explanation": "The get() method is used to retrieve a value from a HashMap using its key."
        },
        {
            "question": "How do you remove a key-value pair from a HashMap?",
            "options": [
                "remove()",
                "delete()",
                "erase()",
                "discard()"
            ],
            "answer": "remove()",
            "explanation": "The remove() method is used to remove a key-value pair from a HashMap."
        },
        {
            "question": "What happens if you put a key-value pair with an existing key in a HashMap?",
            "options": [
                "The map remains unchanged",
                "A duplicate key is created",
                "The old value is replaced by the new value",
                "An exception is thrown"
            ],
            "answer": "The old value is replaced by the new value",
            "explanation": "If a key already exists in the map, putting a new value for that key will replace the old value."
        },
        {
            "question": "What is the time complexity of the get() and put() methods in HashMap?",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n^2)"
            ],
            "answer": "O(1)",
            "explanation": "In most cases, the get() and put() methods in HashMap have a time complexity of O(1)."
        },
        {
            "question": "How can you iterate over a HashMap?",
            "options": [
                "Using a for loop",
                "Using an iterator",
                "Both a and b",
                "HashMaps cannot be iterated"
            ],
            "answer": "Both a and b",
            "explanation": "A HashMap can be iterated using an iterator or a for-each loop over the entrySet, keySet, or values."
        },
        {
            "question": "What method checks if a HashMap contains a specific key?",
            "options": [
                "containsKey()",
                "hasKey()",
                "findKey()",
                "keyExists()"
            ],
            "answer": "containsKey()",
            "explanation": "The containsKey() method is used to check if a particular key exists in the HashMap."
        },
        {
            "question": "What does the clear() method do in a HashMap?",
            "options": [
                "Clears the values but keeps the keys",
                "Removes all key-value mappings",
                "Resets the capacity of the map",
                "Removes only null keys and values"
            ],
            "answer": "Removes all key-value mappings",
            "explanation": "The clear() method removes all of the mappings from the map."
        },
        {
            "question": "Can a HashMap be synchronized?",
            "options": [
                "Yes",
                "No",
                "Only in multi-threaded applications",
                "Only if explicitly defined"
            ],
            "answer": "Yes",
            "explanation": "While HashMap itself is not synchronized, it can be wrapped with Collections.synchronizedMap() to make it synchronized."
        },
        {
            "question": "What is a LinkedHashMap in Java?",
            "options": [
                "A type of array",
                "A type of linked list",
                "A type of set",
                "A hash table and linked list implementation of the Map interface"
            ],
            "answer": "A hash table and linked list implementation of the Map interface",
            "explanation": "LinkedHashMap is a Map implementation that maintains a linked list of the entries in the map, in the order in which they were inserted."
        },
        {
            "question": "How does LinkedHashMap maintain the order of elements?",
            "options": [
                "Using a hash table",
                "By sorting the keys",
                "Through a doubly-linked list",
                "Using an array"
            ],
            "answer": "Through a doubly-linked list",
            "explanation": "LinkedHashMap maintains the insertion order of its entries through a doubly-linked list."
        },
        {
            "question": "Can a LinkedHashMap contain duplicate keys?",
            "options": [
                "Yes",
                "No",
                "Only integer keys can be duplicated",
                "Only string keys can be duplicated"
            ],
            "answer": "No",
            "explanation": "Like any other Map implementation, LinkedHashMap cannot have duplicate keys."
        },
        {
            "question": "What is the default initial capacity of a LinkedHashMap?",
            "options": [
                "8",
                "10",
                "12",
                "16"
            ],
            "answer": "16",
            "explanation": "The default initial capacity of a LinkedHashMap is 16."
        },
        {
            "question": "Which method is used to access elements in a LinkedHashMap?",
            "options": [
                "access()",
                "get()",
                "retrieve()",
                "find()"
            ],
            "answer": "get()",
            "explanation": "The get() method is used to access elements in a LinkedHashMap by their key."
        },
        {
            "question": "Can a LinkedHashMap contain null values and null key?",
            "options": [
                "Yes",
                "No",
                "Only null values, not null key",
                "Only null key, not null values"
            ],
            "answer": "Yes",
            "explanation": "LinkedHashMap allows one null key and multiple null values."
        },
        {
            "question": "What is the time complexity of basic operations like put and get in a LinkedHashMap?",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n^2)"
            ],
            "answer": "O(1)",
            "explanation": "Basic operations like put and get have a constant time complexity in a LinkedHashMap."
        },
        {
            "question": "How does a LinkedHashMap differ from a HashMap in Java?",
            "options": [
                "LinkedHashMap is synchronized",
                "LinkedHashMap maintains insertion order",
                "LinkedHashMap allows duplicate keys",
                "LinkedHashMap uses less memory"
            ],
            "answer": "LinkedHashMap maintains insertion order",
            "explanation": "The main difference between LinkedHashMap and HashMap is that LinkedHashMap maintains the insertion order of entries."
        },
        {
            "question": "How do you remove all entries from a LinkedHashMap?",
            "options": [
                "clear()",
                "removeAll()",
                "empty()",
                "deleteAll()"
            ],
            "answer": "clear()",
            "explanation": "The clear() method is used to remove all the mappings from a LinkedHashMap."
        },
        {
            "question": "Is the iteration order over a LinkedHashMap predictable?",
            "options": [
                "Yes, it follows insertion order",
                "No, it's random",
                "Yes, it follows natural ordering",
                "No, it follows hash code ordering"
            ],
            "answer": "Yes, it follows insertion order",
            "explanation": "The iteration over a LinkedHashMap is predictable as it follows the insertion order of the entries."
        },
        {
            "question": "What is a TreeMap in Java?",
            "options": [
                "A dynamic array structure",
                "A hash table implementation",
                "A map based on a tree structure",
                "A linked list of key-value pairs"
            ],
            "answer": "A map based on a tree structure",
            "explanation": "TreeMap is a Map implementation that uses a Red-Black tree, providing a sorted map."
        },
        {
            "question": "How are the keys in a TreeMap stored?",
            "options": [
                "In random order",
                "In insertion order",
                "In ascending order",
                "In descending order"
            ],
            "answer": "In ascending order",
            "explanation": "TreeMap stores its keys in ascending order, according to the natural ordering of its keys."
        },
        {
            "question": "Can a TreeMap contain duplicate keys?",
            "options": [
                "Yes",
                "No",
                "Only if they are strings",
                "Only if they are numbers"
            ],
            "answer": "No",
            "explanation": "TreeMap cannot contain duplicate keys. Each key can map to exactly one value."
        },
        {
            "question": "Which interface must the keys in a TreeMap implement?",
            "options": [
                "Serializable",
                "Cloneable",
                "Comparable or Comparator",
                "Iterable"
            ],
            "answer": "Comparable or Comparator",
            "explanation": "The keys in a TreeMap must implement the Comparable interface or be used with a Comparator to determine their order."
        },
        {
            "question": "What happens when a null key is inserted into a TreeMap?",
            "options": [
                "It is placed at the start",
                "It is placed at the end",
                "A NullPointerException is thrown",
                "It replaces the smallest key"
            ],
            "answer": "A NullPointerException is thrown",
            "explanation": "Inserting a null key into a TreeMap will result in a NullPointerException, as TreeMap relies on natural ordering or comparators."
        },
        {
            "question": "What method do you use to get all keys from a TreeMap?",
            "options": [
                "getKeys()",
                "keySet()",
                "keys()",
                "getAllKeys()"
            ],
            "answer": "keySet()",
            "explanation": "The keySet() method returns a set view of the keys contained in the TreeMap."
        },
        {
            "question": "How do you retrieve the first key in a TreeMap?",
            "options": [
                "getFirstKey()",
                "firstKey()",
                "topKey()",
                "headKey()"
            ],
            "answer": "firstKey()",
            "explanation": "The firstKey() method retrieves the first (lowest) key currently in the TreeMap."
        },
        {
            "question": "What is the default initial capacity of a TreeMap?",
            "options": [
                "8",
                "10",
                "12",
                "16"
            ],
            "answer": "16",
            "explanation": "TreeMap does not have an initial capacity like HashMap because it's based on a Red-Black tree structure."
        },
        {
            "question": "Can you store a null value in a TreeMap?",
            "options": [
                "Yes",
                "No",
                "Only one null value",
                "Only as the first entry"
            ],
            "answer": "Yes",
            "explanation": "TreeMap allows null values, but it does not support null keys."
        },
        {
            "question": "How does TreeMap compare keys for sorting?",
            "options": [
                "By hashcode",
                "By natural ordering or a specified Comparator",
                "Alphabetically",
                "By length of key"
            ],
            "answer": "By natural ordering or a specified Comparator",
            "explanation": "TreeMap compares keys either by their natural ordering or by a specified Comparator at the time of TreeMap creation."
        },
        {
            "question": "What is ConcurrentHashMap in Java?",
            "options": [
                "A synchronized version of HashMap",
                "A type of linked list",
                "A type of array",
                "A collection of sorted key-value pairs"
            ],
            "answer": "A synchronized version of HashMap",
            "explanation": "ConcurrentHashMap is a thread-safe variant of HashMap in Java, designed for concurrent access."
        },
        {
            "question": "How does ConcurrentHashMap achieve thread-safety?",
            "options": [
                "By locking the entire map",
                "By using synchronized methods",
                "By segmenting the map into parts and locking those parts",
                "By using immutable objects"
            ],
            "answer": "By segmenting the map into parts and locking those parts",
            "explanation": "ConcurrentHashMap achieves thread-safety by dividing the map into segments and only locking the necessary segment during updates."
        },
        {
            "question": "Can ConcurrentHashMap contain null values or null keys?",
            "options": [
                "Yes",
                "No",
                "Only null values",
                "Only null keys"
            ],
            "answer": "No",
            "explanation": "ConcurrentHashMap does not allow null values or null keys."
        },
        {
            "question": "What is the default concurrency level of a ConcurrentHashMap?",
            "options": [
                "1",
                "4",
                "16",
                "32"
            ],
            "answer": "16",
            "explanation": "The default concurrency level of ConcurrentHashMap is 16, which means it internally manages 16 segments."
        },
        {
            "question": "Which method is used to replace a value in ConcurrentHashMap?",
            "options": [
                "replace()",
                "put()",
                "set()",
                "update()"
            ],
            "answer": "replace()",
            "explanation": "The replace() method is used for replacing a value associated with a given key in ConcurrentHashMap."
        },
        {
            "question": "What happens if two threads update a ConcurrentHashMap simultaneously?",
            "options": [
                "The map gets corrupted",
                "The map handles updates in a thread-safe manner",
                "An exception is thrown",
                "Only the first update is saved"
            ],
            "answer": "The map handles updates in a thread-safe manner",
            "explanation": "ConcurrentHashMap is designed to handle concurrent updates without corrupting the map."
        },
        {
            "question": "Can you use an iterator to traverse a ConcurrentHashMap?",
            "options": [
                "Yes",
                "No",
                "Only with synchronized blocks",
                "Only in single-threaded environments"
            ],
            "answer": "Yes",
            "explanation": "An iterator can be used to traverse a ConcurrentHashMap, and it provides a weakly consistent view of the map."
        },
        {
            "question": "How does ConcurrentHashMap differ from Hashtable?",
            "options": [
                "ConcurrentHashMap is not thread-safe",
                "ConcurrentHashMap allows one null key and multiple null values",
                "ConcurrentHashMap provides better scalability",
                "ConcurrentHashMap does not use hashing"
            ],
            "answer": "ConcurrentHashMap provides better scalability",
            "explanation": "ConcurrentHashMap offers better scalability compared to Hashtable due to its segment-level locking."
        },
        {
            "question": "Is the iteration over ConcurrentHashMap fail-safe?",
            "options": [
                "Yes",
                "No",
                "Only in single-threaded environments",
                "Only if the map is not updated during iteration"
            ],
            "answer": "Yes",
            "explanation": "Iterators of ConcurrentHashMap are fail-safe and reflect the state of the map as of the time the iterator was created."
        },
        {
            "question": "How do you check if a ConcurrentHashMap is empty?",
            "options": [
                "isEmpty()",
                "isNull()",
                "size() == 0",
                "hasNoElements()"
            ],
            "answer": "isEmpty()",
            "explanation": "The isEmpty() method checks if the ConcurrentHashMap has no key-value mappings."
        },
        {
            "question": "What is a lambda expression in Java?",
            "options": [
                "A variable declaration",
                "A method that executes asynchronously",
                "An anonymous function",
                "A loop structure"
            ],
            "answer": "An anonymous function",
            "explanation": "Lambda expressions in Java are a way to create anonymous functions, which are not bound to any identifier."
        },
        {
            "question": "Which interface is used with lambda expressions in Java?",
            "options": [
                "Runnable",
                "ActionListener",
                "FunctionalInterface",
                "Comparator"
            ],
            "answer": "FunctionalInterface",
            "explanation": "Lambda expressions are used with functional interfaces, which are interfaces with a single abstract method."
        },
        {
            "question": "How do you identify a lambda expression in Java?",
            "options": [
                "Using the 'lambda' keyword",
                "Using an arrow (->) operator",
                "By placing it inside curly braces {}",
                "By using the '@' symbol"
            ],
            "answer": "Using an arrow (->) operator",
            "explanation": "Lambda expressions in Java are characterized by the arrow (->) operator."
        },
        {
            "question": "Can lambda expressions access local variables of its enclosing scope?",
            "options": [
                "Yes, but only if they are final",
                "Yes, they can access any local variables",
                "No, they cannot access local variables",
                "Yes, but only static variables"
            ],
            "answer": "Yes, but only if they are final",
            "explanation": "Lambda expressions can access local variables of their enclosing scope, but those variables must be final or effectively final."
        },
        {
            "question": "What is the return type of a lambda expression?",
            "options": [
                "Void",
                "Depends on the context it's used in",
                "Always an object",
                "Integer"
            ],
            "answer": "Depends on the context it's used in",
            "explanation": "The return type of a lambda expression depends on the context in which it is used, particularly the functional interface it targets."
        },
        {
            "question": "Can a lambda expression throw an exception?",
            "options": [
                "Yes",
                "No",
                "Only unchecked exceptions",
                "Only if it's a part of a try-catch block"
            ],
            "answer": "Yes",
            "explanation": "Lambda expressions can throw exceptions, but if a checked exception is thrown, it must be compatible with the exception type declared in the functional interface's abstract method."
        },
        {
            "question": "What are lambda expressions primarily used for?",
            "options": [
                "To create new threads",
                "For database operations",
                "To implement event listeners",
                "To provide implementation of functional interfaces"
            ],
            "answer": "To provide implementation of functional interfaces",
            "explanation": "Lambda expressions are primarily used to provide implementations for functional interfaces in a concise way."
        },
        {
            "question": "How do you write a lambda expression with no parameters?",
            "options": [
                "()",
                "-> {}",
                "() -> {}",
                "_ -> {}"
            ],
            "answer": "() -> {}",
            "explanation": "A lambda expression with no parameters is written using empty parentheses followed by the arrow operator and curly braces."
        },
        {
            "question": "Can lambda expressions replace anonymous inner classes?",
            "options": [
                "Yes, in all cases",
                "No, never",
                "Only if the interface has a single abstract method",
                "Only for interfaces that are annotated with @FunctionalInterface"
            ],
            "answer": "Only if the interface has a single abstract method",
            "explanation": "Lambda expressions can replace anonymous inner classes that implement interfaces with a single abstract method."
        },
        {
            "question": "How many abstract methods can a functional interface have?",
            "options": [
                "One",
                "Two",
                "As many as needed",
                "None"
            ],
            "answer": "One",
            "explanation": "A functional interface in Java can have only one abstract method."
        },
        {
            "question": "Can lambda expressions be stored in variables?",
            "options": [
                "Yes",
                "No",
                "Only in static variables",
                "Only in final variables"
            ],
            "answer": "Yes",
            "explanation": "Lambda expressions can be assigned to variables whose type is a functional interface."
        },
        {
            "question": "What is a method reference in Java?",
            "options": [
                "A reference to a static method",
                "A way to call a method using its name",
                "An alternative syntax to lambda expressions for method invocation",
                "A type of exception handling"
            ],
            "answer": "An alternative syntax to lambda expressions for method invocation",
            "explanation": "Method references are an alternative, shortened syntax to lambda expressions used to refer directly to methods."
        },
        {
            "question": "Which of these is a valid lambda expression in Java?",
            "options": [
                "x, y -> x + y",
                "(x, y) -> x + y",
                "(x, y) => x + y",
                "(x + y)"
            ],
            "answer": "(x, y) -> x + y",
            "explanation": "The valid syntax for a lambda expression with two parameters is enclosing them in parentheses followed by the arrow operator and the expression."
        },
        {
            "question": "How are lambda expressions compiled in Java?",
            "options": [
                "Into anonymous inner classes",
                "Into regular methods of the class where they are defined",
                "Using a special lambda compiler",
                "Into instances of functional interfaces"
            ],
            "answer": "Into anonymous inner classes",
            "explanation": "Internally, lambda expressions are compiled into anonymous inner classes by the Java compiler."
        },
        {
            "question": "Can lambda expressions modify local variables from their enclosing scope?",
            "options": [
                "Yes, without any restrictions",
                "No, they cannot modify local variables",
                "Only final or effectively final variables can be modified",
                "Only static variables can be modified"
            ],
            "answer": "No, they cannot modify local variables",
            "explanation": "Lambda expressions cannot modify local variables from their enclosing scope; they can only read final or effectively final variables."
        },
        {
            "question": "What is the purpose of the @FunctionalInterface annotation?",
            "options": [
                "To define an interface as functional",
                "To enable lambda expressions",
                "To create anonymous classes",
                "To indicate that an interface can be implemented using a lambda expression"
            ],
            "answer": "To define an interface as functional",
            "explanation": "The @FunctionalInterface annotation is used to indicate that an interface is intended to be a functional interface, i.e., it should have exactly one abstract method."
        },
        {
            "question": "What happens if the body of a lambda expression has multiple statements?",
            "options": [
                "It must be enclosed in curly braces",
                "The lambda expression becomes invalid",
                "Only the last statement is considered",
                "It's automatically converted into a method"
            ],
            "answer": "It must be enclosed in curly braces",
            "explanation": "If a lambda expression contains more than one statement, its body must be enclosed in curly braces."
        },
        {
            "question": "In lambda expressions, what does the double colon (::) operator represent?",
            "options": [
                "Method reference",
                "Scope resolution",
                "Lambda declaration",
                "Double comparison"
            ],
            "answer": "Method reference",
            "explanation": "The double colon (::) operator in lambda expressions is used for method references, providing a shorthand notation for a lambda expression calling a method."
        },
        {
            "question": "How can lambda expressions access external non-final variables?",
            "options": [
                "By passing them as parameters",
                "They can directly access any external variables",
                "By declaring them as final within the lambda",
                "Lambda expressions cannot access external non-final variables"
            ],
            "answer": "By passing them as parameters",
            "explanation": "Lambda expressions can access external non-final variables by passing them as parameters. Otherwise, they can only access final or effectively final variables from their enclosing scope."
        },
        {
            "question": "What type of parameters can a lambda expression have?",
            "options": [
                "Only final parameters",
                "Typed, untyped, or no parameters",
                "Only primitive data types",
                "Only Object type parameters"
            ],
            "answer": "Typed, untyped, or no parameters",
            "explanation": "Lambda expressions can have typed parameters, untyped parameters (inferred from context), or no parameters at all."
        },
        {
            "question": "What is the primary advantage of lambda expressions?",
            "options": [
                "Improved performance",
                "Enhanced security",
                "Increased modularity",
                "More concise code"
            ],
            "answer": "More concise code",
            "explanation": "Lambda expressions allow for more concise and readable code, especially when implementing single-method interfaces."
        },
        {
            "question": "Which of the following is a built-in functional interface in Java?",
            "options": [
                "Runnable",
                "ArrayList",
                "HashMap",
                "Thread"
            ],
            "answer": "Runnable",
            "explanation": "Runnable is a built-in functional interface in Java that is often used with lambda expressions for creating threads."
        },
        {
            "question": "Can lambda expressions be passed as arguments to a method?",
            "options": [
                "Yes",
                "No",
                "Only in static methods",
                "Only if the method accepts interfaces"
            ],
            "answer": "Yes",
            "explanation": "Lambda expressions can be passed as arguments to methods, particularly those that expect a functional interface as a parameter."
        },
        {
            "question": "How do lambda expressions facilitate functional programming in Java?",
            "options": [
                "By adding new functional programming languages",
                "By allowing methods to be treated as arguments",
                "By creating new APIs for functional programming",
                "By converting Java into a functional language"
            ],
            "answer": "By allowing methods to be treated as arguments",
            "explanation": "Lambda expressions facilitate functional programming by allowing methods to be treated as lambda expressions, or first-class citizens, which can be passed around as arguments or returned from methods."
        },
        {
            "question": "Can lambda expressions be used to create instances of an interface?",
            "options": [
                "Yes, if the interface is a functional interface",
                "No, they cannot be used to create instances",
                "Only if the interface is annotated with @Lambda",
                "Only if the interface has no default methods"
            ],
            "answer": "Yes, if the interface is a functional interface",
            "explanation": "Lambda expressions can be used to provide an implementation of a functional interface, effectively creating an instance of that interface."
        },
        {
            "question": "What is a functional interface in Java?",
            "options": [
                "An interface with multiple abstract methods",
                "An interface with only one abstract method",
                "Any interface in Java",
                "An interface that can only be used in functional programming"
            ],
            "answer": "An interface with only one abstract method",
            "explanation": "A functional interface in Java is an interface that contains exactly one abstract method."
        },
        {
            "question": "What annotation is commonly used to denote a functional interface?",
            "options": [
                "@Functional",
                "@FunctionalInterface",
                "@Interface",
                "@Lambda"
            ],
            "answer": "@FunctionalInterface",
            "explanation": "The @FunctionalInterface annotation is used to indicate that an interface is intended to be a functional interface."
        },
        {
            "question": "Can functional interfaces have default methods?",
            "options": [
                "Yes",
                "No",
                "Only static methods are allowed",
                "Only if they are final"
            ],
            "answer": "Yes",
            "explanation": "Functional interfaces can have any number of default and static methods but only one abstract method."
        },
        {
            "question": "What is the purpose of a functional interface?",
            "options": [
                "To create objects",
                "To define a single action",
                "To group multiple methods",
                "To replace classes"
            ],
            "answer": "To define a single action",
            "explanation": "Functional interfaces are used to define a single action, typically to be implemented using a lambda expression or method reference."
        },
        {
            "question": "Which of these is a standard functional interface in Java?",
            "options": [
                "Runnable",
                "Comparator",
                "Both a and b",
                "None of the above"
            ],
            "answer": "Both a and b",
            "explanation": "Runnable and Comparator are both examples of standard functional interfaces in Java."
        },
        {
            "question": "What is the main advantage of using functional interfaces?",
            "options": [
                "To simplify object creation",
                "To facilitate lambda expressions",
                "To create multiple methods quickly",
                "To support multi-threading"
            ],
            "answer": "To facilitate lambda expressions",
            "explanation": "The main advantage of functional interfaces is that they can be used with lambda expressions for more concise and readable code."
        },
        {
            "question": "Can a functional interface extend another interface?",
            "options": [
                "Yes, but it must not add any abstract methods",
                "No",
                "Only if it's another functional interface",
                "Only if it overrides all methods"
            ],
            "answer": "Yes, but it must not add any abstract methods",
            "explanation": "A functional interface can extend another interface, but it must not add more abstract methods to maintain its functional interface status."
        },
        {
            "question": "How can you use method references with functional interfaces?",
            "options": [
                "By referring to a method that matches the interface's abstract method",
                "By using the 'new' keyword",
                "By using the '@' symbol",
                "By declaring a method inside the interface"
            ],
            "answer": "By referring to a method that matches the interface's abstract method",
            "explanation": "Method references can be used with functional interfaces by referring to a method that has the same parameters and return type as the abstract method of the functional interface."
        },
        {
            "question": "Can a functional interface have more than one default method?",
            "options": [
                "Yes",
                "No",
                "Only if they are static",
                "Only if annotated with @Default"
            ],
            "answer": "Yes",
            "explanation": "A functional interface can have more than one default method, as long as there is only one abstract method."
        },
        {
            "question": "What is the benefit of using the @FunctionalInterface annotation?",
            "options": [
                "It enhances performance",
                "It ensures the interface meets the requirements of a functional interface",
                "It automatically implements the interface",
                "It changes the behavior of the interface"
            ],
            "answer": "It ensures the interface meets the requirements of a functional interface",
            "explanation": "The @FunctionalInterface annotation is used for compile-time checking to ensure the interface meets the criteria of having exactly one abstract method."
        },
        {
            "question": "Which functional interface in Java is used for predicates?",
            "options": [
                "Function",
                "Predicate",
                "Supplier",
                "Consumer"
            ],
            "answer": "Predicate",
            "explanation": "The Predicate functional interface in Java is used for defining a simple condition or predicate, which returns a boolean value."
        },
        {
            "question": "What functional interface represents a function that accepts a single argument?",
            "options": [
                "Runnable",
                "BiFunction",
                "UnaryOperator",
                "Function"
            ],
            "answer": "Function",
            "explanation": "The Function interface represents a function that accepts one argument and produces a result."
        },
        {
            "question": "What is the difference between the Consumer and Supplier interfaces?",
            "options": [
                "Consumer accepts an argument and Supplier returns a result",
                "Consumer returns a result and Supplier accepts an argument",
                "There is no difference",
                "Consumer and Supplier are not functional interfaces"
            ],
            "answer": "Consumer accepts an argument and Supplier returns a result",
            "explanation": "The Consumer interface represents an operation that accepts a single input argument and returns no result, while the Supplier interface provides a result without accepting any arguments."
        },
        {
            "question": "Can a lambda expression be used to instantiate a functional interface?",
            "options": [
                "Yes",
                "No",
                "Only if the interface is annotated with @Lambda",
                "Only if the interface has no default methods"
            ],
            "answer": "Yes",
            "explanation": "Lambda expressions can be used to provide an implementation for the abstract method of a functional interface, effectively instantiating it."
        },
        {
            "question": "What functional interface is typically used for operations that consume an object but return no result?",
            "options": [
                "Function",
                "Predicate",
                "Supplier",
                "Consumer"
            ],
            "answer": "Consumer",
            "explanation": "The Consumer functional interface is used for operations that accept a single input argument and return no result, thereby consuming the provided object."
        },
        {
            "question": "What is the purpose of the Optional class in Java?",
            "options": [
                "To handle null values more gracefully",
                "To create immutable objects",
                "To manage thread synchronization",
                "To optimize memory usage"
            ],
            "answer": "To handle null values more gracefully",
            "explanation": "The Optional class in Java is used to represent optional values that are either present or absent, helping to avoid null pointer exceptions."
        },
        {
            "question": "How do you create an empty Optional object?",
            "options": [
                "Optional.empty()",
                "new Optional()",
                "Optional.of(null)",
                "Optional.none()"
            ],
            "answer": "Optional.empty()",
            "explanation": "Optional.empty() is used to create an empty Optional object."
        },
        {
            "question": "What does Optional.ofNullable() do?",
            "options": [
                "Creates an Optional object with a non-null value",
                "Creates an Optional object that may or may not contain a non-null value",
                "Always creates an empty Optional object",
                "Throws an exception if the value is null"
            ],
            "answer": "Creates an Optional object that may or may not contain a non-null value",
            "explanation": "Optional.ofNullable() is used to create an Optional object that can hold a null value."
        },
        {
            "question": "How do you retrieve the value from an Optional object?",
            "options": [
                "get()",
                "getValue()",
                "retrieve()",
                "obtain()"
            ],
            "answer": "get()",
            "explanation": "The get() method is used to retrieve the value from an Optional object."
        },
        {
            "question": "How do you check if an Optional object contains a value?",
            "options": [
                "isEmpty()",
                "isPresent()",
                "hasValue()",
                "contains()"
            ],
            "answer": "isPresent()",
            "explanation": "The isPresent() method checks if the Optional object contains a non-null value."
        },
        {
            "question": "What is the purpose of the orElse() method in Optional?",
            "options": [
                "To throw an exception if value is not present",
                "To provide a default value if the Optional is empty",
                "To filter the value in the Optional",
                "To transform the value in the Optional"
            ],
            "answer": "To provide a default value if the Optional is empty",
            "explanation": "orElse() returns the value if present; otherwise, it returns a default value provided."
        },
        {
            "question": "What happens when you call get() on an empty Optional object?",
            "options": [
                "Returns null",
                "Returns a default value",
                "An NoSuchElementException is thrown",
                "An OptionalException is thrown"
            ],
            "answer": "An NoSuchElementException is thrown",
            "explanation": "Calling get() on an empty Optional object results in a NoSuchElementException."
        },
        {
            "question": "Which method in Optional can be used to execute a block of code if a value is present?",
            "options": [
                "ifPresent()",
                "ifAvailable()",
                "execute()",
                "run()"
            ],
            "answer": "ifPresent()",
            "explanation": "ifPresent() is used to execute a block of code if the Optional object contains a non-null value."
        },
        {
            "question": "How do you transform the value in an Optional object using a function?",
            "options": [
                "map()",
                "transform()",
                "apply()",
                "change()"
            ],
            "answer": "map()",
            "explanation": "The map() function applies a function to the value in the Optional object if it is present."
        },
        {
            "question": "What is the difference between the map() and flatMap() methods in Optional?",
            "options": [
                "map() can return null, flatMap() cannot",
                "map() returns an Optional, flatMap() returns the value directly",
                "flatMap() flattens nested Optionals, map() does not",
                "There is no difference"
            ],
            "answer": "flatMap() flattens nested Optionals, map() does not",
            "explanation": "flatMap() is used for mapping functions that return Optional, effectively preventing nested Optionals."
        },
        {
            "question": "Which package contains the Java Date and Time API?",
            "options": [
                "java.util",
                "java.time",
                "java.date",
                "java.datetime"
            ],
            "answer": "java.time",
            "explanation": "The Java Date and Time API is located in the java.time package, introduced in Java 8."
        },
        {
            "question": "What class represents a date in the Java Date and Time API?",
            "options": [
                "Date",
                "Calendar",
                "LocalDate",
                "DateTime"
            ],
            "answer": "LocalDate",
            "explanation": "LocalDate represents a date in the Java Date and Time API without time or timezone information."
        },
        {
            "question": "How do you obtain the current date using the Java Date and Time API?",
            "options": [
                "LocalDate.now()",
                "new LocalDate()",
                "Date.currentDate()",
                "Calendar.getInstance()"
            ],
            "answer": "LocalDate.now()",
            "explanation": "LocalDate.now() is used to obtain the current date according to the system clock and default time-zone."
        },
        {
            "question": "Which class represents time in the Java Date and Time API?",
            "options": [
                "Time",
                "LocalTime",
                "Clock",
                "Timer"
            ],
            "answer": "LocalTime",
            "explanation": "LocalTime represents a time without date or timezone information."
        },
        {
            "question": "What is the purpose of the LocalDateTime class?",
            "options": [
                "To represent date and time for database usage",
                "To represent a specific time of day",
                "To represent a combination of date and time",
                "To schedule future tasks"
            ],
            "answer": "To represent a combination of date and time",
            "explanation": "LocalDateTime combines date and time information but does not include time-zone data."
        },
        {
            "question": "How do you format dates and times in the new API?",
            "options": [
                "SimpleDateFormat",
                "DateFormat",
                "DateTimeFormatter",
                "DateFormatter"
            ],
            "answer": "DateTimeFormatter",
            "explanation": "DateTimeFormatter is used for formatting and parsing dates and times in the new API."
        },
        {
            "question": "Which class in the Date and Time API represents a specific instant in time?",
            "options": [
                "Instant",
                "Epoch",
                "TimeStamp",
                "Moment"
            ],
            "answer": "Instant",
            "explanation": "Instant represents a specific moment on the timeline in UTC."
        },
        {
            "question": "What is the purpose of the ZonedDateTime class?",
            "options": [
                "To handle daylight saving time changes",
                "To represent a date and time with timezone",
                "To convert dates between different timezones",
                "Both b and c"
            ],
            "answer": "Both b and c",
            "explanation": "ZonedDateTime handles date and time with associated timezone, including daylight saving time and timezone conversion."
        },
        {
            "question": "How do you add or subtract time from a date or time object?",
            "options": [
                "Using add() and subtract() methods",
                "Using the plus() and minus() methods",
                "With simple arithmetic operations",
                "By setting new values"
            ],
            "answer": "Using the plus() and minus() methods",
            "explanation": "The plus() and minus() methods are used to add or subtract time from date or time objects."
        },
        {
            "question": "What class would you use to represent a duration of time?",
            "options": [
                "Period",
                "Duration",
                "TimeSpan",
                "Interval"
            ],
            "answer": "Duration",
            "explanation": "Duration is used to represent a time-based amount of time, such as seconds, minutes, and hours."
        },
        {
            "question": "How do you obtain the current time based on the system clock?",
            "options": [
                "LocalTime.now()",
                "System.currentTimeMillis()",
                "Clock.systemDefaultZone().instant()",
                "new Time()"
            ],
            "answer": "LocalTime.now()",
            "explanation": "LocalTime.now() obtains the current time based on the system clock in the default time-zone."
        },
        {
            "question": "Which class represents a date-based amount of time, such as '2 years, 3 months and 4 days'?",
            "options": [
                "Duration",
                "Period",
                "Interval",
                "TimeRange"
            ],
            "answer": "Period",
            "explanation": "Period is used to represent a date-based amount of time in terms of years, months, and days."
        },
        {
            "question": "How do you compare two LocalDate objects?",
            "options": [
                "Using the equals() method",
                "With the compareTo() method",
                "By using relational operators",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "LocalDate objects can be compared using the equals() method for equality and compareTo() for ordering."
        },
        {
            "question": "What is the primary use of the Clock class in the Date and Time API?",
            "options": [
                "To get the current time as a string",
                "To schedule future events",
                "To provide access to the current date and time",
                "To handle timezones"
            ],
            "answer": "To provide access to the current date and time",
            "explanation": "The Clock class is used to provide access to the current instant, date, and time using a time-zone."
        },
        {
            "question": "How do you convert a String to a LocalDate in Java?",
            "options": [
                "LocalDate.parse()",
                "LocalDate.fromString()",
                "LocalDate.getDate()",
                "LocalDate.of()"
            ],
            "answer": "LocalDate.parse()",
            "explanation": "LocalDate.parse() is used to parse a string and return a"
        },
        {
            "question": "What is JShell in Java?",
            "options": [
                "A Java IDE",
                "A Java package manager",
                "An interactive Java REPL",
                "A Java compiler"
            ],
            "answer": "An interactive Java REPL",
            "explanation": "JShell stands for Java Shell and is an interactive Read-Evaluate-Print Loop (REPL) tool introduced in Java 9, which allows for interactive Java programming."
        },
        {
            "question": "What was JShell primarily introduced for?",
            "options": [
                "Debugging complex Java applications",
                "Managing Java packages",
                "Learning and experimenting with Java code",
                "Replacing the traditional Java compiler"
            ],
            "answer": "Learning and experimenting with Java code",
            "explanation": "JShell was introduced as a tool for learning Java and experimenting with Java code snippets interactively."
        },
        {
            "question": "How is JShell launched?",
            "options": [
                "By running ‘java -shell’ in the command line",
                "By executing the ‘jshell’ command in the terminal",
                "Through the Java IDE",
                "By compiling a Java file"
            ],
            "answer": "By executing the ‘jshell’ command in the terminal",
            "explanation": "JShell is launched by entering the ‘jshell’ command in the terminal or command prompt."
        },
        {
            "question": "Can JShell be used to execute multi-line Java statements?",
            "options": [
                "Yes",
                "No",
                "Only single-line statements",
                "Only in scripting mode"
            ],
            "answer": "Yes",
            "explanation": "JShell can execute both single-line and multi-line Java statements, making it suitable for testing small to complex code snippets."
        },
        {
            "question": "Does JShell support tab completion?",
            "options": [
                "Yes",
                "No",
                "Only for method names",
                "Only for variable names"
            ],
            "answer": "Yes",
            "explanation": "JShell supports tab completion, helping users to easily complete commands, method names, and variable names."
        },
        {
            "question": "What happens when you define a method in JShell?",
            "options": [
                "It must be compiled",
                "It can be immediately invoked",
                "It’s stored in a file",
                "It’s only for syntax checking"
            ],
            "answer": "It can be immediately invoked",
            "explanation": "Methods defined in JShell can be immediately invoked without the need for compiling or wrapping in a class."
        },
        {
            "question": "How can you view the history of your commands in JShell?",
            "options": [
                "Using the /history command",
                "It’s not possible to view command history",
                "By scrolling up in the terminal",
                "Using the /list command"
            ],
            "answer": "Using the /history command",
            "explanation": "The /history command in JShell displays the history of the commands and code snippets entered."
        },
        {
            "question": "Can you import external libraries and use them in JShell?",
            "options": [
                "Yes",
                "No",
                "Only standard Java libraries",
                "Only if they are in the same directory"
            ],
            "answer": "Yes",
            "explanation": "JShell allows importing external libraries and using them, provided that the libraries are in the classpath."
        },
        {
            "question": "How do you exit JShell?",
            "options": [
                "Using the /exit command",
                "Closing the terminal window",
                "Pressing Ctrl+C",
                "Using the /quit command"
            ],
            "answer": "Using the /exit command",
            "explanation": "The /exit command is used to exit JShell."
        },
        {
            "question": "How does JShell handle undeclared variables?",
            "options": [
                "It automatically declares them",
                "It throws an error",
                "It asks for the type",
                "It treats them as Object type"
            ],
            "answer": "It throws an error",
            "explanation": "If a variable is used without being declared, JShell will throw an error."
        },
        {
            "question": "Can JShell be used for scripting?",
            "options": [
                "Yes",
                "No",
                "Only in non-interactive mode",
                "Only for Java scripts"
            ],
            "answer": "Yes",
            "explanation": "JShell can be used for scripting, allowing users to write and execute more complex code sequences."
        },
        {
            "question": "What feature does JShell provide for lengthy outputs?",
            "options": [
                "Automatic output shortening",
                "Pagination",
                "Scroll bars in the terminal",
                "Output redirection to a file"
            ],
            "answer": "Pagination",
            "explanation": "For lengthy outputs, JShell provides pagination, making it easier to read and navigate through the output."
        },
        {
            "question": "How do you save JShell session commands to a file?",
            "options": [
                "/save filename",
                "/export filename",
                "Save is not supported in JShell",
                "/write filename"
            ],
            "answer": "/save filename",
            "explanation": "The /save command followed by a filename saves the current JShell session commands to a file."
        },
        {
            "question": "How can you evaluate expressions quickly in JShell?",
            "options": [
                "By creating a class",
                "By writing complete Java syntax",
                "By typing the expression directly",
                "Using a special evaluation command"
            ],
            "answer": "By typing the expression directly",
            "explanation": "JShell allows for the quick evaluation of expressions by directly typing them into the shell."
        },
        {
            "question": "Does JShell provide feedback on syntax errors?",
            "options": [
                "Yes",
                "No",
                "Only for certain types of errors",
                "Only if the /feedback command is enabled"
            ],
            "answer": "Yes",
            "explanation": "JShell provides immediate feedback on syntax errors, helping users to quickly identify and correct mistakes in their code."
        },
        {
            "question": "Can JShell execute Java files directly?",
            "options": [
                "Yes",
                "No",
                "Only .jsh files",
                "Only small Java files"
            ],
            "answer": "No",
            "explanation": "JShell is primarily designed for executing Java code snippets and expressions interactively, not for executing Java files directly."
        },
        {
            "question": "How do you reload a previous JShell session?",
            "options": [
                "/reload command",
                "/restore filename",
                "/open filename",
                "This feature is not available in JShell"
            ],
            "answer": "/open filename",
            "explanation": "The /open command followed by a filename can be used to reload a previously saved JShell session."
        },
        {
            "question": "How do you view the available JShell commands?",
            "options": [
                "/commands",
                "/help",
                "/list commands",
                "/show commands"
            ],
            "answer": "/help",
            "explanation": "The /help command in JShell provides a list of available commands and their descriptions."
        },
        {
            "question": "What is a snippet in the context of JShell?",
            "options": [
                "A saved session file",
                "A small piece of Java code",
                "A command",
                "An external library"
            ],
            "answer": "A small piece of Java code",
            "explanation": "In JShell, a snippet refers to a small piece of Java code, such as a variable declaration, an expression, a statement, a method, or a class definition."
        },
        {
            "question": "How do you modify the classpath in JShell?",
            "options": [
                "Using the /env -class-path command",
                "It’s not possible to modify the classpath in JShell",
                "Modifying the CLASSPATH environment variable",
                "Using the /classpath command"
            ],
            "answer": "Using the /env -class-path command",
            "explanation": "The /env -class-path command is used to modify the classpath in JShell, allowing users to include additional classes and libraries."
        },
        {
            "question": "What are records in Java?",
            "options": [
                "Data structures to store key-value pairs",
                "A feature to log application data",
                "A special type of class that holds immutable data",
                "A new collection type"
            ],
            "answer": "A special type of class that holds immutable data",
            "explanation": "Records in Java are a special type of class introduced to hold immutable data in a concise manner."
        },
        {
            "question": "In which version of Java were records introduced?",
            "options": [
                "Java 8",
                "Java 11",
                "Java 14",
                "Java 16"
            ],
            "answer": "Java 14",
            "explanation": "Records were introduced as a preview feature in Java 14 and became standard in Java 16."
        },
        {
            "question": "How do you define a record in Java?",
            "options": [
                "record MyRecord() {}",
                "class MyRecord {}",
                "record MyRecord {}",
                "record MyRecord(var1, var2) {}"
            ],
            "answer": "record MyRecord(var1, var2) {}",
            "explanation": "A record is defined using the record keyword followed by the record name and a list of components."
        },
        {
            "question": "Are record components final in Java?",
            "options": [
                "Yes",
                "No",
                "Only if explicitly declared as final",
                "They can be made final"
            ],
            "answer": "Yes",
            "explanation": "Record components are implicitly final, meaning their values cannot be changed once set."
        },
        {
            "question": "Can records in Java have additional methods?",
            "options": [
                "Yes",
                "No",
                "Only static methods",
                "Only private methods"
            ],
            "answer": "Yes",
            "explanation": "Records can have additional methods besides the implicitly declared ones."
        },
        {
            "question": "How are equals() and hashCode() methods handled in Java records?",
            "options": [
                "Must be overridden by the developer",
                "Automatically provided by the compiler",
                "Not supported in records",
                "Use default Object implementations"
            ],
            "answer": "Automatically provided by the compiler",
            "explanation": "The equals() and hashCode() methods are automatically and appropriately implemented by the compiler for records."
        },
        {
            "question": "Can records implement interfaces in Java?",
            "options": [
                "Yes",
                "No",
                "Only functional interfaces",
                "Only if the interface is also a record"
            ],
            "answer": "Yes",
            "explanation": "Records can implement interfaces, just like regular classes."
        },
        {
            "question": "Can a record in Java extend another class?",
            "options": [
                "Yes",
                "No",
                "Only other records",
                "Only abstract classes"
            ],
            "answer": "No",
            "explanation": "Records cannot extend any other class, although they implicitly extend java.lang.Record."
        },
        {
            "question": "Which access level are record components in Java?",
            "options": [
                "Private",
                "Protected",
                "Public",
                "Package-private"
            ],
            "answer": "Public",
            "explanation": "Record components are implicitly public, and they also implicitly create corresponding public accessor methods."
        },
        {
            "question": "What is the purpose of the canonical constructor in a record?",
            "options": [
                "To initialize the record components",
                "To override the default constructor",
                "To create multiple instances of the record",
                "To add additional functionality to the record"
            ],
            "answer": "To initialize the record components",
            "explanation": "The canonical constructor in a record is used to initialize its components."
        },
        {
            "question": "Can records in Java be mutable?",
            "options": [
                "Yes",
                "No",
                "Only with special annotations",
                "Only if all components are mutable"
            ],
            "answer": "No",
            "explanation": "Records are designed to be immutable data carriers, so their components cannot be changed after construction."
        },
        {
            "question": "How are record components accessed in Java?",
            "options": [
                "Through getter methods",
                "Directly by their names",
                "Using reflection",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "Record components can be accessed directly by their names or through automatically generated public accessor methods."
        },
        {
            "question": "Can records be serialized in Java?",
            "options": [
                "Yes",
                "No",
                "Only if they implement Serializable",
                "Only with custom serialization methods"
            ],
            "answer": "Only if they implement Serializable",
            "explanation": "Records can be serialized like regular classes if they implement the Serializable interface."
        },
        {
            "question": "What is the primary use case for records in Java?",
            "options": [
                "To replace all classes",
                "To handle database operations",
                "To serve as simple data carriers",
                "To create complex business logic"
            ],
            "answer": "To serve as simple data carriers",
            "explanation": "The primary use case for records is to act as simple, concise data carriers with minimal boilerplate."
        },
        {
            "question": "How do you create a custom toString() method for a record in Java?",
            "options": [
                "By overriding the toString() method",
                "It's not possible; toString() is final",
                "Using annotations",
                "By defining it in the record components"
            ],
            "answer": "By overriding the toString() method",
            "explanation": "The toString() method can be overridden in a record to provide a custom string representation."
        },
        {
            "question": "Are constructors mandatory in record declarations?",
            "options": [
                "Yes",
                "No",
                "Only the default constructor is mandatory",
                "Only the canonical constructor is mandatory"
            ],
            "answer": "No",
            "explanation": "Constructors are not mandatory in records. If not provided, a public canonical constructor is automatically generated."
        },
        {
            "question": "Can records be generic in Java?",
            "options": [
                "Yes",
                "No",
                "Only with restrictions",
                "Only if they don't implement interfaces"
            ],
            "answer": "Yes",
            "explanation": "Records can be generic, allowing type parameters to be used in their declaration."
        },
        {
            "question": "How do you destructure a record in Java?",
            "options": [
                "Using the destructuring keyword",
                "Through pattern matching",
                "By accessing individual components",
                "Destructuring is not supported for records"
            ],
            "answer": "By accessing individual components",
            "explanation": "While Java does not have a built-in destructuring feature, individual components of a record can be accessed directly."
        },
        {
            "question": "Can records be annotated in Java?",
            "options": [
                "Yes",
                "No",
                "Only with built-in annotations",
                "Only with custom annotations"
            ],
            "answer": "Yes",
            "explanation": "Records can be annotated just like classes and methods."
        },
        {
            "question": "How does the record's equals() method compare objects?",
            "options": [
                "By reference",
                "By comparing all record components",
                "Based on hash codes",
                "Using custom comparison logic"
            ],
            "answer": "By comparing all record components",
            "explanation": "The automatically generated equals() method in a record compares objects by comparing all the record's components for equality."
        },
        {
            "question": "What is a module in Java?",
            "options": [
                "A function or method",
                "A package of classes and interfaces",
                "A framework for dependency management",
                "A self-contained unit of code and data"
            ],
            "answer": "A self-contained unit of code and data",
            "explanation": "In Java, a module is a self-contained unit of code and data with a well-defined interface, introduced to enhance modularity and maintainability of Java applications."
        },
        {
            "question": "In which Java version was the module system introduced?",
            "options": [
                "Java 8",
                "Java 9",
                "Java 10",
                "Java 11"
            ],
            "answer": "Java 9",
            "explanation": "The module system, also known as Project Jigsaw, was introduced in Java 9."
        },
        {
            "question": "What is the primary file in a Java module?",
            "options": [
                "module-info.java",
                "module.java",
                "module-config.java",
                "module-manifest.java"
            ],
            "answer": "module-info.java",
            "explanation": "The module-info.java file is the primary file in a Java module, containing module declarations and dependencies."
        },
        {
            "question": "Which keyword is used to declare a module in Java?",
            "options": [
                "module",
                "export",
                "require",
                "package"
            ],
            "answer": "module",
            "explanation": "The 'module' keyword is used at the beginning of the module-info.java file to declare a module."
        },
        {
            "question": "How do you specify which packages a module makes available to other modules?",
            "options": [
                "Using the 'provides' keyword",
                "Using the 'exports' keyword",
                "Using the 'public' keyword",
                "Using the 'open' keyword"
            ],
            "answer": "Using the 'exports' keyword",
            "explanation": "The 'exports' keyword in the module-info.java file is used to specify which packages the module makes available to other modules."
        },
        {
            "question": "What is the purpose of the 'requires' statement in a module declaration?",
            "options": [
                "To specify dependencies on other modules",
                "To import packages from other modules",
                "To include additional source files",
                "To request specific Java version"
            ],
            "answer": "To specify dependencies on other modules",
            "explanation": "The 'requires' statement in a module declaration is used to specify dependencies on other modules."
        },
        {
            "question": "How do you use services provided by another module in Java?",
            "options": [
                "Using the 'uses' keyword",
                "Using the 'provides' keyword",
                "Using the 'requires' keyword",
                "Using the 'with' keyword"
            ],
            "answer": "Using the 'uses' keyword",
            "explanation": "The 'uses' keyword in a module declaration is used to specify that the module uses a service provided by another module."
        },
        {
            "question": "How do you specify that a module provides an implementation of a service?",
            "options": [
                "Using the 'provides…with…' syntax",
                "Using the 'exports' keyword",
                "Using the 'implements' keyword",
                "Using the 'service' keyword"
            ],
            "answer": "Using the 'provides…with…' syntax",
            "explanation": "The 'provides…with…' syntax in a module declaration is used to specify that the module provides an implementation of a service."
        },
        {
            "question": "What is a module descriptor in Java?",
            "options": [
                "A configuration file for module dependencies",
                "Another name for the module-info.java file",
                "A special annotation for modules",
                "A file that describes module versioning"
            ],
            "answer": "Another name for the module-info.java file",
            "explanation": "The module descriptor refers to the module-info.java file, which contains declarations and directives for the module."
        },
        {
            "question": "Can a module export two packages with the same name?",
            "options": [
                "Yes",
                "No",
                "Only if they are in different directories",
                "Only if one of them is a subpackage"
            ],
            "answer": "No",
            "explanation": "In Java, a module cannot export two packages with the same name, as package names must be unique within a module."
        },
        {
            "question": "What is module path in Java?",
            "options": [
                "A sequence of code within a module",
                "The location where Java stores standard modules",
                "The set of paths where the Java runtime searches for modules",
                "The directory structure within a module"
            ],
            "answer": "The set of paths where the Java runtime searches for modules",
            "explanation": "Module path is the set of paths where Java runtime searches for modules, similar to how the classpath works for locating classes and jars."
        },
        {
            "question": "Can you convert a traditional JAR file into a Java module?",
            "options": [
                "Yes, by adding a module-info.class file",
                "No, it's not possible",
                "Only if the JAR file is recompiled",
                "Only for JAR files created with Java 9 or later"
            ],
            "answer": "Yes, by adding a module-info.class file",
            "explanation": "A traditional JAR file can be converted into a Java module by adding a compiled module descriptor (module-info.class) to it."
        },
        {
            "question": "What is an automatic module in Java?",
            "options": [
                "A module that is automatically downloaded",
                "A module that is automatically created from a JAR file",
                "A module with automatically generated module-info.java",
                "A module that is part of the Java standard library"
            ],
            "answer": "A module that is automatically created from a JAR file",
            "explanation": "An automatic module is a JAR file placed on the module path, which is treated as a module by the Java runtime, without an explicit module descriptor."
        },
        {
            "question": "What is the 'transitive' keyword used for in a module declaration?",
            "options": [
                "To make all required modules available to consumers of the module",
                "To transitively export packages to other modules",
                "To include transitive dependencies",
                "To mark a module as being transitively available"
            ],
            "answer": "To make all required modules available to consumers of the module",
            "explanation": "The 'transitive' keyword in a 'requires' statement implies that the dependency is available transitively to other modules that require this module."
        },
        {
            "question": "How do you encapsulate internal packages within a module?",
            "options": [
                "By not exporting them",
                "By marking them as private",
                "By using the 'internal' keyword",
                "By placing them in a special directory"
            ],
            "answer": "By not exporting them",
            "explanation": "Packages that are not exported in the module-info.java file are encapsulated within the module and not accessible to other modules."
        },
        {
            "question": "What is the primary purpose of wrapper classes in Java?",
            "options": [
                "To provide a way to use primitive types as objects",
                "To wrap text data",
                "To encapsulate complex data structures",
                "To improve performance of collections"
            ],
            "answer": "To provide a way to use primitive types as objects",
            "explanation": "Wrapper classes in Java provide a way to use primitive data types (int, char, etc.) as objects."
        },
        {
            "question": "Which of the following is a wrapper class for the primitive type 'int'?",
            "options": [
                "Integer",
                "Int",
                "IntObject",
                "IntWrapper"
            ],
            "answer": "Integer",
            "explanation": "The Integer class is the wrapper class in Java for the primitive type 'int'."
        },
        {
            "question": "How do you convert a primitive type to its corresponding wrapper object?",
            "options": [
                "Using wrapper constructors",
                "Using static conversion methods",
                "Directly assigning a primitive to a wrapper variable",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Primitive types can be converted to wrapper objects using wrapper constructors, static conversion methods, or auto-boxing."
        },
        {
            "question": "What is auto-boxing in Java?",
            "options": [
                "Automatically wrapping a primitive type in its corresponding wrapper class",
                "Boxing data into a collection",
                "Converting objects to primitive types",
                "A method of data encryption"
            ],
            "answer": "Automatically wrapping a primitive type in its corresponding wrapper class",
            "explanation": "Auto-boxing is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes."
        },
        {
            "question": "What is the wrapper class for the 'char' primitive type?",
            "options": [
                "Char",
                "Character",
                "CharObject",
                "CharSequence"
            ],
            "answer": "Character",
            "explanation": "The Character class is the wrapper class for the primitive 'char' type."
        },
        {
            "question": "What is unboxing in Java?",
            "options": [
                "Removing an object from a collection",
                "Converting a wrapper object to its corresponding primitive type",
                "Removing encryption from data",
                "Unwrapping a string value"
            ],
            "answer": "Converting a wrapper object to its corresponding primitive type",
            "explanation": "Unboxing is the conversion of a wrapper object to its corresponding primitive type."
        },
        {
            "question": "How do you compare two wrapper objects for equality?",
            "options": [
                "Using the == operator",
                "Using the equals() method",
                "Both a and b",
                "By converting them to primitive types first"
            ],
            "answer": "Using the equals() method",
            "explanation": "To compare two wrapper objects for value equality, the equals() method should be used. The == operator compares object references."
        },
        {
            "question": "Which wrapper class is used for the 'boolean' primitive type?",
            "options": [
                "Boolean",
                "Bool",
                "BooleanObject",
                "BooleanWrapper"
            ],
            "answer": "Boolean",
            "explanation": "The Boolean class is the wrapper class for the primitive type 'boolean'."
        },
        {
            "question": "What happens when you assign a null value to a primitive type during unboxing?",
            "options": [
                "The primitive type takes a default value",
                "A compile-time error occurs",
                "A runtime exception is thrown",
                "The primitive type becomes null"
            ],
            "answer": "A runtime exception is thrown",
            "explanation": "Assigning a null value to a primitive type during unboxing results in a NullPointerException."
        },
        {
            "question": "Which of the following is a valid way to instantiate a wrapper class object?",
            "options": [
                "Integer i = new Integer(5);",
                "Integer i = Integer.valueOf(5);",
                "Integer i = 5; // auto-boxing",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "A wrapper class object can be instantiated using the constructor, static factory methods, or auto-boxing."
        },
        {
            "question": "How do you obtain the primitive value from a wrapper object?",
            "options": [
                "Using value methods like intValue(), charValue()",
                "Using toString() method",
                "By direct assignment to a primitive variable",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "The primitive value can be obtained from a wrapper object using value methods like intValue() or through unboxing by direct assignment."
        },
        {
            "question": "Can wrapper classes be used with collections in Java?",
            "options": [
                "Yes",
                "No",
                "Only certain collections",
                "Only with additional libraries"
            ],
            "answer": "Yes",
            "explanation": "Wrapper classes are used with collections in Java to store primitive types as objects."
        },
        {
            "question": "What is the output of comparing two Integer objects with the same value using the == operator?",
            "options": [
                "true",
                "false",
                "Depends on the values",
                "Compilation error"
            ],
            "answer": "false",
            "explanation": "The == operator compares references, not values, so it returns false unless both references point to the same object."
        },
        {
            "question": "Which of these is not a wrapper class in Java?",
            "options": [
                "Float",
                "Short",
                "String",
                "Byte"
            ],
            "answer": "String",
            "explanation": "String is not a wrapper class; it is a class for character strings. Float, Short, and Byte are all wrapper classes."
        },
        {
            "question": "What is the benefit of using wrapper classes in Java?",
            "options": [
                "Increased performance",
                "Lower memory usage",
                "Ability to use primitive types in generic collections",
                "Automatic conversion to strings"
            ],
            "answer": "Ability to use primitive types in generic collections",
            "explanation": "One of the main benefits of wrapper classes is that they allow primitive types to be used in generic collections like ArrayList, where only objects can be stored."
        },
        {
            "question": "Which class provides methods to create a client-side socket in Java?",
            "options": [
                "ServerSocket",
                "NetSocket",
                "Socket",
                "ClientSocket"
            ],
            "answer": "Socket",
            "explanation": "The Socket class in the java.net package is used to create client-side sockets."
        },
        {
            "question": "Which of the following is NOT a transport layer protocol?",
            "options": [
                "TCP",
                "UDP",
                "FTP",
                "SCTP"
            ],
            "answer": "FTP",
            "explanation": "FTP stands for File Transfer Protocol and is an application layer protocol. TCP, UDP, and SCTP are all transport layer protocols."
        },
        {
            "question": "Which class in Java is used to create a server-side socket?",
            "options": [
                "Server",
                "SocketServer",
                "ServerNet",
                "ServerSocket"
            ],
            "answer": "ServerSocket",
            "explanation": "The ServerSocket class is used to create server-side sockets that can listen for and accept connections from clients."
        },
        {
            "question": "In which package are most of the networking classes/interfaces defined?",
            "options": [
                "java.network",
                "java.net",
                "java.socket",
                "java.connect"
            ],
            "answer": "java.net",
            "explanation": "The java.net package contains most of the classes and interfaces for networking in Java."
        },
        {
            "question": "Which exception is thrown when a socket-related error occurs?",
            "options": [
                "NetworkException",
                "SocketException",
                "IOException",
                "ConnectException"
            ],
            "answer": "SocketException",
            "explanation": "While various exceptions can occur during networking tasks, SocketException is a common exception thrown for socket-related errors. Note that SocketException is a subclass of IOException."
        },
        {
            "question": "Which method is used to read from an input stream connected to a socket?",
            "options": [
                "readStream()",
                "read()",
                "socketRead()",
                "inputRead()"
            ],
            "answer": "read()",
            "explanation": "The read() method of InputStream is used to read data from the input stream connected to a socket."
        },
        {
            "question": "Which class provides method(s) to retrieve IP addresses of a given host?",
            "options": [
                "Socket",
                "Host",
                "InetAddress",
                "NetworkAddress"
            ],
            "answer": "InetAddress",
            "explanation": "The InetAddress class provides methods to retrieve IP addresses, like getByName() and getLocalHost()."
        },
        {
            "question": "Which of the following is true about a Datagram socket?",
            "options": [
                "It uses TCP for communication",
                "It is connection-oriented",
                "It is used for sending and receiving data in packets",
                "It requires a handshake before data transfer"
            ],
            "answer": "It is used for sending and receiving data in packets",
            "explanation": "Datagram sockets use the UDP protocol (which is connectionless) to send and receive data in packets, without the need for an initial handshake or maintaining a persistent connection."
        },
        {
            "question": "Which class is used to perform DNS lookup in Java?",
            "options": [
                "DNSLookup",
                "NetAddress",
                "InetAddress",
                "DomainLookup"
            ],
            "answer": "InetAddress",
            "explanation": "The InetAddress class provides methods like getByName() that can be used to perform DNS lookups to retrieve the IP address for a given host name."
        },
        {
            "question": "Which method of the ServerSocket class is used to listen for client requests?",
            "options": [
                "accept()",
                "listen()",
                "connect()",
                "request()"
            ],
            "answer": "accept()",
            "explanation": "The accept() method of the ServerSocket class listens for client requests and establishes a connection when a client request is received."
        },
        {
            "question": "Which package is primarily used for JDBC classes and interfaces?",
            "options": [
                "java.sql",
                "java.db",
                "java.jdbc",
                "java.database"
            ],
            "answer": "java.sql",
            "explanation": "JDBC classes and interfaces are primarily located in the java.sql package."
        },
        {
            "question": "Which interface is used to execute SQL queries?",
            "options": [
                "DatabaseExecutor",
                "Statement",
                "QueryExecutor",
                "SqlConnection"
            ],
            "answer": "Statement",
            "explanation": "The Statement interface is used to execute SQL queries in JDBC."
        },
        {
            "question": "What does JDBC DriverManager class do?",
            "options": [
                "Manages Java threads",
                "Manages database drivers",
                "Manages database cache",
                "Manages SQL transactions"
            ],
            "answer": "Manages database drivers",
            "explanation": "The DriverManager class manages a list of database drivers."
        },
        {
            "question": "Which method is used to establish a connection to the database?",
            "options": [
                "connect()",
                "getConnection()",
                "establishConnection()",
                "openDbConnection()"
            ],
            "answer": "getConnection()",
            "explanation": "The getConnection() method of the DriverManager class is used to establish a connection to the database."
        },
        {
            "question": "How can you execute a stored procedure using JDBC?",
            "options": [
                "Using the Statement class",
                "Using the PreparedStatement class",
                "Using the CallableStatement class",
                "Using the ProcedureStatement class"
            ],
            "answer": "Using the CallableStatement class",
            "explanation": "The CallableStatement interface is used to execute stored procedures in JDBC."
        },
        {
            "question": "Which of the following is not a JDBC type?",
            "options": [
                "TYPE_SCROLL_SENSITIVE",
                "TYPE_SCROLL_INSENSITIVE",
                "TYPE_SCROLL_AWARE",
                "TYPE_FORWARD_ONLY"
            ],
            "answer": "TYPE_SCROLL_AWARE",
            "explanation": "JDBC does not define a TYPE_SCROLL_AWARE type. The other options are valid JDBC ResultSet types."
        },
        {
            "question": "Which method is used to commit a transaction in JDBC?",
            "options": [
                "commit()",
                "execute()",
                "save()",
                "finalize()"
            ],
            "answer": "commit()",
            "explanation": "The commit() method of the Connection interface is used to commit a transaction."
        },
        {
            "question": "How do you roll back a transaction in JDBC?",
            "options": [
                "Using the rollback() method",
                "Using the undo() method",
                "Setting auto-commit to true",
                "Using the back() method"
            ],
            "answer": "Using the rollback() method",
            "explanation": "The rollback() method of the Connection interface is used to roll back a transaction."
        },
        {
            "question": "Which interface handles the result of a query?",
            "options": [
                "QuerySet",
                "DbResult",
                "ResultSet",
                "QueryResult"
            ],
            "answer": "ResultSet",
            "explanation": "The ResultSet interface is used to handle the result returned by a query."
        },
        {
            "question": "Which method is used to update data in a ResultSet?",
            "options": [
                "updateRow()",
                "modifyRow()",
                "saveRow()",
                "setRow()"
            ],
            "answer": "updateRow()",
            "explanation": "The updateRow() method of the ResultSet interface is used to reflect changes made to the current row in the database."
        },
        {
            "question": "Which of these is not a JDBC driver type?",
            "options": [
                "Thin driver",
                "ODBC driver",
                "Thick driver",
                "Native-API driver"
            ],
            "answer": "Thick driver",
            "explanation": "There is no JDBC driver known as “Thick driver.” The others are types or categories of JDBC drivers."
        },
        {
            "question": "Which class can be used to retrieve metadata of a database?",
            "options": [
                "DatabaseInfo",
                "DbMetaData",
                "DatabaseMetaData",
                "MetaData"
            ],
            "answer": "DatabaseMetaData",
            "explanation": "The DatabaseMetaData interface provides methods to get information about the database."
        },
        {
            "question": "What is the default transaction isolation level in JDBC?",
            "options": [
                "READ_COMMITTED",
                "READ_UNCOMMITTED",
                "SERIALIZABLE",
                "REPEATABLE_READ"
            ],
            "answer": "READ_COMMITTED",
            "explanation": "The default transaction isolation level in JDBC is READ_COMMITTED."
        },
        {
            "question": "Which method can be used to set auto-commit mode in JDBC?",
            "options": [
                "setAutoCommit(boolean)",
                "autoCommit(boolean)",
                "enableAutoCommit(boolean)",
                "commitAutomatically(boolean)"
            ],
            "answer": "setAutoCommit(boolean)",
            "explanation": "The setAutoCommit(boolean) method of the Connection interface is used to set the auto-commit mode in JDBC."
        },
        {
            "question": "What does the executeQuery() method of the Statement interface return?",
            "options": [
                "An integer",
                "A boolean",
                "ResultSet",
                "PreparedStatement"
            ],
            "answer": "ResultSet",
            "explanation": "The executeQuery() method of the Statement interface returns a ResultSet object which contains the result of the query."
        },
        {
            "question": "Which package contains the core servlet classes and interfaces?",
            "options": [
                "java.servlet",
                "javax.servlet",
                "java.web.servlet",
                "javax.web"
            ],
            "answer": "javax.servlet",
            "explanation": "Servlet classes and interfaces are primarily found in the javax.servlet package."
        },
        {
            "question": "Which method is called only once during the lifecycle of a servlet?",
            "options": [
                "start()",
                "execute()",
                "init()",
                "run()"
            ],
            "answer": "init()",
            "explanation": "The init() method is called only once when the servlet is first loaded into memory."
        },
        {
            "question": "Which interface provides request information for HTTP servlets?",
            "options": [
                "HttpServlet",
                "ServletRequest",
                "HttpServletRequest",
                "HttpInfo"
            ],
            "answer": "HttpServletRequest",
            "explanation": "The HttpServletRequest interface extends the ServletRequest interface to provide request information for HTTP servlets."
        },
        {
            "question": "Which HTTP method represents the doGet() method in a servlet?",
            "options": [
                "POST",
                "PUT",
                "GET",
                "DELETE"
            ],
            "answer": "GET",
            "explanation": "The doGet() method corresponds to the HTTP GET method."
        },
        {
            "question": "Which of these methods is not part of the servlet lifecycle?",
            "options": [
                "init()",
                "service()",
                "destroy()",
                "execute()"
            ],
            "answer": "execute()",
            "explanation": "init(), service(), and destroy() are the three main lifecycle methods of a servlet. There’s no execute() method in this lifecycle."
        },
        {
            "question": "Which method is responsible for cleaning up resources before the servlet is destroyed?",
            "options": [
                "finalize()",
                "clean()",
                "destroy()",
                "delete()"
            ],
            "answer": "destroy()",
            "explanation": "The destroy() method is called before the servlet is taken out of service, allowing it to release any resources it has acquired."
        },
        {
            "question": "Which interface must be implemented by all servlets?",
            "options": [
                "WebServlet",
                "ServletInterface",
                "Servlet",
                "ServletApp"
            ],
            "answer": "Servlet",
            "explanation": "All servlets must implement the Servlet interface, either directly or most commonly by extending classes that implement it."
        },
        {
            "question": "Which method receives and processes client requests?",
            "options": [
                "getRequest()",
                "processRequest()",
                "service()",
                "handle()"
            ],
            "answer": "service()",
            "explanation": "The service() method is responsible for receiving and processing client requests."
        },
        {
            "question": "Which servlet method is called for every client request?",
            "options": [
                "start()",
                "doService()",
                "service()",
                "handleRequest()"
            ],
            "answer": "service()",
            "explanation": "The service() method is called for every client request."
        },
        {
            "question": "What is the default session timeout (in minutes) in web.xml?",
            "options": [
                "10",
                "15",
                "20",
                "30"
            ],
            "answer": "30",
            "explanation": "The default session timeout is typically set to 30 minutes in the web.xml descriptor."
        },
        {
            "question": "Which method is used to retrieve parameter values from the query string?",
            "options": [
                "getParams()",
                "getParameter()",
                "getQuery()",
                "fetchParameter()"
            ],
            "answer": "getParameter()",
            "explanation": "The getParameter() method is used to retrieve parameter values from the query string."
        },
        {
            "question": "What is the use of the RequestDispatcher interface?",
            "options": [
                "Manage request attributes",
                "Forward or include resource/response",
                "Manage HTTP headers",
                "Handle session tracking"
            ],
            "answer": "Forward or include resource/response",
            "explanation": "RequestDispatcher provides the functionality to forward a request to another resource or include the content of another resource."
        },
        {
            "question": "Which listener is used to listen to HttpSession events?",
            "options": [
                "ServletRequestListener",
                "ServletContextListener",
                "HttpSessionListener",
                "ServletRequestAttributeListener"
            ],
            "answer": "HttpSessionListener",
            "explanation": "The HttpSessionListener is used to receive notification events about HttpSession lifecycle changes."
        },
        {
            "question": "Which annotation is used to define a servlet in the latest versions of the Servlet API?",
            "options": [
                "@ServletDefinition",
                "@WebServlet",
                "@HttpServlet",
                "@ServletConfig"
            ],
            "answer": "@WebServlet",
            "explanation": "The @WebServlet annotation is used to define a servlet in modern versions of the Servlet API."
        },
        {
            "question": "Which method is used to get all the initialization parameters from the web.xml file?",
            "options": [
                "getInitParameters()",
                "getConfigParameters()",
                "getServletParameters()",
                "getInitParameterNames()"
            ],
            "answer": "getInitParameterNames()",
            "explanation": "The getInitParameterNames() method returns an enumeration of all the initialization parameter names."
        },
        {
            "question": "What is a lambda expression in Java 8?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "A concise way to represent an anonymous function",
            "explanation": "A lambda expression in Java 8 is a concise way to represent an anonymous function, allowing you to write more compact code."
        },
        {
            "question": "What is the syntax for a lambda expression in Java?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "All of the above",
            "explanation": "The syntax for a lambda expression in Java includes different forms depending on the complexity of the expression or statements."
        },
        {
            "question": "What is the target type for a lambda expression?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "A functional interface",
            "explanation": "The target type for a lambda expression in Java is a functional interface, which defines the type of the lambda expression."
        },
        {
            "question": "What is the purpose of the -> operator in a lambda expression?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "It separates the parameter list from the body of the lambda expression",
            "explanation": "The -> operator separates the parameter list from the body of the lambda expression, defining the inputs and the behavior of the lambda expression."
        },
        {
            "question": "What will the following lambda expression return?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "Sum of x and y",
            "explanation": "The lambda expression defines a function that takes two parameters and returns their sum."
        },
        {
            "question": "Lambda expressions can be used to replace …",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "Anonymous classes",
            "explanation": "Lambda expressions can be used to replace instances of anonymous classes that implement a functional interface."
        },
        {
            "question": "Which of the following is a valid lambda expression?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "All of the above",
            "explanation": "All the given options are valid lambda expressions in Java."
        },
        {
            "question": "Lambda expressions let you …",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "Concisely express instances of single-method interfaces",
            "explanation": "Lambda expressions allow you to express instances of single-method interfaces (functional interfaces) in a concise manner."
        },
        {
            "question": "Lambda expressions can be used with the Java Collections API primarily in …",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "All of the above",
            "explanation": "Lambda expressions, combined with streams, can be used in various operations like sorting, iterating, and filtering in the Java Collections API."
        },
        {
            "question": "The scope of variables in a lambda expression is …",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "The same as the enclosing scope",
            "explanation": "Variables within lambda expressions have the same scope as the enclosing method or block. Also, lambdas can access the final or effectively final variables from the enclosing scope."
        },
        {
            "question": "Which among the following is not a functional interface in Java?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "List",
            "explanation": "The List is not a functional interface. It’s an interface representing a collection of elements."
        },
        {
            "question": "You cannot use … inside lambda expressions.",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "break and continue",
            "explanation": "Lambda expressions don’t support the use of break and continue statements if they’re not part of a loop within the lambda."
        },
        {
            "question": "Which Java feature works effectively with lambda expressions?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "Streams",
            "explanation": "Java’s Stream API works effectively with lambda expressions, simplifying operations on data sets."
        },
        {
            "question": "Lambda expressions can throw exceptions.",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "True",
            "explanation": "Lambda expressions can throw exceptions, but if an exception is checked, it must be compatible with the exceptions listed in the throws clause of the functional interface method."
        },
        {
            "question": "What does the following lambda expression represent?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "A lambda that does nothing and returns void",
            "explanation": "The lambda expression () -> {} represents a no-op (does nothing) lambda with no parameters and returns void."
        },
        {
            "question": "Which of the following statements are true?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": " Curly brackets are required whenever the return keyword is used in a lambda expression",
            "explanation": "A return keyword is not always required (or optional) in a lambda expression. It depends on the signature of the functional interface method. Curly brackets are required whenever the return keyword is used in a lambda expression. Both can be omitted if the lambda expression’s body is just one statement."
        },
        {
            "question": "How is this keyword handled inside a lambda expression?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "this refers to the enclosing class of the lambda expression",
            "explanation": "For a lambda expression, this resolves to the enclosing class where the lambda is written."
        },
        {
            "question": "What is the expected number of parameters for a lambda expression used with the Consumer functional interface?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "One parameter",
            "explanation": "The Consumer functional interface expects a lambda expression with a single parameter."
        },
        {
            "question": "What is the benefit of using lambda expressions in Java?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "More readable and concise code",
            "explanation": "One of the primary benefits of lambda expressions is that they can lead to cleaner, more concise, and more readable code, especially when used with functional interfaces and Streams."
        },
        {
            "question": "A lambda expression can be used…",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": " correct answers are A and C.",
            "explanation": ""
        },
        {
            "question": "What is a Stream in the context of the Java 8 Stream API?",
            "options": [
                "A data structure for storing elements.",
                "A sequence of data elements that can be processed in parallel or sequentially.",
                "A container for holding collections.",
                "A type of exception thrown during runtime."
            ],
            "answer": "ion (b) is correct.",
            "explanation": "In the Java 8 Stream API, a Stream represents a sequence of data elements that can be processed in parallel or sequentially. It allows for efficient and functional-style operations on collections of data. Streams provide a way to perform operations on a collection of elements, such as filtering, mapping, and reducing. They enable concise and expressive code for data manipulation tasks."
        },
        {
            "question": "Which interface represents a sequence of elements on which one or more operations can be performed?",
            "options": [
                "Collection",
                "Map",
                "Stream",
                "List"
            ],
            "answer": "Stream",
            "explanation": "The Stream interface represents a sequence of objects, allowing various operations to be performed."
        },
        {
            "question": "Which of the following is not a terminal operation in the Stream API?",
            "options": [
                "forEach",
                "map",
                "reduce",
                "collect"
            ],
            "answer": "map",
            "explanation": "map is an intermediate operation that transforms the elements of the stream."
        },
        {
            "question": "Which method is used to create a Stream from a collection in Java 8?",
            "options": [
                "stream()",
                "parallelStream()",
                "getStream()",
                "createStream()"
            ],
            "answer": "stream()",
            "explanation": "The stream() method is used to create a Stream from a collection in Java 8. It is available on any collection object and returns a sequential Stream."
        },
        {
            "question": "What is the purpose of the filter() operation in the Stream API?",
            "options": [
                "To transform elements by applying a function.",
                "To remove duplicate elements from the stream.",
                "To perform an action on each element of the stream.",
                "To filter elements based on a condition."
            ],
            "answer": "To filter elements based on a condition.",
            "explanation": "The filter() operation is used to filter elements based on a condition in the Stream API. It takes a Predicate as an argument and returns a new Stream containing only the elements that satisfy the given condition."
        },
        {
            "question": "What is the purpose of the map() operation in the Stream API?",
            "options": [
                "To perform an action on each element of the stream.",
                "To remove duplicate elements from the stream.",
                "To transform elements by applying a function.",
                "To filter elements based on a condition."
            ],
            "answer": "To transform elements by applying a function.",
            "explanation": "map is an intermediate operation that transforms the elements of the stream."
        },
        {
            "question": "What is the difference between intermediate and terminal operations in the Stream API?",
            "options": [
                "Intermediate operations return a new Stream, while terminal operations produce a final result or a side effect.",
                "Intermediate operations are executed lazily, while terminal operations are executed eagerly.",
                "Intermediate operations can be chained together, while terminal operations cannot.",
                "Intermediate operations transform the Stream elements, while terminal operations perform a reduction or aggregation."
            ],
            "answer": "Intermediate operations return a new Stream, while terminal operations produce a final result or a side effect.",
            "explanation": "Intermediate operations in the Stream API return a new Stream that can be further processed, while terminal operations produce a final result or perform a side effect."
        },
        {
            "question": "What is the output of the following Stream operation?",
            "options": [
                "[1, 2, 3, 4]",
                "[2, 4, 6, 8]",
                "[2, 3, 4, 5]",
                "[1, 3, 5, 7]"
            ],
            "answer": "[2, 4, 6, 8]",
            "explanation": "The map() operation multiplies each element of the Stream by 2, resulting in the output [2, 4, 6, 8]."
        },
        {
            "question": "What is the purpose of the collect() method in the Stream API?",
            "options": [
                "To transform the elements of a Stream.",
                "To filter the elements in a Stream based on a predicate.",
                "To perform a reduction operation on the Stream elements.",
                "To accumulate the elements of a Stream into a collection or a summary result."
            ],
            "answer": "To accumulate the elements of a Stream into a collection or a summary result.",
            "explanation": "The collect() method is used to accumulate the elements of a Stream into a collection or a summary result."
        },
        {
            "question": "Which of the following can turn a Stream into a Stream>?",
            "options": [
                "map",
                "flatMap",
                "reduce",
                "forEach"
            ],
            "answer": "map",
            "explanation": "Using map with a function that returns a Stream would result in a Stream>."
        },
        {
            "question": "Which method will return a stream without any duplicates?",
            "options": [
                "map",
                "distinct",
                "peek",
                "skip"
            ],
            "answer": "distinct",
            "explanation": "The distinct method returns a stream consisting of the distinct elements."
        },
        {
            "question": "Which of the following operations is stateful?",
            "options": [
                "map",
                "filter",
                "sorted",
                "peek"
            ],
            "answer": "sorted",
            "explanation": "A stateful operation, such as sorted, may incorporate state from previously seen elements when processing new elements."
        },
        {
            "question": "Which method can produce a Stream from an array?",
            "options": [
                "Stream.generate()",
                "Stream.iterate()",
                "Arrays.stream()",
                "Stream.of()"
            ],
            "answer": "Arrays.stream()",
            "explanation": "Arrays.stream() method provides a way to obtain a stream from an array."
        },
        {
            "question": "What will the following code return?",
            "options": [
                "“d”",
                "“a”",
                "Optional.empty",
                "null"
            ],
            "answer": "Optional.empty",
            "explanation": "Since there’s no “d” in the stream, findFirst() will return Optional.empty."
        },
        {
            "question": "Which operation can transform a Stream into a Stream representing the length of each string?",
            "options": [
                "map",
                "flatMap",
                "filter",
                "forEach"
            ],
            "answer": "map",
            "explanation": "The map operation can transform the type of elements in a stream. For instance, using map(s -> s.length()) will achieve the transformation in the question."
        },
        {
            "question": "Which method in the Stream API can be used to obtain the average of IntStream?",
            "options": [
                "average()",
                "mean()",
                "median()",
                "mode()"
            ],
            "answer": "average()",
            "explanation": "The average() method is specifically available for IntStream, LongStream, and DoubleStream and it returns an OptionalDouble representing the average of the elements."
        }
    ],
    "Maven": [
        {
            "question": "What is Maven?",
            "options": [
                "A Java library",
                "A Java Framework",
                "A Build Tool",
                "An IDE"
            ],
            "answer": "A Build Tool",
            "explanation": "Maven is a build and project management tool that is primarily used for Java projects."
        },
        {
            "question": "Which file serves as the core configuration file in a Maven project?",
            "options": [
                "mvn.xml",
                "maven-config.xml",
                "project-config.xml",
                "pom.xml"
            ],
            "answer": "pom.xml",
            "explanation": "POM stands for “Project Object Model”, and pom.xml is the core configuration file in Maven, defining project dependencies, plugins, goals, etc"
        },
        {
            "question": "What does the mvn clean command do?",
            "options": [
                "Deletes the target/ directory",
                "Compiles the source code",
                "Downloads the dependencies",
                "Deploys the application"
            ],
            "answer": "Deletes the target/ directory",
            "explanation": "The clean phase removes the previously created target/ directory, ensuring a fresh build."
        },
        {
            "question": "Which lifecycle phase in Maven is used for packaging the compiled source code?",
            "options": [
                "compile",
                "install",
                "package",
                "validate"
            ],
            "answer": "package",
            "explanation": "The package phase takes the compiled code and packages it into its distributable format, like JAR."
        },
        {
            "question": "What is a Maven repository?",
            "options": [
                "A location where Java classes are stored",
                "A tool to manage project versions",
                "A storage place for Java documentation",
                "A place where Maven stores project binaries"
            ],
            "answer": "A place where Maven stores project binaries",
            "explanation": "Maven repositories store project binaries, libraries, and plugins which can be used by Maven to build and manage projects."
        },
        {
            "question": "Which of the following commands will compile the Maven project and install the package into the local repository?",
            "options": [
                "mvn clean install",
                "mvn compile",
                "mvn package",
                "mvn deploy"
            ],
            "answer": "mvn clean install",
            "explanation": "mvn clean install will first clean the project by deleting the target/ directory and then compile, package, and install the artifact into the local repository."
        },
        {
            "question": "In which directory are the resource files placed by default in a Maven project?",
            "options": [
                "/src/main/resources",
                "/src/main/java",
                "/src/resources",
                "/resources"
            ],
            "answer": "/src/main/resources",
            "explanation": "Maven follows a standard directory layout. Resource files like configuration properties should be placed in /src/main/resources."
        },
        {
            "question": "Which Maven plugin is used for compiling Java sources?",
            "options": [
                "maven-compiler-plugin",
                "maven-source-plugin",
                "maven-build-plugin",
                "maven-java-plugin"
            ],
            "answer": "maven-compiler-plugin",
            "explanation": "The maven-compiler-plugin is the primary plugin used to compile Java source files in a Maven project."
        },
        {
            "question": "Which of the following is NOT a type of Maven repository?",
            "options": [
                "Local",
                "Central",
                "Remote",
                "Distributed"
            ],
            "answer": "Distributed",
            "explanation": "Maven has three types of repositories: Local (on the developer’s machine), Central (the main Maven repository), and Remote (custom repositories, e.g., company-specific)."
        },
        {
            "question": "What does the mvn validate command do?",
            "options": [
                "Validates that the project is correct and all necessary information is available",
                "Compiles the project’s source code",
                "Runs the unit tests",
                "Packages the compiled code into its distributable format"
            ],
            "answer": "Validates that the project is correct and all necessary information is available",
            "explanation": "The validate phase validates the project to ensure that all necessary information is present before any other phases are executed."
        },
        {
            "question": "What does the archetype in Maven refer to?",
            "options": [
                "An official Maven plugin",
                "A Maven repository",
                "A template or pattern to generate project structures",
                "A lifecycle phase"
            ],
            "answer": "A template or pattern to generate project structures",
            "explanation": "Maven archetypes are project templating toolkits, allowing developers to create templates of project structures, ensuring consistency and standards."
        },
        {
            "question": "Which of the following is the command to skip tests in Maven?",
            "options": [
                "mvn install -DnoTests",
                "mvn package -Dskip",
                "mvn deploy -DnoRun",
                "mvn install -DskipTests"
            ],
            "answer": "mvn install -DskipTests",
            "explanation": "The -DskipTests parameter will compile the tests but skip running them."
        },
        {
            "question": "Which file is consulted by Maven to download project dependencies?",
            "options": [
                "settings.xml",
                "mvn-config.xml",
                "pom.xml",
                "repository.xml"
            ],
            "answer": "pom.xml",
            "explanation": "The pom.xml file contains the list of project dependencies. Maven uses this file to determine which dependencies to download and from where."
        },
        {
            "question": "How can you specify a particular version of Java for your Maven project?",
            "options": [
                "By using the maven-java-version plugin",
                "By setting the JAVA_HOME environment variable",
                "By using the maven-compiler-plugin in pom.xml",
                "By downloading a Maven version specific to that Java version"
            ],
            "answer": "By using the maven-compiler-plugin in pom.xml",
            "explanation": "You can specify a Java version for your Maven project by configuring the maven-compiler-plugin in your pom.xml."
        },
        {
            "question": "In which directory would you place test-related resources in a Maven project?",
            "options": [
                "/src/main/resources",
                "/src/test/java",
                "/src/main/tests",
                "/src/test/resources"
            ],
            "answer": "/src/test/resources",
            "explanation": "Test-related resources, such as configuration properties for tests, should be placed in /src/test/resources."
        }
    ],
    "Kotlin": [
        {
            "question": "What is Kotlin?",
            "options": [
                "A new version of Java.",
                "A JavaScript framework.",
                "A statically-typed programming language for the JVM, Android, and browser.",
                "A database management system."
            ],
            "answer": "A statically-typed programming language for the JVM, Android, and browser.",
            "explanation": "Kotlin is a statically-typed programming language developed by JetBrains that runs on the Java Virtual Machine (JVM), Android, and can even be compiled to JavaScript for browser-based applications."
        },
        {
            "question": "Which platform does Kotlin primarily target?",
            "options": [
                "Python Bytecode",
                "JavaScript",
                "JVM (Java Virtual Machine) Bytecode",
                "PHP"
            ],
            "answer": "JVM (Java Virtual Machine) Bytecode",
            "explanation": "Kotlin is a statically typed programming language that primarily targets the Java Virtual Machine (JVM) bytecode. This means Kotlin code is compiled into JVM bytecode, which can then be executed in any environment where JVM is supported. However, it’s also worth noting that Kotlin can also be transpiled into JavaScript, and it can compile to native binaries, allowing code to run on non-JVM platforms."
        },
        {
            "question": "Are semicolons (;) mandatory at the end of code statements in Kotlin?",
            "options": [
                "True",
                "False",
                "",
                ""
            ],
            "answer": "False",
            "explanation": "Kotlin does not require semicolons (;) at the end of each statement. They can be used, but are generally omitted unless separating multiple statements on a single line for readability."
        },
        {
            "question": "What paradigm(s) does the Kotlin programming language follow?",
            "options": [
                "Only Object-Oriented",
                "Procedural",
                "Only Functional",
                "Both Object-Oriented and Functional"
            ],
            "answer": "Both Object-Oriented and Functional",
            "explanation": "Kotlin is a statically typed language that supports both object-oriented and functional programming paradigms, providing a lot of flexibility in coding styles and approaches. Its design allows developers to seamlessly integrate object-oriented and functional programming features in their code."
        },
        {
            "question": "How do you declare a variable in Kotlin?",
            "options": [
                "let myVariable = 10;",
                "val myVariable: Int = 10",
                "const myVariable = 10;",
                "var myVariable: Int = 10"
            ],
            "answer": "var myVariable: Int = 10",
            "explanation": "In Kotlin, you declare a mutable variable using the var keyword followed by the variable name, a colon, and the variable type. For example, var myVariable: Int = 10 declares a mutable integer variable named myVariable with an initial value of 10."
        },
        {
            "question": "How do you define a variable in Kotlin that cannot be reassigned?",
            "options": [
                "var",
                "val",
                "const",
                "final"
            ],
            "answer": "val",
            "explanation": "The val keyword in Kotlin creates a read-only (immutable) property."
        },
        {
            "question": "How do you declare a nullable variable in Kotlin?",
            "options": [
                "var name: String?",
                "var name: String",
                "var name: String = null",
                "String name = null"
            ],
            "answer": "var name: String?",
            "explanation": "In Kotlin, you can declare a nullable variable by appending a ? to the type."
        },
        {
            "question": "What is the difference between val and var in Kotlin?",
            "options": [
                "They are identical and can be used interchangeably.",
                "‘val’ declares mutable variables, and ‘var’ declares immutable ones.",
                "‘val’ declares immutable variables, and ‘var’ declares mutable ones.",
                "‘val’ is used for local variables, and ‘var’ is used for global variables."
            ],
            "answer": "‘val’ declares immutable variables, and ‘var’ declares mutable ones.",
            "explanation": "In Kotlin, ‘val’ is used to declare a read-only (immutable) property, which means once initialized, its value cannot be changed. On the other hand, ‘var’ is used to declare a mutable property, allowing its value to be changed after initialization."
        },
        {
            "question": "How do you define a function in Kotlin?",
            "options": [
                "fun myFunction() {}",
                "def myFunction() {}",
                "function myFunction() {}",
                "fun = myFunction() {}"
            ],
            "answer": "fun myFunction() {}",
            "explanation": "In Kotlin, you define a function using the fun keyword followed by the function name, parentheses, and curly braces. For example, fun myFunction() {} defines a function named myFunction."
        },
        {
            "question": "What is the when expression used in Kotlin?",
            "options": [
                "To create a loop.",
                "To define a switch-case statement.",
                "To define a conditional expression.",
                "To create a lambda function."
            ],
            "answer": "To define a switch-case statement.",
            "explanation": "In Kotlin, the when expression is used as a replacement for the traditional switch-case statement. It allows you to compare a value against multiple conditions and execute different branches of code based on the match."
        },
        {
            "question": "What does ?. operator do in Kotlin?",
            "options": [
                "Null-safe type casting",
                "Null-safe function calling",
                "Null-safe member access",
                "None of the above"
            ],
            "answer": "Null-safe member access",
            "explanation": "The ?. operator allows safe access to the members (functions or properties) of an object that could possibly be null."
        },
        {
            "question": "What is the default visibility modifier for functions in Kotlin if no modifier is specified?",
            "options": [
                "public",
                "private",
                "internal",
                "protected"
            ],
            "answer": "public",
            "explanation": "In Kotlin, when no visibility modifier is specified for a function, it defaults to ‘public’. This means the function can be accessed from anywhere."
        },
        {
            "question": "Which keyword is used to create a singleton in Kotlin?",
            "options": [
                "static",
                "singleton",
                "single",
                "object"
            ],
            "answer": "object",
            "explanation": "In Kotlin, the object keyword is used to create a singleton class."
        },
        {
            "question": "What is the main purpose of the let function in Kotlin?",
            "options": [
                "To facilitate null checks",
                "To execute a block of code and return a result",
                "To transform an object",
                "None of the above"
            ],
            "answer": "To transform an object",
            "explanation": "In Kotlin, the ‘let’ function is primarily used to transform an object. It executes a block of code on an object and then returns the result of that block. This can be particularly useful in chaining operations."
        },
        {
            "question": "Which feature in Kotlin helps to prevent NullPointerExceptions?",
            "options": [
                "Safe Call Operator (?.)",
                "Non-null Assertion Operator (!!)",
                "Elvis Operator (?:)",
                "Safe Cast Operator (as?)"
            ],
            "answer": "Safe Call Operator (?.)",
            "explanation": "The Safe Call Operator (?.) in Kotlin is designed to handle nullability and help prevent NullPointerExceptions. It allows an operation to be performed on a nullable variable only if the variable is not null, otherwise, it simply returns null."
        },
        {
            "question": "What is the purpose of the open modifier in Kotlin?",
            "options": [
                "It allows a class to be instantiated.",
                "It makes a function available for overriding.",
                "It enforces strict typing for variables.",
                "It allows a function to be called only from within its own class."
            ],
            "answer": "It makes a function available for overriding.",
            "explanation": "In Kotlin, the open modifier is used to allow a function to be overridden in a subclass. By default, functions are final and cannot be overridden unless marked with open."
        },
        {
            "question": "How do you create a single-line comment in Kotlin?",
            "options": [
                "// This is a comment",
                "/* This is a comment */",
                "",
                "# This is a comment"
            ],
            "answer": "// This is a comment",
            "explanation": "In Kotlin, you create a single-line comment using the // syntax."
        },
        {
            "question": "How can we write a multi-line comment in Kotlin?",
            "options": [
                "/* Comment */",
                "// Comment",
                "",
                "# Comment"
            ],
            "answer": "/* Comment */",
            "explanation": "Multi-line comments in Kotlin are enclosed between /* and */."
        },
        {
            "question": "What is the role of the init block in Kotlin?",
            "options": [
                "To initialize the superclass",
                "To initialize an object after the constructor has been called",
                "To initialize static variables",
                "None of the above"
            ],
            "answer": "To initialize an object after the constructor has been called",
            "explanation": "In Kotlin, the ‘init’ block is part of a class body and is executed when the class is instantiated, following the execution of the primary constructor. Its main role is to perform additional initialization operations beyond what’s done in the constructors. It does not serve to initialize the superclass or static variables."
        },
        {
            "question": "How do you call a function in Kotlin?",
            "options": [
                "functionName()",
                "call functionName",
                "Function -> functionName",
                "functionName:call"
            ],
            "answer": "functionName()",
            "explanation": "In Kotlin, a function is called by its name followed by parentheses. If the function takes parameters, those are placed inside the parentheses."
        },
        {
            "question": "Which Kotlin construct allows a block of code to be executed a specific number of times?",
            "options": [
                "for",
                "while",
                "repeat",
                "loop"
            ],
            "answer": "repeat",
            "explanation": "Kotlin’s ‘repeat’ function is designed to execute a specified block of code a certain number of times."
        },
        {
            "question": "Which keywords are used to handle conditional statements in Kotlin?",
            "options": [
                "if",
                "when",
                "both a and b",
                "none of the above"
            ],
            "answer": "both a and b",
            "explanation": "Kotlin uses both ‘if’ and ‘when’ constructs to handle conditional logic in the code."
        },
        {
            "question": "What is the correct way to define a primary constructor in Kotlin?",
            "options": [
                "constructor()",
                "class constructor()",
                "primary constructor()",
                "class Person()"
            ],
            "answer": "class Person()",
            "explanation": "In Kotlin, the primary constructor is defined as part of the class declaration itself. The correct syntax is class Person()."
        },
        {
            "question": "In Kotlin, what is the main purpose of the return keyword?",
            "options": [
                "To declare a function",
                "To create a loop",
                "To terminate a function execution and return a value",
                "To define a class"
            ],
            "answer": "To terminate a function execution and return a value",
            "explanation": "In Kotlin, the ‘return’ keyword is used to exit a function execution prematurely and return a value, especially in functions that are designed to compute and provide a result."
        },
        {
            "question": "What is the primary use of the with function in Kotlin?",
            "options": [
                "To create an extension function",
                "To apply multiple transformations to a collection",
                "To establish a scope in which an object’s properties and functions can be accessed directly without specifying the object’s name",
                "To create an anonymous function"
            ],
            "answer": "To establish a scope in which an object’s properties and functions can be accessed directly without specifying the object’s name",
            "explanation": "In Kotlin, ‘with’ is a scope function that allows you to call multiple methods or access properties on an object within a single block, without needing to repeat the object’s name. It’s not primarily used for creating extension functions, applying transformations to collections, or creating anonymous functions."
        },
        {
            "question": "What does the also function do in Kotlin?",
            "options": [
                "It’s a scoping function that also executes a block of code",
                "It runs a block of code and returns the object it was called on",
                "It runs a block of code and returns the result",
                "None of the above"
            ],
            "answer": "It runs a block of code and returns the object it was called on",
            "explanation": "The also function executes a block of code and returns the object it was called on."
        },
        {
            "question": "Which of these is not a loop structure in Kotlin?",
            "options": [
                "for loop",
                "while loop",
                "until loop",
                "do-while loop"
            ],
            "answer": "until loop",
            "explanation": "The until is not a loop structure in Kotlin, it is used to create a range. The loop structures in Kotlin are for, while, and do-while loops."
        },
        {
            "question": "How do we throw an exception in Kotlin?",
            "options": [
                "throw Exception()",
                "raise Exception()",
                "Exception.throw()",
                "None of the above"
            ],
            "answer": "throw Exception()",
            "explanation": "In Kotlin, we throw an exception using the throw keyword."
        },
        {
            "question": "What methods can be used to achieve abstraction in Kotlin?",
            "options": [
                "Through abstract classes only",
                "Through interfaces only",
                "Through both abstract classes and interfaces",
                "None of the above"
            ],
            "answer": "Through both abstract classes and interfaces",
            "explanation": "In Kotlin, abstraction can be achieved using both abstract classes and interfaces. Abstract classes can have constructor parameters and can also contain implemented methods. Interfaces, on the other hand, are very similar to Java 8 interfaces and can contain method declarations as well as method implementations."
        },
        {
            "question": "How do you declare an array of integers in Kotlin?",
            "options": [
                "val numbers = arrayOf(1, 2, 3)",
                "val numbers = listOf(1, 2, 3)",
                "val numbers = [1, 2, 3]",
                "val numbers = Array(3) {0, 1, 2}"
            ],
            "answer": "",
            "explanation": "Answer: a) val numbers = arrayOf(1, 2, 3)"
        },
        {
            "question": "Which of the following is not a basic data type in Kotlin?",
            "options": [
                "Boolean",
                "String",
                "Float",
                "Char"
            ],
            "answer": "String",
            "explanation": "String is not a basic type in Kotlin. The basic types are: Byte, Short, Int, Long, Float, Double, Boolean, and Char."
        },
        {
            "question": "How do you declare a String in Kotlin?",
            "options": [
                "val str: String = “Hello, World!”",
                "String str = “Hello, World!”",
                "val str = String(“Hello, World!”)",
                "String str = new String(“Hello, World!”)"
            ],
            "answer": "val str: String = “Hello, World!”",
            "explanation": "In Kotlin, you declare a String using the val keyword, followed by the variable name, the type annotation: String, and the assignment operator =."
        },
        {
            "question": "In Kotlin, how do you compare two Strings for equality?",
            "options": [
                "str1 == str2",
                "str1.equals(str2)",
                "Both a and b",
                "str1.sameAs(str2)"
            ],
            "answer": "Both a and b",
            "explanation": "In Kotlin, you can use both the == operator and the equals() function to compare two Strings for equality."
        },
        {
            "question": "Which property can be used to find the length of a string?",
            "options": [
                "size",
                "length",
                "count",
                "charCount"
            ],
            "answer": "length",
            "explanation": "The ‘length’ property is used in Kotlin to ascertain the number of characters in a string."
        },
        {
            "question": "In Kotlin, which collection type has an order and can contain duplicate elements?",
            "options": [
                "Set",
                "List",
                "Map",
                "All of the above"
            ],
            "answer": "List",
            "explanation": "In Kotlin, Lists have a specific order and can contain duplicate elements."
        },
        {
            "question": "Which function is used to iterate over a collection in Kotlin?",
            "options": [
                "forEach()",
                "for()",
                "map()",
                "filter()"
            ],
            "answer": "forEach()",
            "explanation": "In Kotlin, forEach() function is used to iterate over collections."
        },
        {
            "question": "Which of these functions can transform a list in Kotlin?",
            "options": [
                "map()",
                "filter()",
                "forEach()",
                "None of the above"
            ],
            "answer": "map()",
            "explanation": "In Kotlin, the map() function is used to transform the elements of the list."
        },
        {
            "question": "Which collection type ensures element uniqueness in Kotlin?",
            "options": [
                "List",
                "Set",
                "Map",
                "MutableList"
            ],
            "answer": "Set",
            "explanation": "In Kotlin, the Set collection ensures that all elements in the set are unique."
        },
        {
            "question": "How do you create an empty list in Kotlin?",
            "options": [
                "emptyList()",
                "listOf()",
                "list()",
                "mutableListOf()"
            ],
            "answer": "emptyList()",
            "explanation": "In Kotlin, you can create an empty list by using the function emptyList()."
        },
        {
            "question": "What does the mapOf() function do in Kotlin?",
            "options": [
                "It creates a new List.",
                "It creates a new Set.",
                "It creates a new Map.",
                "It creates a new Queue."
            ],
            "answer": "It creates a new Map.",
            "explanation": "Explanation:The mapOf() function in Kotlin is used to create a read-only Map."
        }
    ],
    "Spring": [
        {
            "question": "What is minimum Java version requires to use Spring Framework 6?",
            "options": [
                "Java 8",
                "Java 17",
                "Java 11",
                "Java 15"
            ],
            "answer": "Java 17",
            "explanation": "Spring Framework 6 requires Java 17 or later."
        },
        {
            "question": "What is the core concept behind the Spring Framework?",
            "options": [
                "Servlets",
                "Inversion of Control (IoC)",
                "JSP",
                "JDBC"
            ],
            "answer": "Inversion of Control (IoC)",
            "explanation": "The core concept behind Spring is the Inversion of Control (IoC) which means that the control of objects is transferred from the developer to the Spring container."
        },
        {
            "question": "What is Dependency Injection (DI) in Spring Framework?",
            "options": [
                "A design pattern",
                "A way to achieve Inversion of Control",
                "A module in Spring",
                "A Spring annotation"
            ],
            "answer": "A way to achieve Inversion of Control",
            "explanation": "Dependency Injection is a technique to implement Inversion of Control. It allows the system to be more decoupled and modular."
        },
        {
            "question": "Which of the following is NOT a module in the Spring Framework?",
            "options": [
                "Spring AOP",
                "Spring MVC",
                "Spring JPA",
                "Spring JDBC"
            ],
            "answer": "Spring JPA",
            "explanation": "There’s no module named “Spring JPA”. JPA stands for Java Persistence API which is used with Spring Data JPA, but it’s not a core module of Spring."
        },
        {
            "question": "What is the primary function of the Spring IoC container?",
            "options": [
                "Transaction management",
                "Aspect-oriented programming",
                "Bean lifecycle management",
                "Data access"
            ],
            "answer": "Bean lifecycle management",
            "explanation": "The primary function of the Spring IoC (Inversion of Control) container is to manage the lifecycle of beans, including their creation, wiring, and destruction."
        },
        {
            "question": "Which annotation is used to mark a class as a Spring bean?",
            "options": [
                "@Entity",
                "@Component",
                "@Repository",
                "@Service"
            ],
            "answer": "@Component",
            "explanation": "The @Component annotation is a generic stereotype to denote a Spring-managed bean. Though @Repository, and @Service are also correct, they are specialized stereotypes with additional semantics."
        },
        {
            "question": "What does the Spring @Autowired annotation do?",
            "options": [
                "Creates a new instance of a bean",
                "Performs dependency injection",
                "Initialises the application context",
                "Specifies a bean’s lifecycle method"
            ],
            "answer": "Performs dependency injection",
            "explanation": "The @Autowired annotation tells Spring to inject (or wire) a dependency into a bean automatically."
        },
        {
            "question": "Which module in Spring is used for AOP (Aspect-Oriented Programming)?",
            "options": [
                "Spring ORM",
                "Spring AOP",
                "Spring DAO",
                "Spring Web"
            ],
            "answer": "",
            "explanation": "Answer: b) Spring AOP"
        },
        {
            "question": "In which layer is Spring MVC used?",
            "options": [
                "Data layer",
                "Business layer",
                "Presentation layer",
                "Integration layer"
            ],
            "answer": "Presentation layer",
            "explanation": "Spring MVC is used in the presentation layer to handle web requests and construct responses."
        },
        {
            "question": "Which annotation is used to inject a dependency in Spring?",
            "options": [
                "@Inject",
                "@Autowired",
                "@Resource",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "All these annotations can be used to inject dependencies in Spring-based applications."
        },
        {
            "question": "Which Spring annotation is used to handle exceptions at the controller level?",
            "options": [
                "@ExceptionHandler",
                "@ControllerAdvice",
                "@ErrorHandle",
                "@ThrowException"
            ],
            "answer": "@ExceptionHandler",
            "explanation": "@ExceptionHandler is used in Spring MVC to handle specific exceptions at the controller level."
        },
        {
            "question": "Which annotation is used to make a Java class serve RESTful requests?",
            "options": [
                "@RestController",
                "@Service",
                "@Controller",
                "@Repository"
            ],
            "answer": "@RestController",
            "explanation": "@RestController is a specialized version of the controller that includes @Controller and @ResponseBody annotations, making it suited for building RESTful APIs."
        },
        {
            "question": "What does @Qualifier annotation do?",
            "options": [
                "Qualifies a bean’s priority",
                "Determines the autowiring mode",
                "Resolves the autowiring ambiguity",
                "Specifies a bean’s scope"
            ],
            "answer": "Resolves the autowiring ambiguity",
            "explanation": "When multiple beans of the same type exist, @Qualifier is used to specify which bean should be autowired."
        },
        {
            "question": "Which of these is a pointcut expression type in Spring AOP?",
            "options": [
                "execution",
                "resolution",
                "initiation",
                "injection"
            ],
            "answer": "execution",
            "explanation": "In Spring AOP, “execution” is a pointcut designator (PCD) used to match method execution join points."
        },
        {
            "question": "What is the default scope of a Spring bean?",
            "options": [
                "prototype",
                "request",
                "session",
                "singleton"
            ],
            "answer": "singleton",
            "explanation": "By default, beans in Spring are singletons, meaning only one instance of the bean is created for the entire application."
        },
        {
            "question": "What does the @Required annotation do?",
            "options": [
                "Makes a bean’s property mandatory",
                "Indicates that a field should be autowired",
                "Specifies a bean’s lifecycle method",
                "Specifies a bean’s scope"
            ],
            "answer": "Makes a bean’s property mandatory",
            "explanation": "The @Required annotation indicates that the affected bean property must be populated during bean configuration."
        },
        {
            "question": "What does AOP stand for?",
            "options": [
                "Additional Operation Protocol",
                "Asynchronous Operating Procedure",
                "Aspect-Oriented Programming",
                "Angular Object Protocol"
            ],
            "answer": "Aspect-Oriented Programming",
            "explanation": "AOP stands for Aspect-Oriented Programming. It provides a way to add cross-cutting concerns in a modular way."
        },
        {
            "question": "Which of the following is NOT an advice type in Spring AOP?",
            "options": [
                "Before",
                "After",
                "Around",
                "Across"
            ],
            "answer": "Across",
            "explanation": "Spring AOP supports Before, After, and Around advice types, among others. “Across” isn’t one of them."
        },
        {
            "question": "Which annotation denotes a transaction boundary in Spring?",
            "options": [
                "@Boundary",
                "@Transaction",
                "@Transact",
                "@Transactional"
            ],
            "answer": "@Transactional",
            "explanation": "The @Transactional annotation in Spring is used to denote a transaction boundary."
        },
        {
            "question": "Which module in Spring provides support for JDBC operations?",
            "options": [
                "Spring Web",
                "Spring ORM",
                "Spring JDBC",
                "Spring Boot"
            ],
            "answer": "Spring JDBC",
            "explanation": "Spring JDBC module provides a more convenient way to handle database operations compared to traditional JDBC."
        },
        {
            "question": "How can you execute a method after bean initialization in Spring?",
            "options": [
                "Use @AfterBean",
                "Use afterPropertiesSet() from InitializingBean interface",
                "Use @PostConstruct",
                "Use @ExecuteAfterInit"
            ],
            "answer": "Use afterPropertiesSet() from InitializingBean interface",
            "explanation": "Implementing the afterPropertiesSet() method from the InitializingBean interface allows executing custom logic after the bean has been initialized."
        },
        {
            "question": "What is Spring Boot mainly used for?",
            "options": [
                "AOP",
                "Database connectivity",
                "Rapid application development",
                "Web services only"
            ],
            "answer": "Rapid application development",
            "explanation": "Spring Boot provides various tools and defaults to facilitate rapid application development."
        },
        {
            "question": "How can you fetch a bean from the Spring application context?",
            "options": [
                "getContext().getBean(“beanName”)",
                "ApplicationContext.getBean(“beanName”)",
                "Beans.getBean(“beanName”)",
                "SpringFactory.getBean(“beanName”)"
            ],
            "answer": "ApplicationContext.getBean(“beanName”)",
            "explanation": "To retrieve a bean from the application context, use the getBean method on an instance of ApplicationContext."
        },
        {
            "question": "What is the purpose of BeanFactory in Spring?",
            "options": [
                "Database connectivity",
                "Aspect definition",
                "Bean creation and management",
                "Transaction management"
            ],
            "answer": "Bean creation and management",
            "explanation": "BeanFactory is the root interface for accessing the Spring container, providing bean creation and management functionalities."
        },
        {
            "question": "Which of the following is NOT a Spring bean scope?",
            "options": [
                "singleton",
                "prototype",
                "global",
                "request"
            ],
            "answer": "global",
            "explanation": "Spring supports various bean scopes like singleton, prototype, request, etc., but “global” is not one of them."
        },
        {
            "question": "Which annotation is used to mark a class as a Spring Repository?",
            "options": [
                "@Service",
                "@Component",
                "@Entity",
                "@Repository"
            ],
            "answer": "@Repository",
            "explanation": "@Repository is a stereotype annotation to mark a class as a Data Access Object (DAO)."
        },
        {
            "question": "Which module in Spring deals with cloud-based features?",
            "options": [
                "Spring AOP",
                "Spring Boot",
                "Spring Cloud",
                "Spring Data"
            ],
            "answer": "Spring Cloud",
            "explanation": "Spring Cloud provides a suite of tools for building cloud-native applications."
        },
        {
            "question": "What does @Value annotation in Spring do?",
            "options": [
                "Sets a default value to a bean property",
                "Injects a property value from a property source",
                "Marks a method as a bean in the configuration class",
                "Specifies a bean’s scope"
            ],
            "answer": "Injects a property value from a property source",
            "explanation": "@Value is used to inject values from property files or default values into bean properties."
        },
        {
            "question": "Which of the following is not a type of metadata provided by Spring?",
            "options": [
                "Annotation-based",
                "Java-based",
                "XML-based",
                "YAML-based"
            ],
            "answer": "YAML-based",
            "explanation": "Spring supports annotation-based, Java-based, and XML-based metadata for bean configuration, but not YAML-based."
        },
        {
            "question": "How can you execute a method before bean destruction in Spring?",
            "options": [
                "@PreDestroy",
                "@Destroy",
                "@BeforeDestroy",
                "@Delete"
            ],
            "answer": "@PreDestroy",
            "explanation": "The @PreDestroy annotation indicates a method to be executed before a bean is removed from the container."
        },
        {
            "question": "What does the JdbcTemplate class in Spring JDBC provide?",
            "options": [
                "AOP support",
                "RESTful API support",
                "Simplified error handling in JDBC",
                "ORM capabilities"
            ],
            "answer": "Simplified error handling in JDBC",
            "explanation": "JdbcTemplate simplifies the use of JDBC and helps to avoid common errors, offering a more streamlined way to handle database operations."
        },
        {
            "question": "Which of the following is a way to introduce a bean’s metadata to the Spring container?",
            "options": [
                "Annotating the bean class",
                "Using JavaConfig (@Configuration classes)",
                "Writing bean definitions in an XML file",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Spring offers multiple ways to provide bean metadata including annotations, JavaConfig, and XML configurations."
        },
        {
            "question": "Which annotation is used to mark a class as configuration class in Spring?",
            "options": [
                "@Configure",
                "@Bean",
                "@Configuration",
                "@SpringConfig"
            ],
            "answer": "@Configuration",
            "explanation": "The @Configuration annotation indicates that the class can be used by the Spring IoC container as a source of bean definitions."
        },
        {
            "question": "Which of these is NOT a type of Dependency Injection in Spring?",
            "options": [
                "Setter Injection",
                "Constructor Injection",
                "Field Injection",
                "Annotation Injection"
            ],
            "answer": "Annotation Injection",
            "explanation": "Spring supports Constructor, Setter, and Field injections. Annotations like @Autowired facilitate these injections but “Annotation Injection” itself isn’t a type."
        },
        {
            "question": "Which Spring module provides features related to sending emails?",
            "options": [
                "Spring Web",
                "Spring Messaging",
                "Spring Mail",
                "Spring Cloud"
            ],
            "answer": "Spring Mail",
            "explanation": "The Spring Mail module abstracts away the complexities of sending emails, simplifying the task."
        },
        {
            "question": "Which of the following is NOT a core module of the Spring framework?",
            "options": [
                "Spring AOP",
                "Spring MVC",
                "Spring Boot",
                "Spring Beans"
            ],
            "answer": "Spring Boot",
            "explanation": "Spring Boot is not a core module of the Spring framework. It’s a project built on top of the Spring framework to simplify microservice development and deployment."
        },
        {
            "question": "Which of the following is true about the @Controller annotation in Spring?",
            "options": [
                "It is used to indicate a RESTful web service",
                "It is used to mark classes as Spring beans",
                "It is used to indicate a class as a Spring MVC controller",
                "It is used to configure beans"
            ],
            "answer": "It is used to indicate a class as a Spring MVC controller",
            "explanation": "The @Controller annotation indicates that a class is a Spring MVC controller that can handle HTTP requests."
        },
        {
            "question": "How can you handle exceptions in Spring MVC?",
            "options": [
                "Using @ExceptionHandler",
                "Using @ControllerAdvice",
                "Using @ErrorCatch",
                "Both a) and b)"
            ],
            "answer": "Both a) and b)",
            "explanation": "@ExceptionHandler is used for handling exceptions specific to a controller, while @ControllerAdvice can be used to handle exceptions across multiple controllers."
        },
        {
            "question": "What does the @SpringBootApplication annotation do in Spring Boot?",
            "options": [
                "It starts the Spring Boot application",
                "It is a convenience annotation that combines @Configuration, @EnableAutoConfiguration, and @ComponentScan",
                "It is used to specify the entry point for a Spring Boot application",
                "It configures properties for the Spring Boot application"
            ],
            "answer": "It is a convenience annotation that combines @Configuration, @EnableAutoConfiguration, and @ComponentScan",
            "explanation": "@SpringBootApplication is a convenience annotation often used in the main class, combining several other annotations to bootstrap a Spring Boot application."
        },
        {
            "question": "Which annotation is used to define a pointcut expression in Spring AOP?",
            "options": [
                "@Pointcut",
                "@Aspect",
                "@Around",
                "@CutPoint"
            ],
            "answer": "@Pointcut",
            "explanation": "The @Pointcut annotation is used to declare a pointcut expression in Spring AOP, defining where the aspect should be applied."
        },
        {
            "question": "What is the main purpose of the @Aspect annotation in Spring AOP?",
            "options": [
                "It ensures a bean is thread-safe",
                "It marks a class as a Spring MVC controller",
                "It indicates a class is a Spring bean",
                "It defines a class as an aspect"
            ],
            "answer": "It defines a class as an aspect",
            "explanation": "The @Aspect annotation is used to declare a class as an aspect in Spring AOP."
        },
        {
            "question": "What is a Pointcut in Spring AOP?",
            "options": [
                "A condition for triggering an Aspect",
                "A method where an Aspect is applied",
                "A Spring Bean",
                "A running thread"
            ],
            "answer": "A condition for triggering an Aspect",
            "explanation": "A pointcut is an expression that captures where in the codebase an aspect should be applied."
        },
        {
            "question": "What is the primary advantage of Spring Boot?",
            "options": [
                "Provides an embedded database for all applications",
                "Forces developers to adhere to a specific programming model",
                "Simplifies the process of building production-ready Spring applications",
                "Reduces the need for any external dependencies or frameworks"
            ],
            "answer": "Simplifies the process of building production-ready Spring applications",
            "explanation": "Spring Boot aims to provide a way to simplify the setup and development of Spring applications. By offering default configurations, an embedded server, and a host of other features, it helps developers create production-ready applications with minimal setup and boilerplate code."
        },
        {
            "question": "What does the @SpringBootApplication annotation do?",
            "options": [
                "It initializes Spring Security",
                "It’s equivalent to using @Configuration, @EnableAutoConfiguration, and @ComponentScan",
                "It sets up Spring MVC",
                "It acts as an entry point for the Spring Boot application"
            ],
            "answer": "It’s equivalent to using @Configuration, @EnableAutoConfiguration, and @ComponentScan",
            "explanation": "This convenience annotation combines other annotations to bootstrap a Spring Boot application with sensible defaults."
        },
        {
            "question": "How can you change the default port (8080) for a Spring Boot application?",
            "options": [
                "Set spring.port in application.properties",
                "Set server.port in application.properties",
                "Use @Port annotation",
                "Override SpringBootApplication class"
            ],
            "answer": "Set server.port in application.properties",
            "explanation": "By default, Spring Boot applications run on port 8080. This can be changed by setting the server.port property in the application.properties file."
        },
        {
            "question": "What does Spring Boot’s “starter” dependency provide?",
            "options": [
                "A starting point for versioned dependencies",
                "A web server",
                "A database connection",
                "An IDE for Spring Boot"
            ],
            "answer": "A starting point for versioned dependencies",
            "explanation": "Starters are a set of dependency descriptors that can be included in the application. They simplify Maven configuration by providing everything you need to get started with a particular functionality."
        },
        {
            "question": "How does Spring Boot provide database connectivity?",
            "options": [
                "Direct JDBC",
                "Spring Data",
                "Hibernate",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Spring Boot can configure a lot out-of-the-box. It can set up a connection via direct JDBC, use Spring Data for data access, or integrate with Hibernate for ORM."
        },
        {
            "question": "What is the file name convention for configuration properties in Spring Boot?",
            "options": [
                "spring-config.xml",
                "application.properties",
                "config.java",
                "settings.yml"
            ],
            "answer": "application.properties",
            "explanation": "The default properties file in Spring Boot is application.properties. However, application.yml is another option for YAML based configurations."
        },
        {
            "question": "How can you create a Spring Boot project using a web interface?",
            "options": [
                "Spring Boot CLI",
                "Spring Initializr",
                "Maven Central",
                "GitHub Spring Boot Repository"
            ],
            "answer": "Spring Initializr",
            "explanation": "Spring Initializr is a web-based tool provided by Spring to bootstrap a new Spring Boot application."
        },
        {
            "question": "Which embedded servlet container does Spring Boot support out of the box?",
            "options": [
                "Tomcat",
                "Jetty",
                "Undertow",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Spring Boot has built-in support for Tomcat, Jetty, and Undertow. Tomcat is the default embedded server."
        },
        {
            "question": "In Spring Boot, where can you define profile-specific configuration properties?",
            "options": [
                "application-{profile}.properties",
                "spring-{profile}.xml",
                "profile-config.java",
                "settings-{profile}.yml"
            ],
            "answer": "application-{profile}.properties",
            "explanation": "Profile-specific properties can be defined in files named application-{profile}.properties where {profile} is the name of the profile."
        },
        {
            "question": "Which Spring Boot Starter would you use for developing web applications?",
            "options": [
                "spring-boot-starter-web",
                "spring-boot-starter-jdbc",
                "spring-boot-starter-data",
                "spring-boot-starter-app"
            ],
            "answer": "spring-boot-starter-web",
            "explanation": "spring-boot-starter-web is used for building web, including RESTful, applications using Spring MVC."
        },
        {
            "question": "Which annotation is used to inject configuration properties into a bean?",
            "options": [
                "@ConfigurationProperties",
                "@Value",
                "@PropertySource",
                "@InjectProperties"
            ],
            "answer": "@ConfigurationProperties",
            "explanation": "The @ConfigurationProperties annotation is used to map property values from application.properties or application.yml to a bean."
        },
        {
            "question": "Which file is automatically picked up by Spring Boot for logging configuration if present?",
            "options": [
                "log4j.xml",
                "logback.xml",
                "logging.properties",
                "application-logger.properties"
            ],
            "answer": "logback.xml",
            "explanation": "By default, Spring Boot uses Logback for logging and it automatically configures it using the logback.xml if present."
        },
        {
            "question": "What is the use of @EnableAutoConfiguration in Spring Boot?",
            "options": [
                "To start the Spring MVC dispatcher servlet",
                "To automatically configure your application based on the dependencies you have in your project",
                "To enable manual configurations",
                "To enable WebSocket in the application"
            ],
            "answer": "To automatically configure your application based on the dependencies you have in your project",
            "explanation": "@EnableAutoConfiguration tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings."
        },
        {
            "question": "Which of the following files can be used to customize the banner in a Spring Boot application?",
            "options": [
                "banner.txt",
                "banner.html",
                "banner.json",
                "a) and b)"
            ],
            "answer": "a) and b)",
            "explanation": "Spring Boot provides the ability to customize the application banner using either a banner.txt or a banner.html file."
        },
        {
            "question": "Which starter dependency is used to build standalone Spring Boot applications that can be started using Java -jar?",
            "options": [
                "spring-boot-starter-standalone",
                "spring-boot-starter-app",
                "spring-boot-starter-parent",
                "spring-boot-starter-web"
            ],
            "answer": "spring-boot-starter-web",
            "explanation": "spring-boot-starter-web provides all the necessary dependencies and configurations to build a web application that can be started using Java -jar."
        },
        {
            "question": "What is the use of spring-boot-starter-parent?",
            "options": [
                "It provides default configurations for a Spring Boot application",
                "It contains the main method to run the application",
                "It provides basic authentication features",
                "It sets up a database connection"
            ],
            "answer": "It provides default configurations for a Spring Boot application",
            "explanation": "spring-boot-starter-parent is a parent POM providing dependency and plugin management for applications built with Maven."
        },
        {
            "question": "How can you include Spring Boot DevTools into your project?",
            "options": [
                "By manually importing all classes",
                "Using the spring-boot-devtools dependency in the pom.xml",
                "By adding @EnableDevTools annotation",
                "Using the devtools command in the Spring Boot CLI"
            ],
            "answer": "Using the spring-boot-devtools dependency in the pom.xml",
            "explanation": "By simply adding the spring-boot-devtools module dependency, you can get developer-specific features like automatic restart and live reload."
        },
        {
            "question": "In Spring Boot, how can you specify profile-specific properties?",
            "options": [
                "Using –spring.profiles.active command line argument",
                "Using spring.profiles.active in application.properties",
                "Both a) and b)",
                "By setting the environment variable SPRING_PROFILES_ACTIVE"
            ],
            "answer": "Both a) and b)",
            "explanation": "Spring Boot provides multiple ways to set active profiles. You can use the –spring.profiles.active command-line argument or set it in application.properties."
        },
        {
            "question": "Which Spring Boot Starter is used to include JDBC support?",
            "options": [
                "spring-boot-starter-data-jdbc",
                "spring-boot-starter-jdbc",
                "spring-boot-starter-database",
                "spring-boot-starter-hibernate"
            ],
            "answer": "spring-boot-starter-jdbc",
            "explanation": "To add basic JDBC support (with HikariCP as default connection pool), you use the spring-boot-starter-jdbc starter."
        },
        {
            "question": "Which annotation is used to make a Java class serve RESTful requests?",
            "options": [
                "@RestController",
                "@Service",
                "@Controller",
                "@Repository"
            ],
            "answer": "@RestController",
            "explanation": "@RestController is a specialized version of the controller that includes @Controller and @ResponseBody annotations, making it suited for building RESTful APIs."
        },
        {
            "question": "Which of the following dependencies will include an embedded Tomcat server in a Spring Boot project?",
            "options": [
                "spring-boot-starter-web",
                "spring-boot-starter-tomcat",
                "Both a) and b)",
                "spring-boot-starter-server"
            ],
            "answer": "Both a) and b)",
            "explanation": "Both spring-boot-starter-web and spring-boot-starter-tomcat will include an embedded Tomcat server. The former is used for web applications and the latter for Tomcat specifically."
        },
        {
            "question": "How can you exclude a specific auto-configuration in Spring Boot?",
            "options": [
                "By using the exclude attribute of @SpringBootApplication annotation",
                "By removing the corresponding starter dependency",
                "By adding a property in application.properties",
                "By annotating the main application class with @ExcludeConfiguration"
            ],
            "answer": "By using the exclude attribute of @SpringBootApplication annotation",
            "explanation": "The exclude attribute of the @SpringBootApplication annotation allows you to exclude specific auto-configuration classes from being applied."
        },
        {
            "question": "What does the spring-boot-maven-plugin provide?",
            "options": [
                "Dependency management",
                "Automatic application restarts",
                "The ability to create a standalone executable JAR or WAR",
                "Integration with Spring Data"
            ],
            "answer": "The ability to create a standalone executable JAR or WAR",
            "explanation": "The spring-boot-maven-plugin provides the capability to build an executable JAR or WAR which bundles the Tomcat, Jetty, or Undertow servlet container."
        },
        {
            "question": "How can you specify the active profile while running a Spring Boot application as a JAR?",
            "options": [
                "-Dspring.profiles.active=profileName",
                "-Dprofile=profileName",
                "-Profile spring.profiles.active=profileName",
                "–profile=profileName"
            ],
            "answer": "-Dspring.profiles.active=profileName",
            "explanation": "You can specify the active profile using -Dspring.profiles.active=profileName when running a Spring Boot application as a JAR."
        },
        {
            "question": "In a Spring Boot application, which annotation ensures that HTTP methods like GET and POST are mapped to specific controller methods?",
            "options": [
                "@RequestMapping",
                "@HttpMethod",
                "@RestControllerMethod",
                "@WebMapping"
            ],
            "answer": "@RequestMapping",
            "explanation": "The @RequestMapping annotation ensures that HTTP requests are mapped to specific controller methods."
        },
        {
            "question": "In Spring Boot, which annotation is used to schedule a method to be run at fixed intervals?",
            "options": [
                "@Scheduled",
                "@IntervalRun",
                "@Periodic",
                "@FixedRate"
            ],
            "answer": "@Scheduled",
            "explanation": "The @Scheduled annotation is used to execute a method periodically using fixed-rate or fixed-delay intervals."
        },
        {
            "question": "Which Spring Boot starter is used for building web applications, including RESTful APIs?",
            "options": [
                "spring-boot-starter-webapi",
                "spring-boot-starter-web",
                "spring-boot-starter-mvc",
                "spring-boot-starter-rest"
            ],
            "answer": "spring-boot-starter-web",
            "explanation": "spring-boot-starter-web is used for building web applications, including RESTful APIs."
        },
        {
            "question": "How do you change the default port (8080) on which a Spring Boot web application runs?",
            "options": [
                "server.port in application.properties",
                "application.port in server.properties",
                "Using the @Port annotation",
                "You can’t change the default port"
            ],
            "answer": "server.port in application.properties",
            "explanation": "The default port can be changed using the server.port property in application.properties."
        },
        {
            "question": "Which annotation is used to define a JPA repository in Spring Boot?",
            "options": [
                "@JpaRepository",
                "@Repository",
                "@SpringDataRepo",
                "@DataRepository"
            ],
            "answer": "@Repository",
            "explanation": "While JPA repositories extend the JpaRepository interface, the actual beans in Spring are usually annotated with @Repository."
        },
        {
            "question": "What is the use of the @Profile annotation in Spring Boot?",
            "options": [
                "To enable logging",
                "To indicate that a component belongs to a specific profile",
                "To enable JPA functionalities",
                "To run scheduled tasks"
            ],
            "answer": "To indicate that a component belongs to a specific profile",
            "explanation": "The @Profile annotation is used to indicate that a component or configuration is specific to a profile."
        },
        {
            "question": "In Spring Boot, which annotation is used to roll back a transaction in case of an exception?",
            "options": [
                "@RollbackOnError",
                "@RevertTransaction",
                "@ExceptionRollback",
                "@Transactional"
            ],
            "answer": "@Transactional",
            "explanation": "The @Transactional annotation ensures that a method is executed within a transactional context and, by default, it rolls back the transaction if a runtime exception is thrown."
        },
        {
            "question": "In Spring Boot, how do you expose actuator endpoints over HTTP?",
            "options": [
                "Add spring-boot-starter-actuator dependency",
                "Annotate the main class with @EnableActuator",
                "Include actuator.properties file",
                "Add spring.actuator.expose-http=true in application.properties"
            ],
            "answer": "Add spring-boot-starter-actuator dependency",
            "explanation": "The actuator provides production-ready features for Spring Boot apps. To expose these endpoints over HTTP, you need to include the spring-boot-starter-actuator dependency."
        },
        {
            "question": "How can you secure sensitive actuator endpoints in Spring Boot?",
            "options": [
                "Using Spring Security",
                "By setting management.endpoints.enabled to false",
                "By annotating them with @SecureEndpoint",
                "Actuator endpoints are secured by default"
            ],
            "answer": "Using Spring Security",
            "explanation": "Spring Security provides a way to secure actuator endpoints. Once Spring Security is in the classpath, the actuator endpoints are secured by default. Further customization can be done using Spring Security configuration."
        },
        {
            "question": "What is the aim of Spring Data JPA?",
            "options": [
                "Spring Data JPA aims to reduce the amount of boilerplate code required for common database operations.",
                "Spring Data JPA aims to provide the implementation for JPA interfaces",
                "Spring Data JPA is a JPA provider and implementation for JPA interfaces",
                "Spring Data JPA is an ORM framework that provides an implementation for JPA interfaces"
            ],
            "answer": "Spring Data JPA aims to reduce the amount of boilerplate code required for common database operations.",
            "explanation": "Spring Data JPA aims to reduce the amount of boilerplate code required for common database operations and make it easier to work with relational databases."
        },
        {
            "question": "Which dependency is required to use Spring Data JPA in a Spring Boot application?",
            "options": [
                "spring-boot-starter-data-jpa",
                "spring-boot-starter-web",
                "spring-boot-starter-test",
                "spring-boot-starter-security"
            ],
            "answer": "spring-boot-starter-data-jpa",
            "explanation": "To use Spring Data JPA in a Spring Boot application, you need to include the spring-boot-starter-data-jpa dependency in your project’s dependencies. This starter dependency includes the necessary dependencies for working with JPA and provides auto-configuration for Spring Data JPA."
        },
        {
            "question": "Which is the default JPA provider the Spring Data JPA internally uses?",
            "options": [
                "EclipseLink",
                "MyBatis",
                "TopLink",
                "Hibernate"
            ],
            "answer": "Hibernate",
            "explanation": "Spring Data JPA uses Hibernate as a default JPA provider."
        },
        {
            "question": "Which annotation marks a class as an entity in JPA?",
            "options": [
                "@EntityClass",
                "@JPAEntity",
                "@Entity",
                "@TableEntity"
            ],
            "answer": "@Entity",
            "explanation": "The @Entity annotation is used to indicate that a class is a JPA entity."
        },
        {
            "question": "Which interface do we extend to create a repository in Spring Data JPA?",
            "options": [
                "Repository",
                "JpaRepository",
                "JpaRepository",
                "SpringRepository"
            ],
            "answer": "JpaRepository",
            "explanation": "JpaRepository is the interface provided by Spring Data JPA for CRUD operations."
        },
        {
            "question": "How can you define a derived query in Spring Data JPA?",
            "options": [
                "By annotating a method with @Query",
                "By creating a method in the repository with a specific naming convention",
                "By using the @DerivedQuery annotation",
                "By creating an XML configuration"
            ],
            "answer": "By creating a method in the repository with a specific naming convention",
            "explanation": "Spring Data JPA allows developers to create queries simply by defining a method with a naming convention without writing the actual query."
        },
        {
            "question": "Which annotation is used to autowire a repository into a Spring component?",
            "options": [
                "@InjectRepository",
                "@AutoInject",
                "@Autowire",
                "@Resource"
            ],
            "answer": "@Autowire",
            "explanation": "The @Autowire annotation is used to inject Spring beans, including repositories, into other components."
        },
        {
            "question": "Which of the following is NOT a fetch type in JPA?",
            "options": [
                "EAGER",
                "LAZY",
                "IMMEDIATE",
                "BOTH"
            ],
            "answer": "IMMEDIATE",
            "explanation": "JPA provides two fetch types: EAGER and LAZY."
        },
        {
            "question": "How do you execute a native query in Spring Data JPA?",
            "options": [
                "@Native",
                "@SQL",
                "@Execute",
                "@Query(nativeQuery = true)"
            ],
            "answer": "@Query(nativeQuery = true)",
            "explanation": "For native queries in Spring Data JPA, you use the @Query annotation and set the nativeQuery attribute to true."
        },
        {
            "question": "Which of the following is NOT a valid Cascade type in JPA?",
            "options": [
                "PERSIST",
                "REMOVE",
                "MERGE",
                "UPDATE"
            ],
            "answer": "UPDATE",
            "explanation": "UPDATE is not a valid CascadeType in JPA."
        },
        {
            "question": "How can you mark a field as the primary key in a JPA entity?",
            "options": [
                "@PrimaryKey",
                "@EntityKey",
                "@Id",
                "@Key"
            ],
            "answer": "@Id",
            "explanation": "The @Id annotation is used to denote a field as the primary key in a JPA entity."
        },
        {
            "question": "How can you customize the column name for a field in a JPA entity?",
            "options": [
                "@Column(name=”custom_name”)",
                "@FieldName(“custom_name”)",
                "@TableColumn(“custom_name”)",
                "@DatabaseColumn(“custom_name”)"
            ],
            "answer": "@Column(name=”custom_name”)",
            "explanation": "The @Column annotation allows you to specify the details of the column to which an entity field is mapped, including customizing the column name."
        },
        {
            "question": "Which annotation is used to specify a custom query in Spring Data JPA?",
            "options": [
                "@CustomQuery",
                "@JPAQuery",
                "@Query",
                "@ExecuteQuery"
            ],
            "answer": "@Query",
            "explanation": "The @Query annotation is used to define custom queries in Spring Data JPA."
        },
        {
            "question": "How can you indicate a Many-To-One relationship in JPA?",
            "options": [
                "@ManyToOne",
                "@OneToMany",
                "@ManyToMany",
                "@OneToOne"
            ],
            "answer": "@ManyToOne",
            "explanation": "The @ManyToOne annotation indicates a many-to-one relationship between two entities."
        },
        {
            "question": "In a Spring Data JPA repository, how can you indicate a method should delete by a specific field?",
            "options": [
                "deleteByFieldName",
                "removeByFieldName",
                "eraseByFieldName",
                "exterminateByFieldName"
            ],
            "answer": "deleteByFieldName",
            "explanation": "The convention in Spring Data JPA is deleteBy[FieldName] to indicate deletion by a specific field."
        },
        {
            "question": "Which of the following denotes a derived delete query in Spring Data JPA?",
            "options": [
                "deleteByFieldName",
                "findByFieldName",
                "queryByFieldName",
                "readByFieldName"
            ],
            "answer": "deleteByFieldName",
            "explanation": "The naming convention deleteBy[FieldName] denotes a derived delete query in Spring Data JPA."
        },
        {
            "question": "How can you perform pagination in Spring Data JPA?",
            "options": [
                "Using the @Pageable annotation",
                "Using the Page and Pageable interfaces",
                "Using the @Pagination annotation",
                "Using the Paginator class"
            ],
            "answer": "Using the Page and Pageable interfaces",
            "explanation": "In Spring Data JPA, pagination is achieved using the Page and Pageable interfaces."
        },
        {
            "question": "In JPA, which strategy generates a primary key assigned by the database?",
            "options": [
                "GenerationType.AUTO",
                "GenerationType.SEQUENCE",
                "GenerationType.IDENTITY",
                "GenerationType.TABLE"
            ],
            "answer": "GenerationType.IDENTITY",
            "explanation": "The GenerationType.IDENTITY strategy indicates that the database should assign the primary key value."
        },
        {
            "question": "Which annotation in JPA allows you to embed another object as part of your entity?",
            "options": [
                "@Embeddable",
                "@Embedded",
                "@Include",
                "@PartOf"
            ],
            "answer": "@Embedded",
            "explanation": "The @Embedded annotation is used to embed another object (annotated with @Embeddable) as part of your entity."
        },
        {
            "question": "How can you control transaction management in Spring Data JPA?",
            "options": [
                "By using the @Transactional annotation.",
                "By configuring the transaction properties in the application.properties file.",
                "By extending the JpaTransactionManager class.",
                "By adding the @EnableTransactionManagement annotation to the configuration class"
            ],
            "answer": "By using the @Transactional annotation.",
            "explanation": "Transaction management in Spring Data JPA can be controlled by using the @Transactional annotation. By applying this annotation to service methods or repository methods, you can define transactional boundaries and control the behavior of database operations."
        },
        {
            "question": "What does MVC stand for in Spring MVC?",
            "options": [
                "Multi-View Controller",
                "Module-View-Controller",
                "Model-View-Controller",
                "Model-Value-Configuration"
            ],
            "answer": "Model-View-Controller",
            "explanation": "MVC stands for Model-View-Controller, which is a design pattern to separate an application’s concerns."
        },
        {
            "question": "Which annotation is used to create a Spring MVC controller class?",
            "options": [
                "@ControllerBean",
                "@SpringController",
                "@WebController",
                "@Controller"
            ],
            "answer": "@Controller",
            "explanation": "The @Controller annotation indicates that a class is a Spring MVC controller."
        },
        {
            "question": "Which of the following handles the HTTP request in Spring MVC?",
            "options": [
                "DispatcherServlet",
                "HandlerInterceptor",
                "HttpListener",
                "RequestHandler"
            ],
            "answer": "DispatcherServlet",
            "explanation": "In Spring MVC, the DispatcherServlet is responsible for dispatching incoming HTTP requests to the appropriate controller methods."
        },
        {
            "question": "Which annotation binds a method parameter to a named attribute?",
            "options": [
                "@ModelAttribute",
                "@ParameterAttribute",
                "@BindAttribute",
                "@RequestValue"
            ],
            "answer": "@ModelAttribute",
            "explanation": "The @ModelAttribute annotation is used to bind a method parameter to a named attribute, potentially initializing the attribute from a database or other source."
        },
        {
            "question": "How can you handle exceptions in Spring MVC?",
            "options": [
                "@ExceptionHandler",
                "@CatchException",
                "@ErrorResolver",
                "@ResolveError"
            ],
            "answer": "@ExceptionHandler",
            "explanation": "The @ExceptionHandler annotation is used to handle exceptions in Spring MVC."
        },
        {
            "question": "Which annotation is used to bind a method parameter to a web request header?",
            "options": [
                "@RequestHeader",
                "@Header",
                "@BindHeader",
                "@HTTPHeader"
            ],
            "answer": "@RequestHeader",
            "explanation": "The @RequestHeader annotation is used to bind a method parameter to a specific web request header."
        },
        {
            "question": "In Spring MVC, what is the role of the ViewResolver?",
            "options": [
                "Resolving bean dependencies",
                "Handling exceptions",
                "Resolving views to specific URLs",
                "Handling request parameters"
            ],
            "answer": "Resolving views to specific URLs",
            "explanation": "ViewResolver in Spring MVC helps in mapping view names to actual views (like JSPs)."
        },
        {
            "question": "Which annotation is used to denote a regular expression in URI template in Spring MVC?",
            "options": [
                "@Regex",
                "@PathVariable",
                "@URIExpression",
                "@MatchPattern"
            ],
            "answer": "@PathVariable",
            "explanation": "The @PathVariable annotation can be used to extract values from the URI, and it supports regular expressions."
        },
        {
            "question": "Which Spring MVC module provides integration with RESTful services?",
            "options": [
                "Spring RestController",
                "Spring REST",
                "Spring Web MVC",
                "Spring WebFlux"
            ],
            "answer": "Spring Web MVC",
            "explanation": "While @RestController is an annotation used to create RESTful controllers, it’s the Spring Web MVC module that provides integration with RESTful services."
        },
        {
            "question": "Which annotation indicates a method should handle HTTP POST requests?",
            "options": [
                "@HttpPost",
                "@PostHandler",
                "@RequestMapping(method = RequestMethod.POST)",
                "@PostMapping"
            ],
            "answer": "@PostMapping",
            "explanation": "The @PostMapping is a composed annotation that acts as a shortcut for @RequestMapping(method = RequestMethod.POST)."
        },
        {
            "question": "What does the @ResponseBody annotation do?",
            "options": [
                "It sends the return value of a method back to the web response body.",
                "It binds the parameters of a method to the request body.",
                "It triggers an exception handling method.",
                "It binds the result of a method to a view."
            ],
            "answer": "It sends the return value of a method back to the web response body.",
            "explanation": "The @ResponseBody annotation tells a controller that the return value of a method should be written directly to the HTTP response body."
        },
        {
            "question": "How do you redirect to another URL in Spring MVC?",
            "options": [
                "“redirect:/url_path”",
                "“forward:/url_path”",
                "“goto:/url_path”",
                "“move:/url_path”"
            ],
            "answer": "“redirect:/url_path”",
            "explanation": "In Spring MVC, to perform a redirect, you return a string starting with “redirect:” followed by the path."
        },
        {
            "question": "Which of the following annotations is used to handle multipart file uploads?",
            "options": [
                "@FileUpload",
                "@MultipartFile",
                "@RequestFile",
                "@UploadPart"
            ],
            "answer": "@MultipartFile",
            "explanation": "The @MultipartFile annotation is used to handle multipart file uploads in Spring MVC."
        },
        {
            "question": "How do you specify that a controller method should produce JSON as a response?",
            "options": [
                "@Produces(“application/json”)",
                "@ResponseBody(type=”json”)",
                "@ResponseFormat(“JSON”)",
                "@RequestMapping(produces=”application/json”)"
            ],
            "answer": "@RequestMapping(produces=”application/json”)",
            "explanation": "The @RequestMapping annotation with the produces attribute set to “application/json” specifies that the controller method should produce JSON as a response."
        },
        {
            "question": "Which of the following represents a form-backing bean in Spring MVC?",
            "options": [
                "@FormEntity",
                "@ModelEntity",
                "@ModelAttribute",
                "@BeanForm"
            ],
            "answer": "@ModelAttribute",
            "explanation": "@ModelAttribute can be used to represent a form-backing bean in Spring MVC."
        },
        {
            "question": "Which of the following components decides which controller method is to be called for a request?",
            "options": [
                "DispatcherServlet",
                "Controller",
                "HandlerMapping",
                "ViewResolver"
            ],
            "answer": "HandlerMapping",
            "explanation": "The HandlerMapping component decides which controller method should be called based on the incoming request."
        },
        {
            "question": "What does the @Valid annotation in Spring MVC do?",
            "options": [
                "It ensures that the method is correctly overridden from a superclass.",
                "It triggers validation of a method parameter or field.",
                "It ensures that an HTTP request is valid.",
                "It validates the return type of a method."
            ],
            "answer": "It triggers validation of a method parameter or field.",
            "explanation": "The @Valid annotation triggers validation of the annotated method parameter or field."
        },
        {
            "question": "Which Spring annotation is used to handle Cross-Origin Resource Sharing (CORS) in Spring MVC?",
            "options": [
                "@CrossOrigin",
                "@CORSHandler",
                "@EnableCORS",
                "@CORSConfig"
            ],
            "answer": "@CrossOrigin",
            "explanation": "The @CrossOrigin annotation is used in Spring MVC to handle Cross-Origin Resource Sharing (CORS)."
        },
        {
            "question": "Which Spring Boot Starter would you use for developing web applications?",
            "options": [
                "spring-boot-starter-web",
                "spring-boot-starter-jdbc",
                "spring-boot-starter-data",
                "spring-boot-starter-app"
            ],
            "answer": "spring-boot-starter-web",
            "explanation": "spring-boot-starter-web is used for building web, including RESTful, applications using Spring MVC."
        },
        {
            "question": "In which layer is Spring MVC used?",
            "options": [
                "Data layer",
                "Business layer",
                "Presentation layer",
                "Integration layer"
            ],
            "answer": "Presentation layer",
            "explanation": "Spring MVC is used in the presentation layer to handle web requests and construct responses."
        },
        {
            "question": "What is the primary purpose of Spring Cloud?",
            "options": [
                "Database management",
                "Web application development",
                "Microservices architecture support",
                "Machine learning development"
            ],
            "answer": "Microservices architecture support",
            "explanation": "Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems, especially in microservices architectures."
        },
        {
            "question": "Which Spring Cloud project provides centralized configuration management?",
            "options": [
                "Spring Cloud Netflix",
                "Spring Cloud Gateway",
                "Spring Cloud Config",
                "Spring Cloud Security"
            ],
            "answer": "Spring Cloud Config",
            "explanation": "Spring Cloud Config provides server-side and client-side support for externalized configuration in a distributed system."
        },
        {
            "question": "What is the primary function of Spring Cloud Eureka?",
            "options": [
                "Load balancing",
                "Service discovery",
                "API Gateway",
                "Circuit breaking"
            ],
            "answer": "Service discovery",
            "explanation": "Spring Cloud Eureka is primarily used for service discovery, allowing services to find and communicate with each other."
        },
        {
            "question": "Which component in Spring Cloud helps in client-side load balancing?",
            "options": [
                "Hystrix",
                "Spring Cloud LoadBalancer",
                "Zuul",
                "Sleuth"
            ],
            "answer": "Spring Cloud LoadBalancer",
            "explanation": "Spring Cloud LoadBalancer to provide client-side load-balancing in calls to another microservice."
        },
        {
            "question": "Which Spring Cloud project provides a distributed tracing solution?",
            "options": [
                "Spring Cloud Sleuth",
                "Spring Cloud Zipkin",
                "Both a and b",
                "None of the above"
            ],
            "answer": "Both a and b",
            "explanation": "Spring Cloud Sleuth provides logging enhancements for tracing, while Spring Cloud Zipkin provides visualization for the traces."
        },
        {
            "question": "Which of the following projects provides OAuth2-based authentication and authorization?",
            "options": [
                "Spring Cloud Vault",
                "Spring Cloud Security",
                "Spring Cloud Stream",
                "Spring Cloud Task"
            ],
            "answer": "Spring Cloud Security",
            "explanation": "Spring Cloud Security offers features related to security, especially in the OAuth2 context."
        },
        {
            "question": "What is Spring Cloud Bus used for?",
            "options": [
                "Transporting data between services",
                "Providing centralized configuration",
                "Broadcasting state changes",
                "Data serialization"
            ],
            "answer": "Broadcasting state changes",
            "explanation": "Spring Cloud Bus is used to link nodes of a distributed system and broadcast state changes or other management instructions."
        },
        {
            "question": "What is the main function of Spring Cloud Vault?",
            "options": [
                "Data modeling",
                "Secrets management",
                "API gateway",
                "Asynchronous programming"
            ],
            "answer": "Secrets management",
            "explanation": "Spring Cloud Vault provides secrets management features for a Spring Cloud application."
        },
        {
            "question": "For centralized logging, which tool is typically integrated with Spring Cloud Sleuth for visualization?",
            "options": [
                "Prometheus",
                "Grafana",
                "Zipkin",
                "Kibana"
            ],
            "answer": "Zipkin",
            "explanation": "Zipkin is typically used in combination with Spring Cloud Sleuth for visualizing trace data and latency-related information for microservices."
        },
        {
            "question": "Which of the following projects provides declarative REST client capabilities?",
            "options": [
                "Spring Cloud OpenFeign",
                "Spring Cloud Config",
                "Spring Cloud Task",
                "Spring Cloud Gateway"
            ],
            "answer": "Spring Cloud OpenFeign",
            "explanation": "Spring Cloud OpenFeign provides a declarative REST client which makes writing HTTP clients easier."
        },
        {
            "question": "What does Spring Cloud Stream primarily deal with?",
            "options": [
                "RESTful services",
                "Event-driven architecture",
                "Synchronous calls",
                "Template rendering"
            ],
            "answer": "Event-driven architecture",
            "explanation": "Spring Cloud Stream is geared towards building event-driven microservices connected with shared messaging systems."
        },
        {
            "question": "What is Spring Cloud Sleuth used for?",
            "options": [
                "Security",
                "Distributed tracing",
                "Logging",
                "Data access"
            ],
            "answer": "Distributed tracing",
            "explanation": "Spring Cloud Sleuth is used for distributed tracing in Spring Cloud applications to help troubleshoot latency issues."
        },
        {
            "question": "What is the function of the @EnableDiscoveryClient annotation?",
            "options": [
                "Enable WebSocket support",
                "Enable service discovery",
                "Enable data validation",
                "Enable Spring Cloud Bus"
            ],
            "answer": "Enable service discovery",
            "explanation": "The @EnableDiscoveryClient annotation is used to enable the service discovery client in a Spring Cloud application."
        },
        {
            "question": "Which of the following is a centralized service registry and discovery solution in Spring Cloud?",
            "options": [
                "Spring Cloud Stream",
                "Spring Cloud Eureka",
                "Spring Cloud Gateway",
                "Spring Cloud Config"
            ],
            "answer": "Spring Cloud Eureka",
            "explanation": "Spring Cloud Eureka is a centralized service registry and discovery solution."
        },
        {
            "question": "Which of the following is a primary function of Spring Cloud Gateway?",
            "options": [
                "Data storage and retrieval",
                "Service discovery and registration",
                "Routing and API gateway operations",
                "Event-driven messaging"
            ],
            "answer": "Routing and API gateway operations",
            "explanation": "Spring Cloud Gateway is primarily designed to handle API routing, load balancing, and other cross-cutting concerns for microservices, serving as an API Gateway."
        }
    ],
    "Python": [
        {
            "question": "Which company developed the Python programming language?",
            "options": [
                "Microsoft",
                "Google",
                "Mozilla",
                "CWI (Centrum Wiskunde & Informatica)"
            ],
            "answer": "CWI (Centrum Wiskunde & Informatica)",
            "explanation": "Python was created by Guido van Rossum and was first released in 1991 while he was working at CWI."
        },
        {
            "question": "Who developed the Python language?",
            "options": [
                "Zim Den",
                "Guido van Rossum",
                "Niene Stom",
                "Wick van Rossum"
            ],
            "answer": "Guido van Rossum",
            "explanation": "Python was created by Guido van Rossum and was first released in 1991. The other names listed are not associated with the development of the Python language."
        },
        {
            "question": "In which programming language, Python was written?",
            "options": [
                "Java",
                "C",
                "Python",
                "JavaScript"
            ],
            "answer": "C",
            "explanation": "The primary implementation of Python, known as CPython, is written in the C programming language. While there are other implementations of Python (like Jython, which is written in Java), CPython is the most widely used and is considered the standard implementation."
        },
        {
            "question": "Which one of the following is the correct extension of the Python file?",
            "options": [
                ".pyt",
                ".py",
                ".python",
                ".pt"
            ],
            "answer": ".py",
            "explanation": "Python scripts and programs are saved with the “.py” file extension. This is the standard file extension used for Python source code files."
        },
        {
            "question": "What do we use to define a block of code in Python language?",
            "options": [
                "Curly braces { }",
                "Square brackets [ ]",
                "Parentheses ( )",
                "Indentation"
            ],
            "answer": "Indentation",
            "explanation": "Unlike many programming languages that use curly braces { } to define a block of code, Python uses indentation (usually spaces or tabs) to define blocks. Proper indentation is crucial in Python as it determines the scope and grouping of statements."
        },
        {
            "question": "Which of the following is the correct way to print “Hello, World!” in Python?",
            "options": [
                "print(“Hello, World!”)",
                "echo “Hello, World!”",
                "System.out.print(“Hello, World!”)",
                "console.log(“Hello, World!”)"
            ],
            "answer": "print(“Hello, World!”)",
            "explanation": "In Python, the print() function is used to display output. Options b, c, and d are used in other programming languages, but not in Python."
        },
        {
            "question": "Which of the following is used for single-line comments in Python?",
            "options": [
                "//",
                "/* */",
                "#",
                "—"
            ],
            "answer": "#",
            "explanation": "In Python, the # symbol is used to denote a single-line comment."
        },
        {
            "question": "Which is not an OOP principle?",
            "options": [
                "Inheritance",
                "Polymorphism",
                "Encapsulation",
                "Concatenation"
            ],
            "answer": "Concatenation",
            "explanation": "All the others are OOP principles. Concatenation is an operation on strings."
        },
        {
            "question": "Which is used to create an object in Python?",
            "options": [
                "Function",
                "Method",
                "Class",
                "Procedure"
            ],
            "answer": "Class",
            "explanation": "In OOP, a class definition is used to instantiate objects."
        },
        {
            "question": "Which is used for private data members in Python?",
            "options": [
                "– (dash)",
                "_ (underscore)",
                "! (exclamation mark)",
                "# (hash)"
            ],
            "answer": "_ (underscore)",
            "explanation": "Prefixing a data member with an underscore suggests it’s meant to be private, though it’s just a convention."
        },
        {
            "question": "Which function opens a file for reading in Python?",
            "options": [
                "openFile()",
                "fileOpen()",
                "open()",
                "readFile()"
            ],
            "answer": "open()",
            "explanation": "The built-in open() function is used to open files in Python."
        },
        {
            "question": "Which mode is used for binary reading in Python?",
            "options": [
                "‘r’",
                "‘rb’",
                "‘r+’",
                "‘w’"
            ],
            "answer": "‘rb’",
            "explanation": "The ‘rb’ mode is used to read files in binary mode."
        },
        {
            "question": "Which of these is mutable?",
            "options": [
                "List",
                "Tuple",
                "String",
                "None of the above"
            ],
            "answer": "List",
            "explanation": "Among the options, only lists are mutable."
        },
        {
            "question": "Which of the following can’t be a dictionary key?",
            "options": [
                "Integer",
                "String",
                "List",
                "Tuple"
            ],
            "answer": "List",
            "explanation": "Dictionary keys must be immutable, so lists can’t be keys."
        },
        {
            "question": "What is the output of “Python”.lower()?",
            "options": [
                "PYTHON",
                "python",
                "PythoN",
                "Error"
            ],
            "answer": "python",
            "explanation": "The lower() method converts all uppercase characters in a string to lowercase."
        },
        {
            "question": "Which method is used to replace parts of a string?",
            "options": [
                "switch()",
                "change()",
                "modify()",
                "replace()"
            ],
            "answer": "replace()",
            "explanation": "The replace() method replaces specified values with other values."
        },
        {
            "question": "Which block is executed no matter if an exception occurs or not?",
            "options": [
                "except",
                "try",
                "finally",
                "catch"
            ],
            "answer": "finally",
            "explanation": "The finally block always executes after the try and except blocks."
        },
        {
            "question": "Which exception is raised when dividing by zero in Python?",
            "options": [
                "ValueError",
                "TypeError",
                "ZeroDivisionError",
                "ArithmeticError"
            ],
            "answer": "ZeroDivisionError",
            "explanation": "Division by zero raises a ZeroDivisionError exception."
        },
        {
            "question": "What is the result of list(“Python”)?",
            "options": [
                "[P, y, t, h, o, n]",
                "[“Python”]",
                "[“P”, “y”, “t”, “h”, “o”, “n”]",
                "Error"
            ],
            "answer": "[“P”, “y”, “t”, “h”, “o”, “n”]",
            "explanation": "This function separates each character and creates a list of them."
        },
        {
            "question": "How to add an element to the end of a list?",
            "options": [
                "insert()",
                "append()",
                "add()",
                "put()"
            ],
            "answer": "append()",
            "explanation": "append() adds an element to the end of a list."
        },
        {
            "question": "Which keyword is used to define a function?",
            "options": [
                "func",
                "function",
                "def",
                "define"
            ],
            "answer": "def",
            "explanation": "In Python, functions are defined using the def keyword."
        },
        {
            "question": "What does a function without a return statement return?",
            "options": [
                "0",
                "None",
                "“” (empty string)",
                "Error"
            ],
            "answer": "None",
            "explanation": "If there’s no return statement in a function, Python returns None."
        },
        {
            "question": "Which operator is used for floor division?",
            "options": [
                "/",
                "*",
                "//",
                "%"
            ],
            "answer": "//",
            "explanation": "// is the floor division operator in Python."
        },
        {
            "question": "Which operator is used for exponentiation?",
            "options": [
                "^",
                "*",
                "!",
                "**"
            ],
            "answer": "**",
            "explanation": "** is the exponentiation operator in Python."
        },
        {
            "question": "Which of these creates an empty dictionary?",
            "options": [
                "dict{}",
                "{}",
                "[]",
                "()"
            ],
            "answer": "{}",
            "explanation": "Curly braces {} are used for dictionary creation."
        },
        {
            "question": "How to access the value for the key “apple” in a dictionary d?",
            "options": [
                "d.apple",
                "d[“apple”]",
                "d[apple]",
                "d->apple"
            ],
            "answer": "d[“apple”]",
            "explanation": "Values in dictionaries are accessed by their keys using square brackets."
        },
        {
            "question": "Which of the following can be a valid variable name in Python?",
            "options": [
                "2apple",
                "apple-pie",
                "apple_pie",
                "@apple"
            ],
            "answer": "apple_pie",
            "explanation": "Variable names can start with a letter or underscore and can have letters, numbers, or underscores in them."
        },
        {
            "question": "Which method returns the position of the first occurrence of a specified String value?",
            "options": [
                "find()",
                "index()",
                "locate()",
                "Both a) and b)"
            ],
            "answer": "Both a) and b)",
            "explanation": "Both find() and index() can be used, but index() raises an exception if the value isn’t found, whereas find() returns -1."
        },
        {
            "question": "Which operator is used to concatenate two strings?",
            "options": [
                "+",
                ".",
                "*",
                "&"
            ],
            "answer": "+",
            "explanation": "The + operator is used to concatenate two strings."
        },
        {
            "question": "Which statement raises an exception manually?",
            "options": [
                "raise",
                "trigger",
                "throw",
                "error"
            ],
            "answer": "raise",
            "explanation": "The raise statement allows the programmer to force a specific exception to occur."
        },
        {
            "question": "Which method removes the specified item from the list?",
            "options": [
                "discard()",
                "delete()",
                "remove()",
                "pop()"
            ],
            "answer": "remove()",
            "explanation": "The remove() method removes the specified item."
        },
        {
            "question": "What does [1, 2, 3] * 2 give?",
            "options": [
                "[1, 2, 3, 1, 2, 3]",
                "[2, 4, 6]",
                "Error",
                "[1, 1, 2, 2, 3, 3]"
            ],
            "answer": "[1, 2, 3, 1, 2, 3]",
            "explanation": "This operation replicates the list."
        },
        {
            "question": "Which built-in function returns the absolute value?",
            "options": [
                "abs()",
                "fabs()",
                "absolute()",
                "all()"
            ],
            "answer": "abs()",
            "explanation": "The abs() function returns the absolute value of the specified number."
        },
        {
            "question": "Which keyword is used for variable-length argument lists?",
            "options": [
                "*args",
                "**kwargs",
                "&vars",
                "Both a) and b)"
            ],
            "answer": "Both a) and b)",
            "explanation": "*args is used for non-keyworded variable-length arguments, and **kwargs is used for keyworded variable-length arguments."
        },
        {
            "question": "Which of the following checks if the value is not in the list?",
            "options": [
                "x not in y",
                "x != y",
                "x not of y",
                "x !of y"
            ],
            "answer": "x not in y",
            "explanation": "The not in operator checks if a value is not present in the list."
        },
        {
            "question": "What is the output of 5 // 2?",
            "options": [
                "2.5",
                "2.0",
                "2",
                "3"
            ],
            "answer": "2",
            "explanation": "// is the floor division operator which truncates the decimal and rounds down."
        },
        {
            "question": "Which method returns a list of all the values in the dictionary?",
            "options": [
                "values()",
                "keys()",
                "items()",
                "all()"
            ],
            "answer": "values()",
            "explanation": "The values() method returns a list of all the values in the dictionary."
        },
        {
            "question": "Which method is used to remove all items from a dictionary?",
            "options": [
                "clear()",
                "delete()",
                "discard()",
                "empty()"
            ],
            "answer": "clear()",
            "explanation": "The clear() method removes all items from a dictionary."
        },
        {
            "question": "Which of the following is true for variables in Python?",
            "options": [
                "They need an explicit declaration",
                "They are strongly typed",
                "They are associated with a type at runtime",
                "They are assigned a value using :="
            ],
            "answer": "They are associated with a type at runtime",
            "explanation": "Variables in Python are dynamically typed, meaning they get their type at runtime based on the value they are assigned."
        },
        {
            "question": "Which of the following creates a new reference to the same list?",
            "options": [
                "list.copy()",
                "list = list",
                "list[:]",
                "new_list = [] + list"
            ],
            "answer": "list = list",
            "explanation": "Assigning one list to another creates a reference to the same object, rather than a new copy."
        },
        {
            "question": "Which method checks if the string starts with a particular substring?",
            "options": [
                "startswith()",
                "beginswith()",
                "first()",
                "isfirst()"
            ],
            "answer": "startswith()",
            "explanation": "The startswith() method is used to check if a string starts with a specified substring."
        },
        {
            "question": "Which string method removes white spaces from both the beginning and the end?",
            "options": [
                "strip()",
                "clean()",
                "trim()",
                "wipe()"
            ],
            "answer": "strip()",
            "explanation": "The strip() method is used to remove any leading (spaces at the beginning) and trailing (spaces at the end) characters."
        },
        {
            "question": "Which keyword can be used to handle an exception in Python?",
            "options": [
                "catch",
                "rescue",
                "except",
                "handle"
            ],
            "answer": "except",
            "explanation": "In Python, the except keyword is used to catch and handle exceptions."
        },
        {
            "question": "What is the purpose of the global keyword in Python?",
            "options": [
                "To create a global variable",
                "To use a module-level variable inside a function",
                "To define a global function",
                "None of the above"
            ],
            "answer": "To use a module-level variable inside a function",
            "explanation": "The global keyword allows a function to use a variable defined at the module level."
        },
        {
            "question": "Which of the following defines a lambda function that doubles a number?",
            "options": [
                "double = lambda x: 2x",
                "double = (lambda x: 2x)",
                "double = lambda x: x*2",
                "double(x) = lambda: x*2"
            ],
            "answer": "double = lambda x: x*2",
            "explanation": "Lambda functions are anonymous functions defined using the lambda keyword. The correct syntax is the one given in option c."
        },
        {
            "question": "Which operator is used for element-wise multiplication in numpy arrays?",
            "options": [
                "*",
                ".",
                "x",
                "%"
            ],
            "answer": "*",
            "explanation": "In numpy, the * operator is used for element-wise multiplication, while the dot product requires the dot function."
        },
        {
            "question": "Given a dictionary d = {“a”: 1, “b”: 2}, what will d.get(“c”, 3) return?",
            "options": [
                "1",
                "2",
                "3",
                "None"
            ],
            "answer": "3",
            "explanation": "The get method returns the value for the specified key if it exists, otherwise, it returns the default value provided (3 in this case)."
        },
        {
            "question": "What will list({“a”: 1, “b”: 2, “c”: 3}.keys()) output?",
            "options": [
                "[“a”, “b”, “c”]",
                "[1, 2, 3]",
                "[“a”, 1, “b”, 2, “c”, 3]",
                "{“a”, “b”, “c”}"
            ],
            "answer": "[“a”, “b”, “c”]",
            "explanation": "The keys method returns the keys in the dictionary. When converted to a list, it gives the list of keys."
        },
        {
            "question": "Which of the following is not a valid variable name in Python?",
            "options": [
                "_var",
                "var1",
                "1var",
                "var_name"
            ],
            "answer": "1var",
            "explanation": "Variable names cannot start with a number in Python."
        },
        {
            "question": "How can you make a variable private in a Python class?",
            "options": [
                "Prefix it with __",
                "Prefix it with _",
                "Prefix it with private",
                "Variables cannot be made private in Python"
            ],
            "answer": "Prefix it with __",
            "explanation": "Prefixing a variable with double underscores (__) makes it private. It’s not truly private but is name-mangled to make it less accessible from the outside."
        },
        {
            "question": "Which method in Python is used to read the entire contents of the file?",
            "options": [
                "readline()",
                "readall()",
                "readlines()",
                "read()"
            ],
            "answer": "read()",
            "explanation": "The read() method is used to read the entire content of the file."
        },
        {
            "question": "Which mode is used to open a file for writing only?",
            "options": [
                "r",
                "rb",
                "w",
                "a"
            ],
            "answer": "w",
            "explanation": "The mode w stands for “write”. It opens the file for writing only."
        },
        {
            "question": "What will be the output of the following code if the file contains “Hello World!”?",
            "options": [
                "Hello",
                "Hello World!",
                "World!",
                "An empty string"
            ],
            "answer": "Hello World!",
            "explanation": "readline() method reads the next line from the file."
        },
        {
            "question": "How do you create a new file in Python?",
            "options": [
                "new()",
                "create()",
                "open(filename, ‘x’)",
                "openfile(filename)"
            ],
            "answer": "open(filename, ‘x’)",
            "explanation": "Using open with mode ‘x’ creates a new file. If the file already exists, it raises a FileExistsError."
        },
        {
            "question": "Which function closes an opened file?",
            "options": [
                "closefile()",
                "terminate()",
                "end()",
                "close()"
            ],
            "answer": "close()",
            "explanation": "The close() method is used to close an opened file. It’s a good practice to close files to free up system resources."
        },
        {
            "question": "Which method returns a list of lines in the file?",
            "options": [
                "read()",
                "readline()",
                "readlines()",
                "allLines()"
            ],
            "answer": "readlines()",
            "explanation": "The readlines() method reads all lines in a file and returns them as a list."
        },
        {
            "question": "If a file is opened in write mode (w), what happens?",
            "options": [
                "The file content is preserved",
                "An error is raised if the file already exists",
                "The file is created if it doesn’t exist",
                "The file content is truncated"
            ],
            "answer": "The file content is truncated",
            "explanation": "Opening a file in w mode truncates the file content. If the file doesn’t exist, it will be created."
        },
        {
            "question": "Which mode is used to open a file for appending?",
            "options": [
                "w+",
                "r+",
                "a",
                "x"
            ],
            "answer": "a",
            "explanation": "The mode a stands for “append”. It opens the file for appending."
        },
        {
            "question": "What is the purpose of the os module in relation to file handling?",
            "options": [
                "Reading file content",
                "Writing to files",
                "Handling file-related operations like renaming and deleting",
                "Closing files"
            ],
            "answer": "Handling file-related operations like renaming and deleting",
            "explanation": "The os module in Python provides a way of using system-dependent functionality, such as reading or writing to the file system."
        },
        {
            "question": "How can you read a file line by line using a loop?",
            "options": [
                "Using readline()",
                "Using read()",
                "Using for line in file",
                "Using readlines()"
            ],
            "answer": "Using for line in file",
            "explanation": "In Python, a file object is iterable. We can iterate over it line by line using a for loop."
        },
        {
            "question": "What is the data type of: ‘Hello, World!’?",
            "options": [
                "List",
                "Tuple",
                "Integer",
                "String"
            ],
            "answer": "String",
            "explanation": "Anything enclosed in single (‘ ‘) or double (” “) quotes in Python is a string."
        },
        {
            "question": "Which of the following is the correct way to get the length of a string?",
            "options": [
                "len(string)",
                "string.len()",
                "string.length()",
                "length(string)"
            ],
            "answer": "len(string)",
            "explanation": "The built-in len() function returns the length of the provided string."
        },
        {
            "question": "Which of these will throw an error?",
            "options": [
                "‘Hello’ + ‘ World’",
                "‘Hello’ – ‘o’",
                "‘Hello’ * 3",
                "‘Hello’ / 2"
            ],
            "answer": "‘Hello’ – ‘o’",
            "explanation": "Strings in Python support concatenation using + and repetition using *, but not subtraction or division."
        },
        {
            "question": "How would you extract ‘World’ from the string ‘Hello, World!’?",
            "options": [
                "‘Hello, World!'[7:11]",
                "‘Hello, World!'[6:11]",
                "‘Hello, World!'[7:12]",
                "‘Hello, World!'[6:12]"
            ],
            "answer": "‘Hello, World!'[6:12]",
            "explanation": "String slicing begins at the start index and goes up to, but does not include the end index."
        },
        {
            "question": "What will the following code return? ‘Python’.lower()",
            "options": [
                "Python",
                "python",
                "PYTHON",
                "pYTHON"
            ],
            "answer": "python",
            "explanation": "The .lower() method converts all the characters in a string to lowercase."
        },
        {
            "question": "Which method can be used to check if the string starts with a specified value?",
            "options": [
                "begin()",
                "start()",
                "beginWith()",
                "startswith()"
            ],
            "answer": "startswith()",
            "explanation": "The startswith() method returns True if a string starts with the specified value, otherwise False."
        },
        {
            "question": "How can you replace all occurrences of ‘good’ with ‘bad’ in the string ‘Life is good’?",
            "options": [
                "‘Life is good’.replace(‘good’, ‘bad’)",
                "‘Life is good’.swap(‘good’, ‘bad’)",
                "‘Life is good’.exchange(‘good’, ‘bad’)",
                "‘Life is good’.change(‘good’, ‘bad’)"
            ],
            "answer": "‘Life is good’.replace(‘good’, ‘bad’)",
            "explanation": "The replace() method replaces a specified value with another value in a string."
        },
        {
            "question": "Which string method can be used to remove any leading and trailing whitespace?",
            "options": [
                "trim()",
                "cut()",
                "strip()",
                "clean()"
            ],
            "answer": "strip()",
            "explanation": "The strip() method removes leading and trailing whitespaces from a string."
        },
        {
            "question": "Which of the following strings is a palindrome?",
            "options": [
                "‘Python’",
                "‘madam’",
                "‘world’",
                "‘string’"
            ],
            "answer": "‘madam’",
            "explanation": "A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward."
        },
        {
            "question": "What is the output of ‘Python’.isalpha()?",
            "options": [
                "True",
                "False",
                "1",
                "0"
            ],
            "answer": "True",
            "explanation": "The isalpha() method returns True if all characters in the string are alphabetic, otherwise, it is False."
        },
        {
            "question": "How can you convert a string to a list of words?",
            "options": [
                "‘Hello World’.list()",
                "list(‘Hello World’)",
                "‘Hello World’.split()",
                "‘Hello World’.toArray()"
            ],
            "answer": "‘Hello World’.split()",
            "explanation": "The split() method divides a string into a list, based on a specified delimiter (default is space)."
        },
        {
            "question": "Which of the following will return the string ‘Python’ backward?",
            "options": [
                "‘Python'[::-1]",
                "‘Python’.reverse()",
                "reverse(‘Python’)",
                "‘Python'[-1:]"
            ],
            "answer": "‘Python'[::-1]",
            "explanation": "String slicing with [::-1] returns the string in reverse order."
        },
        {
            "question": "Which method will return the position of the first occurrence of ‘o’ in ‘Hello’?",
            "options": [
                "‘Hello’.position(‘o’)",
                "‘Hello’.place(‘o’)",
                "‘Hello’.index(‘o’)",
                "‘Hello’.loc(‘o’)"
            ],
            "answer": "‘Hello’.index(‘o’)",
            "explanation": "The index() method returns the position at the first occurrence of the specified value."
        },
        {
            "question": "What does ‘ ‘.isspace() return?",
            "options": [
                "True",
                "False",
                "Error",
                "None"
            ],
            "answer": "True",
            "explanation": "The isspace() method returns True if all characters in a string are whitespaces, otherwise False."
        },
        {
            "question": "Which of the following is correct for checking if a string ‘s’ is both alphanumeric and has at least one character?",
            "options": [
                "s.isalnum() and len(s) > 0",
                "s.isalnum() or len(s) > 0",
                "s.isalpha() and len(s) > 0",
                "s.isnumeric() and len(s) > 0"
            ],
            "answer": "s.isalnum() and len(s) > 0",
            "explanation": "The isalnum() method checks if all characters in a string are alphanumeric. Coupling this check with a length check ensures that the string has at least one character."
        },
        {
            "question": "What does the str.upper() method do?",
            "options": [
                "Converts all characters in string to uppercase",
                "Converts the first character in string to uppercase",
                "Converts all characters in string to lowercase",
                "Converts the first character in string to lowercase"
            ],
            "answer": "Converts all characters in string to uppercase",
            "explanation": "The str.upper() method converts all characters in the string to uppercase."
        },
        {
            "question": "Which of these methods removes only trailing whitespace?",
            "options": [
                "str.strip()",
                "str.lstrip()",
                "str.rstrip()",
                "str.trim()"
            ],
            "answer": "str.rstrip()",
            "explanation": "The str.rstrip() method removes trailing whitespaces from a string."
        },
        {
            "question": "What will ‘123’.isdigit() return?",
            "options": [
                "True",
                "False",
                "123",
                "Error"
            ],
            "answer": "True",
            "explanation": "The isdigit() method checks if all the characters in a string are digits and returns True if they are, otherwise, it is False."
        },
        {
            "question": "How can you find the occurrence of a substring within a string?",
            "options": [
                "str.find()",
                "str.index()",
                "str.search()",
                "Both a) and b)"
            ],
            "answer": "Both a) and b)",
            "explanation": "Both str.find() and str.index() can be used to find the occurrence of a substring within a string. The difference is that str.find() returns -1 if the substring is not found, whereas str.index() raises an exception."
        },
        {
            "question": "Which method will replace a substring within a string?",
            "options": [
                "str.sub()",
                "str.replace()",
                "str.swap()",
                "str.modify()"
            ],
            "answer": "str.replace()",
            "explanation": "The str.replace() method replaces a specified value with another value in a string."
        },
        {
            "question": "What will be the output of the method call ‘python’.capitalize()?",
            "options": [
                "PYTHON",
                "python",
                "Python",
                "pYTHON"
            ],
            "answer": "Python",
            "explanation": "The capitalize() method capitalizes the first letter of the string and makes the rest of the characters lowercase."
        },
        {
            "question": "If you want to split a string ‘apple,banana,cherry’ into a list of fruits, which method would you use?",
            "options": [
                "separate(‘,’)",
                "divide(‘,’)",
                "partition(‘,’)",
                "split(‘,’)"
            ],
            "answer": "split(‘,’)",
            "explanation": "The split() method divides a string into a list based on a specified delimiter. In this case, the comma is used as the delimiter."
        },
        {
            "question": "To count the number of occurrences of the letter ‘a’ in the string ‘banana’, which method should you use?",
            "options": [
                "count(‘a’)",
                "find(‘a’)",
                "index(‘a’)",
                "locate(‘a’)"
            ],
            "answer": "count(‘a’)",
            "explanation": "The count() method is used to return the number of times a specified value appears in the string."
        },
        {
            "question": "What does the try block do in Python exception handling?",
            "options": [
                "Executes the code that might raise an exception",
                "Catches and handles exceptions",
                "Defines the code to be executed after the try block",
                "Specifies the final action regardless of exceptions"
            ],
            "answer": "Executes the code that might raise an exception",
            "explanation": "The try block contains the code segment that might produce an exception. If an exception occurs, the code inside the try block stops executing, and control passes to the except block."
        },
        {
            "question": "Which keyword is used to handle exceptions in Python?",
            "options": [
                "catch",
                "throw",
                "finally",
                "except"
            ],
            "answer": "except",
            "explanation": "The except block contains the code to handle or catch the exception that was raised in the try block."
        },
        {
            "question": "Which of the following is not a built-in exception in Python?",
            "options": [
                "ZeroDivisionError",
                "FileNotFoundException",
                "ImportError",
                "ValueError"
            ],
            "answer": "FileNotFoundException",
            "explanation": "Python doesn’t have a FileNotFoundException exception. Instead, it has FileNotFoundError."
        },
        {
            "question": "If multiple except blocks are available, how does Python choose the right one?",
            "options": [
                "Randomly",
                "First except block that matches",
                "Last except block that matches",
                "Executes all matching blocks"
            ],
            "answer": "First except block that matches",
            "explanation": "Python goes through each except block sequentially and stops at the first matching block."
        },
        {
            "question": "What is the purpose of the else block in exception handling?",
            "options": [
                "Handles exceptions",
                "Executes if no exception occurs",
                "Executes if an exception occurs",
                "Always executes after the try block"
            ],
            "answer": "Executes if no exception occurs",
            "explanation": "The else block executes if no exception was raised in the try block."
        },
        {
            "question": "Which block is always executed irrespective of whether an exception was raised or not?",
            "options": [
                "try",
                "except",
                "else",
                "finally"
            ],
            "answer": "finally",
            "explanation": "The finally block always executes, making it useful for cleanup tasks like closing a file or a network connection."
        },
        {
            "question": "How can you raise a custom exception in Python?",
            "options": [
                "throw Exception(“Message”)",
                "raise Exception(“Message”)",
                "catch Exception(“Message”)",
                "generate Exception(“Message”)"
            ],
            "answer": "raise Exception(“Message”)",
            "explanation": "The raise keyword is used to raise exceptions in Python."
        },
        {
            "question": "Which exception is raised when you try to use a variable that hasn’t been defined?",
            "options": [
                "UndefinedVariableError",
                "ReferenceError",
                "ValueError",
                "NameError"
            ],
            "answer": "NameError",
            "explanation": "A NameError is raised when a local or global name is not found."
        },
        {
            "question": "What will the output of the following code be?",
            "options": [
                "1",
                "0",
                "An exception will be raised",
                "None"
            ],
            "answer": "0",
            "explanation": "The ZeroDivisionError exception is caught and handled by setting x to 0."
        },
        {
            "question": "Which exception is thrown when you try to import a module that doesn’t exist?",
            "options": [
                "ImportError",
                "ModuleError",
                "FileNotFoundError",
                "ValueError"
            ],
            "answer": "ImportError",
            "explanation": "An ImportError is raised when the import statement can’t find the specified module."
        },
        {
            "question": "If no exception type is mentioned in the except block, which kind of exception will it catch?",
            "options": [
                "No exceptions",
                "Only built-in exceptions",
                "Only user-defined exceptions",
                "All exceptions"
            ],
            "answer": "All exceptions",
            "explanation": "An except block without a specified exception type will catch all exceptions."
        },
        {
            "question": "Which of the following is the base class for all built-in exceptions?",
            "options": [
                "BaseError",
                "Error",
                "BaseException",
                "Exception"
            ],
            "answer": "BaseException",
            "explanation": "BaseException is the base class from which all built-in exceptions are derived. However, for user-defined exceptions, it’s recommended to derive from the Exception class."
        },
        {
            "question": "Which exception is raised when a program runs out of memory?",
            "options": [
                "OutOfMemoryError",
                "MemoryError",
                "MemoryOverflowError",
                "RuntimeError"
            ],
            "answer": "MemoryError",
            "explanation": "A MemoryError is raised when an operation runs out of memory."
        },
        {
            "question": "If you have a try block nested inside another try block and an exception occurs in the inner try block that is not handled there, where will Python look for the next matching except block?",
            "options": [
                "In the immediate outer try block",
                "In the main program outside of all try blocks",
                "In the global scope",
                "It will terminate immediately"
            ],
            "answer": "In the immediate outer try block",
            "explanation": "If an inner try block does not handle an exception, Python will look for an except block in the immediate enclosing try block."
        },
        {
            "question": "What does the as keyword do in the context of exception handling?",
            "options": [
                "Renames the exception",
                "Provides an alias for the exception",
                "Ignores the exception",
                "Re-raises the exception"
            ],
            "answer": "Provides an alias for the exception",
            "explanation": "The as keyword is used to create an alias for the exception, allowing you to reference it in your except block."
        },
        {
            "question": "Which of the following is an arithmetic operator in Python?",
            "options": [
                "&&",
                "!=",
                "//",
                "::"
            ],
            "answer": "//",
            "explanation": "// is the floor division operator in Python. It returns the quotient of the division, rounded down to the nearest whole number."
        },
        {
            "question": "What will be the result of 9 % 4?",
            "options": [
                "1",
                "2",
                "3",
                "4"
            ],
            "answer": "3",
            "explanation": "% is the modulus operator, which returns the remainder of the division. 9 % 4 returns 3."
        },
        {
            "question": "Which of the following operators has the highest precedence?",
            "options": [
                "+",
                "*",
                "**",
                "–"
            ],
            "answer": "**",
            "explanation": "** is the exponentiation operator, and it has the highest precedence among the options listed."
        },
        {
            "question": "What does the == operator do?",
            "options": [
                "Assigns value",
                "Compares value and returns true or false",
                "Checks memory location",
                "None of the above"
            ],
            "answer": "Compares value and returns true or false",
            "explanation": "== is a comparison operator that checks for equality of values and returns True if they are equal, otherwise False."
        },
        {
            "question": "What is the output of 2 ** 3?",
            "options": [
                "5",
                "6",
                "8",
                "11"
            ],
            "answer": "8",
            "explanation": "** is the exponentiation operator. 2 ** 3 calculates 2 raised to the power of 3, which is 8."
        },
        {
            "question": "Which operator is used for bitwise XOR in Python?",
            "options": [
                "&",
                "|",
                "!",
                "^"
            ],
            "answer": "^",
            "explanation": "The ^ operator in Python is used for bitwise XOR operations."
        },
        {
            "question": "Which of the following is a membership operator in Python?",
            "options": [
                "in",
                "is",
                "==",
                "!="
            ],
            "answer": "in",
            "explanation": "in is a membership operator in Python used to check if a value is present in a sequence (like a list or tuple)."
        },
        {
            "question": "What does the is operator do in Python?",
            "options": [
                "Checks value equality",
                "Assigns value",
                "Checks memory location",
                "All of the above"
            ],
            "answer": "Checks memory location",
            "explanation": "The is operator checks if both the operands refer to the same object in memory (i.e., they have the same memory location)."
        },
        {
            "question": "If a = 3 and b = 3, what will be the result of (a is b)?",
            "options": [
                "True",
                "False",
                "Error",
                "None"
            ],
            "answer": "True",
            "explanation": "In Python, small integers (like 3) are cached. Both a and b refer to the same memory location, so (a is b) returns True."
        },
        {
            "question": "Which operator is used for floor division?",
            "options": [
                "/",
                "*",
                "//",
                "%"
            ],
            "answer": "//",
            "explanation": "// is the floor division operator that returns the quotient of the division, rounded down to the nearest whole number."
        },
        {
            "question": "Which operator is used to check if an object is NOT part of a sequence?",
            "options": [
                "in",
                "not in",
                "is not",
                "!="
            ],
            "answer": "not in",
            "explanation": "not in is a membership operator used to check if an object is NOT part of a sequence."
        },
        {
            "question": "What is the result of 10 & 7?",
            "options": [
                "2",
                "3",
                "6",
                "7"
            ],
            "answer": "2",
            "explanation": "The & operator performs a bitwise AND operation. 10 in binary is 1010 and 7 is 0111. The result of bitwise AND operation is 0010, which is 2 in decimal."
        },
        {
            "question": "Which operator has the lowest precedence?",
            "options": [
                "or",
                "and",
                "not",
                "=="
            ],
            "answer": "or",
            "explanation": "Among the given options, the logical or operator has the lowest precedence."
        },
        {
            "question": "What is the result of True or False and False?",
            "options": [
                "True",
                "False",
                "Error",
                "None"
            ],
            "answer": "True",
            "explanation": "The and operator has higher precedence than or. Therefore, False and False is evaluated first and results in False. Then, True or False results in True."
        },
        {
            "question": "What does the += operator do?",
            "options": [
                "Multiplies and assigns",
                "Divides and assigns",
                "Adds and assigns",
                "Subtracts and assigns"
            ],
            "answer": "Adds and assigns",
            "explanation": "The += operator adds the right operand to the left operand and assigns the result to the left operand. It’s shorthand for a = a + b."
        },
        {
            "question": "Which of the following creates an empty dictionary?",
            "options": [
                "dict[]",
                "{}",
                "()",
                "[]"
            ],
            "answer": "{}",
            "explanation": "The {} syntax is used to create an empty dictionary in Python."
        },
        {
            "question": "What will be the output of dict([[1,2],[3,4]])?",
            "options": [
                "{1: 2, 3: 4}",
                "[[1,2],[3,4]]",
                "{[1,2]: [3,4]}",
                "Error"
            ],
            "answer": "{1: 2, 3: 4}",
            "explanation": "The dict() constructor builds dictionaries directly from sequences of key-value pairs."
        },
        {
            "question": "Which of the following is a valid dictionary?",
            "options": [
                "{1: ‘a’, 2: ‘b’}",
                "{[1,2]: ‘a’}",
                "{(1,2): ‘a’}",
                "{1, 2: ‘a’, ‘b’}"
            ],
            "answer": "{1: ‘a’, 2: ‘b’} and c) {(1,2): ‘a’}",
            "explanation": "Dictionary keys must be of a type that is immutable. Tuples are immutable so they can be used as keys, unlike lists."
        },
        {
            "question": "How can you add a new key-value pair to an existing dictionary d?",
            "options": [
                "d.append(‘key’, ‘value’)",
                "d(‘key’) = ‘value’",
                "d[‘key’] = ‘value’",
                "d.add(‘key’ = ‘value’)"
            ],
            "answer": "d[‘key’] = ‘value’",
            "explanation": "New key-value pairs can be added to dictionaries using the assignment operator."
        },
        {
            "question": "How can you remove a key-value pair from a dictionary?",
            "options": [
                "d.remove(‘key’)",
                "del d[‘key’]",
                "d.delete(‘key’)",
                "d.pop(‘key’)"
            ],
            "answer": "del d[‘key’] and d) d.pop(‘key’)",
            "explanation": "Both del and the pop() method can be used to remove key-value pairs from dictionaries."
        },
        {
            "question": "What method would you use to get the value of a key if it exists, otherwise return a default value?",
            "options": [
                "d[‘key’] or ‘default’",
                "d.get(‘key’, ‘default’)",
                "d.value(‘key’, ‘default’)",
                "d.key(‘key’, ‘default’)"
            ],
            "answer": "d.get(‘key’, ‘default’)",
            "explanation": ""
        },
        {
            "question": "Which of the following is not true about dictionary keys?",
            "options": [
                "They must be unique.",
                "They are immutable.",
                "They can be changed after creation.",
                "They can be numbers or strings."
            ],
            "answer": "They can be changed after creation.",
            "explanation": "Dictionary keys must be of a type that is immutable, meaning they cannot be changed after creation."
        },
        {
            "question": "Which method would return a list of all the keys in a dictionary?",
            "options": [
                "d.keys()",
                "d.values()",
                "d.items()",
                "d.list()"
            ],
            "answer": "d.keys()",
            "explanation": "The keys() method of a dictionary returns a list of all the keys."
        },
        {
            "question": "What will be the output of {1: ‘a’, 2: ‘b’}.values()?",
            "options": [
                "[1, 2]",
                "[a, b]",
                "(‘a’, ‘b’)",
                "[‘a’, ‘b’]"
            ],
            "answer": "[‘a’, ‘b’]",
            "explanation": "The values() method of a dictionary returns a list of all the values."
        },
        {
            "question": "Which method can be used to get all key-value pairs in a dictionary as tuples?",
            "options": [
                "d.keys()",
                "d.values()",
                "d.items()",
                "d.all()"
            ],
            "answer": "d.items()",
            "explanation": "The items() method returns all key-value pairs in a dictionary as tuples."
        },
        {
            "question": "If d = {1: ‘a’, 2: ‘b’}, what will d[3] return?",
            "options": [
                "None",
                "‘c’",
                "Error",
                "0"
            ],
            "answer": "Error",
            "explanation": "Accessing a key that doesn’t exist in the dictionary will raise a KeyError."
        },
        {
            "question": "Dictionaries in Python are:",
            "options": [
                "Ordered since Python 3.7",
                "Unordered",
                "Sorted by default",
                "Only ordered if numbers are used as keys"
            ],
            "answer": "Ordered since Python 3.7",
            "explanation": "Starting from Python 3.7, dictionaries maintain the insertion order of their items."
        },
        {
            "question": "What does d.setdefault(‘key’, ‘default’) do?",
            "options": [
                "Always sets ‘key’ to ‘default’ value.",
                "Only sets ‘key’ to ‘default’ if ‘key’ doesn’t exist.",
                "Only sets ‘key’ to ‘default’ if ‘key’ exists.",
                "Checks if ‘default’ exists in ‘key’."
            ],
            "answer": "Only sets ‘key’ to ‘default’ if ‘key’ doesn’t exist.",
            "explanation": "The setdefault() method returns the value of a key if it exists, otherwise inserts the key with a specified value."
        },
        {
            "question": "Which method can be used to copy a dictionary?",
            "options": [
                "d.copy()",
                "d.clone()",
                "dict(d)",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "Both the copy() method and the dict() constructor can be used to create a shallow copy of a dictionary."
        },
        {
            "question": "Which of the following will clear all entries from the dictionary d?",
            "options": [
                "d.remove()",
                "d.delete()",
                "d = {}",
                "d.clear()"
            ],
            "answer": "d.clear()",
            "explanation": "The clear() method removes all items from the dictionary."
        },
        {
            "question": "Which keyword is used to define a function in Python?",
            "options": [
                "fun",
                "define",
                "func",
                "def"
            ],
            "answer": "def",
            "explanation": "In Python, the def keyword is used to declare or define a function."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "Hello!",
                "None",
                "Hello! None",
                "Error"
            ],
            "answer": "Hello! None",
            "explanation": "The function greet() prints “Hello!” but does not return any value. By default, Python functions return None if no return value is specified."
        },
        {
            "question": "Which of the following is a correct function header?",
            "options": [
                "def function():",
                "function def():",
                "def function(): {}",
                "function():"
            ],
            "answer": "def function():",
            "explanation": "Functions in Python are defined using the def keyword, followed by the function name and parentheses."
        },
        {
            "question": "What is the purpose of the return statement in functions?",
            "options": [
                "To return to the start of the function",
                "To exit the function and return a value",
                "To print the output",
                "To loop through the function"
            ],
            "answer": "To exit the function and return a value",
            "explanation": "The return statement is used to exit a function and return a value."
        },
        {
            "question": "Which of the following functions takes two arguments and returns their sum?",
            "options": [
                "def sum(a, b): print(a + b)",
                "def sum(a + b): return a + b",
                "def sum(a, b): return a + b",
                "sum(a, b): return a + b"
            ],
            "answer": "def sum(a, b): return a + b",
            "explanation": "The correct way to define a function that takes two arguments and returns their sum is option c."
        },
        {
            "question": "How do you call a function named my_function?",
            "options": [
                "call my_function()",
                "my_function()",
                "my_function(call)",
                "def my_function()"
            ],
            "answer": "my_function()",
            "explanation": "Functions are called by their name followed by parentheses."
        },
        {
            "question": "Which of the following is the correct way to define a function that takes any number of positional arguments?",
            "options": [
                "def function(*args):",
                "def function(args*):",
                "def function(args…):",
                "def function(…args):"
            ],
            "answer": "def function(*args):",
            "explanation": "The *args syntax in a function header allows the function to accept any number of positional arguments."
        },
        {
            "question": "What is a lambda function in Python?",
            "options": [
                "A regular named function",
                "A small anonymous function",
                "A special method",
                "A type of loop"
            ],
            "answer": "A small anonymous function",
            "explanation": "A lambda function is a small, unnamed (anonymous) function defined using the lambda keyword."
        },
        {
            "question": "Which of the following is a correct lambda function that squares a number?",
            "options": [
                "lambda x: x*x",
                "x -> x*x",
                "def lambda x: x*x",
                "lambda x -> x*x"
            ],
            "answer": "lambda x: x*x",
            "explanation": "The correct syntax for a lambda function to square a number in Python is lambda x: x*x."
        },
        {
            "question": "Which of the following functions is a recursive function?",
            "options": [
                "A function that calls itself",
                "A function that is called by another function",
                "A function that loops through a list",
                "A function that contains a loop"
            ],
            "answer": "A function that calls itself",
            "explanation": "A recursive function is a function that calls itself in order to solve a problem."
        },
        {
            "question": "What is the purpose of the global keyword in a function?",
            "options": [
                "To define a global variable inside the function",
                "To use a global variable inside the function",
                "To create a global function",
                "To exit the function and return to the global scope"
            ],
            "answer": "To use a global variable inside the function",
            "explanation": "The global keyword is used inside a function to refer to a variable that is defined in the global scope."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "12",
                "7",
                "None",
                "Error"
            ],
            "answer": "7",
            "explanation": "The operate function takes another function as an argument and calls it with x and y. In this case, it calls the add function, which returns 3 + 4, i.e., 7."
        },
        {
            "question": "Which of the following can be used as default values for function arguments?",
            "options": [
                "Numbers",
                "Strings",
                "Lists",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "In Python, numbers, strings, lists, and many other types can be used as default values for function arguments."
        },
        {
            "question": "Which of the following creates an empty list in Python?",
            "options": [
                "list = ()",
                "list = []",
                "list = {}",
                "list = list()"
            ],
            "answer": "list = []",
            "explanation": "In Python, an empty list can be created using empty square brackets []."
        },
        {
            "question": "Which index does Python use to begin indexing an item in a list?",
            "options": [
                "1",
                "-1",
                "0",
                "Any positive integer"
            ],
            "answer": "0",
            "explanation": "Python uses zero-based indexing. So, the first item in a list has index 0."
        },
        {
            "question": "What will be the result of the following code?",
            "options": [
                "1",
                "4",
                "Error",
                "None"
            ],
            "answer": "4",
            "explanation": "Negative indexing starts from the end of the list. -1 denotes the last item."
        },
        {
            "question": "Which method would you use to add an item to the end of a list?",
            "options": [
                "insert()",
                "append()",
                "extend()",
                "add()"
            ],
            "answer": "append()",
            "explanation": "The append() method adds an item to the end of a list."
        },
        {
            "question": "How can you add multiple items to a list?",
            "options": [
                "insert()",
                "append()",
                "extend()",
                "add()"
            ],
            "answer": "extend()",
            "explanation": "The extend() method is used to add multiple items to a list."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "[‘apple’, ‘banana’, ‘orange’, ‘cherry’]",
                "[‘apple’, ‘orange’, ‘banana’, ‘cherry’]",
                "[‘orange’, ‘apple’, ‘banana’, ‘cherry’]",
                "[‘apple’, ‘banana’, ‘cherry’, ‘orange’]"
            ],
            "answer": "[‘apple’, ‘orange’, ‘banana’, ‘cherry’]",
            "explanation": "The insert() method inserts an item at a specified index."
        },
        {
            "question": "How can you remove the last item from a list?",
            "options": [
                "remove()",
                "delete()",
                "pop()",
                "discard()"
            ],
            "answer": "pop()",
            "explanation": "The pop() method removes the last item from a list if no index is specified."
        },
        {
            "question": "Which method removes the first occurrence of an item in a list?",
            "options": [
                "delete()",
                "remove()",
                "discard()",
                "pop()"
            ],
            "answer": "remove()",
            "explanation": "The remove() method removes the first occurrence of the specified item from the list."
        },
        {
            "question": "What will be the result of the following code?",
            "options": [
                "[1, 2, 3, 4, 5]",
                "[1, 2, 4, 3, 5]",
                "[1, 2, 4, 5]",
                "Error"
            ],
            "answer": "[1, 2, 4, 3, 5]",
            "explanation": "The remove() method removes the first occurrence of the specified item."
        },
        {
            "question": "Which method returns the index of the first occurrence of an item?",
            "options": [
                "index()",
                "find()",
                "locate()",
                "search()"
            ],
            "answer": "index()",
            "explanation": "The index() method returns the index of the first occurrence of the specified item in the list."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "[1, 2, 3]",
                "[4, 2, 3]",
                "[4, 4, 4]",
                "Error"
            ],
            "answer": "[4, 2, 3]",
            "explanation": "Lists are mutable, and when you assign a list to another variable (like another_list in the example), both variables point to the same list in memory. Any changes made using one variable are reflected in the other."
        },
        {
            "question": "How can you create a copy of a list?",
            "options": [
                "new_list = list.copy()",
                "new_list = list",
                "new_list = list[:]",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "You can create a copy of a list either using the copy() method or by slicing the entire list."
        },
        {
            "question": "What will be the result of the following code?",
            "options": [
                "20",
                "‘baz’",
                "2.718",
                "3.141"
            ],
            "answer": "‘baz’",
            "explanation": "The code fetches the 2nd item (index 1) of the main list, then the 3rd item (index 2) of the nested list, and finally the 2nd item (index 1) of the innermost list."
        },
        {
            "question": "What method would you use to count the occurrences of an item in a list?",
            "options": [
                "count()",
                "find()",
                "occur()",
                "number()"
            ],
            "answer": "count()",
            "explanation": "The count() method returns the number of occurrences of the specified item in the list."
        },
        {
            "question": "Which of the following statements is correct?",
            "options": [
                "Lists are immutable.",
                "Lists can contain items of multiple data types.",
                "Lists can only have integer items.",
                "Lists cannot contain other lists."
            ],
            "answer": "Lists can contain items of multiple data types.",
            "explanation": "Lists in Python are mutable and can contain items of any data type, including other lists."
        },
        {
            "question": "Which loop is used to iterate over a sequence (like a list or a string)?",
            "options": [
                "do-while",
                "repeat-until",
                "for",
                "loop"
            ],
            "answer": "for",
            "explanation": "The for loop in Python is used to iterate over a sequence."
        },
        {
            "question": "How would you loop through numbers from 1 to 5 in Python?",
            "options": [
                "for i in range(1, 5)",
                "for i = 1 to 5",
                "for i in range(1, 6)",
                "for i = 1; i <= 5; i++"
            ],
            "answer": "for i in range(1, 6)",
            "explanation": "In Python, range(1, 6) generates numbers from 1 to 5. The ending number is exclusive in the range function."
        },
        {
            "question": "Which keyword is used to exit out of a loop prematurely?",
            "options": [
                "stop",
                "end",
                "break",
                "exit"
            ],
            "answer": "break",
            "explanation": "The break keyword is used to exit a loop before it has finished iterating."
        },
        {
            "question": "Which keyword will skip the current iteration and continue with the next one?",
            "options": [
                "skip",
                "jump",
                "continue",
                "pass"
            ],
            "answer": "continue",
            "explanation": "The continue keyword is used to skip the current iteration of a loop and proceed to the next one."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "0 1 2 3",
                "1 2 3",
                "0 1 2",
                "Error"
            ],
            "answer": "0 1 2",
            "explanation": "By default, range(n) starts from 0 and goes up to, but does not include, n."
        },
        {
            "question": "How would you loop over a string one character at a time?",
            "options": [
                "for char in len(string):",
                "for char from string:",
                "for char in string:",
                "for char of string:"
            ],
            "answer": "for char in string:",
            "explanation": "Strings are sequences in Python, and each character of a string can be accessed using a for loop directly."
        },
        {
            "question": "Which of the following results in an infinite loop?",
            "options": [
                "while False:",
                "while True:",
                "for i in range(5):",
                "for i in “Python”:"
            ],
            "answer": "while True:",
            "explanation": "while True: will always evaluate as true, causing the loop to run indefinitely."
        },
        {
            "question": "What does the else clause do in a Python loop?",
            "options": [
                "Executes if the loop condition was never True.",
                "Executes if the loop didn’t encounter a break statement.",
                "Executes if the loop encountered a continue statement.",
                "Executes each time the loop iterates."
            ],
            "answer": "Executes if the loop didn’t encounter a break statement.",
            "explanation": "The else clause in a Python loop is executed when the loop finishes normally (i.e., without encountering a break)."
        },
        {
            "question": "Which loop is typically used when you know beforehand how many times you want to iterate?",
            "options": [
                "do-while",
                "for",
                "while",
                "until"
            ],
            "answer": "for",
            "explanation": "The for loop is typically used when you know the number of iterations beforehand, often determined by the length of a sequence or the parameters of the range() function."
        },
        {
            "question": "Which function would you use to get numbers in descending order, starting from 5 and ending at 1?",
            "options": [
                "range(5, 0)",
                "range(5, 0, -1)",
                "range(1, 5, -1)",
                "range(5, 1)"
            ],
            "answer": "range(5, 0, -1)",
            "explanation": "range(5, 0, -1) starts at 5 and decrements the number by 1 until reaching 0 (exclusive)."
        },
        {
            "question": "Which statement is used to represent a block of code/body of a loop that does nothing?",
            "options": [
                "skip",
                "none",
                "null",
                "pass"
            ],
            "answer": "pass",
            "explanation": "The pass statement is a null operation; nothing happens when it executes. It is useful as a placeholder where a statement is syntactically needed but no action is required."
        },
        {
            "question": "In a nested loop, what does the break statement do if it is encountered?",
            "options": [
                "It exits all loops.",
                "It exits only the innermost loop.",
                "It exits only the outermost loop.",
                "It pauses the execution of the innermost loop."
            ],
            "answer": "It exits only the innermost loop.",
            "explanation": "When a break statement is encountered inside a nested loop, only the innermost loop in which the break exists is exited."
        },
        {
            "question": "Which of the following is a valid variable name in Python?",
            "options": [
                "1_variable",
                "variable_name",
                "variable-name",
                "None of the above"
            ],
            "answer": "variable_name",
            "explanation": "In Python, variable names can start with a letter or an underscore, but not with a number. They can contain alphanumeric characters and underscores. \"variable_name\" is the only valid option."
        },
        {
            "question": "How do you assign a value to a variable in Python?",
            "options": [
                "variable = value",
                "variable <- value",
                "variable -> value",
                "variable == value"
            ],
            "answer": "variable = value",
            "explanation": "In Python, the equal sign (=) is used to assign values to variables."
        },
        {
            "question": "Which of the following is the correct way to declare a variable in Python?",
            "options": [
                "int x = 10",
                "x int = 10",
                "x = 10",
                "10 = x"
            ],
            "answer": "x = 10",
            "explanation": "Python uses dynamic typing, so you don't need to declare the variable type. The correct syntax is just variable_name = value."
        },
        {
            "question": "What will be the data type of the variable 'x' after the assignment x = 5.0?",
            "options": [
                "int",
                "float",
                "str",
                "bool"
            ],
            "answer": "float",
            "explanation": "In Python, a number with a decimal point is considered a float, so x will be of type float."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "10, 20",
                "20",
                "10",
                "Error"
            ],
            "answer": "10",
            "explanation": "The code uses multiple assignment where x is assigned 10 and y is assigned 20. The print statement only prints the value of x."
        },
        {
            "question": "Which of the following is not a reserved keyword in Python?",
            "options": [
                "for",
                "True",
                "import",
                "begin"
            ],
            "answer": "begin",
            "explanation": "\"begin\" is not a reserved keyword in Python, while the others are."
        },
        {
            "question": "What happens when you try to use an undeclared variable in Python?",
            "options": [
                "It is automatically declared",
                "A syntax error occurs",
                "A runtime error occurs",
                "None of the above"
            ],
            "answer": "A runtime error occurs",
            "explanation": "Using an undeclared variable in Python results in a NameError at runtime."
        },
        {
            "question": "How do you check the type of a variable in Python?",
            "options": [
                "check(type)",
                "type()",
                "typeof()",
                "checktype()"
            ],
            "answer": "type()",
            "explanation": "The type() function is used to check the data type of a variable in Python."
        },
        {
            "question": "What is the correct way to declare a global variable in Python?",
            "options": [
                "global x = 5",
                "x = 5",
                "def x: global 5",
                "global x; x = 5"
            ],
            "answer": "global x; x = 5",
            "explanation": "To declare a global variable inside a function, you use the global keyword followed by the variable name."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "PythonPythonPython",
                "Python3",
                "Error",
                "None of the above"
            ],
            "answer": "PythonPythonPython",
            "explanation": "In Python, multiplying a string by an integer n repeats the string n times."
        },
        {
            "question": "What is the result of this Python code?",
            "options": [
                "HelloWorld",
                "Hello World",
                "Error",
                "x + y"
            ],
            "answer": "HelloWorld",
            "explanation": "The + operator concatenates strings without adding any spaces."
        },
        {
            "question": "In Python, which of the following is a mutable data type?",
            "options": [
                "string",
                "tuple",
                "list",
                "integer"
            ],
            "answer": "list",
            "explanation": "Lists are mutable in Python, meaning their elements can be changed."
        },
        {
            "question": "What is the correct way to delete a variable in Python?",
            "options": [
                "delete(x)",
                "del x",
                "remove(x)",
                "erase(x)"
            ],
            "answer": "del x",
            "explanation": "The del statement is used to delete objects in Python."
        },
        {
            "question": "What is the data type of a variable set to None in Python?",
            "options": [
                "int",
                "str",
                "float",
                "NoneType"
            ],
            "answer": "NoneType",
            "explanation": "None is a special type in Python represented by NoneType."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "2",
                "2.0",
                "4",
                "1"
            ],
            "answer": "2",
            "explanation": "The // operator in Python performs integer (floor) division."
        },
        {
            "question": "Which of the following is a complex number in Python?",
            "options": [
                "1 + 2j",
                "1.2",
                "\"1+2j\"",
                "[1, 2]"
            ],
            "answer": "1 + 2j",
            "explanation": "In Python, a complex number is defined with a real part and an imaginary part, where the imaginary part is denoted by 'j'."
        },
        {
            "question": "Which of these data types is immutable in Python?",
            "options": [
                "List",
                "Dictionary",
                "Tuple",
                "Set"
            ],
            "answer": "Tuple",
            "explanation": "Tuples in Python are immutable, meaning once a tuple is created, its elements cannot be altered."
        },
        {
            "question": "What data type is the result of the expression 3 / 2 in Python 3?",
            "options": [
                "int",
                "float",
                "str",
                "complex"
            ],
            "answer": "float",
            "explanation": "In Python 3, the division of integers results in a float."
        },
        {
            "question": "How do you represent a boolean false in Python?",
            "options": [
                "False",
                "false",
                "0",
                "None"
            ],
            "answer": "False",
            "explanation": "Boolean values in Python are capitalized, so False is the correct representation."
        },
        {
            "question": "What type of data does the following represent: [\"apple\", \"banana\", \"cherry\"]?",
            "options": [
                "Tuple",
                "Set",
                "List",
                "Dictionary"
            ],
            "answer": "List",
            "explanation": "This is a list, as it is enclosed in square brackets and contains an ordered collection of items."
        },
        {
            "question": "What is the correct syntax for defining a dictionary in Python?",
            "options": [
                "{key1: value1, key2: value2}",
                "[key1: value1, key2: value2]",
                "(key1: value1, key2: value2)",
                "<key1: value1, key2: value2>"
            ],
            "answer": "{key1: value1, key2: value2}",
            "explanation": "Dictionaries in Python are defined with curly braces and consist of key-value pairs."
        },
        {
            "question": "What will be the type of x after the assignment x = {\"apple\", \"banana\", \"cherry\"}?",
            "options": [
                "List",
                "Tuple",
                "Set",
                "Dictionary"
            ],
            "answer": "Set",
            "explanation": "The given syntax represents a set in Python, which is an unordered collection of unique items."
        },
        {
            "question": "What is the output of type(10)?",
            "options": [
                "<class 'int'>",
                "<class 'float'>",
                "<class 'str'>",
                "<class 'num'>"
            ],
            "answer": "<class 'int'>",
            "explanation": "The number 10 is an integer, so its type is <class 'int'>."
        },
        {
            "question": "Which data type would you use to store a sequence of characters in Python?",
            "options": [
                "str",
                "char",
                "text",
                "varchar"
            ],
            "answer": "str",
            "explanation": "In Python, strings are used to store sequences of characters and are defined with single or double quotes."
        },
        {
            "question": "What is the output of this code: print(type({}))",
            "options": [
                "<class 'list'>",
                "<class 'set'>",
                "<class 'dict'>",
                "<class 'tuple'>"
            ],
            "answer": "<class 'dict'>",
            "explanation": "{} represents an empty dictionary in Python."
        },
        {
            "question": "Which of the following is not a valid Python data type?",
            "options": [
                "bytes",
                "bytearray",
                "frozenset",
                "arraylist"
            ],
            "answer": "arraylist",
            "explanation": "'arraylist' is not a native data type in Python, whereas bytes, bytearray, and frozenset are."
        },
        {
            "question": "What is the result of type(3.14)?",
            "options": [
                "<class 'int'>",
                "<class 'float'>",
                "<class 'decimal'>",
                "<class 'number'>"
            ],
            "answer": "<class 'float'>",
            "explanation": "3.14 is a floating-point number in Python."
        },
        {
            "question": "Which method converts a string to an integer in Python?",
            "options": [
                "int()",
                "strToInt()",
                "parse()",
                "convert()"
            ],
            "answer": "int()",
            "explanation": "The int() function is used to convert a string into an integer in Python."
        },
        {
            "question": "What will be the data type of x after x = b\"Hello\"?",
            "options": [
                "str",
                "bytes",
                "bytearray",
                "string"
            ],
            "answer": "bytes",
            "explanation": "The prefix b before the quotes indicates a bytes literal in Python."
        },
        {
            "question": "How do you create an empty tuple in Python?",
            "options": [
                "()",
                "[]",
                "{}",
                "empty()"
            ],
            "answer": "()",
            "explanation": "An empty tuple is created with an empty pair of parentheses ()."
        },
        {
            "question": "What is the output of 5 ** 2 in Python?",
            "options": [
                "25",
                "10",
                "7",
                "2.5"
            ],
            "answer": "25",
            "explanation": "The ** operator in Python is used for exponentiation. 5 ** 2 calculates 5 raised to the power of 2, which is 25."
        },
        {
            "question": "Which of the following is used for integer division in Python?",
            "options": [
                "/",
                "//",
                "%",
                "**"
            ],
            "answer": "//",
            "explanation": "The // operator in Python is used for integer (floor) division. It divides and returns the integer part of the quotient."
        },
        {
            "question": "How do you represent a hexadecimal number 1A in Python?",
            "options": [
                "0x1A",
                "1Ax",
                "1A",
                "#1A"
            ],
            "answer": "0x1A",
            "explanation": "In Python, hexadecimal numbers are represented with a leading 0x or 0X."
        },
        {
            "question": "What is the result of the expression 8 % 3 in Python?",
            "options": [
                "2",
                "2.67",
                "5",
                "1"
            ],
            "answer": "2",
            "explanation": "The % operator in Python returns the remainder of the division. 8 divided by 3 leaves a remainder of 2."
        },
        {
            "question": "What data type is the number 5.5 in Python?",
            "options": [
                "int",
                "float",
                "decimal",
                "double"
            ],
            "answer": "float",
            "explanation": "In Python, numbers with a decimal point are considered floating-point numbers."
        },
        {
            "question": "What is the type of the number 3+4j in Python?",
            "options": [
                "int",
                "float",
                "complex",
                "str"
            ],
            "answer": "complex",
            "explanation": "In Python, complex numbers are written in the form a + bj, where a is the real part and b is the imaginary part."
        },
        {
            "question": "What is the result of the expression int(7.8) in Python?",
            "options": [
                "7",
                "8",
                "7.8",
                "Error"
            ],
            "answer": "7",
            "explanation": "The int() function in Python converts a floating-point number to an integer by truncating the decimal part."
        },
        {
            "question": "Which function in Python is used to generate a range of numbers?",
            "options": [
                "range()",
                "xrange()",
                "numbers()",
                "list()"
            ],
            "answer": "range()",
            "explanation": "The range() function is used to generate a sequence of numbers in Python. xrange() was used in Python 2."
        },
        {
            "question": "What does the expression float('inf') represent in Python?",
            "options": [
                "A large integer value",
                "Infinity",
                "An error",
                "Zero"
            ],
            "answer": "Infinity",
            "explanation": "float('inf') represents positive infinity in Python. It's used to represent a value that is larger than all other values."
        },
        {
            "question": "How is scientific notation represented in Python for the number 0.000123?",
            "options": [
                "123e-6",
                "0.000123e0",
                "1.23e-4",
                "123e-4"
            ],
            "answer": "123e-6",
            "explanation": "Scientific notation in Python is represented using an 'e' or 'E' followed by the power of ten. 0.000123 is equivalent to 123e-6."
        },
        {
            "question": "What is the output of bool(\"False\") in Python?",
            "options": [
                "True",
                "False",
                "None",
                "Error"
            ],
            "answer": "True",
            "explanation": "In Python, the bool() function converts a value to a Boolean. Any non-empty string, including the string \"False\", is converted to True."
        },
        {
            "question": "Which of the following statements correctly checks if a variable x is equal to True in Python?",
            "options": [
                "if x == True:",
                "if x is True:",
                "if x:",
                "All of the above"
            ],
            "answer": "if x:",
            "explanation": "In Python, the idiomatic way to check if a variable is True is simply \"if x:\". This implicitly checks for truthiness."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "True",
                "2",
                "1",
                "Error"
            ],
            "answer": "2",
            "explanation": "In Python, the Boolean values True and False are equivalent to 1 and 0, respectively. Therefore, True + True is equivalent to 1 + 1, which is 2."
        },
        {
            "question": "What is the type of the result returned by a logical operator in Python?",
            "options": [
                "int",
                "float",
                "bool",
                "str"
            ],
            "answer": "bool",
            "explanation": "Logical operators in Python (and, or, not) return Boolean values (True or False)."
        },
        {
            "question": "What does the following expression return: not(False or True)?",
            "options": [
                "True",
                "False",
                "None",
                "Error"
            ],
            "answer": "False",
            "explanation": "The expression inside the parentheses evaluates to True, and the 'not' operator negates it, resulting in False."
        },
        {
            "question": "Which of the following is a valid Boolean expression in Python?",
            "options": [
                "1 == 1",
                "1 = 1",
                "1 != 1",
                "1 <> 1"
            ],
            "answer": "1 == 1",
            "explanation": "In Python, \"==\" is the equality operator, so 1 == 1 is a valid Boolean expression that evaluates to True."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "True",
                "False",
                "None",
                "Error"
            ],
            "answer": "True",
            "explanation": "The expression checks if x is greater than 5 and less than 15, which is True for x = 10."
        },
        {
            "question": "How do you check if a list is empty in a Pythonic way?",
            "options": [
                "if len(my_list) == 0:",
                "if not my_list:",
                "if my_list == []:",
                "All of the above"
            ],
            "answer": "if not my_list:",
            "explanation": "The most Pythonic way to check if a list is empty is \"if not my_list:\", which utilizes the truthiness of the list."
        },
        {
            "question": "What is the result of the expression bool(None)?",
            "options": [
                "True",
                "False",
                "None",
                "Error"
            ],
            "answer": "False",
            "explanation": "None is considered false in a Boolean context in Python."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "True",
                "False",
                "0",
                "None"
            ],
            "answer": "False",
            "explanation": "The number 0 is considered False in Python, so bool(0) returns False."
        },
        {
            "question": "What is the output of 10 / 3 in Python?",
            "options": [
                "3",
                "3.33",
                "3.0",
                "3.3333333333333335"
            ],
            "answer": "3.3333333333333335",
            "explanation": "The / operator in Python performs floating-point division and returns a float."
        },
        {
            "question": "How do you raise 4 to the power of 3 in Python?",
            "options": [
                "4 ^ 3",
                "4 ** 3",
                "4 * 3",
                "pow(4, 3)"
            ],
            "answer": "4 ** 3",
            "explanation": "The ** operator is used for exponentiation in Python."
        },
        {
            "question": "What is the purpose of the %= operator in Python?",
            "options": [
                "Modulus and assign",
                "Multiply and assign",
                "Modulus and compare",
                "None of the above"
            ],
            "answer": "Modulus and assign",
            "explanation": "The %= operator takes the modulus using two operands and assigns the result to the left operand."
        },
        {
            "question": "What does the comparison operator != check in Python?",
            "options": [
                "Equality",
                "Less than",
                "Greater than",
                "Not equal"
            ],
            "answer": "Not equal",
            "explanation": "The != operator checks whether two values are not equal."
        },
        {
            "question": "What is the result of the logical operation \"True or False\" in Python?",
            "options": [
                "True",
                "False",
                "None",
                "Error"
            ],
            "answer": "True",
            "explanation": "The logical 'or' operator returns True if any of the operands is True."
        },
        {
            "question": "What does the 'is' operator do in Python?",
            "options": [
                "Checks if two variables have the same value",
                "Checks if two variables are the same object",
                "Compares the memory addresses of two variables",
                "b and c"
            ],
            "answer": "b and c",
            "explanation": "The 'is' operator checks if two variables point to the same object in memory."
        },
        {
            "question": "How do you check if 'a' is in the list [1, 2, 'a', 'b'] using Python?",
            "options": [
                "'a' in [1, 2, 'a', 'b']",
                "'a' is in [1, 2, 'a', 'b']",
                "[1, 2, 'a', 'b'].contains('a')",
                "[1, 2, 'a', 'b'].has('a')"
            ],
            "answer": "'a' in [1, 2, 'a', 'b']",
            "explanation": "The 'in' operator is used to check if a value exists within an iterable."
        },
        {
            "question": "What does the bitwise operator & do in Python?",
            "options": [
                "Addition",
                "Bitwise AND",
                "Bitwise OR",
                "Assignment"
            ],
            "answer": "Bitwise AND",
            "explanation": "The & operator performs a bitwise AND operation."
        },
        {
            "question": "What is the result of 5 + 3 * 2 in Python?",
            "options": [
                "16",
                "11",
                "13",
                "10"
            ],
            "answer": "11",
            "explanation": "Python follows mathematical precedence, so multiplication is performed before addition."
        },
        {
            "question": "Which operator is used for floor division in Python?",
            "options": [
                "/",
                "//",
                "%",
                "**"
            ],
            "answer": "//",
            "explanation": "The // operator performs floor division."
        },
        {
            "question": "How do you increment the value of a variable 'x' by 1 in Python?",
            "options": [
                "x++",
                "x += 1",
                "x =+ 1",
                "++x"
            ],
            "answer": "x += 1",
            "explanation": "Python uses += for incrementing a value. The ++ operator is not available in Python."
        },
        {
            "question": "What will be the result of '12 > 9 > 7' in Python?",
            "options": [
                "True",
                "False",
                "SyntaxError",
                "None"
            ],
            "answer": "True",
            "explanation": "Python allows chain comparison operations, which in this case checks if 12 is greater than 9 and if 9 is greater than 7."
        },
        {
            "question": "Which statement correctly checks if two variables a and b are equal in Python?",
            "options": [
                "if a = b:",
                "if a == b:",
                "if a === b:",
                "if a equals b:"
            ],
            "answer": "if a == b:",
            "explanation": "The double equals (==) operator is used for equality comparison in Python."
        },
        {
            "question": "What does 'not True' evaluate to in Python?",
            "options": [
                "0",
                "False",
                "''",
                "None"
            ],
            "answer": "False",
            "explanation": "The 'not' operator inverts the Boolean value, so 'not True' evaluates to False."
        },
        {
            "question": "Which operator can be used to determine if two variables refer to the same object?",
            "options": [
                "==",
                "===",
                "is",
                "equals"
            ],
            "answer": "is",
            "explanation": "The 'is' operator checks identity, not equality, and determines if two variables refer to the same object."
        },
        {
            "question": "What is the output of the expression ['apple', 'banana'] in ['apple', 'banana', 'cherry']?",
            "options": [
                "True",
                "False",
                "Error",
                "None"
            ],
            "answer": "False",
            "explanation": "The 'in' operator checks for the presence of a single element in an iterable, not a sublist."
        },
        {
            "question": "What is the result of the bitwise shift right operation 4 >> 1 in Python?",
            "options": [
                "2",
                "8",
                "1",
                "16"
            ],
            "answer": "2",
            "explanation": "The >> operator is the bitwise shift right operator, shifting the bits of 4 to the right by 1, which results in 2."
        },
        {
            "question": "What does 'a *= 2' do if a = 5?",
            "options": [
                "Multiplies a by 2 and assigns the result to a",
                "Raises a to the power of 2",
                "Doubles the type of a",
                "None of the above"
            ],
            "answer": "Multiplies a by 2 and assigns the result to a",
            "explanation": "The *= operator is a compound assignment operator that multiplies the variable by a value and assigns the result to the variable."
        },
        {
            "question": "What is the result of the expression '10 == \"10\"' in Python?",
            "options": [
                "True",
                "False",
                "SyntaxError",
                "TypeError"
            ],
            "answer": "False",
            "explanation": "Python does not automatically convert between types for comparison, so an integer compared to a string will result in False."
        },
        {
            "question": "What does the expression 2 | 4 evaluate to in Python?",
            "options": [
                "6",
                "8",
                "0",
                "2"
            ],
            "answer": "6",
            "explanation": "The | operator is a bitwise OR. 2 in binary is 010, and 4 is 100. The bitwise OR results in 110, which is 6 in decimal."
        },
        {
            "question": "How is a tuple with a single element defined in Python?",
            "options": [
                "(item,)",
                "(item)",
                "item,",
                "[item]"
            ],
            "answer": "(item,)",
            "explanation": "In Python, a single element tuple must have a comma after the item, otherwise, it's not recognized as a tuple."
        },
        {
            "question": "How do you access the second element of a tuple 'my_tuple'?",
            "options": [
                "my_tuple[1]",
                "my_tuple[2]",
                "my_tuple.get(1)",
                "my_tuple(1)"
            ],
            "answer": "my_tuple[1]",
            "explanation": "Tuple indices start at 0. So the second element is accessed using my_tuple[1]."
        },
        {
            "question": "Which of the following is true about modifying tuples?",
            "options": [
                "Tuples can be resized",
                "Elements of a tuple can be changed",
                "Tuples can never be modified",
                "Only string elements in a tuple can be changed"
            ],
            "answer": "Tuples can never be modified",
            "explanation": "Tuples are immutable in Python, meaning their size and the values of elements cannot be changed."
        },
        {
            "question": "How do you unpack the values of a tuple 't' into variables a, b, and c?",
            "options": [
                "a, b, c = t",
                "a, b, c = unpack(t)",
                "t.unpack(a, b, c)",
                "a, b, c = t[]"
            ],
            "answer": "a, b, c = t",
            "explanation": "The syntax a, b, c = t automatically unpacks the values of tuple 't' into variables a, b, and c."
        },
        {
            "question": "How do you loop through a tuple named 'my_tuple' to print each value?",
            "options": [
                "for i in my_tuple: print(i)",
                "for i in range(len(my_tuple)): print(my_tuple[i])",
                "Both a and b",
                "None of the above"
            ],
            "answer": "Both a and b",
            "explanation": "Both methods are valid. You can loop directly through the tuple items or loop through the tuple indices."
        },
        {
            "question": "How do you concatenate tuple1 and tuple2 in Python?",
            "options": [
                "tuple1 + tuple2",
                "tuple1 & tuple2",
                "tuple1.concat(tuple2)",
                "concat(tuple1, tuple2)"
            ],
            "answer": "tuple1 + tuple2",
            "explanation": "The + operator is used to concatenate tuples in Python."
        },
        {
            "question": "Which method would you use to count the occurrences of an element in a tuple?",
            "options": [
                "count()",
                "index()",
                "find()",
                "lookup()"
            ],
            "answer": "count()",
            "explanation": "The count() method returns the number of times an element appears in a tuple."
        },
        {
            "question": "What is the output of ('Hi!') * 4 in Python?",
            "options": [
                "('Hi!', 'Hi!', 'Hi!', 'Hi!')",
                "'Hi!Hi!Hi!Hi!'",
                "Error",
                "('Hi!' * 4)"
            ],
            "answer": "'Hi!Hi!Hi!Hi!'",
            "explanation": "Multiplying a string by an integer n concatenates the string n times."
        },
        {
            "question": "How do you convert a list [1, 2, 3] to a tuple in Python?",
            "options": [
                "tuple([1, 2, 3])",
                "([1, 2, 3]).toTuple()",
                "convert([1, 2, 3], tuple)",
                "Tuple([1, 2, 3])"
            ],
            "answer": "tuple([1, 2, 3])",
            "explanation": "The tuple() function is used to convert a list to a tuple."
        },
        {
            "question": "What is the result of ('a', 'b') < ('c', 'd') in Python?",
            "options": [
                "True",
                "False",
                "Error",
                "None"
            ],
            "answer": "True",
            "explanation": "Tuple comparison is performed element by element. 'a' is less than 'c', so the expression is True."
        },
        {
            "question": "What does my_tuple.index('a') return if my_tuple = ('a', 'b', 'a')?",
            "options": [
                "0",
                "1",
                "2",
                "3"
            ],
            "answer": "0",
            "explanation": "The index() method returns the index of the first occurrence of the value."
        },
        {
            "question": "What does len(('a', 'b', 'c')) return?",
            "options": [
                "3",
                "2",
                "1",
                "Error"
            ],
            "answer": "3",
            "explanation": "len() returns the number of elements in the tuple."
        },
        {
            "question": "How do you create a nested tuple?",
            "options": [
                "((1, 2), (3, 4))",
                "[1, 2], [3, 4]",
                "(1, 2) and (3, 4)",
                "Nested(1, 2, 3, 4)"
            ],
            "answer": "((1, 2), (3, 4))",
            "explanation": "Nested tuples are created by placing tuples inside another tuple."
        },
        {
            "question": "What will ('Hello',) * 2 produce?",
            "options": [
                "('Hello', 'Hello')",
                "('HelloHello',)",
                "('Hello') * 2",
                "Error"
            ],
            "answer": "('Hello', 'Hello')",
            "explanation": "Multiplying a tuple by an integer n repeats the tuple n times."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "(1, 2, ['x', 4])",
                "Error",
                "(1, 'x', [3, 4])",
                "(1, 2, [3, 'x'])"
            ],
            "answer": "(1, 2, ['x', 4])",
            "explanation": "While tuples are immutable, their mutable elements (like lists) can be modified."
        },
        {
            "question": "What is a set in Python?",
            "options": [
                "A collection of key-value pairs",
                "An ordered collection of unique elements",
                "An unordered collection of unique elements",
                "A mutable sequence of characters"
            ],
            "answer": "An unordered collection of unique elements",
            "explanation": "A set in Python is an unordered collection of unique elements, meaning it does not maintain any order and does not allow duplicates."
        },
        {
            "question": "How do you create an empty set in Python?",
            "options": [
                "set = {}",
                "set = set()",
                "set = []",
                "set = ()"
            ],
            "answer": "set = set()",
            "explanation": "An empty set is created using the set() function. {} creates an empty dictionary, not a set."
        },
        {
            "question": "Which of the following is a valid set in Python?",
            "options": [
                "{1, 2, 2, 3}",
                "{1: 'a', 2: 'b'}",
                "{1, [2, 3], 4}",
                "{(1, 2), (3, 4)}"
            ],
            "answer": "{(1, 2), (3, 4)}",
            "explanation": "Sets can contain immutable elements like tuples but cannot contain mutable elements like lists. Sets automatically remove duplicate elements."
        },
        {
            "question": "How do you add an item '4' to a set named 'my_set'?",
            "options": [
                "my_set.add(4)",
                "my_set.append(4)",
                "my_set.insert(4)",
                "my_set.push(4)"
            ],
            "answer": "my_set.add(4)",
            "explanation": "The add() method is used to add a single element to a set."
        },
        {
            "question": "How do you remove an item '3' from a set 'my_set' if you're unsure it exists?",
            "options": [
                "my_set.remove(3)",
                "my_set.discard(3)",
                "del my_set[3]",
                "my_set.pop(3)"
            ],
            "answer": "my_set.discard(3)",
            "explanation": "discard() removes an element if it exists in the set, but does not raise an error if it doesn't, unlike remove()."
        },
        {
            "question": "How can you loop through a set 'my_set' to print all its elements?",
            "options": [
                "for item in my_set: print(item)",
                "for i in range(len(my_set)): print(my_set[i])",
                "while my_set: print(my_set.pop())",
                "print(my_set)"
            ],
            "answer": "for item in my_set: print(item)",
            "explanation": "Looping directly through the set using a for loop is the correct method to access each element."
        },
        {
            "question": "How do you create a union of two sets 'set1' and 'set2'?",
            "options": [
                "set1.union(set2)",
                "set1 + set2",
                "set1.join(set2)",
                "set1 && set2"
            ],
            "answer": "set1.union(set2)",
            "explanation": "The union() method returns a new set with all elements from both sets."
        },
        {
            "question": "What does the set method intersection() do?",
            "options": [
                "Combines two sets",
                "Returns the common elements of two sets",
                "Removes all elements of another set from one set",
                "Duplicates the set"
            ],
            "answer": "Returns the common elements of two sets",
            "explanation": "intersection() returns a set containing only elements that are common to both sets."
        },
        {
            "question": "How do you check if 'my_set' is a superset of another set 'another_set'?",
            "options": [
                "my_set.issuperset(another_set)",
                "my_set > another_set",
                "my_set == another_set",
                "my_set.contains(another_set)"
            ],
            "answer": "my_set.issuperset(another_set)",
            "explanation": "The method issuperset() checks if the set has every element of the other set."
        },
        {
            "question": "How do you remove all items from a set 'my_set'?",
            "options": [
                "my_set.remove()",
                "my_set.discard()",
                "my_set.clear()",
                "del my_set"
            ],
            "answer": "my_set.clear()",
            "explanation": "The clear() method removes all items from a set, leaving it empty."
        },
        {
            "question": "Which method finds the difference between two sets?",
            "options": [
                "difference()",
                "subtract()",
                "minus()",
                "remove()"
            ],
            "answer": "difference()",
            "explanation": "difference() returns a set containing elements that are in the first set but not in the second."
        },
        {
            "question": "What does set.pop() do?",
            "options": [
                "Returns and removes a random element from the set",
                "Removes the last element of the set",
                "Deletes the set",
                "Removes the first element of the set"
            ],
            "answer": "Returns and removes a random element from the set",
            "explanation": "pop() removes and returns a random element from the set. Sets are unordered, so there is no 'first' or 'last' element."
        },
        {
            "question": "How do you check if two sets 'set1' and 'set2' have no elements in common?",
            "options": [
                "set1.isdisjoint(set2)",
                "set1.intersection(set2) == set()",
                "set1 == set2",
                "both a and b"
            ],
            "answer": "both a and b",
            "explanation": "isdisjoint() checks if two sets have no elements in common. An empty intersection also indicates no common elements."
        },
        {
            "question": "What is the output of len({1, 2, 3, 4, 4})?",
            "options": [
                "5",
                "4",
                "3",
                "Error"
            ],
            "answer": "4",
            "explanation": "Sets do not contain duplicate elements. The set {1, 2, 3, 4, 4} actually is {1, 2, 3, 4}."
        },
        {
            "question": "What is the result of {1, 2, 3} – {2, 3, 4}?",
            "options": [
                "{1, 4}",
                "{2, 3}",
                "{1}",
                "{1, 2, 3, 4}"
            ],
            "answer": "{1}",
            "explanation": "The – operator returns the difference of two sets, i.e., elements present in the first set but not in the second."
        },
        {
            "question": "What is a dictionary in Python?",
            "options": [
                "An ordered collection of items",
                "A collection of key-value pairs",
                "A collection of unique items",
                "A mutable sequence of characters"
            ],
            "answer": "A collection of key-value pairs",
            "explanation": "A dictionary in Python is a collection of key-value pairs, where each key is unique and is used to access its corresponding value."
        },
        {
            "question": "How do you access the value associated with the key 'color' in a dictionary 'my_dict'?",
            "options": [
                "my_dict[color]",
                "my_dict.get(color)",
                "my_dict('color')",
                "my_dict.get('color')"
            ],
            "answer": "my_dict.get('color')",
            "explanation": "The get() method is used to access the value for a given key in a dictionary. It returns None instead of an error if the key doesn't exist."
        },
        {
            "question": "How do you change the value associated with the key 'age' to 30 in the dictionary 'person'?",
            "options": [
                "person['age'] = 30",
                "person.set('age', 30)",
                "person(age, 30)",
                "person.update('age', 30)"
            ],
            "answer": "person['age'] = 30",
            "explanation": "To change or add a key-value pair in a dictionary, use the syntax dictionary[key] = value."
        },
        {
            "question": "How do you add a new key-value pair 'grade': 'A' to a dictionary 'student'?",
            "options": [
                "student.add('grade', 'A')",
                "student['grade'] = 'A'",
                "student.put('grade', 'A')",
                "student.append('grade', 'A')"
            ],
            "answer": "student['grade'] = 'A'",
            "explanation": "Adding a new key-value pair to a dictionary is done by assigning a value to a new key in the dictionary."
        },
        {
            "question": "How can you remove the key 'address' from a dictionary 'details'?",
            "options": [
                "del details['address']",
                "details.remove('address')",
                "details.pop('address')",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "The del statement or the pop() method can be used to remove a key-value pair from a dictionary."
        },
        {
            "question": "What does the keys() method return in a dictionary?",
            "options": [
                "A list of values",
                "A list of keys",
                "A list of tuples",
                "A list of key-value pairs"
            ],
            "answer": "A list of keys",
            "explanation": "The keys() method returns a view object that displays a list of all the keys in the dictionary."
        },
        {
            "question": "What is the correct way to copy a dictionary 'original_dict' to 'new_dict'?",
            "options": [
                "new_dict = original_dict",
                "new_dict = original_dict.copy()",
                "new_dict = copy(original_dict)",
                "new_dict = dict(original_dict)"
            ],
            "answer": "new_dict = original_dict.copy()",
            "explanation": "The copy() method creates a shallow copy of the dictionary."
        },
        {
            "question": "How do you create a nested dictionary representing a family tree?",
            "options": [
                "{'parent': {'child1': {}, 'child2': {}}}",
                "['parent', ['child1', 'child2']]",
                "('parent', ('child1', 'child2'))",
                "{{'parent'}, {'child1', 'child2'}}"
            ],
            "answer": "{'parent': {'child1': {}, 'child2': {}}}",
            "explanation": "Nested dictionaries are created by defining a dictionary as a value within another dictionary."
        },
        {
            "question": "Which method merges two dictionaries into one?",
            "options": [
                "merge()",
                "join()",
                "update()",
                "concatenate()"
            ],
            "answer": "update()",
            "explanation": "The update() method adds the key-value pairs from one dictionary into another."
        },
        {
            "question": "How do you retrieve all values from a dictionary 'my_dict'?",
            "options": [
                "my_dict.values()",
                "my_dict.getValues()",
                "my_dict.keys()",
                "my_dict.items()"
            ],
            "answer": "my_dict.values()",
            "explanation": "The values() method returns a view object that displays a list of all the values in the dictionary."
        },
        {
            "question": "How do you check if a key 'name' exists in a dictionary 'person'?",
            "options": [
                "'name' in person",
                "person.has_key('name')",
                "person.containsKey('name')",
                "'name' exists in person"
            ],
            "answer": "'name' in person",
            "explanation": "The in operator is used to check if a key exists in a dictionary."
        },
        {
            "question": "What is the output of len({'a': 1, 'b': 2, 'c': 3})?",
            "options": [
                "3",
                "6",
                "1",
                "2"
            ],
            "answer": "3",
            "explanation": "The len() function returns the number of key-value pairs in a dictionary."
        },
        {
            "question": "How do you remove all items from a dictionary 'data'?",
            "options": [
                "data.remove()",
                "data.clear()",
                "del data",
                "data.delete()"
            ],
            "answer": "data.clear()",
            "explanation": "The clear() method removes all items from a dictionary, leaving it empty."
        },
        {
            "question": "What is the result of {'a': 1, 'b': 2} + {'c': 3} in Python?",
            "options": [
                "{'a': 1, 'b': 2, 'c': 3}",
                "TypeError",
                "{'a': 1, 'b': 2}",
                "{'c': 3}"
            ],
            "answer": "TypeError",
            "explanation": "The + operator is not defined for dictionaries in Python."
        },
        {
            "question": "What does the popitem() method do on a dictionary?",
            "options": [
                "Removes an arbitrary key-value pair",
                "Removes the last added key-value pair",
                "Pops the first key-value pair",
                "Pops a specified key-value pair"
            ],
            "answer": "Removes an arbitrary key-value pair",
            "explanation": "The popitem() method removes and returns a (key, value) pair as a 2-tuple. Pairs are returned in LIFO order."
        },
        {
            "question": "How do you get the value associated with the key 'age' or return 0 if the key does not exist?",
            "options": [
                "my_dict['age'] or 0",
                "my_dict.get('age', 0)",
                "my_dict.fetch('age', 0)",
                "my_dict.default('age', 0)"
            ],
            "answer": "my_dict.get('age', 0)",
            "explanation": "The get() method returns the value for the specified key or the second argument if the key doesn't exist."
        },
        {
            "question": "What is the output of {'a': 1, 'b': 2}.get('c', 3)?",
            "options": [
                "1",
                "2",
                "3",
                "None"
            ],
            "answer": "3",
            "explanation": "Since 'c' is not a key in the dictionary, the get() method returns the default value, which is 3."
        },
        {
            "question": "How do you create a dictionary from two lists – keys = ['a', 'b', 'c'] and values = [1, 2, 3]?",
            "options": [
                "dict(keys, values)",
                "zip(keys, values)",
                "dict(zip(keys, values))",
                "{keys: values}"
            ],
            "answer": "dict(zip(keys, values))",
            "explanation": "The zip() function is used to combine two lists into a single iterator of tuples, which can be converted into a dictionary using the dict() function."
        },
        {
            "question": "What does the items() method in a dictionary return?",
            "options": [
                "A list of tuples containing key-value pairs",
                "A view of key-value pairs",
                "A list of keys",
                "A list of values"
            ],
            "answer": "A view of key-value pairs",
            "explanation": "The items() method returns a view object that displays a list of dictionary's (key, value) tuple pairs."
        },
        {
            "question": "How do you check if a dictionary is empty?",
            "options": [
                "len(my_dict) == 0",
                "my_dict == {}",
                "isEmpty(my_dict)",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "You can check if a dictionary is empty by comparing it with an empty dictionary {} or checking if its length is zero."
        },
        {
            "question": "What is the correct syntax for an if statement in Python?",
            "options": [
                "if (x > 10) { }",
                "if x > 10:",
                "if x > 10 then:",
                "if (x > 10):"
            ],
            "answer": "if x > 10:",
            "explanation": "In Python, the syntax for an if statement is 'if' followed by the condition, a colon, and then the block of code to execute if the condition is true."
        },
        {
            "question": "How do you check for multiple conditions in a single if statement?",
            "options": [
                "if x > 10 and y < 5:",
                "if x > 10 && y < 5:",
                "if (x > 10) && (y < 5):",
                "if x > 10 & y < 5:"
            ],
            "answer": "if x > 10 and y < 5:",
            "explanation": "Python uses 'and' to check if multiple conditions are true."
        },
        {
            "question": "How would you write an if statement that executes when x is not equal to 10?",
            "options": [
                "if x != 10:",
                "if x =! 10:",
                "if x <> 10:",
                "if x not 10:"
            ],
            "answer": "if x != 10:",
            "explanation": "The '!=' operator is used in Python to check if two values are not equal."
        },
        {
            "question": "Which keyword is used for executing a block of code if the if condition is false?",
            "options": [
                "else",
                "otherwise",
                "elif",
                "except"
            ],
            "answer": "else",
            "explanation": "The 'else' keyword is used in Python to execute a block of code when the if condition is false."
        },
        {
            "question": "How do you implement multiple conditions that trigger different blocks of code?",
            "options": [
                "if … elif … else",
                "if … else if … else",
                "if … then … else",
                "if … or … else"
            ],
            "answer": "if … elif … else",
            "explanation": "Python uses 'elif', short for 'else if', for multiple, mutually exclusive conditions in an if statement."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "Greater",
                "Equal",
                "Lesser",
                "No output"
            ],
            "answer": "Equal",
            "explanation": "The code checks if x is greater than, equal to, or less than 10. Since x is 10, it prints \"Equal\"."
        },
        {
            "question": "How do you write a one-line if statement in Python?",
            "options": [
                "if x > 10: print(x)",
                "print(x) if x > 10",
                "print(x) where x > 10",
                "(print x) if x > 10"
            ],
            "answer": "print(x) if x > 10",
            "explanation": "Python allows one-line if statements, where the action is before the condition, separated by 'if'."
        },
        {
            "question": "What is the correct way to check if a list is empty in an if statement?",
            "options": [
                "if len(my_list) == 0:",
                "if my_list == []:",
                "if not my_list:",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "All three methods are correct for checking if a list is empty in Python."
        },
        {
            "question": "Can an if statement contain only an else clause without elif?",
            "options": [
                "Yes",
                "No",
                "Only inside a function",
                "Only if there is no code in the else clause"
            ],
            "answer": "Yes",
            "explanation": "An if statement can have an else clause without an elif, as elif is optional."
        },
        {
            "question": "What is the result of the following code?",
            "options": [
                "A",
                "B",
                "C",
                "No output"
            ],
            "answer": "C",
            "explanation": "The code uses nested if statements. Since x is 5, which is not greater than 10 or 7, it prints \"C\"."
        },
        {
            "question": "Which keyword allows you to check if a condition is false in an if statement?",
            "options": [
                "not",
                "false",
                "invert",
                "negate"
            ],
            "answer": "not",
            "explanation": "The 'not' keyword is used to check if a condition is false in Python."
        },
        {
            "question": "How do you check for the existence of a key in a dictionary within an if statement?",
            "options": [
                "if my_dict.has_key('key'):",
                "if 'key' in my_dict:",
                "if my_dict['key']:",
                "if my_dict.exists('key'):"
            ],
            "answer": "if 'key' in my_dict:",
            "explanation": "The syntax 'if key in dictionary:' is used to check if a key exists in a dictionary."
        },
        {
            "question": "What is the basic structure of a while loop in Python?",
            "options": [
                "while condition: statement",
                "while (condition) {statement}",
                "while condition do: statement",
                "while condition [statement]"
            ],
            "answer": "while condition: statement",
            "explanation": "In Python, a while loop is written as 'while' followed by a condition, a colon, and then the statement(s) to execute."
        },
        {
            "question": "How do you ensure a while loop runs at least once regardless of the condition?",
            "options": [
                "Using a do-while loop",
                "By setting the condition to True initially",
                "It's not possible in Python",
                "By writing the loop body before the condition"
            ],
            "answer": "It's not possible in Python",
            "explanation": "Python doesn't have a do-while loop construct that guarantees at least one execution of the loop body."
        },
        {
            "question": "What does the 'break' statement do in a while loop?",
            "options": [
                "Pauses the loop",
                "Stops the loop and exits it",
                "Skips the current iteration",
                "Breaks the condition"
            ],
            "answer": "Stops the loop and exits it",
            "explanation": "The 'break' statement is used to exit a while loop immediately, regardless of the condition."
        },
        {
            "question": "What is the purpose of the 'continue' statement in a while loop?",
            "options": [
                "To continue the loop indefinitely",
                "To skip the current iteration and continue with the next",
                "To pause and wait for user input",
                "To reset the loop condition"
            ],
            "answer": "To skip the current iteration and continue with the next",
            "explanation": "The 'continue' statement skips the remaining code in the current iteration and proceeds to the next iteration of the loop."
        },
        {
            "question": "How can you use an else statement with a while loop?",
            "options": [
                "To execute a block of code after the while loop condition becomes False",
                "To handle exceptions in the while loop",
                "To create an alternative loop if the while loop condition is False",
                "To execute a block of code when the while loop condition is True"
            ],
            "answer": "To execute a block of code after the while loop condition becomes False",
            "explanation": "In Python, the else block after a while loop is executed when the loop condition becomes False."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "5 4 3",
                "5 4",
                "5 4 3 2",
                "Infinite loop"
            ],
            "answer": "5 4",
            "explanation": "The loop decrements x and prints its value as long as x is greater than 3."
        },
        {
            "question": "How do you create an infinite loop?",
            "options": [
                "while True:",
                "while False:",
                "while 1 == 1:",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "An infinite loop can be created by using 'while True:' or any condition that always evaluates to True."
        },
        {
            "question": "What is the role of the 'else' clause in a while loop?",
            "options": [
                "To execute code when the loop condition is initially False",
                "To add another condition to the loop",
                "To execute code when the loop exits without encountering a break",
                "To catch exceptions in the loop"
            ],
            "answer": "To execute code when the loop exits without encountering a break",
            "explanation": "The else clause in a while loop is executed when the loop terminates naturally, without hitting a break statement."
        },
        {
            "question": "What happens if 'continue' is executed in a while loop?",
            "options": [
                "The loop terminates immediately",
                "The current iteration stops, and the loop restarts from the next iteration",
                "The loop skips to the else block",
                "The loop condition is re-evaluated"
            ],
            "answer": "The current iteration stops, and the loop restarts from the next iteration",
            "explanation": "The 'continue' statement causes the loop to immediately start the next iteration."
        },
        {
            "question": "What does the following code do?",
            "options": [
                "Prints \"Loop completed\"",
                "Exits the loop when x equals 3",
                "Results in an infinite loop",
                "Prints \"Loop completed\" after exiting the loop"
            ],
            "answer": "Exits the loop when x equals 3",
            "explanation": "The loop is terminated by the break statement when x equals 3, so the else block is not executed."
        },
        {
            "question": "How can a while loop be terminated prematurely?",
            "options": [
                "Using the 'exit' statement",
                "Using the 'break' statement",
                "Setting the loop condition to False",
                "Using the 'stop' statement"
            ],
            "answer": "Using the 'break' statement",
            "explanation": "The 'break' statement is used to exit a while loop before the condition becomes False."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "1 2 4 5",
                "1 2 3 4 5",
                "1 2",
                "1 2 3 4"
            ],
            "answer": "1 2 4 5",
            "explanation": "The 'continue' statement skips the print statement when count is 3, so 3 is not printed."
        },
        {
            "question": "What is the basic structure of a for loop in Python?",
            "options": [
                "for item in iterable:",
                "for (item in iterable)",
                "for each item in iterable:",
                "for item <= iterable:"
            ],
            "answer": "for item in iterable:",
            "explanation": "In Python, a for loop iterates over items of an iterable using the syntax 'for item in iterable:'."
        },
        {
            "question": "How do you iterate over a range of numbers from 0 to 4 in Python?",
            "options": [
                "for i in range(0, 5):",
                "for i in range(5):",
                "for i in range(1, 5):",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "Both range(5) and range(0, 5) produce a sequence of numbers from 0 to 4."
        },
        {
            "question": "How can you loop through a dictionary and access both keys and values?",
            "options": [
                "for key in my_dict:",
                "for key, value in my_dict.items():",
                "for key in my_dict.keys() and value in my_dict.values():",
                "for key, value in my_dict:"
            ],
            "answer": "for key, value in my_dict.items():",
            "explanation": "The items() method returns key-value pairs, which can be unpacked in a for loop."
        },
        {
            "question": "What does the 'break' statement do inside a for loop?",
            "options": [
                "Pauses the loop execution",
                "Skips the current iteration",
                "Exits the loop prematurely",
                "Restarts the loop"
            ],
            "answer": "Exits the loop prematurely",
            "explanation": "The 'break' statement is used to exit the for loop before it has iterated over all items."
        },
        {
            "question": "What is the role of the 'continue' statement in a for loop?",
            "options": [
                "To stop the loop",
                "To skip the current iteration and continue with the next",
                "To pause loop execution",
                "To terminate the loop immediately"
            ],
            "answer": "To skip the current iteration and continue with the next",
            "explanation": "The 'continue' statement skips the rest of the code inside a loop for the current iteration."
        },
        {
            "question": "How do you iterate over both the elements of a list and their indices?",
            "options": [
                "for i, item in enumerate(my_list):",
                "for i in range(len(my_list)):",
                "for item in my_list:",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "You can use enumerate(my_list) or loop over the indices using range(len(my_list))."
        },
        {
            "question": "What is the correct syntax for iterating over a list using a for loop?",
            "options": [
                "for item in list:",
                "for item <= list:",
                "for item = list[0] to list[-1]:",
                "for each item in list:"
            ],
            "answer": "for item in list:",
            "explanation": "The syntax for iterating over a list is 'for item in list:'."
        },
        {
            "question": "How do you loop through the characters of a string 'hello'?",
            "options": [
                "for char in 'hello':",
                "for char in range(len('hello')):",
                "for char in enumerate('hello'):",
                "for char <= 'hello':"
            ],
            "answer": "for char in 'hello':",
            "explanation": "You can loop through a string directly by iterating over its characters."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "0 1 2 Done",
                "0 1 2",
                "Done",
                "0 1"
            ],
            "answer": "0 1 2 Done",
            "explanation": "The for loop iterates over 0, 1, 2, and then the else block is executed, printing \"Done\"."
        },
        {
            "question": "How can you loop through a tuple (1, 2, 3) and print each number?",
            "options": [
                "for n in (1, 2, 3): print(n)",
                "for n <= (1, 2, 3): print(n)",
                "for n = 1 to 3: print(n)",
                "for each n in (1, 2, 3): print(n)"
            ],
            "answer": "for n in (1, 2, 3): print(n)",
            "explanation": "You can iterate through a tuple by directly looping over its elements."
        },
        {
            "question": "How do you create a nested for loop to iterate over a 2×2 matrix [[1,2],[3,4]]?",
            "options": [
                "for i in matrix: for j in i: print(j)",
                "for i in range(len(matrix)): for j in range(len(matrix[i])): print(matrix[i][j])",
                "for [i, j] in matrix: print(i, j)",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "Both methods correctly iterate over a nested list or matrix."
        },
        {
            "question": "What is the purpose of the 'else' clause in a for loop?",
            "options": [
                "To execute code when the loop condition is initially False",
                "To execute code when the loop exits without encountering a break",
                "To add an additional condition to the loop",
                "To execute code at the end of each iteration"
            ],
            "answer": "To execute code when the loop exits without encountering a break",
            "explanation": "In Python, the else block in a for loop is executed when the loop completes normally without a break."
        },
        {
            "question": "How is a function defined in Python?",
            "options": [
                "function myFunction():",
                "def myFunction():",
                "create myFunction():",
                "make myFunction():"
            ],
            "answer": "def myFunction()",
            "explanation": "In Python, a function is defined using the 'def' keyword followed by the function name and parentheses."
        },
        {
            "question": "How do you call a function named 'myFunction' in Python?",
            "options": [
                "call myFunction()",
                "myFunction()",
                "execute myFunction()",
                "run myFunction()"
            ],
            "answer": "myFunction()",
            "explanation": "A function is called by writing its name followed by parentheses."
        },
        {
            "question": "What is the correct way to define a function with one parameter 'x' in Python?",
            "options": [
                "def myFunction(x):",
                "def myFunction parameter x:",
                "def myFunction with x:",
                "def myFunction: x"
            ],
            "answer": "def myFunction(x):",
            "explanation": "Function parameters are specified within the parentheses in the function definition."
        },
        {
            "question": "How do you return a value from a function in Python?",
            "options": [
                "return value",
                "output value",
                "result value",
                "give value"
            ],
            "answer": "return value",
            "explanation": "The 'return' statement is used to return a value from a function."
        },
        {
            "question": "What is a default parameter in Python functions?",
            "options": [
                "A parameter that is optional",
                "A parameter that must be provided",
                "A parameter that has a default value",
                "The first parameter in a function"
            ],
            "answer": "A parameter that has a default value",
            "explanation": "Default parameters are those that have a default value and can be omitted when calling the function."
        },
        {
            "question": "How do you create a function with variable number of arguments in Python?",
            "options": [
                "def myFunction(*args):",
                "def myFunction(…):",
                "def myFunction(args[]):",
                "def myFunction(varargs):"
            ],
            "answer": "def myFunction(*args):",
            "explanation": "The *args syntax is used to pass a variable number of arguments to a function."
        },
        {
            "question": "What does a lambda function in Python do?",
            "options": [
                "Iterates over a sequence",
                "Creates a new data type",
                "Defines a small anonymous function",
                "Initializes a global variable"
            ],
            "answer": "Defines a small anonymous function",
            "explanation": "Lambda functions are small anonymous functions defined using the lambda keyword."
        },
        {
            "question": "How do you specify a docstring in a Python function?",
            "options": [
                "# This is a docstring",
                "/* This is a docstring */",
                "<!– This is a docstring –>",
                "\"\"\"This is a docstring\"\"\""
            ],
            "answer": "\"\"\"This is a docstring\"\"\"",
            "explanation": "Docstrings are specified using triple quotes at the beginning of a function."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "None",
                "0",
                "\"\"",
                "Error"
            ],
            "answer": "None",
            "explanation": "The pass statement in a function does nothing, and a function without a return statement returns None by default."
        },
        {
            "question": "How do you define a function that takes an unlimited number of keyword arguments?",
            "options": [
                "def myFunction(**kwargs):",
                "def myFunction(*kwargs):",
                "def myFunction(kwargs**):",
                "def myFunction(**args):"
            ],
            "answer": "def myFunction(**kwargs):",
            "explanation": "**kwargs allows passing a variable number of keyword arguments to a function."
        },
        {
            "question": "What is recursion in Python?",
            "options": [
                "A function calling another function",
                "A function that never ends",
                "A function calling itself",
                "A function iterating over a loop"
            ],
            "answer": "A function calling itself",
            "explanation": "Recursion occurs when a function calls itself."
        },
        {
            "question": "How do you make a variable defined inside a function accessible outside the function?",
            "options": [
                "Use the global keyword",
                "Define the variable as static",
                "Return the variable",
                "Declare the variable outside the function"
            ],
            "answer": "Use the global keyword",
            "explanation": "The global keyword allows a variable defined inside a function to be accessible globally."
        },
        {
            "question": "What is an anonymous function in Python?",
            "options": [
                "A function defined without a name",
                "A function defined inside another function",
                "A function with no parameters",
                "A function that returns None"
            ],
            "answer": "A function defined without a name",
            "explanation": "Anonymous functions, also known as lambda functions, are defined without a name."
        },
        {
            "question": "What is a function decorator in Python?",
            "options": [
                "A tool to add functionality to an existing function",
                "A comment that describes a function",
                "A function that deletes other functions",
                "A syntax for defining multiple functions at once"
            ],
            "answer": "A tool to add functionality to an existing function",
            "explanation": "Decorators are used in Python to modify or extend the behavior of functions or methods."
        },
        {
            "question": "What does the 'yield' keyword do in Python?",
            "options": [
                "Pauses the function and saves its state",
                "Stops the function permanently",
                "Returns a value and exits the function",
                "Skips the iteration in a loop"
            ],
            "answer": "Pauses the function and saves its state",
            "explanation": "The 'yield' keyword is used in generator functions to pause the function execution and send a value back to the caller, but retains enough state to enable the function to resume where it left off."
        },
        {
            "question": "What is a lambda function in Python?",
            "options": [
                "A built-in function",
                "An anonymous function defined with the lambda keyword",
                "A special type of recursive function",
                "A function that can only be used once"
            ],
            "answer": "An anonymous function defined with the lambda keyword",
            "explanation": "A lambda function in Python is a small anonymous function defined with the lambda keyword."
        },
        {
            "question": "What is the correct syntax for a lambda function that adds two numbers, a and b?",
            "options": [
                "lambda a, b: a + b",
                "lambda (a, b): a + b",
                "function(a, b): return a + b",
                "(lambda a, b: a + b)"
            ],
            "answer": "lambda a, b: a + b",
            "explanation": "The correct syntax for a lambda function is 'lambda' followed by the parameters, a colon, and the expression."
        },
        {
            "question": "How do you call a lambda function that multiplies two numbers?",
            "options": [
                "(lambda a, b: a * b)(5, 3)",
                "lambda a, b: a * b(5, 3)",
                "call(lambda a, b: a * b, 5, 3)",
                "lambda(5, 3, a * b)"
            ],
            "answer": "(lambda a, b: a * b)(5, 3)",
            "explanation": "A lambda function is called by enclosing it and its arguments in parentheses."
        },
        {
            "question": "Which of the following is true about lambda functions?",
            "options": [
                "They can contain multiple expressions",
                "They can only have one parameter",
                "They return the result of the expression automatically",
                "They must contain a return statement"
            ],
            "answer": "They return the result of the expression automatically",
            "explanation": "Lambda functions return the result of the expression without needing a return statement."
        },
        {
            "question": "How do you use a lambda function with the map() function in Python?",
            "options": [
                "map(lambda x: x * 2, [1, 2, 3])",
                "lambda x: x * 2, map([1, 2, 3])",
                "map([1, 2, 3], lambda x: x * 2)",
                "lambda map(x: x * 2, [1, 2, 3])"
            ],
            "answer": "map(lambda x: x * 2, [1, 2, 3])",
            "explanation": "The map() function applies the lambda function to each item of the iterable."
        },
        {
            "question": "What does this lambda function do? lambda x: x > 10",
            "options": [
                "Adds 10 to x",
                "Multiplies x by 10",
                "Checks if x is greater than 10",
                "Reduces x by 10"
            ],
            "answer": "Checks if x is greater than 10",
            "explanation": "This lambda function returns True if x is greater than 10, else False."
        },
        {
            "question": "How do you use a lambda function as a key for sorting a list of tuples by the second element?",
            "options": [
                "sorted(my_list, key=lambda x: x[1])",
                "lambda x: x[1], sorted(my_list)",
                "sorted(my_list, lambda x: x[1])",
                "sort(my_list, key=lambda x: x[1])"
            ],
            "answer": "sorted(my_list, key=lambda x: x[1])",
            "explanation": "The key parameter in the sorted() function can be a lambda function to customize sorting."
        },
        {
            "question": "Can lambda functions capture variables from the enclosing scope?",
            "options": [
                "Yes",
                "No",
                "Only global variables",
                "Only if passed as parameters"
            ],
            "answer": "Yes",
            "explanation": "Lambda functions can capture variables from the enclosing scope."
        },
        {
            "question": "How would you filter out all negative numbers from a list using a lambda function?",
            "options": [
                "filter(lambda x: x > 0, my_list)",
                "lambda x: x > 0, filter(my_list)",
                "filter(my_list, lambda x: x > 0)",
                "lambda filter(x: x > 0, my_list)"
            ],
            "answer": "filter(lambda x: x > 0, my_list)",
            "explanation": "The filter() function can use a lambda function to filter out items based on a condition."
        },
        {
            "question": "What is the limitation of a lambda function in Python?",
            "options": [
                "It cannot return values",
                "It can only have one expression",
                "It can only be used once",
                "It cannot be stored in variables"
            ],
            "answer": "It can only have one expression",
            "explanation": "Lambda functions in Python are limited to a single expression."
        },
        {
            "question": "How is a lambda function typically defined?",
            "options": [
                "Using the keyword \"define\"",
                "Using the keyword \"function\"",
                "Using the keyword \"lambda\"",
                "Using the keyword \"anonymous\""
            ],
            "answer": "Using the keyword \"lambda\"",
            "explanation": "Lambda functions are defined using the \"lambda\" keyword."
        },
        {
            "question": "How many arguments can a lambda function take?",
            "options": [
                "Only one argument",
                "Exactly two arguments",
                "Any number of arguments",
                "Only keyword arguments"
            ],
            "answer": "Any number of arguments",
            "explanation": "Lambda functions can take any number of arguments."
        },
        {
            "question": "What is the purpose of lambda functions in Python?",
            "options": [
                "To define complex functions with multiple expressions",
                "To create anonymous functions for simple operations",
                "To define functions with default arguments",
                "To create global functions"
            ],
            "answer": "To create anonymous functions for simple operations",
            "explanation": "Lambda functions are commonly used for short, simple operations."
        },
        {
            "question": "Which built-in Python functions are often used with lambda functions?",
            "options": [
                "max() and min()",
                "sum() and average()",
                "map() and filter()",
                "sort() and reverse()"
            ],
            "answer": "map() and filter()",
            "explanation": "Lambda functions are frequently used with the map() and filter() functions."
        },
        {
            "question": "What does a lambda function return?",
            "options": [
                "Multiple values",
                "None",
                "A single value",
                "A list of values"
            ],
            "answer": "A single value",
            "explanation": "Lambda functions return the result of a single expression."
        },
        {
            "question": "Can lambda functions contain multiple expressions?",
            "options": [
                "Yes, they can contain as many expressions as needed.",
                "No, lambda functions can only contain a single expression.",
                "Only if the expressions are enclosed in curly braces.",
                "Only if the expressions are separated by semicolons."
            ],
            "answer": "No, lambda functions can only contain a single expression.",
            "explanation": "Lambda functions are limited to a single expression."
        },
        {
            "question": "How are lambda functions useful in reducing code verbosity?",
            "options": [
                "By allowing for long and descriptive function names",
                "By replacing the need for any function definitions",
                "By eliminating the need for parentheses in function calls",
                "By providing a concise way to define short functions inline"
            ],
            "answer": "By providing a concise way to define short functions inline",
            "explanation": "Lambda functions are useful for defining short functions without a full function definition."
        },
        {
            "question": "Can lambda functions replace all uses of regular named functions (defined with \"def\")?",
            "options": [
                "Yes, lambda functions can completely replace named functions.",
                "No, lambda functions are only suitable for specific use cases.",
                "Only if lambda functions are defined with the \"def\" keyword.",
                "Yes, but only if they have a unique name."
            ],
            "answer": "No, lambda functions are only suitable for specific use cases.",
            "explanation": "Lambda functions are not a complete replacement for named functions and are best suited for specific situations."
        },
        {
            "question": "Which of the following is a valid use of a lambda function?",
            "options": [
                "Defining a complex sorting algorithm",
                "Creating a function with multiple expressions",
                "Writing a function with a docstring",
                "Passing a simple operation as an argument to another function"
            ],
            "answer": "Passing a simple operation as an argument to another function",
            "explanation": "Lambda functions are often used to pass simple operations as arguments to other functions."
        },
        {
            "question": "What is the primary advantage of using lambda functions in Python?",
            "options": [
                "They allow for complex logic and control flow.",
                "They are easy to debug and test.",
                "They provide a concise and readable way to define short functions.",
                "They automatically handle exceptions and errors."
            ],
            "answer": "They provide a concise and readable way to define short functions.",
            "explanation": "Lambda functions offer a concise way to define short functions, improving code readability."
        },
        {
            "question": "What is a Python array?",
            "options": [
                "A built-in data type for storing key-value pairs",
                "A linear data structure for storing elements of the same data type",
                "A collection of unordered elements",
                "A list of dictionaries"
            ],
            "answer": "A linear data structure for storing elements of the same data type",
            "explanation": "A Python array is a linear data structure for storing elements of the same data type."
        },
        {
            "question": "How are elements accessed in a Python array?",
            "options": [
                "Using a key",
                "Using an index",
                "Using a hash code",
                "Using a label"
            ],
            "answer": "Using an index",
            "explanation": "Elements in a Python array are accessed using an index."
        },
        {
            "question": "Which module is commonly used for working with Python arrays?",
            "options": [
                "array",
                "list",
                "collections",
                "numpy"
            ],
            "answer": "array",
            "explanation": "The `array` module is commonly used for working with Python arrays."
        },
        {
            "question": "What is the purpose of the append() method in Python arrays?",
            "options": [
                "To remove an element from the array",
                "To add an element to the end of the array",
                "To insert an element at a specific index",
                "To clear all elements from the array"
            ],
            "answer": "To add an element to the end of the array",
            "explanation": "The `append()` method is used to add an element to the end of a Python array."
        },
        {
            "question": "How can you remove an element from a Python array by its value?",
            "options": [
                "Using the `pop()` method",
                "Using the `remove()` method",
                "Using slicing",
                "Using the `delete()` method"
            ],
            "answer": "Using the `remove()` method",
            "explanation": "The `remove()` method is used to remove an element from a Python array by its value."
        },
        {
            "question": "What is the purpose of the pop() method in Python arrays?",
            "options": [
                "To push an element onto the array",
                "To remove and return the last element of the array",
                "To remove and return the first element of the array",
                "To clear all elements from the array"
            ],
            "answer": "To remove and return the last element of the array",
            "explanation": "The `pop()` method removes and returns the last element of a Python array."
        },
        {
            "question": "Which method is used to check if an element exists in a Python array?",
            "options": [
                "`find()`",
                "`in`",
                "`contains()`",
                "`exists()`"
            ],
            "answer": "`in`",
            "explanation": "You can check if an element exists in a Python array using the `in` keyword."
        },
        {
            "question": "Which method is used to sort a Python array in ascending order?",
            "options": [
                "`sort()`",
                "`reverse()`",
                "`sorted()`",
                "`shuffle()`"
            ],
            "answer": "`sort()`",
            "explanation": "The `sort()` method is used to sort a Python array in ascending order."
        },
        {
            "question": "How can you reverse the order of elements in a Python array?",
            "options": [
                "Using the `sort()` method with reverse=True",
                "Using the `reverse()` method",
                "Using the `reversed()` function",
                "Using a loop"
            ],
            "answer": "Using the `reverse()` method",
            "explanation": "The `reverse()` method is used to reverse the order of elements in a Python array."
        },
        {
            "question": "Which method is used to clear all elements from a Python array?",
            "options": [
                "`clear()`",
                "`delete()`",
                "`pop()`",
                "`remove_all()`"
            ],
            "answer": "`clear()`",
            "explanation": "The `clear()` method is used to clear all elements from a Python array."
        },
        {
            "question": "What is the time complexity of accessing an element in a Python array by index?",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n^2)"
            ],
            "answer": "O(1)",
            "explanation": "Accessing an element in a Python array by index has a time complexity of O(1)."
        },
        {
            "question": "Which data structure is used to implement Python arrays?",
            "options": [
                "Linked list",
                "Dynamic array",
                "Hash table",
                "Queue"
            ],
            "answer": "Dynamic array",
            "explanation": "Python arrays are implemented as dynamic arrays."
        },
        {
            "question": "What is the primary purpose of using arrays in Python?",
            "options": [
                "To create a collection of key-value pairs",
                "To represent a stack data structure",
                "To store and manipulate a collection of elements efficiently",
                "To store elements in a random order"
            ],
            "answer": "To store and manipulate a collection of elements efficiently",
            "explanation": "The primary purpose of using arrays in Python is to store and manipulate a collection of elements efficiently."
        },
        {
            "question": "Which module provides support for numerical arrays and mathematical operations in Python?",
            "options": [
                "array",
                "math",
                "numpy",
                "statistics"
            ],
            "answer": "numpy",
            "explanation": "The `numpy` module provides support for numerical arrays and mathematical operations in Python."
        },
        {
            "question": "What is the result of using the extend() method to add elements from one array to another?",
            "options": [
                "The original array is modified to include the elements from the second array.",
                "A new array is created with elements from both arrays.",
                "The second array is cleared, and its elements are added to the first array.",
                "An error is raised because the `extend()` method is not supported in Python."
            ],
            "answer": "The original array is modified to include the elements from the second array.",
            "explanation": "The `extend()` method modifies the original array to include elements from the second array."
        },
        {
            "question": "Which method is used to insert an element at a specific index in a Python array?",
            "options": [
                "`add()`",
                "`insert()`",
                "`append()`",
                "`put()`"
            ],
            "answer": "`insert()`",
            "explanation": "The `insert()` method is used to insert an element at a specific index in a Python array."
        },
        {
            "question": "How can you find the index of the first occurrence of an element in a Python array?",
            "options": [
                "Using the `search()` method",
                "Using the `index()` method",
                "Using the `find()` method",
                "Using the `locate()` method"
            ],
            "answer": "Using the `index()` method",
            "explanation": "The `index()` method is used to find the index of the first occurrence of an element in a Python array."
        },
        {
            "question": "Which method is used to count the number of occurrences of an element in a Python array?",
            "options": [
                "`count()`",
                "`find()`",
                "`search()`",
                "`locate()`"
            ],
            "answer": "`count()`",
            "explanation": "The `count()` method is used to count the number of occurrences of an element in a Python array."
        },
        {
            "question": "What is the result of using the copy() method to create a copy of a Python array?",
            "options": [
                "A shallow copy of the original array is created.",
                "A deep copy of the original array is created.",
                "The original array is cleared, and its elements are copied to a new array.",
                "An error is raised because the `copy()` method is not supported in Python."
            ],
            "answer": "A shallow copy of the original array is created.",
            "explanation": "The `copy()` method creates a shallow copy of the original array."
        },
        {
            "question": "Which method is used to remove the element at a specific index in a Python array?",
            "options": [
                "`pop()`",
                "`remove()`",
                "`delete()`",
                "`clear()`"
            ],
            "answer": "`pop()`",
            "explanation": "The `pop()` method is used to remove the element at a specific index in a Python array."
        },
        {
            "question": "What is a class in Python?",
            "options": [
                "A collection of functions",
                "A blueprint for creating objects",
                "A built-in data type",
                "A library for mathematical operations"
            ],
            "answer": "A blueprint for creating objects",
            "explanation": "In Python, a class is a blueprint for creating objects with specific attributes and methods."
        },
        {
            "question": "What is an object in Python?",
            "options": [
                "A variable",
                "An instance of a class",
                "A built-in data type",
                "A module in a program"
            ],
            "answer": "An instance of a class",
            "explanation": "An object is an instance of a class, created based on the class blueprint."
        },
        {
            "question": "How are attributes defined in a Python class?",
            "options": [
                "As global variables outside the class",
                "As local variables inside the class methods",
                "As instance variables inside the class constructor",
                "As class variables shared among all instances"
            ],
            "answer": "As instance variables inside the class constructor",
            "explanation": "Attributes in a Python class are defined as instance variables inside the class constructor."
        },
        {
            "question": "What is the self keyword used for in Python class methods?",
            "options": [
                "To access the class itself",
                "To access the superclass",
                "To refer to the current instance of the class",
                "To create a new instance of the class"
            ],
            "answer": "To refer to the current instance of the class",
            "explanation": "The self keyword is used to refer to the current instance of the class in class methods."
        },
        {
            "question": "What is encapsulation in object-oriented programming?",
            "options": [
                "A process of creating objects from classes",
                "The ability to hide the internal details of an object",
                "The process of inheritance",
                "The process of object destruction"
            ],
            "answer": "The ability to hide the internal details of an object",
            "explanation": "Encapsulation is the concept of hiding the internal details of an object and providing controlled access to its attributes and methods."
        },
        {
            "question": "In Python, which method is automatically called when an object is created from a class?",
            "options": [
                "init()",
                "constructor()",
                "create()",
                "new()"
            ],
            "answer": "init()",
            "explanation": "The __init__() method is automatically called when an object is created from a class in Python."
        },
        {
            "question": "What is inheritance in object-oriented programming?",
            "options": [
                "The process of creating new classes from existing ones",
                "The process of creating new objects",
                "The process of encapsulating data",
                "The process of creating global variables"
            ],
            "answer": "The process of creating new classes from existing ones",
            "explanation": "Inheritance is the process of creating new classes by deriving them from existing classes."
        },
        {
            "question": "What is method overriding in Python?",
            "options": [
                "The process of creating new methods",
                "The process of replacing a method in a superclass with a new method in a subclass",
                "The process of deleting methods from a class",
                "The process of renaming methods"
            ],
            "answer": "The process of replacing a method in a superclass with a new method in a subclass",
            "explanation": "Method overriding is the process of providing a new implementation for a method in a subclass that is already defined in its superclass."
        },
        {
            "question": "Which access modifier in Python allows an attribute or method to be accessed only within its class?",
            "options": [
                "Public",
                "Private",
                "Protected",
                "Hidden"
            ],
            "answer": "Private",
            "explanation": "Private attributes and methods in Python can only be accessed within their class."
        },
        {
            "question": "Which access modifier in Python allows an attribute or method to be accessed within its class and subclasses?",
            "options": [
                "Public",
                "Private",
                "Protected",
                "Hidden"
            ],
            "answer": "Protected",
            "explanation": "Protected attributes and methods in Python can be accessed within their class and subclasses."
        },
        {
            "question": "How can you create a class variable in Python?",
            "options": [
                "Define it within a class method",
                "Define it outside the class",
                "Define it within the constructor",
                "Define it within an instance method"
            ],
            "answer": "Define it outside the class",
            "explanation": "Class variables in Python are defined outside the class."
        },
        {
            "question": "What is the purpose of the @staticmethod decorator in Python?",
            "options": [
                "To define class methods",
                "To define instance methods",
                "To define static methods that are not bound to instances",
                "To define private methods"
            ],
            "answer": "To define static methods that are not bound to instances",
            "explanation": "The @staticmethod decorator is used to define static methods in Python, which are not bound to instances."
        },
        {
            "question": "Which special method in Python is used to define a custom string representation of an object?",
            "options": [
                "str()",
                "repr()",
                "str_rep()",
                "object_str()"
            ],
            "answer": "repr()",
            "explanation": "The __repr__() special method is used to define a custom string representation of an object."
        },
        {
            "question": "In Python, what is the purpose of the super() function?",
            "options": [
                "To create a new instance of a class",
                "To call a method in the superclass",
                "To access private attributes",
                "To define class attributes"
            ],
            "answer": "To call a method in the superclass",
            "explanation": "The super() function is used to call a method in the superclass from a subclass."
        },
        {
            "question": "What is the primary advantage of using object-oriented programming (OOP) in Python?",
            "options": [
                "Improved performance",
                "Code reusability and modularity",
                "Reduced memory usage",
                "Simplified syntax"
            ],
            "answer": "Code reusability and modularity",
            "explanation": "OOP in Python promotes code reusability and modularity, making it easier to manage and maintain code."
        },
        {
            "question": "How do you create an instance of a class in Python?",
            "options": [
                "Using the new keyword",
                "Using the create keyword",
                "Using the instantiate method",
                "Using the class name followed by parentheses"
            ],
            "answer": "Using the class name followed by parentheses",
            "explanation": "An instance of a class in Python is created by using the class name followed by parentheses."
        },
        {
            "question": "What is the purpose of the __del__() special method in Python?",
            "options": [
                "To define a custom destructor for a class",
                "To define a custom constructor for a class",
                "To access private attributes",
                "To define a custom string representation of an object"
            ],
            "answer": "To define a custom destructor for a class",
            "explanation": "The __del__() special method is used to define a custom destructor for a class in Python."
        },
        {
            "question": "How do you access an instance variable in a Python class?",
            "options": [
                "Using the class name",
                "Using the self keyword",
                "Using the super keyword",
                "Using the this keyword"
            ],
            "answer": "Using the self keyword",
            "explanation": "Instance variables in a Python class are accessed using the self keyword."
        },
        {
            "question": "What is the purpose of the isinstance() function in Python?",
            "options": [
                "To check if an object is an instance of a class",
                "To check if an object is a subclass of a class",
                "To check if an object is a module",
                "To check if an object is a function"
            ],
            "answer": "To check if an object is an instance of a class",
            "explanation": "The isinstance() function is used to check if an object is an instance of a specified class."
        },
        {
            "question": "In Python, what is a constructor?",
            "options": [
                "A method that creates an instance of a class",
                "A method that initializes instance variables",
                "A method that defines class variables",
                "A method that defines static methods"
            ],
            "answer": "A method that initializes instance variables",
            "explanation": "A constructor in Python is a method that initializes instance variables when an object is created."
        },
        {
            "question": "What is inheritance in Python?",
            "options": [
                "The process of creating new classes from existing ones",
                "The process of creating new objects",
                "The process of encapsulating data",
                "The process of defining instance variables"
            ],
            "answer": "The process of creating new classes from existing ones",
            "explanation": "Inheritance in Python is the process of creating new classes by deriving them from existing ones."
        },
        {
            "question": "What is a superclass in Python?",
            "options": [
                "A class that inherits from another class",
                "A class that is derived from another class",
                "A class that contains only instance variables",
                "A class that cannot have methods"
            ],
            "answer": "A class that is derived from another class",
            "explanation": "A superclass is a class that is derived from another class (parent class)."
        },
        {
            "question": "What is a subclass in Python?",
            "options": [
                "A class that inherits from another class",
                "A class that is derived from another class",
                "A class that contains only class variables",
                "A class that cannot have attributes"
            ],
            "answer": "A class that inherits from another class",
            "explanation": "A subclass is a class that inherits from another class (parent class)."
        },
        {
            "question": "What keyword is used to specify inheritance in a Python class?",
            "options": [
                "inherits",
                "base",
                "extends",
                "class"
            ],
            "answer": "class",
            "explanation": "The class keyword is used to define a Python class that can inherit from another class."
        },
        {
            "question": "What is the primary advantage of using inheritance in Python?",
            "options": [
                "Code reusability and modularity",
                "Reduced memory usage",
                "Simplified syntax",
                "Improved performance"
            ],
            "answer": "Code reusability and modularity",
            "explanation": "Inheritance in Python promotes code reusability and modularity."
        },
        {
            "question": "Which method in Python is automatically called when an object is created from a subclass?",
            "options": [
                "init()",
                "constructor()",
                "create()",
                "new()"
            ],
            "answer": "init()",
            "explanation": "The __init__() method is automatically called when an object is created from a subclass."
        },
        {
            "question": "What is method overriding in Python?",
            "options": [
                "The process of creating new methods",
                "The process of replacing a method in a superclass with a new method in a subclass",
                "The process of renaming methods",
                "The process of calling superclass methods directly"
            ],
            "answer": "The process of replacing a method in a superclass with a new method in a subclass",
            "explanation": "Method overriding is the process of providing a new implementation for a method in a subclass that is already defined in its superclass."
        },
        {
            "question": "Which keyword is used to call a method from the superclass in a Python subclass?",
            "options": [
                "base",
                "super",
                "parent",
                "sub"
            ],
            "answer": "super",
            "explanation": "The super keyword is used to call a method from the superclass in a Python subclass."
        },
        {
            "question": "What is the purpose of the super() function in Python?",
            "options": [
                "To create a new instance of a class",
                "To access the superclass",
                "To access private attributes",
                "To define class attributes"
            ],
            "answer": "To access the superclass",
            "explanation": "The super() function is used to access the superclass in Python."
        },
        {
            "question": "Which access modifier in Python allows a subclass to access attributes and methods of its superclass?",
            "options": [
                "Public",
                "Private",
                "Protected",
                "Hidden"
            ],
            "answer": "Protected",
            "explanation": "Protected attributes and methods in Python allow a subclass to access attributes and methods of its superclass."
        },
        {
            "question": "What is multiple inheritance in Python?",
            "options": [
                "The ability to inherit from multiple subclasses",
                "The ability to inherit from multiple superclasses",
                "The ability to inherit from multiple instances",
                "The ability to inherit from built-in classes"
            ],
            "answer": "The ability to inherit from multiple superclasses",
            "explanation": "Multiple inheritance in Python allows a class to inherit from multiple superclasses."
        },
        {
            "question": "What is the method resolution order (MRO) in Python?",
            "options": [
                "The order in which methods are defined in a class",
                "The order in which methods are called in a subclass",
                "The order in which the base classes are searched to find a method or attribute",
                "The order in which instances are created in a program"
            ],
            "answer": "The order in which the base classes are searched to find a method or attribute",
            "explanation": "The Method Resolution Order (MRO) defines the order in which base classes are searched to find a method or attribute."
        },
        {
            "question": "Which keyword is used to check if a class is a subclass of another class in Python?",
            "options": [
                "extends",
                "inherits",
                "subclass",
                "issubclass"
            ],
            "answer": "issubclass",
            "explanation": "The issubclass keyword is used to check if a class is a subclass of another class in Python."
        },
        {
            "question": "What is a constructor in Python?",
            "options": [
                "A method that creates an instance of a class",
                "A method that initializes instance variables",
                "A method that defines class variables",
                "A method that defines static methods"
            ],
            "answer": "A method that creates an instance of a class",
            "explanation": "A constructor in Python is a method that creates an instance of a class."
        },
        {
            "question": "Which special method in Python is used to define a custom string representation of an object?",
            "options": [
                "str()",
                "repr()",
                "str_rep()",
                "object_str()"
            ],
            "answer": "repr()",
            "explanation": "The __repr__() special method is used to define a custom string representation of an object."
        },
        {
            "question": "How can you prevent a method in a superclass from being overridden in a subclass?",
            "options": [
                "Make the method private",
                "Use the final keyword",
                "Use the protected keyword",
                "It cannot be prevented from being overridden"
            ],
            "answer": "Use the final keyword",
            "explanation": "You can prevent a method from being overridden in a subclass by using the final keyword."
        },
        {
            "question": "What is an abstract class in Python?",
            "options": [
                "A class that cannot be instantiated",
                "A class that has only class variables",
                "A class that cannot have methods",
                "A class that cannot have attributes"
            ],
            "answer": "A class that cannot be instantiated",
            "explanation": "An abstract class in Python is a class that cannot be instantiated and is meant to be subclassed."
        },
        {
            "question": "How do you declare an abstract method in Python?",
            "options": [
                "By using the abstract keyword",
                "By using the virtual keyword",
                "By using the @abstractmethod decorator",
                "By using the override keyword"
            ],
            "answer": "By using the @abstractmethod decorator",
            "explanation": "Abstract methods in Python are declared using the @abstractmethod decorator."
        },
        {
            "question": "What is the purpose of the isinstance() function in Python?",
            "options": [
                "To check if an object is an instance of a class",
                "To check if an object is a subclass of a class",
                "To check if an object is a module",
                "To check if an object is a function"
            ],
            "answer": "To check if an object is an instance of a class",
            "explanation": "The isinstance() function is used to check if an object is an instance of a specified class."
        },
        {
            "question": "What is the result of calling a method in a subclass that has the same name as a method in the superclass?",
            "options": [
                "An error is raised",
                "The method in the superclass is called",
                "The method in the subclass is called",
                "Both methods are called in order"
            ],
            "answer": "The method in the subclass is called",
            "explanation": "When a method with the same name is defined in both the superclass and subclass, the method in the subclass is called (method overriding)."
        },
        {
            "question": "Which of the following is not a key concept in OOP?",
            "options": [
                "Inheritance",
                "Polymorphism",
                "Multiprocessing",
                "Encapsulation"
            ],
            "answer": "Multiprocessing",
            "explanation": "While inheritance, polymorphism, and encapsulation are core OOP concepts, multiprocessing pertains to concurrent execution and isn’t specific to OOP."
        },
        {
            "question": "In Python, an object is:",
            "options": [
                "A real-world entity",
                "A collection of data and methods",
                "Always physical",
                "Only data"
            ],
            "answer": "A collection of data and methods",
            "explanation": "In OOP, an object is an encapsulation of data (attributes) and methods (functions) that operate on the data."
        },
        {
            "question": "Which of the following is correct about class attributes?",
            "options": [
                "They are always public",
                "They cannot be changed outside the class",
                "They are shared across all instances of a class",
                "They can’t be initialized in a constructor"
            ],
            "answer": "They are shared across all instances of a class",
            "explanation": "Class attributes, unlike instance attributes, are shared across all instances of the class."
        },
        {
            "question": "What is the purpose of a constructor in a class?",
            "options": [
                "To construct the methods of the class",
                "To initialize an object’s attributes when it’s created",
                "To destroy an instance",
                "To make a class abstract"
            ],
            "answer": "To initialize an object’s attributes when it’s created",
            "explanation": "Constructors are special methods that get invoked when an object is instantiated, primarily used to initialize attributes."
        },
        {
            "question": "In Python, how is the constructor defined for a class?",
            "options": [
                "init()",
                "construct()",
                "__init__()",
                "__construct__()"
            ],
            "answer": "__init__()",
            "explanation": "In Python, the constructor method is named __init__()."
        },
        {
            "question": "What is the concept of inheriting properties of one class into another class?",
            "options": [
                "Polymorphism",
                "Multiprocessing",
                "Encapsulation",
                "Inheritance"
            ],
            "answer": "Inheritance",
            "explanation": "Inheritance allows one class (child/subclass) to inherit attributes and methods from another class (parent/superclass)."
        },
        {
            "question": "Which of the following keywords is used to create a subclass in Python?",
            "options": [
                "extend",
                "inherits",
                "class",
                "subclass"
            ],
            "answer": "class",
            "explanation": "The class keyword is used, but the inheritance relationship is determined by the parentheses. For example: class SubClass(ParentClass):."
        },
        {
            "question": "What does method overriding mean in Python?",
            "options": [
                "Altering a method by changing its parameters in the same class.",
                "Modifying the behavior of an inherited method in the subclass.",
                "Using the same method name in multiple classes.",
                "Making a method static."
            ],
            "answer": "Modifying the behavior of an inherited method in the subclass.",
            "explanation": "Method overriding involves defining in the subclass a method with the same name as in the superclass, thus altering its behavior in the derived class."
        },
        {
            "question": "How does Python support method overloading?",
            "options": [
                "By creating multiple methods with the same name but different parameters.",
                "By creating static methods.",
                "Through default arguments and variable-length argument lists.",
                "Python doesn’t support method overloading."
            ],
            "answer": "Through default arguments and variable-length argument lists.",
            "explanation": "Unlike some other languages where method overloading is achieved by having multiple methods with the same name but different parameters, Python achieves this using default arguments and variable-length argument lists (using *args and **kwargs)."
        },
        {
            "question": "In method overriding, if the subclass has the same method as declared in the parent class, which version of the method will be executed?",
            "options": [
                "Parent class",
                "Subclass",
                "Both",
                "Neither"
            ],
            "answer": "Subclass",
            "explanation": "If a method is overridden in the subclass, the version of the method defined in the subclass will be executed, not the one in the parent class."
        },
        {
            "question": "What’s the primary use of the super() function in Python OOP?",
            "options": [
                "To call a superclass’s constructor",
                "To call a method from another module",
                "To override a method",
                "To create an instance of a class"
            ],
            "answer": "To call a superclass’s constructor",
            "explanation": "super() allows us to call a method from the parent class, commonly used in the constructor (__init__) of a subclass to initialize attributes from the superclass."
        },
        {
            "question": "Which of the following is a special method in Python?",
            "options": [
                "method()",
                "__method__",
                "_method_",
                "method_()"
            ],
            "answer": "__method__",
            "explanation": "In Python, methods wrapped with double underscores (e.g., __init__) are special methods, often called “magic” or “dunder” methods."
        },
        {
            "question": "How do you declare a private attribute in a class?",
            "options": [
                "private attr",
                "_attr",
                "__attr",
                "private_attr"
            ],
            "answer": "__attr",
            "explanation": "In Python, attributes prefixed with double underscores are considered private and can’t be accessed directly outside the class (though there are ways around this due to Python’s nature of name mangling)."
        },
        {
            "question": "What is the concept of using one operation to work with different types of objects?",
            "options": [
                "Encapsulation",
                "Inheritance",
                "Polymorphism",
                "Abstraction"
            ],
            "answer": "Polymorphism",
            "explanation": "Polymorphism, from Greek words meaning “many shapes”, allows one interface to be used for a general class of actions, irrespective of the types of objects."
        },
        {
            "question": "Which of the following can be used to restrict access to members of a class?",
            "options": [
                "Public",
                "Open",
                "Protected",
                "Unrestricted"
            ],
            "answer": "Protected",
            "explanation": "Prefixing an attribute with a single underscore (e.g., _attr) conventionally indicates it is protected and shouldn’t be accessed outside the class, though it still can be. It’s more of a convention than an enforced restriction."
        },
        {
            "question": "Which method gets called when an object is deleted?",
            "options": [
                "__del__",
                "__delete__",
                "__remove__",
                "__exit__"
            ],
            "answer": "__del__",
            "explanation": "The __del__ method is a destructor and gets called when an object is deleted."
        },
        {
            "question": "What does the isinstance() function do?",
            "options": [
                "Checks if a variable is of a specific type",
                "Checks if an object is an instance of a particular class or tuple of classes",
                "Checks if two class instances are the same",
                "Instantiates an object"
            ],
            "answer": "Checks if an object is an instance of a particular class or tuple of classes",
            "explanation": "The isinstance() function returns True if the object is an instance of the class or a tuple of classes."
        },
        {
            "question": "Which of the following is not a type of class method?",
            "options": [
                "Static method",
                "Instance method",
                "Modular method",
                "Class method"
            ],
            "answer": "Modular method",
            "explanation": "Python classes have instance methods, static methods, and class methods. There’s no “modular method.”"
        },
        {
            "question": "What is the primary difference between a class method and a static method?",
            "options": [
                "Class methods cannot modify the class state, while static methods can.",
                "Static methods cannot modify the class state, while class methods can.",
                "Class methods can access and modify class-level attributes while static methods can’t.",
                "There’s no difference; they are the same."
            ],
            "answer": "Class methods can access and modify class-level attributes while static methods can’t.",
            "explanation": "A class method takes a reference to the class (typically cls) as its first parameter, allowing it to access and modify class-level attributes. In contrast, static methods don’t have access to class or instance-specific data and behave like plain functions."
        },
        {
            "question": "In a class definition, what does a property decorator (@property) do?",
            "options": [
                "Makes a method accessible like an attribute",
                "Makes an attribute private",
                "Declares a static method",
                "Declares a constructor"
            ],
            "answer": "Makes a method accessible like an attribute",
            "explanation": "The @property decorator allows us to define methods in a class that are accessible like attributes without needing to invoke them like functions."
        },
        {
            "question": "What is the data type of: 5?",
            "options": [
                "Float",
                "String",
                "Integer",
                "Complex"
            ],
            "answer": "Integer",
            "explanation": "The value 5 without a decimal point is an integer."
        },
        {
            "question": "Which of the following is a mutable data type?",
            "options": [
                "Tuple",
                "String",
                "List",
                "Int"
            ],
            "answer": "List",
            "explanation": "Lists in Python can be altered after their creation, hence they are mutable. Other options are immutable."
        },
        {
            "question": "Which data type is ordered and changeable, and allows duplicate members?",
            "options": [
                "Set",
                "Tuple",
                "Dictionary",
                "List"
            ],
            "answer": "List",
            "explanation": "A list is ordered, can be altered, and can have duplicate members."
        },
        {
            "question": "What does the following code produce: type(5.0)?",
            "options": [
                "int",
                "float",
                "str",
                "complex"
            ],
            "answer": "float",
            "explanation": "5.0 is a floating-point number, so the type function will return float."
        },
        {
            "question": "Which of the following can’t be a dictionary key?",
            "options": [
                "Integer",
                "Tuple",
                "List",
                "String"
            ],
            "answer": "List",
            "explanation": "Dictionary keys must be immutable, and since lists are mutable, they can’t be used as dictionary keys."
        },
        {
            "question": "Which data type is unordered and unindexed?",
            "options": [
                "Set",
                "List",
                "Tuple",
                "Dictionary"
            ],
            "answer": "Set",
            "explanation": "Sets in Python are both unordered and unindexed."
        },
        {
            "question": "Which of these is used to represent a sequences of characters?",
            "options": [
                "List",
                "Tuple",
                "String",
                "Set"
            ],
            "answer": "String",
            "explanation": "Strings are sequences of characters in Python."
        },
        {
            "question": "Which data type cannot contain duplicate values?",
            "options": [
                "List",
                "Tuple",
                "Set",
                "Dictionary"
            ],
            "answer": "Set",
            "explanation": "Sets are unindexed collections of unique elements. They don’t allow duplicates."
        },
        {
            "question": "What is the output of type((1,2))?",
            "options": [
                "List",
                "Set",
                "Tuple",
                "Dictionary"
            ],
            "answer": "Tuple",
            "explanation": "The values 1 and 2 enclosed in parentheses form a tuple."
        },
        {
            "question": "Which of the following data types does not allow slicing?",
            "options": [
                "String",
                "List",
                "Set",
                "Tuple"
            ],
            "answer": "Set",
            "explanation": "Sets are unordered and unindexed, so slicing operations are not supported."
        },
        {
            "question": "Which data type is immutable?",
            "options": [
                "List",
                "Dictionary",
                "String",
                "Set"
            ],
            "answer": "String",
            "explanation": "Strings in Python are immutable, meaning their values can’t be altered after they’re created."
        },
        {
            "question": "How can you represent complex numbers in Python?",
            "options": [
                "a+b",
                "a_b",
                "a+bj",
                "a.b"
            ],
            "answer": "a+bj",
            "explanation": "In Python, complex numbers are represented as a+bj, where a and b are floats."
        },
        {
            "question": "Which of the following is not a Python data type?",
            "options": [
                "List",
                "Class",
                "Tuple",
                "Dictionary"
            ],
            "answer": "Class",
            "explanation": "While classes are used to define new types in Python, they themselves aren’t a data type."
        },
        {
            "question": "Which data type is mutable but ordered?",
            "options": [
                "Tuple",
                "Set",
                "List",
                "String"
            ],
            "answer": "List",
            "explanation": "Lists are ordered collections of elements and they can be modified after their creation."
        },
        {
            "question": "Which data type can be used to represent a pair of values?",
            "options": [
                "List",
                "Tuple",
                "Set",
                "Dictionary"
            ],
            "answer": "Tuple",
            "explanation": "Tuples can hold an ordered collection of items, which can be of any type"
        }
    ],
    "Stack": [
        {
            "question": "What is the primary function of a Stack data structure?",
            "options": [
                "LIFO operations",
                "FIFO operations",
                "Both LIFO and FIFO operations",
                "None of the above"
            ],
            "answer": "LIFO operations",
            "explanation": ""
        },
        {
            "question": "Which operation is used to add an element to a Stack?",
            "options": [
                "Enqueue",
                "Dequeue",
                "Push",
                "Pop"
            ],
            "answer": "Push",
            "explanation": ""
        },
        {
            "question": "Which operation is used to remove an element from a Stack?",
            "options": [
                "Enqueue",
                "Dequeue",
                "Push",
                "Pop"
            ],
            "answer": "Pop",
            "explanation": ""
        },
        {
            "question": "What happens when you try to pop an element from an empty Stack?",
            "options": [
                "It returns null",
                "It returns the top element",
                "It causes an underflow",
                "It causes an overflow"
            ],
            "answer": "It causes an underflow",
            "explanation": ""
        },
        {
            "question": "What is the time complexity of a push operation in a Stack?",
            "options": [
                "O(n)",
                "O(n log n)",
                "O(1)",
                "O(n²)"
            ],
            "answer": "O(1)",
            "explanation": ""
        },
        {
            "question": "What is the maximum number of elements a Stack can hold?",
            "options": [
                "Stack can hold a limited number of elements",
                "Stack can hold an infinite number of elements",
                "It depends on the memory available",
                "It depends on the data type of the elements"
            ],
            "answer": "It depends on the memory available",
            "explanation": ""
        },
        {
            "question": "Is the Stack a static data structure?",
            "options": [
                "Yes",
                "No",
                "Recursion",
                "Parsing"
            ],
            "answer": "No",
            "explanation": ""
        },
        {
            "question": "Which of the following applications may use a Stack?",
            "options": [
                "Browser history",
                "All of the above",
                "Head",
                "Front"
            ],
            "answer": "All of the above",
            "explanation": ""
        },
        {
            "question": "What is another name for the top of the Stack?",
            "options": [
                "Rear",
                "Peak",
                "O(1)",
                "O(n)"
            ],
            "answer": "Peak",
            "explanation": ""
        },
        {
            "question": "What is the time complexity to get the minimum element from the Stack?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "O(n)",
            "explanation": ""
        }
    ],
    "Queue": [
        {
            "question": "Which principle is followed by the Queue data structure?",
            "options": [
                "LIFO",
                "FIFO",
                "LILO",
                "FILO"
            ],
            "answer": "FIFO",
            "explanation": ""
        },
        {
            "question": "Which of the following is not a real-life example of a Queue?",
            "options": [
                "Waiting in line to order food at a restaurant",
                "Waiting in line to buy movie tickets",
                "Managing tasks on a CPU",
                "Using a stack of dishes"
            ],
            "answer": "Using a stack of dishes",
            "explanation": ""
        },
        {
            "question": "Which operation is used to add an element in the Queue?",
            "options": [
                "Push",
                "Pop",
                "Enqueue",
                "Dequeue"
            ],
            "answer": "Enqueue",
            "explanation": ""
        },
        {
            "question": "What is the operation to remove an element from the Queue?",
            "options": [
                "Push",
                "Pop",
                "Enqueue",
                "Dequeue"
            ],
            "answer": "Dequeue",
            "explanation": ""
        },
        {
            "question": "What does ‘underflow’ mean in a Queue?",
            "options": [
                "Queue is full",
                "Queue is empty",
                "There is an error in the queue",
                "Queue has only one element"
            ],
            "answer": "Queue is empty",
            "explanation": ""
        },
        {
            "question": "What is the time complexity of enqueue operation in a queue?",
            "options": [
                "O(n)",
                "O(n log n)",
                "O(1)",
                "O(n²)"
            ],
            "answer": "O(1)",
            "explanation": ""
        },
        {
            "question": "Is a Queue a dynamic data structure?",
            "options": [
                "Yes",
                "No",
                "The last element added",
                "The first element added"
            ],
            "answer": "Yes",
            "explanation": ""
        },
        {
            "question": "What is the front of a Queue?",
            "options": [
                "The middle element",
                "None of the above",
                "Priority Queue",
                "LIFO Queue"
            ],
            "answer": "The first element added",
            "explanation": ""
        },
        {
            "question": "Which is a type of Queue?",
            "options": [
                "FILO Queue",
                "None of the above",
                "O(1)",
                "O(n)"
            ],
            "answer": "Priority Queue",
            "explanation": ""
        },
        {
            "question": "What is the time complexity to get the front element from the queue?",
            "options": [
                "O(n log n)",
                "O(n²)",
                "A queue where the last element points to the first",
                "A queue where the first element points to the last"
            ],
            "answer": "O(1)",
            "explanation": ""
        },
        {
            "question": "What is a circular queue?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "A queue where the last element points to the first",
            "explanation": ""
        }
    ],
    "Linked List": [
        {
            "question": "What is a Linked List in data structure?",
            "options": [
                "It is a linear data structure where each element is stored at a contiguous location and elements are accessed sequentially from the first element.",
                "It is a type of data structure that consists of nodes, where each node contains a data field and a reference(link) to the next node in the sequence.",
                "It is a non-linear data structure where each data element is connected to several other data elements in a hierarchical manner.",
                "It is a special type of data structure that can be perceived as a complete binary tree."
            ],
            "answer": "It is a type of data structure that consists of nodes, where each node contains a data field and a reference(link) to the next node in the sequence.",
            "explanation": ""
        },
        {
            "question": "What is a Doubly Linked List in data structure?",
            "options": [
                "It is a type of linked list where each node contains a data field and two references, one to the next node and one to the answer-explanation node.",
                "It is a type of linked list where each node contains a data field and a reference only to the next node.",
                "It is a type of linked list where each node contains a data field and a reference only to the answer-explanation node.",
                "It is a type of linked list where each node contains two data fields and a reference to the next node."
            ],
            "answer": "It is a type of linked list where each node contains a data field and two references, one to the next node and one to the answer-explanation node.",
            "explanation": ""
        },
        {
            "question": "In which scenario is the Linked List an excellent data structure?",
            "options": [
                "When you need to insert elements at the end of the list",
                "When you need to insert elements in the middle of the list",
                "When you need to access elements in sequential order",
                "When you need quick access to elements by index"
            ],
            "answer": "When you need to insert elements in the middle of the list",
            "explanation": ""
        },
        {
            "question": "What is the time complexity of searching for an element in a Linked List?",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n log n)"
            ],
            "answer": "O(n)",
            "explanation": ""
        },
        {
            "question": "What is the primary advantage of a Circular Linked List over a Simple Linked List?",
            "options": [
                "It uses less memory",
                "It allows for O(1) insertions at the end of the list",
                "It allows us to traverse the whole list starting from any node",
                "It does not require a sentinel node"
            ],
            "answer": "It allows us to traverse the whole list starting from any node",
            "explanation": ""
        },
        {
            "question": "In a Singly Linked List, what does the last node’s next pointer point to?",
            "options": [
                "The first node",
                "The second last node",
                "Null",
                "Itself"
            ],
            "answer": "Null",
            "explanation": ""
        },
        {
            "question": "In a Doubly Linked List, what does the first node’s answer-explanation pointer point to?",
            "options": [
                "The second node",
                "The last node",
                "Itself",
                "Null"
            ],
            "answer": "Null",
            "explanation": ""
        },
        {
            "question": "Which of the following is not a type of Linked List?",
            "options": [
                "Sorted linked list",
                "Unsorted linked list",
                "Balanced linked list",
                "Circular linked list"
            ],
            "answer": "Balanced linked list",
            "explanation": ""
        },
        {
            "question": "In which of the following scenarios is a Doubly Linked List most useful?",
            "options": [
                "When we need to frequently add new elements",
                "When we need to frequently delete elements",
                "When we need to frequently traverse the list in both directions",
                "When we need to frequently perform a binary search"
            ],
            "answer": "50% more",
            "explanation": ""
        },
        {
            "question": "How much extra memory does a doubly linked list need over a Singly Linked List per node?",
            "options": [
                "50% more",
                "Twice as much",
                "Depends on the size of the data",
                "No extra memory is needed"
            ],
            "answer": "O(1)",
            "explanation": ""
        },
        {
            "question": "What is the time complexity to add a node at the beginning of the Linked List?",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n log n)"
            ],
            "answer": "A pointer to the linked list",
            "explanation": ""
        },
        {
            "question": "What does a Linked List node not contain?",
            "options": [
                "A pointer to the next node",
                "A pointer to the answer-explanation node",
                "Data",
                "A pointer to the linked list"
            ],
            "answer": "Binary Search",
            "explanation": ""
        },
        {
            "question": "Which of the following cannot be implemented efficiently using Linked List?",
            "options": [
                "Stack",
                "Queue",
                "Priority Queue",
                "Binary Search"
            ],
            "answer": "Random access is not allowed",
            "explanation": ""
        },
        {
            "question": "What is the disadvantage of a Linked List?",
            "options": [
                "Dynamic size",
                "Ease of insertion/deletion",
                "Random access is not allowed",
                "None of the above"
            ],
            "answer": "A simple loop through the list will never end",
            "explanation": ""
        },
        {
            "question": "What is a disadvantage of a circular linked list?",
            "options": [
                "It consumes more memory than a simple linked list",
                "It is complex to implement",
                "A simple loop through the list will never end",
                "All of the above"
            ],
            "answer": "Elements can be inserted in a linked list in O(1) time",
            "explanation": ""
        },
        {
            "question": "What is the main advantage of a linked list over an array?",
            "options": [
                "Linked lists use less memory",
                "Elements can be inserted in a linked list in O(1) time",
                "Random access is more efficient in linked lists",
                "Linked lists are easier to implement"
            ],
            "answer": "The first node",
            "explanation": ""
        },
        {
            "question": "In a circular doubly linked list, what does the ‘next’ pointer of the last node point to?",
            "options": [
                "The second last node",
                "The first node",
                "Null",
                "Itself"
            ],
            "answer": "O(n)",
            "explanation": ""
        },
        {
            "question": "What is the time complexity of a program that reverses a Linked List?",
            "options": [
                "O(1)",
                "O(n)",
                "O(n^2)",
                "O(log n)"
            ],
            "answer": "Doubly Linked List",
            "explanation": ""
        },
        {
            "question": "In which type of Linked List can traversals be performed in both directions?",
            "options": [
                "Singly Linked List",
                "Doubly Linked List",
                "Circular Linked List",
                "None of the above"
            ],
            "answer": "Circular Linked List",
            "explanation": ""
        },
        {
            "question": "A Linked List in which none of the nodes contain a NULL pointer is referred to?",
            "options": [
                "Single Linked List",
                "Doubly Linked List",
                "Circular Linked List",
                "None of the above"
            ],
            "answer": "",
            "explanation": ""
        }
    ],
    "DataStructures": [
        {
            "question": "Which of the following trees allows nodes with a maximum of two children?",
            "options": [
                "Ternary Tree",
                "Binary Tree",
                "AVL Tree",
                "Multiway Tree"
            ],
            "answer": "Binary Tree",
            "explanation": "By definition, a binary tree is a tree data structure in which each node has at most two children."
        },
        {
            "question": "In a Binary Search Tree (BST), left child nodes contain values which are:",
            "options": [
                "Equal to the parent node",
                "Any random value",
                "Greater than the parent node",
                "Lesser than the parent node"
            ],
            "answer": "Lesser than the parent node",
            "explanation": "In a BST, the left child node always contains a value lesser than its parent node, and the right child contains a value greater than its parent node."
        },
        {
            "question": "What is the maximum number of nodes in a binary tree of height ‘h’?",
            "options": [
                "h",
                "2^h",
                "2^h – 1",
                "h^2"
            ],
            "answer": "2^h – 1",
            "explanation": "A binary tree of height ‘h’ has a maximum of 2^h – 1 nodes."
        },
        {
            "question": "Which tree ensures that the height difference between the left and right child of any node is at most 1?",
            "options": [
                "Binary Tree",
                "BST",
                "AVL Tree",
                "Ternary Tree"
            ],
            "answer": "AVL Tree",
            "explanation": "AVL Trees are self-balancing binary search trees where the height difference (balance factor) between the left and right subtree for any node is no more than 1."
        },
        {
            "question": "In a BST, which traversal will yield a sorted order of its elements?",
            "options": [
                "Preorder",
                "Postorder",
                "Inorder",
                "Level Order"
            ],
            "answer": "Inorder",
            "explanation": "Inorder traversal of a BST will give nodes in non-decreasing order."
        },
        {
            "question": "Which tree data structure is named after its inventors Adelson-Velsky and Landis?",
            "options": [
                "Binary Tree",
                "Red-Black Tree",
                "AVL Tree",
                "Splay Tree"
            ],
            "answer": "AVL Tree",
            "explanation": "AVL Tree is named after its inventors Adelson-Velsky and Landis."
        },
        {
            "question": "If a binary tree is both full and complete, it is also a:",
            "options": [
                "AVL Tree",
                "BST",
                "Perfect Binary Tree",
                "Degenerate Tree"
            ],
            "answer": "Perfect Binary Tree",
            "explanation": "A binary tree is perfect if all its levels are fully populated, which implies the tree is both full and complete."
        },
        {
            "question": "What is the worst-case height of an AVL tree with ‘n’ nodes?",
            "options": [
                "n",
                "n/2",
                "log(n)",
                "1.44 log(n)"
            ],
            "answer": "1.44 log(n)",
            "explanation": "The height of an AVL tree is bounded by 1.44 log(n)."
        },
        {
            "question": "In a BST, the ___ typically contains values greater than its parent.",
            "options": [
                "Left child",
                "Right child",
                "Root node",
                "Leaf node"
            ],
            "answer": "Right child",
            "explanation": "In a BST, the right child node always contains a value greater than its parent node."
        },
        {
            "question": "A binary tree where every node has either 0 or 2 children is called:",
            "options": [
                "Full Binary Tree",
                "Perfect Binary Tree",
                "Complete Binary Tree",
                "Degenerate Tree"
            ],
            "answer": "Full Binary Tree",
            "explanation": "In a full binary tree, every node has either 0 or 2 children."
        },
        {
            "question": "A degenerate (or pathological) tree is a tree where each parent node has:",
            "options": [
                "One child",
                "Two children",
                "Three children",
                "No child"
            ],
            "answer": "One child",
            "explanation": "A degenerate tree is essentially a linked list where each parent has only one child."
        },
        {
            "question": "Which tree rotation is used to balance the AVL tree when the left subtree of the left child is causing an imbalance?",
            "options": [
                "Left-Left",
                "Left-Right",
                "Right-Left",
                "Right-Right"
            ],
            "answer": "Left-Left",
            "explanation": "The Left-Left (LL) rotation is used to balance the mentioned imbalance in an AVL tree."
        },
        {
            "question": "If the height of the binary tree is minimum, it is called a:",
            "options": [
                "Full Binary Tree",
                "Perfect Binary Tree",
                "Complete Binary Tree",
                "Balanced Binary Tree"
            ],
            "answer": "Complete Binary Tree",
            "explanation": "A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as left as possible."
        },
        {
            "question": "Which of the following is not a balanced binary search tree?",
            "options": [
                "Red-Black Tree",
                "AVL Tree",
                "Splay Tree",
                "Binary Search Tree"
            ],
            "answer": "Binary Search Tree",
            "explanation": "A standard Binary Search Tree (BST) doesn’t ensure balance. AVL, Red-Black, and Splay are all types of balanced binary search trees."
        },
        {
            "question": "Which tree data structure is useful for database storage systems where balance is maintained by ensuring that a certain number of elements is between the two children?",
            "options": [
                "AVL Tree",
                "BST",
                "B-Tree",
                "Heap"
            ],
            "answer": "B-Tree",
            "explanation": "B-Trees are commonly used in databases and filesystems due to their ability to handle large amounts of data and ensure balance by maintaining a certain number of elements between its children."
        },
        {
            "question": "Which of the following properties must be maintained in a Min-Heap?",
            "options": [
                "Parent node is greater than child nodes",
                "Parent node is less than child nodes",
                "All nodes are in increasing order",
                "All nodes are in decreasing order"
            ],
            "answer": "Parent node is less than child nodes",
            "explanation": "In a Min-Heap, for any given node I, the value of I is always less than or equal to its children."
        },
        {
            "question": "Which operation has a time complexity of O(1) in a binary heap?",
            "options": [
                "Insertion",
                "Deletion",
                "Finding minimum in Min-Heap",
                "Balancing the heap"
            ],
            "answer": "Finding minimum in Min-Heap",
            "explanation": "In a Min-Heap, the root always contains the smallest element, and it can be retrieved in O(1) time."
        },
        {
            "question": "What is the maximum number of children a node can have in a binary heap?",
            "options": [
                "1",
                "2",
                "3",
                "4"
            ],
            "answer": "2",
            "explanation": "A binary heap is a binary tree; hence, each node can have a maximum of 2 children."
        },
        {
            "question": "In a Max-Heap:",
            "options": [
                "Every node is greater than its descendants",
                "Every node is less than its descendants",
                "The tree is always balanced",
                "None of the above"
            ],
            "answer": "Every node is greater than its descendants",
            "explanation": "In a Max-Heap, for any given node I, the value of I is always greater than or equal to its children."
        },
        {
            "question": "Which of the following is NOT a valid application of heap?",
            "options": [
                "Finding shortest path in a graph",
                "Priority queue implementation",
                "Infix to postfix conversion",
                "Finding kth largest element"
            ],
            "answer": "Infix to postfix conversion",
            "explanation": "Infix to postfix conversion is typically done using a stack. Heaps are not used for this purpose."
        },
        {
            "question": "If the parent node is at index ‘I’ in a 0-indexed binary heap, where can you find its left child?",
            "options": [
                "I",
                "2I",
                "2I + 1",
                "I + 1"
            ],
            "answer": "2I + 1",
            "explanation": "For a 0-indexed binary heap, the left child is found at 2I + 1."
        },
        {
            "question": "Which of the following is true about a binary heap?",
            "options": [
                "It’s always complete",
                "It’s always perfect",
                "It’s always balanced",
                "It’s always full"
            ],
            "answer": "It’s always complete",
            "explanation": "A binary heap is always a complete binary tree, meaning every level of the tree is fully filled except possibly the last level, which is filled from left to right."
        },
        {
            "question": "Which data structure is typically used to implement a heap?",
            "options": [
                "Linked list",
                "Array",
                "Binary tree",
                "Graph"
            ],
            "answer": "Array",
            "explanation": "Heaps are usually implemented using arrays because of their complete binary tree property, which allows easy access to parent and child nodes."
        },
        {
            "question": "In a Min-Heap with elements: 1, 3, 5, 7, 9, 2, 4. Which one is the root?",
            "options": [
                "1",
                "3",
                "5",
                "7"
            ],
            "answer": "1",
            "explanation": "In a Min-Heap, the root always contains the smallest element."
        },
        {
            "question": "If the parent node is at index ‘I’ in a 1-indexed binary heap, where can you find its right child?",
            "options": [
                "2I",
                "2I + 1",
                "2I + 2",
                "I + 1"
            ],
            "answer": "2I + 1",
            "explanation": "For a 1-indexed binary heap, the right child is found at 2I + 1."
        },
        {
            "question": "Heapify operation is used to:",
            "options": [
                "Add an element to the heap",
                "Remove an element from the heap",
                "Balance a binary tree",
                "Restore the heap property"
            ],
            "answer": "Restore the heap property",
            "explanation": "Heapify operation is used to reorganize the heap after insertion or removal of an element to ensure the heap property is maintained."
        },
        {
            "question": "Which of these sorting algorithms uses a binary heap?",
            "options": [
                "Bubble sort",
                "Insertion sort",
                "Merge sort",
                "Heap sort"
            ],
            "answer": "Heap sort",
            "explanation": "Heap sort utilizes a binary heap (either Max-Heap or Min-Heap) to sort elements."
        },
        {
            "question": "Deleting the maximum element from a Max-Heap has a time complexity of:",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n log n)"
            ],
            "answer": "O(log n)",
            "explanation": "Deleting the maximum element requires removing the root and then reorganizing the heap using heapify, which takes O(log n) time."
        },
        {
            "question": "Which of the following algorithms can be optimized using a Min-Heap?",
            "options": [
                "Binary Search",
                "Breadth-first search",
                "Dijkstra’s shortest path",
                "Matrix multiplication"
            ],
            "answer": "Dijkstra’s shortest path",
            "explanation": "Dijkstra’s algorithm can be optimized using a Min-Heap to efficiently select the next node with the shortest distance."
        },
        {
            "question": "In a Max-Heap, the maximum element can be found in:",
            "options": [
                "Leaf node",
                "Any random node",
                "The last node",
                "The root node"
            ],
            "answer": "The root node",
            "explanation": "In a Max-Heap, the maximum element is always found at the root."
        },
        {
            "question": "What is the primary use of a hash table?",
            "options": [
                "Search for a key",
                "Calculate mathematical hashes",
                "Store data in a tree format",
                "All of the above"
            ],
            "answer": "Search for a key",
            "explanation": "Hash tables are designed to optimize the searching of a value by its key. The other options are not the primary purposes of a hash table."
        },
        {
            "question": "Which of the following best describes a collision in a hash table?",
            "options": [
                "Two keys having the same value",
                "Two keys hashing to the same index",
                "Forgetting to store a key",
                "All keys having unique values"
            ],
            "answer": "Two keys hashing to the same index",
            "explanation": "A collision occurs when two different keys produce the same index in a hash table."
        },
        {
            "question": "What is the time complexity of a successful search in a hash table, in the best case scenario?",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n^2)"
            ],
            "answer": "O(1)",
            "explanation": "Ideally, if there are no collisions and the hash function is perfect, retrieving a value by its key happens in constant time."
        },
        {
            "question": "Which method resolves collisions by inserting the collided item into the next available space?",
            "options": [
                "Separate Chaining",
                "Linear Probing",
                "Quadratic Probing",
                "Double Hashing"
            ],
            "answer": "Linear Probing",
            "explanation": "Linear probing resolves collisions by placing the collided item into the next available slot in the hash table."
        },
        {
            "question": "In the context of a hash table, what does the load factor represent?",
            "options": [
                "The number of keys",
                "The total size of the array",
                "The ratio of the number of keys to the array size",
                "The number of collisions"
            ],
            "answer": "The ratio of the number of keys to the array size",
            "explanation": "Load factor is used to determine when to resize the hash table. It’s calculated as (number of keys / array size)."
        },
        {
            "question": "Which of the following data structures is commonly used for implementing collision resolution in hash tables?",
            "options": [
                "Arrays",
                "Linked Lists",
                "Trees",
                "Graphs"
            ],
            "answer": "Linked Lists",
            "explanation": "Linked lists are often used in the “Separate Chaining” method of collision resolution."
        },
        {
            "question": "What’s the main disadvantage of a high load factor in a hash table?",
            "options": [
                "Less memory usage",
                "Faster search times",
                "More collisions",
                "More keys can be stored"
            ],
            "answer": "More collisions",
            "explanation": "A high load factor means the hash table is getting filled, increasing the chances of collisions, and thus, slowing down operations."
        },
        {
            "question": "If a hash table has a load factor greater than 1, it means:",
            "options": [
                "It’s less than half full",
                "It’s more than half full",
                "It’s completely full",
                "It’s overfull"
            ],
            "answer": "It’s overfull",
            "explanation": "A load factor greater than 1 indicates that the number of entries exceeds the table’s size."
        },
        {
            "question": "Which of the following best describes open addressing?",
            "options": [
                "Only one key-value pair can exist per index",
                "Multiple key-value pairs can exist per index using linked lists",
                "The hash table uses trees for storage",
                "Each key is associated with a unique address"
            ],
            "answer": "Only one key-value pair can exist per index",
            "explanation": "Open addressing means that all elements are stored in the hash table array itself, and when collisions occur, we find another slot in the same table."
        },
        {
            "question": "What would be the worst case time complexity for searching an element in a hash table?",
            "options": [
                "O(1)",
                "O(log n)",
                "O(n)",
                "O(n^2)"
            ],
            "answer": "O(n)",
            "explanation": "If all keys collide to the same index, the search operation might need to traverse through all of them, making it O(n)."
        },
        {
            "question": "Which of the following scenarios would make a hash table perform poorly?",
            "options": [
                "Uniform key distribution",
                "High number of insert operations",
                "High number of delete operations",
                "Non-uniform key distribution"
            ],
            "answer": "Non-uniform key distribution",
            "explanation": "Non-uniform key distribution means that many keys hash to the same indices, leading to collisions and poor performance."
        },
        {
            "question": "Rehashing in a hash table means:",
            "options": [
                "Calculating the hash value again",
                "Deleting all values",
                "Creating a larger table and copying values to the new table",
                "Clearing all collisions"
            ],
            "answer": "Creating a larger table and copying values to the new table",
            "explanation": "Rehashing involves resizing the hash table (usually doubling its size) and re-inserting the elements to distribute them uniformly."
        }
    ],
    "JavaScript": [
        {
            "question": "What are the basic data types in JavaScript?",
            "options": [
                "String, Number, Boolean, Object, Function",
                "String, Number, Boolean, Object, Undefined, Null",
                "String, Number, Bigint, Boolean, Undefined, Null, Symbol, Object",
                "String, Integer, Float, Boolean, Array"
            ],
            "answer": "String, Number, Bigint, Boolean, Undefined, Null, Symbol, Object",
            "explanation": "JavaScript has eight basic data types, including String, Number, Bigint, Boolean, Undefined, Null, Symbol, and Object."
        },
        {
            "question": "Which JavaScript data type is used to represent large integers?",
            "options": [
                "Integer",
                "Float",
                "Bigint",
                "Double"
            ],
            "answer": "Bigint",
            "explanation": "Bigint is a JavaScript data type introduced to handle integers larger than those that can be represented by the Number type."
        },
        {
            "question": "In JavaScript, how are objects typically written?",
            "options": [
                "Between parentheses ()",
                "Between square brackets []",
                "Between curly braces {}",
                "Between angle brackets <>"
            ],
            "answer": "Between curly braces {}",
            "explanation": "JavaScript objects are written with curly braces, with properties defined as name:value pairs."
        },
        {
            "question": "What will be the output of typeof 3.14 in JavaScript?",
            "options": [
                "\"integer\"",
                "\"float\"",
                "\"number\"",
                "\"decimal\""
            ],
            "answer": "\"number\"",
            "explanation": "In JavaScript, both integers and floating point numbers are considered as \"number\" type."
        },
        {
            "question": "What is the default value and type of an uninitialized variable in JavaScript?",
            "options": [
                "null, \"null\"",
                "0, \"number\"",
                "\"\", \"string\"",
                "undefined, \"undefined\""
            ],
            "answer": "undefined, \"undefined\"",
            "explanation": "A variable without a value in JavaScript has the value undefined and the type is also undefined."
        },
        {
            "question": "How can you write an array in JavaScript?",
            "options": [
                "Using curly braces {}",
                "Using parentheses ()",
                "Using square brackets []",
                "Using angle brackets <>"
            ],
            "answer": "Using square brackets []",
            "explanation": "JavaScript arrays are written with square brackets, with items separated by commas."
        },
        {
            "question": "What does the typeof operator return for an empty string in JavaScript?",
            "options": [
                "\"undefined\"",
                "\"null\"",
                "\"string\"",
                "\"empty\""
            ],
            "answer": "\"string\"",
            "explanation": "An empty string in JavaScript is still of type \"string\"."
        },
        {
            "question": "What are the possible values of a Boolean type in JavaScript?",
            "options": [
                "0 and 1",
                "Yes and No",
                "True and False",
                "true and false"
            ],
            "answer": "true and false",
            "explanation": "In JavaScript, the Boolean type can only have two values: true or false."
        },
        {
            "question": "Which of the following is an example of an Object data type in JavaScript?",
            "options": [
                "\"Hello, World!\"",
                "42",
                "[\"Apple\", \"Banana\", \"Cherry\"]",
                "{name: \"John\", age: 30}"
            ],
            "answer": "{name: \"John\", age: 30}",
            "explanation": "An Object in JavaScript is written with curly braces and consists of properties defined as name:value pairs."
        },
        {
            "question": "What is the result of adding a number and a string in JavaScript?",
            "options": [
                "Error",
                "NaN",
                "The number as a string",
                "Concatenation of the number and string"
            ],
            "answer": "Concatenation of the number and string",
            "explanation": "When adding a number and a string, JavaScript will treat the number as a string and concatenate them."
        },
        {
            "question": "Which data type is used in JavaScript to handle text?",
            "options": [
                "Char",
                "Text",
                "String",
                "Varchar"
            ],
            "answer": "String",
            "explanation": "A string in JavaScript is used to handle text and can be written with either single or double quotes."
        },
        {
            "question": "How are JavaScript numbers stored?",
            "options": [
                "As integers only",
                "As floating-point numbers",
                "As strings",
                "As binary values"
            ],
            "answer": "As floating-point numbers",
            "explanation": "All JavaScript numbers are stored as decimal numbers (floating point), regardless of whether they have decimals or not."
        },
        {
            "question": "What does typeof operator return for an array in JavaScript?",
            "options": [
                "\"array\"",
                "\"object\"",
                "\"list\"",
                "\"collection\""
            ],
            "answer": "\"object\"",
            "explanation": "In JavaScript, arrays are technically a type of object, so the typeof operator returns \"object\" for an array."
        },
        {
            "question": "How can you represent a date in JavaScript?",
            "options": [
                "Using a string",
                "Using a special Date object",
                "Using a timestamp number",
                "Using an array"
            ],
            "answer": "Using a special Date object",
            "explanation": "In JavaScript, dates are represented using the Date object, which can be created with a specific date string."
        },
        {
            "question": "What type of data type is null in JavaScript?",
            "options": [
                "Object",
                "Undefined",
                "Boolean",
                "Number"
            ],
            "answer": "Object",
            "explanation": "In JavaScript, null is considered an object type, despite being used to represent the absence of any object value."
        },
        {
            "question": "What value does JavaScript assign to a variable that is declared but not initialized?",
            "options": [
                "0",
                "\"\"",
                "null",
                "undefined"
            ],
            "answer": "undefined",
            "explanation": "A variable that is declared but not initialized in JavaScript is automatically assigned the value undefined."
        },
        {
            "question": "What is the result of using the typeof operator on the expression 3 + 4 in JavaScript?",
            "options": [
                "\"string\"",
                "\"number\"",
                "\"expression\"",
                "\"integer\""
            ],
            "answer": "\"number\"",
            "explanation": "The typeof operator returns the type of the result of the expression, which in the case of 3 + 4 is a number."
        },
        {
            "question": "Which statement is true regarding JavaScript types?",
            "options": [
                "JavaScript types are static and cannot change once set.",
                "JavaScript variables can hold multiple types at the same time.",
                "JavaScript has dynamic types, meaning variables can hold different data types at different times.",
                "JavaScript types are strictly enforced and cannot be automatically converted."
            ],
            "answer": "JavaScript has dynamic types, meaning variables can hold different data types at different times.",
            "explanation": "JavaScript is a dynamically typed language, allowing variables to hold different data types at different times."
        },
        {
            "question": "How does JavaScript interpret the addition of a number and a string?",
            "options": [
                "As a mathematical addition operation",
                "As a type conversion to number",
                "As a syntax error",
                "As a concatenation operation"
            ],
            "answer": "As a concatenation operation",
            "explanation": "When a number and a string are added in JavaScript, it treats the number as a string and performs concatenation."
        },
        {
            "question": "What is the output of typeof new Date() in JavaScript?",
            "options": [
                "\"date\"",
                "\"object\"",
                "\"string\"",
                "\"time\""
            ],
            "answer": "\"object\"",
            "explanation": "The new Date() in JavaScript creates a Date object, and therefore typeof new Date() returns \"object\"."
        },
        {
            "question": "What are the main types of loops available in JavaScript?",
            "options": [
                "for loop, do…while loop, while loop",
                "for loop, do…until loop, while loop",
                "for loop, while loop, repeat…until loop",
                "for loop, do…while loop, repeat…until loop"
            ],
            "answer": "for loop, do…while loop, while loop",
            "explanation": ""
        },
        {
            "question": "Which loop is guaranteed to execute the block of code at least once?",
            "options": [
                "for loop",
                "do…while loop",
                "while loop",
                "none"
            ],
            "answer": "do…while loop",
            "explanation": ""
        },
        {
            "question": "What does the while loop do?",
            "options": [
                "Executes a block of code once and then stops.",
                "Executes a block of code repeatedly as long as the condition is true.",
                "Executes a block of code repeatedly at a specific interval of time.",
                "Executes a block of code repeatedly until a condition becomes true."
            ],
            "answer": "Executes a block of code repeatedly as long as the condition is true.",
            "explanation": ""
        },
        {
            "question": "What is the output of the following while loop?",
            "options": [
                "Hello",
                "Hello Hello Hello",
                "0 1 2",
                "undefined"
            ],
            "answer": "Hello Hello Hello",
            "explanation": ""
        },
        {
            "question": "What is the difference between for and while loops?",
            "options": [
                "There is no difference; they are interchangeable.",
                "for loops are used for a fixed number of iterations, while while loops are used for unknown or dynamically determined iterations.",
                "for loops are used for asynchronous operations, while while loops are used for synchronous operations.",
                "for loops are used with arrays, while loops are used with objects."
            ],
            "answer": "for loops are used for a fixed number of iterations, while loops are used for unknown or dynamically determined iterations.",
            "explanation": ""
        },
        {
            "question": "What does the do-while loop do?",
            "options": [
                "Executes a block of code once and then stops.",
                "Executes a block of code repeatedly as long as the condition is true.",
                "Executes a block of code repeatedly at a specific interval of time.",
                "First executes the block of code before checking the condition."
            ],
            "answer": "First executes the block of code before checking the condition.",
            "explanation": ""
        },
        {
            "question": "What is the output of the following do-while loop?",
            "options": [
                "Hello Hello Hello Hello Hello",
                "Hello",
                "undefined",
                "Hello Hello Hello Hello"
            ],
            "answer": "Hello",
            "explanation": ""
        },
        {
            "question": "What is the correct way to skip the current iteration of a loop in JavaScript?",
            "options": [
                "break;",
                "skip;",
                "next;",
                "continue;"
            ],
            "answer": "continue;",
            "explanation": ""
        },
        {
            "question": "What is the output of the following loop?",
            "options": [
                "0 1 3 4",
                "0 1 2 3 4",
                "2 4",
                "0 1 2 4"
            ],
            "answer": "0 1 3 4",
            "explanation": ""
        },
        {
            "question": "What is the key difference between the while loop and the do…while loop?",
            "options": [
                "The while loop executes the code block first, then checks the condition. The do…while loop checks the condition first, then executes the code block.",
                "The while loop always executes the code block at least once. The do…while loop checks the condition first and may skip the code block entirely.",
                "The while loop is more efficient for larger datasets. The do…while loop is more efficient for smaller datasets.",
                "There is no difference between the two; they can be used interchangeably."
            ],
            "answer": "The while loop executes the code block first, then checks the condition. The do…while loop checks the condition first, then executes the code block.",
            "explanation": ""
        },
        {
            "question": "How do you create an empty array in JavaScript?",
            "options": [
                "let arr = new Array();",
                "let arr = [];",
                "let arr = {};",
                "let arr = null;"
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What is the index of the first element in an array?",
            "options": [
                "0",
                "1",
                "-1",
                "10"
            ],
            "answer": "0",
            "explanation": ""
        },
        {
            "question": "Which method do you use to add elements to the end of an array?",
            "options": [
                "add()",
                "push()",
                "append()",
                "concat()"
            ],
            "answer": "push()",
            "explanation": ""
        },
        {
            "question": "How do you remove the last element from an array?",
            "options": [
                "removeLast()",
                "deleteLast()",
                "pop()",
                "splice()"
            ],
            "answer": "pop()",
            "explanation": ""
        },
        {
            "question": "How do you check if a variable is an array in JavaScript?",
            "options": [
                "isArray(x)",
                "x.isArray()",
                "x instanceof Array",
                "typeof Array"
            ],
            "answer": "isArray(x)",
            "explanation": ""
        },
        {
            "question": "What will be the output of the following code snippet?",
            "options": [
                "0",
                "1",
                "2",
                "3"
            ],
            "answer": "2",
            "explanation": ""
        },
        {
            "question": "How do you check if an element exists in an array?",
            "options": [
                "Using the check() method",
                "Using the search() method",
                "Using the includes() method",
                "Using the exists() method"
            ],
            "answer": "Using the includes() method",
            "explanation": ""
        },
        {
            "question": "What method do you use to join all elements of an array into a single string?",
            "options": [
                "join()",
                "concat()",
                "merge()",
                "combine()"
            ],
            "answer": "join()",
            "explanation": ""
        },
        {
            "question": "How do you remove elements from an array, starting from a specific index?",
            "options": [
                "removeFromIndex()",
                "splice()",
                "cut()",
                "deleteFromIndex()"
            ],
            "answer": "splice()",
            "explanation": ""
        },
        {
            "question": "How do you find the index of a specific element in an array?",
            "options": [
                "findIndex()",
                "indexOf()",
                "searchIndex()",
                "getElementIndex()"
            ],
            "answer": "indexOf()",
            "explanation": ""
        },
        {
            "question": "What method do you use to create a new array by applying a function to each element in the existing array?",
            "options": [
                "apply()",
                "map()",
                "transform()",
                "forEach()"
            ],
            "answer": "map()",
            "explanation": ""
        },
        {
            "question": "What does the forEach() method do?",
            "options": [
                "Iterates over the array and executes a function once for each element.",
                "Splits the array into multiple smaller arrays.",
                "Sorts the elements of the array in ascending order.",
                "Reverses the order of the elements in the array."
            ],
            "answer": "Iterates over the array and executes a function once for each element.",
            "explanation": ""
        },
        {
            "question": "How can you sort the elements of an array in descending order?",
            "options": [
                "array.sort(descending)",
                "array.reverse()",
                "array.sort().reverse()",
                "array.sort((a, b) => b – a)"
            ],
            "answer": "array.sort((a, b) => b – a)",
            "explanation": ""
        },
        {
            "question": "What method is used to remove elements from an array based on a condition and return the removed elements as a new array?",
            "options": [
                "removeIf()",
                "filter()",
                "extract()",
                "deleteIf()"
            ],
            "answer": "filter()",
            "explanation": ""
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "15",
                "10",
                "0",
                "30"
            ],
            "answer": "15",
            "explanation": ""
        },
        {
            "question": "How do you define a function in JavaScript?",
            "options": [
                "",
                "",
                "",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": ""
        },
        {
            "question": "What keyword is used to return a value from a JavaScript function?",
            "options": [
                "value",
                "result",
                "return",
                "output"
            ],
            "answer": "return",
            "explanation": ""
        },
        {
            "question": "How do you call a JavaScript function named myFunction?",
            "options": [
                "call myFunction();",
                "run myFunction();",
                "myFunction();",
                "execute myFunction();"
            ],
            "answer": "myFunction();",
            "explanation": ""
        },
        {
            "question": "What is a callback function in JavaScript?",
            "options": [
                "A function that performs asynchronous tasks.",
                "A function that is called at the end of the program’s execution.",
                "A function that is passed as an argument to another function and is executed inside that function.",
                "A function that is used for error handling."
            ],
            "answer": "A function that is passed as an argument to another function and is executed inside that function.",
            "explanation": ""
        },
        {
            "question": "What is a “recursive” function in JavaScript?",
            "options": [
                "A function that includes a loop.",
                "A function that calls itself within its own body.",
                "A function that takes multiple arguments.",
                "A function that executes a callback function."
            ],
            "answer": "A function that calls itself within its own body.",
            "explanation": ""
        },
        {
            "question": "What is a “closure” in JavaScript?",
            "options": [
                "A function that is stored as a property of an object.",
                "A function that can be accessed globally from any part of the code.",
                "A function that is defined inside another function and has access to its outer function’s variables.",
                "A function that takes an unlimited number of arguments."
            ],
            "answer": "A function that is defined inside another function and has access to its outer function’s variables.",
            "explanation": ""
        },
        {
            "question": "Which method can be used to execute a function after a specified time interval?",
            "options": [
                "executeAfterTime()",
                "setInterval()",
                "executeEvery()",
                "setTimeout()"
            ],
            "answer": "setTimeout()",
            "explanation": ""
        },
        {
            "question": "How can you immediately invoke an anonymous function in JavaScript?",
            "options": [
                "function() { }();",
                "function { } ();",
                "function { } ();",
                "(function() { })();"
            ],
            "answer": "(function() { })();",
            "explanation": ""
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "Hello!",
                "sayHello",
                "function greet() { console.log(“Hello!”); }",
                "undefined"
            ],
            "answer": "Hello!",
            "explanation": ""
        },
        {
            "question": "How do arrow functions differ from regular functions in ES6?",
            "options": [
                "Arrow functions have shorter syntax than regular functions.",
                "Arrow functions do not have their own this value.",
                "Arrow functions cannot be used as methods in objects.",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": ""
        },
        {
            "question": "What is the primary goal of Object-Oriented Programming (OOP) in JavaScript?",
            "options": [
                "To make the code shorter and more concise.",
                "Organize code into classes and objects.",
                "To execute code faster than procedural programming.",
                "To eliminate the need for functions."
            ],
            "answer": "Organize code into classes and objects.",
            "explanation": ""
        },
        {
            "question": "What is a class in JavaScript?",
            "options": [
                "A built-in object provided by the JavaScript runtime.",
                "A blueprint or template for creating objects with shared properties and methods.",
                "A single function used to define the behavior of an object.",
                "A reserved keyword used to declare variables."
            ],
            "answer": "A blueprint or template for creating objects with shared properties and methods.",
            "explanation": ""
        },
        {
            "question": "How do you create an object from a class in JavaScript?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "Which keyword is used to refer to the current instance of a class inside its methods?",
            "options": [
                "self",
                "this",
                "it",
                "current"
            ],
            "answer": "this",
            "explanation": ""
        },
        {
            "question": "Which keyword is used to call a method defined in the parent class from a child class in JavaScript?",
            "options": [
                "parent",
                "this",
                "base",
                "super"
            ],
            "answer": "super",
            "explanation": ""
        },
        {
            "question": "What is the purpose of the constructor method in a class?",
            "options": [
                "To create new instances of the class.",
                "To define class properties.",
                "To create private variables.",
                "To execute code when the class is inherited."
            ],
            "answer": "To create new instances of the class.",
            "explanation": ""
        },
        {
            "question": "What is the concept of “inheritance” in OOPS?",
            "options": [
                "The process of hiding the implementation details of an object.",
                "The process of defining multiple constructors for a class.",
                "The process of creating a new class from an existing class, inheriting its properties and methods.",
                "The process of modifying the internal state of an object."
            ],
            "answer": "The process of creating a new class from an existing class, inheriting its properties and methods.",
            "explanation": ""
        },
        {
            "question": "How do you implement inheritance in JavaScript classes?",
            "options": [
                "Using the extends keyword and specifying the parent class.",
                "Using the inherits keyword and specifying the parent class.",
                "Using the super() method to inherit properties from the parent class.",
                "Using the inheritFrom keyword and specifying the parent class."
            ],
            "answer": "Using the extends keyword and specifying the parent class.",
            "explanation": ""
        },
        {
            "question": "Which principle of OOPS encourages restricting direct access to certain class properties and methods?",
            "options": [
                "Encapsulation",
                "Inheritance",
                "Polymorphism",
                "Abstraction"
            ],
            "answer": "Encapsulation",
            "explanation": ""
        },
        {
            "question": "Which OOP concept promotes the idea of hiding the internal implementation details of a class from the outside world?",
            "options": [
                "Abstraction",
                "Encapsulation",
                "Polymorphism",
                "Inheritance"
            ],
            "answer": "Abstraction",
            "explanation": ""
        },
        {
            "question": "What is the concept in OOP that allows a class to have multiple methods with the same name but different parameters?",
            "options": [
                "Encapsulation",
                "Abstraction",
                "Polymorphism",
                "Inheritance"
            ],
            "answer": "Polymorphism",
            "explanation": ""
        },
        {
            "question": "Which principle of OOPS suggests that a class should only have one reason to change?",
            "options": [
                "Abstraction",
                "Polymorphism",
                "Single Responsibility Principle (SRP)",
                "DRY (Don’t Repeat Yourself) Principle"
            ],
            "answer": "Single Responsibility Principle (SRP)",
            "explanation": ""
        },
        {
            "question": "How can you create an object without using a class in JavaScript?",
            "options": [
                "By using the createObject() method.",
                "By using the Object.create() method or object literals.",
                "By importing objects from other modules.",
                "By using the new keyword followed by object properties."
            ],
            "answer": "By using the Object.create() method or object literals.",
            "explanation": ""
        },
        {
            "question": "How do you declare a string variable in JavaScript?",
            "options": [
                "let str = ‘Hello’;",
                "var str = “Hello”;",
                "const str = ‘Hello’;",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "The lastIndexOf() method in JavaScript returns the last occurrence of a specified value in a string. The string is searched from the end to the beginning, but returns the index from the beginning, at position 0. If we apply this method to ‘JavaScript’.lastIndexOf(‘a’), the output will be 3. This is because the last occurrence of ‘a’ in ‘JavaScript’ is at index 3 (remember, JavaScript uses 0-based indexing)."
        },
        {
            "question": "What will be the length of the following string?",
            "options": [
                "11",
                "12",
                "13",
                "14"
            ],
            "answer": "13",
            "explanation": ""
        },
        {
            "question": "Which method is used to convert a string to all lowercase letters?",
            "options": [
                "toLowerCase()",
                "toLower()",
                "lowerCase()",
                "convertToLower()"
            ],
            "answer": "toLowerCase()",
            "explanation": ""
        },
        {
            "question": "Which method is used to remove leading and trailing whitespace from a string?",
            "options": [
                "trim()",
                "removeWhitespace()",
                "strip()",
                "deleteWhitespace()"
            ],
            "answer": "trim()",
            "explanation": ""
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "J",
                "j",
                "JavaScript",
                "Error"
            ],
            "answer": "J",
            "explanation": ""
        },
        {
            "question": "What will ‘hello’.concat(‘ world’) return?",
            "options": [
                "hello world",
                "hello",
                "world",
                "Error"
            ],
            "answer": "hello world",
            "explanation": ""
        },
        {
            "question": "What will ‘JavaScript’.endsWith(‘script’) return?",
            "options": [
                "true",
                "false",
                "Error",
                "JavaScript"
            ],
            "answer": "false",
            "explanation": ""
        },
        {
            "question": "What is the result of ‘JavaScript’.indexOf(‘Script’)?",
            "options": [
                "4",
                "5",
                "6",
                "-1"
            ],
            "answer": "4",
            "explanation": ""
        },
        {
            "question": "What will ‘JavaScript’.lastIndexOf(‘a’) return?",
            "options": [
                "1",
                "2",
                "3",
                "7"
            ],
            "answer": "3",
            "explanation": ""
        },
        {
            "question": "What is the output of ‘hello’.replace(‘l’, ‘r’)?",
            "options": [
                "herro",
                "hello",
                "herlo",
                "Error"
            ],
            "answer": "herlo",
            "explanation": ""
        },
        {
            "question": "What will ‘JavaScript’.slice(4, 10) return?",
            "options": [
                "Script",
                "JavaS",
                "Java",
                "Script"
            ],
            "answer": "Script",
            "explanation": ""
        },
        {
            "question": "What will ‘JavaScript’.split(”) return?",
            "options": [
                "[‘J’, ‘a’, ‘v’, ‘a’, ‘S’, ‘c’, ‘r’, ‘i’, ‘p’, ‘t’]",
                "[‘JavaScript’]",
                "[‘Java’, ‘Script’]",
                "Error"
            ],
            "answer": "[‘J’, ‘a’, ‘v’, ‘a’, ‘S’, ‘c’, ‘r’, ‘i’, ‘p’, ‘t’].",
            "explanation": ""
        },
        {
            "question": "What is the output of ‘JavaScript’.startsWith(‘Java’)?",
            "options": [
                "true",
                "false",
                "‘Java’",
                "Error"
            ],
            "answer": "true",
            "explanation": ""
        },
        {
            "question": "What is the output of ‘JavaScript’.substring(4)?",
            "options": [
                "Script",
                "JavaS",
                "Java",
                "Script"
            ],
            "answer": "Script",
            "explanation": ""
        },
        {
            "question": "What method do you use to join all elements of an array into a single string?",
            "options": [
                "join()",
                "concat()",
                "merge()",
                "combine()"
            ],
            "answer": "join()",
            "explanation": ""
        },
        {
            "question": "What is a variable in JavaScript?",
            "options": [
                "A keyword used to perform arithmetic operations.",
                "A container for storing data values.",
                "A built-in function for displaying output on the screen.",
                "A data type representing text and characters."
            ],
            "answer": "A container for storing data values.",
            "explanation": "In JavaScript, a variable is a container used to store data values, such as numbers, strings, objects, or any other type of data."
        },
        {
            "question": "What is the correct way to declare a variable in JavaScript?",
            "options": [
                "variable x = 10;",
                "var x = 10;",
                "x = 10;",
                "int x = 10;"
            ],
            "answer": "var x = 10;",
            "explanation": "In JavaScript, variables are declared using the ‘var’ keyword, followed by the variable name and an optional initial value."
        },
        {
            "question": "What is the result of the following code?",
            "options": [
                "15",
                "“15”",
                "“510”",
                "Syntax Error"
            ],
            "answer": "15",
            "explanation": "The code declares two variables x and y with the values 5 and 10, respectively. Then, it assigns the sum of x and y to the variable result. The sum of 5 and 10 is 15."
        },
        {
            "question": "Which of the following is NOT a valid variable name in JavaScript?",
            "options": [
                "myVariable",
                "_value",
                "1count",
                "$price"
            ],
            "answer": "1count",
            "explanation": "Variable names in JavaScript cannot start with a number. Therefore, 1count is not a valid variable name."
        },
        {
            "question": "Which keyword is used to declare block-scoped variables in ES6?",
            "options": [
                "var",
                "let",
                "const",
                "variable"
            ],
            "answer": "let",
            "explanation": "Variables Naming Conventions:"
        },
        {
            "question": "What is the difference between let and const in JavaScript?",
            "options": [
                "let is used for constant values, while const is used for variables.",
                "let can be reassigned, while const is read-only and cannot be reassigned.",
                "let is block-scoped, while const is function-scoped.",
                "There is no difference; let and const are interchangeable."
            ],
            "answer": "let can be reassigned, while const is read-only and cannot be reassigned.",
            "explanation": "Use Camel Case"
        },
        {
            "question": "What is the purpose of the const keyword in JavaScript?",
            "options": [
                "To declare a constant value that cannot be changed after initialization.",
                "To declare a variable with block scope.",
                "To define a function in JavaScript.",
                "To store multiple values in an array."
            ],
            "answer": "To declare a constant value that cannot be changed after initialization.",
            "explanation": "Begin with Letters, $, or _"
        },
        {
            "question": "What is the difference between declaring a variable with var and let?",
            "options": [
                "var is block-scoped, while let is function-scoped.",
                "var variables can be reassigned, while let variables cannot.",
                "var variables are limited to the block in which they are defined, while let variables are accessible throughout the entire function.",
                "There is no difference; var and let can be used interchangeably."
            ],
            "answer": "var variables are limited to the block in which they are defined, while let variables are accessible throughout the entire function.",
            "explanation": "Avoid Reserved Words"
        },
        {
            "question": "What will be the value of the variable result in the following code?",
            "options": [
                "“Greater than 10”",
                "“Less than or equal to 10”",
                "“20”",
                "Syntax Error"
            ],
            "answer": "“Greater than 10”",
            "explanation": "Be Descriptive"
        },
        {
            "question": "JavaScript variables are:",
            "options": [
                "Case-insensitive",
                "Case-sensitive",
                "Neither case-insensitive nor case-sensitive",
                "Case-sensitive only in strict mode"
            ],
            "answer": "Case-sensitive",
            "explanation": "Don’t Use Hyphens (-)"
        },
        {
            "question": "What is the primary purpose of a function in JavaScript?",
            "options": [
                "To iterate over arrays",
                "To execute a block of code when invoked",
                "To store data",
                "To create HTML content"
            ],
            "answer": "To execute a block of code when invoked",
            "explanation": "A JavaScript function is a block of code designed to perform a particular task and is executed when it is invoked or called."
        },
        {
            "question": "Which of the following is the correct syntax to define a function in JavaScript?",
            "options": [
                "function = myFunction(p1, p2) {…}",
                "function myFunction(p1, p2) {…}",
                "myFunction(p1, p2) = function {…}",
                "myFunction function(p1, p2) {…}"
            ],
            "answer": "function myFunction(p1, p2) {…}",
            "explanation": "A JavaScript function is defined with the function keyword, followed by a name and parentheses that may include parameter names."
        },
        {
            "question": "How are arguments passed to a function in JavaScript?",
            "options": [
                "Through global variables",
                "As properties of an object",
                "As values or variables within the function's parentheses",
                "Via return statements from other functions"
            ],
            "answer": "As values or variables within the function's parentheses",
            "explanation": "Function arguments are the values received by the function when it is invoked, and they are passed within the parentheses of the function call."
        },
        {
            "question": "What is the result of a JavaScript function when the return statement is executed?",
            "options": [
                "The function pauses execution",
                "The function continues to the next line of code",
                "The function stops executing and returns a value",
                "The function resets its parameters to their initial values"
            ],
            "answer": "The function stops executing and returns a value",
            "explanation": "When a return statement is reached, the function stops executing and returns the value specified by the return statement."
        },
        {
            "question": "Which statement accurately describes JavaScript functions?",
            "options": [
                "They can only be defined once and not reused",
                "They are executed immediately upon definition",
                "They allow code to be reused with different arguments",
                "They cannot return values"
            ],
            "answer": "They allow code to be reused with different arguments",
            "explanation": "Functions enable code reuse and can be executed multiple times with different arguments to produce different results."
        },
        {
            "question": "What does the () operator do when used with a function name?",
            "options": [
                "Defines the function",
                "Deletes the function",
                "Invokes or calls the function",
                "Assigns a value to the function"
            ],
            "answer": "Invokes or calls the function",
            "explanation": "The () operator is used to invoke or call a function in JavaScript."
        },
        {
            "question": "In JavaScript, what are function expressions?",
            "options": [
                "Variables that store data",
                "Statements that declare functions",
                "Functions assigned to variables",
                "Syntax errors"
            ],
            "answer": "Functions assigned to variables",
            "explanation": "Function expressions involve defining a function and assigning it to a variable. These functions can be anonymous and are invoked using the variable name."
        },
        {
            "question": "What does the Function() constructor in JavaScript do?",
            "options": [
                "Creates a new variable",
                "Instantiates a new function object",
                "Calls a function",
                "Returns the length of a function"
            ],
            "answer": "Instantiates a new function object",
            "explanation": "The Function() constructor in JavaScript is used to create new function objects."
        },
        {
            "question": "How does function hoisting affect function declarations in JavaScript?",
            "options": [
                "Functions must be defined at the top of the script",
                "Functions can be called before they are declared",
                "Functions are automatically converted to expressions",
                "Functions are executed immediately"
            ],
            "answer": "Functions can be called before they are declared",
            "explanation": "Due to function hoisting, function declarations in JavaScript can be called before they are declared in the code."
        },
        {
            "question": "What is a self-invoking function in JavaScript?",
            "options": [
                "A function that calls itself recursively",
                "A function that is automatically invoked after it is defined",
                "A function that can only be invoked once",
                "A function that must be manually invoked"
            ],
            "answer": "A function that is automatically invoked after it is defined",
            "explanation": "Self-invoking functions are function expressions that automatically execute immediately after they are defined."
        },
        {
            "question": "Can JavaScript functions be used as values in expressions?",
            "options": [
                "No, functions cannot be used in expressions",
                "Yes, but only if they don't return a value",
                "Yes, functions can be used as values in expressions",
                "No, functions can only be used as standalone entities"
            ],
            "answer": "Yes, functions can be used as values in expressions",
            "explanation": "JavaScript functions can be used as values and can be part of expressions, just like any other value."
        },
        {
            "question": "What is a unique feature of arrow functions in JavaScript?",
            "options": [
                "They can return multiple values at once",
                "They do not have their own this context",
                "They are hoisted like traditional function declarations",
                "They cannot have parameters"
            ],
            "answer": "They do not have their own this context",
            "explanation": "Arrow functions do not have their own this context, which makes them behave differently than traditional functions, especially in object methods."
        },
        {
            "question": "What happens when you access a function without the () in JavaScript?",
            "options": [
                "The function is deleted",
                "The function is invoked",
                "The function's code as a string is returned",
                "The function object is returned"
            ],
            "answer": "The function object is returned",
            "explanation": "Accessing a function without () returns the function object itself, not the result of the function."
        },
        {
            "question": "What is a characteristic of local variables in JavaScript functions?",
            "options": [
                "They can be accessed anywhere in the script",
                "They are shared across all functions",
                "They can only be accessed within the function where they are declared",
                "They persist after the function execution is completed"
            ],
            "answer": "They can only be accessed within the function where they are declared",
            "explanation": "Local variables in JavaScript functions are confined to the scope of the function in which they are declared and cannot be accessed outside of it."
        },
        {
            "question": "How are arrow functions written differently from traditional functions in JavaScript?",
            "options": [
                "They use the var keyword",
                "They require the function keyword",
                "They omit the function and return keywords and curly brackets for single statements",
                "They must always return an object"
            ],
            "answer": "They omit the function and return keywords and curly brackets for single statements",
            "explanation": "Arrow functions allow a shorter syntax and do not require the function keyword, the return keyword, and curly brackets for single statements."
        },
        {
            "question": "What is the behavior of arguments.length in a JavaScript function?",
            "options": [
                "It sets the number of parameters the function accepts",
                "It returns the number of arguments passed to the function",
                "It determines the maximum number of arguments allowed",
                "It always returns the value zero"
            ],
            "answer": "It returns the number of arguments passed to the function",
            "explanation": "The arguments.length property in a JavaScript function returns the number of arguments that were passed to the function when it was invoked."
        },
        {
            "question": "What is the difference between function declarations and function expressions in terms of hoisting?",
            "options": [
                "Both are hoisted to the top of their scope",
                "Function declarations are hoisted, but function expressions are not",
                "Function expressions are hoisted, but function declarations are not",
                "Neither function declarations nor expressions are hoisted"
            ],
            "answer": "Function declarations are hoisted, but function expressions are not",
            "explanation": "Function declarations are hoisted, meaning they can be called before they are defined in the code. Function expressions are not hoisted in the same way."
        },
        {
            "question": "Which statement is true about functions defined using the Function() constructor?",
            "options": [
                "They are the preferred way to define functions in JavaScript",
                "They are identical to function expressions",
                "They are rarely used and can be avoided",
                "They automatically execute upon definition"
            ],
            "answer": "They are rarely used and can be avoided",
            "explanation": "While it's possible to define functions using the Function() constructor, this method is less common and often can be avoided in favor of other function definitions."
        },
        {
            "question": "How does the use of const with arrow functions benefit the code?",
            "options": [
                "It allows the function to be reassigned",
                "It ensures the function cannot be hoisted",
                "It prevents the function from being redeclared or reassigned",
                "It increases the execution speed of the function"
            ],
            "answer": "It prevents the function from being redeclared or reassigned",
            "explanation": "Using const with arrow functions (or any function expression) ensures that the function cannot be redeclared or reassigned, which helps maintain code stability."
        },
        {
            "question": "In what scenario is an arrow function not suitable in JavaScript?",
            "options": [
                "As a method inside an object",
                "For simple arithmetic operations",
                "When a concise syntax is required",
                "When used as a callback function"
            ],
            "answer": "As a method inside an object",
            "explanation": "Arrow functions are not well suited for defining object methods because they do not have their own this context, which is often needed in object methods."
        },
        {
            "question": "How are JavaScript objects typically defined?",
            "options": [
                "With the new keyword",
                "Using square brackets []",
                "With an object literal",
                "Using round parentheses ()"
            ],
            "answer": "With an object literal",
            "explanation": "JavaScript objects are commonly defined using an object literal, which is a list of name:value pairs inside curly braces."
        },
        {
            "question": "What are the properties of a JavaScript object?",
            "options": [
                "Functions inside an object",
                "The data values associated with an object",
                "The methods available to an object",
                "The parameters passed to an object"
            ],
            "answer": "The data values associated with an object",
            "explanation": "The properties of a JavaScript object are the data values associated with it, defined as name:value pairs."
        },
        {
            "question": "How can you access the properties of a JavaScript object?",
            "options": [
                "Using square brackets []",
                "Through dot notation or square brackets",
                "By calling a method on the object",
                "By using the new keyword"
            ],
            "answer": "Through dot notation or square brackets",
            "explanation": "Properties of a JavaScript object can be accessed either through dot notation (objectName.propertyName) or square brackets (objectName[\"propertyName\"])."
        },
        {
            "question": "What is a method in a JavaScript object?",
            "options": [
                "A variable that stores data",
                "A function stored as a property",
                "A standalone function",
                "A prototype of the object"
            ],
            "answer": "A function stored as a property",
            "explanation": "Methods in JavaScript objects are actions that can be performed on objects. They are essentially functions stored as properties within the object."
        },
        {
            "question": "In JavaScript, what does the this keyword refer to inside an object method?",
            "options": [
                "The global object",
                "The nearest function",
                "The object itself",
                "The window object"
            ],
            "answer": "The object itself",
            "explanation": "Inside an object method, the this keyword refers to the object itself, allowing access to its properties and methods."
        },
        {
            "question": "What happens if you access an object method without parentheses in JavaScript?",
            "options": [
                "The method is deleted",
                "The method is invoked",
                "It returns the function definition",
                "It returns undefined"
            ],
            "answer": "It returns the function definition",
            "explanation": "Accessing an object method without parentheses returns the function definition of the method, rather than executing it."
        },
        {
            "question": "Why should you avoid declaring Strings, Numbers, and Booleans as Objects in JavaScript?",
            "options": [
                "It is not allowed in JavaScript",
                "It complicates the code and slows down execution speed",
                "It changes the value type to 'undefined'",
                "It automatically converts them to arrays"
            ],
            "answer": "It complicates the code and slows down execution speed",
            "explanation": "Declaring Strings, Numbers, and Booleans as objects is discouraged as it complicates the code and can slow down execution speed."
        },
        {
            "question": "What is a key feature of JavaScript objects?",
            "options": [
                "They can only store numerical values",
                "They are used to store key/value collections",
                "They cannot have methods",
                "They are immutable"
            ],
            "answer": "They are used to store key/value collections",
            "explanation": "JavaScript objects are used to store collections of data as key/value pairs, making them versatile for various data structures."
        },
        {
            "question": "What does the constructor property of a JavaScript object return?",
            "options": [
                "The value of the object",
                "The function that created the object's prototype",
                "The number of properties in the object",
                "The string representation of the object"
            ],
            "answer": "The function that created the object's prototype",
            "explanation": "The constructor property of a JavaScript object returns the function that created the object's prototype."
        },
        {
            "question": "How do you retrieve all the keys of a JavaScript object as an array?",
            "options": [
                "Using the values() method",
                "Using the keys() method",
                "Through the length property",
                "With the forEach() method"
            ],
            "answer": "Using the keys() method",
            "explanation": "The keys() method returns an Array Iterator object with the keys of the object, allowing you to iterate over the keys."
        },
        {
            "question": "What is the purpose of the prototype property in JavaScript objects?",
            "options": [
                "To check if an object is a prototype of another",
                "To return the string representation of an object",
                "To add properties and methods to an object",
                "To create a new instance of an object"
            ],
            "answer": "To add properties and methods to an object",
            "explanation": "The prototype property allows you to add new properties and methods to existing object types."
        },
        {
            "question": "What does the toString() method do when called on a JavaScript object?",
            "options": [
                "It returns the type of the object",
                "It converts the object to its string representation",
                "It returns the values of the object as a string",
                "It checks if the object is converted to a string"
            ],
            "answer": "It converts the object to its string representation",
            "explanation": "The toString() method is used to convert an object to a string and return the result."
        },
        {
            "question": "How does the valueOf() method of a JavaScript object work?",
            "options": [
                "It changes the values of the object",
                "It returns the primitive value of the object",
                "It sets the value of the object",
                "It returns the string representation of the object"
            ],
            "answer": "It returns the primitive value of the object",
            "explanation": "The valueOf() method is used to return the primitive value of a JavaScript object."
        },
        {
            "question": "What is the best practice for declaring JavaScript objects?",
            "options": [
                "Using the var keyword",
                "Using the let keyword",
                "Using the new keyword",
                "Using the const keyword"
            ],
            "answer": "Using the const keyword",
            "explanation": "It is a common practice to declare objects with the const keyword to prevent them from being reassigned."
        },
        {
            "question": "How are object methods in JavaScript defined?",
            "options": [
                "As separate functions outside the object",
                "As function expressions assigned to properties",
                "Using the new keyword",
                "By using square brackets"
            ],
            "answer": "As function expressions assigned to properties",
            "explanation": "Object methods in JavaScript are defined as function expressions that are assigned to properties within the object."
        },
        {
            "question": "What types of numbers does JavaScript support?",
            "options": [
                "Integers and floats as distinct types",
                "Only integers",
                "Only floats",
                "A single number type, which includes integers and floats"
            ],
            "answer": "A single number type, which includes integers and floats",
            "explanation": "JavaScript has only one type of number, which can be written with or without decimals, including integers and floating-point numbers."
        },
        {
            "question": "How are JavaScript numbers stored internally?",
            "options": [
                "As 32-bit floating-point numbers",
                "As 64-bit floating-point numbers",
                "As separate integer and float types",
                "In hexadecimal format"
            ],
            "answer": "As 64-bit floating-point numbers",
            "explanation": "JavaScript numbers are always stored as double precision floating point numbers (64-bit), following the international IEEE 754 standard."
        },
        {
            "question": "What is the precision limit of integers in JavaScript?",
            "options": [
                "Up to 10 digits",
                "Up to 15 digits",
                "Up to 17 digits",
                "Unlimited"
            ],
            "answer": "Up to 15 digits",
            "explanation": "Integers in JavaScript are accurate up to 15 digits."
        },
        {
            "question": "Which of the following demonstrates JavaScript's floating point arithmetic inaccuracy?",
            "options": [
                "0.1 + 0.2 == 0.3",
                "1 / 0 == Infinity",
                "0.2 * 10 + 0.1 * 10",
                "999999999999999 + 1"
            ],
            "answer": "0.1 + 0.2 == 0.3",
            "explanation": "Floating point arithmetic in JavaScript is not always 100% accurate. For example, 0.1 + 0.2 does not precisely equal 0.3 due to the way floating-point numbers are represented in the language."
        },
        {
            "question": "What is the result of adding a number and a string in JavaScript?",
            "options": [
                "An error",
                "Addition of the two values",
                "A string concatenation",
                "NaN"
            ],
            "answer": "A string concatenation",
            "explanation": "In JavaScript, using the + operator between a number and a string results in string concatenation."
        },
        {
            "question": "What does the JavaScript operation 100 / \"Apple\" return?",
            "options": [
                "0",
                "An error",
                "\"NaN\"",
                "\"100Apple\""
            ],
            "answer": "\"NaN\"",
            "explanation": "Performing arithmetic operations with non-numeric strings in JavaScript, like 100 / \"Apple\", results in NaN (Not a Number)."
        },
        {
            "question": "What is the output of typeof NaN in JavaScript?",
            "options": [
                "\"NaN\"",
                "\"undefined\"",
                "\"object\"",
                "\"number\""
            ],
            "answer": "\"number\"",
            "explanation": "In JavaScript, the typeof NaN returns \"number\", indicating that NaN, while representing 'Not a Number', is technically of the type number."
        },
        {
            "question": "What value does JavaScript return when performing calculations exceeding the largest representable number?",
            "options": [
                "NaN",
                "An error",
                "Undefined",
                "Infinity"
            ],
            "answer": "Infinity",
            "explanation": "JavaScript returns 'Infinity' when calculations exceed the largest possible number, such as division by zero or exceedingly large exponentiations."
        },
        {
            "question": "How does JavaScript interpret numeric constants preceded by \"0x\"?",
            "options": [
                "As decimal numbers",
                "As binary numbers",
                "As octal numbers",
                "As hexadecimal numbers"
            ],
            "answer": "As hexadecimal numbers",
            "explanation": "Numeric constants preceded by \"0x\" are interpreted as hexadecimal numbers in JavaScript."
        },
        {
            "question": "What is the result of using new Number(123) in JavaScript?",
            "options": [
                "Creates a number primitive",
                "Creates a number object",
                "Syntax error",
                "Converts a string to a number"
            ],
            "answer": "Creates a number object",
            "explanation": "Using new Number(123) creates a Number object, which is different from a number primitive. Number objects can produce unexpected results compared to number primitives."
        },
        {
            "question": "What happens when you add two numeric strings in JavaScript?",
            "options": [
                "The strings are concatenated",
                "The values are added as numbers",
                "It results in an error",
                "It returns NaN"
            ],
            "answer": "The strings are concatenated",
            "explanation": "When adding two numeric strings in JavaScript, the strings are concatenated instead of being added as numbers."
        },
        {
            "question": "How can you check if a value is NaN in JavaScript?",
            "options": [
                "Using the isNan() function",
                "Comparing the value to NaN",
                "Using the typeof operator",
                "Checking if the value is less than Infinity"
            ],
            "answer": "Using the isNan() function",
            "explanation": "The global JavaScript function isNaN() is used to determine if a value is NaN."
        },
        {
            "question": "What is the maximum number of decimals that JavaScript can handle in a number?",
            "options": [
                "10 decimals",
                "15 decimals",
                "17 decimals",
                "Unlimited decimals"
            ],
            "answer": "17 decimals",
            "explanation": "The maximum number of decimals JavaScript can handle in a number is 17."
        },
        {
            "question": "In JavaScript, what is the result of dividing a number by zero?",
            "options": [
                "0",
                "NaN",
                "An error is thrown",
                "Infinity"
            ],
            "answer": "Infinity",
            "explanation": "Dividing a number by zero in JavaScript results in Infinity."
        },
        {
            "question": "How does JavaScript handle hexadecimal number representation?",
            "options": [
                "By prefixing with \"#\"",
                "By prefixing with \"0x\"",
                "By using the hex() function",
                "Automatically, without any prefix"
            ],
            "answer": "By prefixing with \"0x\"",
            "explanation": "In JavaScript, hexadecimal numbers are represented by prefixing them with \"0x\"."
        },
        {
            "question": "What is the purpose of an array in JavaScript?",
            "options": [
                "To store multiple functions",
                "To organize code into reusable blocks",
                "To store multiple values in a single variable",
                "To execute a sequence of operations"
            ],
            "answer": "To store multiple values in a single variable",
            "explanation": "Arrays in JavaScript are special variables that can hold more than one value, allowing for efficient storage and management of multiple values."
        },
        {
            "question": "How do you create an array in JavaScript using an array literal?",
            "options": [
                "var array_name = (item1, item2, …)",
                "var array_name = [item1, item2, …]",
                "var array_name = {item1, item2, …}",
                "var array_name = new Array(item1, item2, …)"
            ],
            "answer": "var array_name = [item1, item2, …]",
            "explanation": "An array literal is created using square brackets [] and can include multiple items, separated by commas."
        },
        {
            "question": "How do you access the first element of an array named 'fruits'?",
            "options": [
                "fruits[1]",
                "fruits.first",
                "fruits[0]",
                "fruits.at(1)"
            ],
            "answer": "fruits[0]",
            "explanation": "Array elements are accessed using their index number, starting with 0 for the first element."
        },
        {
            "question": "How can you change the value of the first element in an array named 'cars'?",
            "options": [
                "cars.first = 'new value'",
                "cars[0] = 'new value'",
                "cars.set(0, 'new value')",
                "cars.change(0, 'new value')"
            ],
            "answer": "cars[0] = 'new value'",
            "explanation": "Array elements can be changed by accessing the element via its index and assigning a new value."
        },
        {
            "question": "What does the toString() method do when called on an array?",
            "options": [
                "Changes all elements to string type",
                "Converts the array to a single string with elements separated by commas",
                "Returns the type of the array as a string",
                "Converts the first element of the array to a string"
            ],
            "answer": "Converts the array to a single string with elements separated by commas",
            "explanation": "The toString() method converts an array into a string of comma-separated array values."
        },
        {
            "question": "What does the 'length' property of an array return?",
            "options": [
                "The total memory size of the array",
                "The number of elements in the array",
                "The last index of the array",
                "The length of the first element in the array"
            ],
            "answer": "The number of elements in the array",
            "explanation": "The length property returns the length of the array, which is the number of elements it contains."
        },
        {
            "question": "How do you access the last element of an array named 'fruits'?",
            "options": [
                "fruits.last",
                "fruits[fruits.length]",
                "fruits[fruits.length – 1]",
                "fruits.end"
            ],
            "answer": "fruits[fruits.length – 1]",
            "explanation": "The last element of an array can be accessed by using the index fruits.length – 1."
        },
        {
            "question": "Which is a common method to loop through all elements in an array named 'fruits'?",
            "options": [
                "fruits.each(function(value) { … })",
                "for(let i = 0; i < fruits.length; i++) { … }",
                "fruits.loop(function(value) { … })",
                "foreach(var fruit in fruits) { … }"
            ],
            "answer": "for(let i = 0; i < fruits.length; i++) { … }",
            "explanation": "A common method to loop through all elements in an array is using a for loop with the array's length property."
        },
        {
            "question": "How do you add a new element to an array named 'fruits'?",
            "options": [
                "fruits.add('new element')",
                "fruits[fruits.length] = 'new element'",
                "fruits.append('new element')",
                "fruits.push('new element')"
            ],
            "answer": "fruits.push('new element')",
            "explanation": "The push() method is used to add a new element to the end of an array."
        },
        {
            "question": "What is a key difference between arrays and objects in JavaScript?",
            "options": [
                "Arrays use numbered indexes; objects use named indexes",
                "Arrays can only store strings; objects can store any data type",
                "Arrays are mutable; objects are immutable",
                "Arrays are not a type of object; objects are a type of array"
            ],
            "answer": "Arrays use numbered indexes; objects use named indexes",
            "explanation": "A key difference between arrays and objects in JavaScript is that arrays use numbered indexes, whereas objects use named indexes."
        },
        {
            "question": "How can you create an array using the JavaScript new Array() constructor?",
            "options": [
                "var array_name = new Array(item1, item2, …)",
                "var array_name = Array(item1, item2, …)",
                "var array_name = newArray(item1, item2, …)",
                "var array_name = Array.new(item1, item2, …)"
            ],
            "answer": "var array_name = new Array(item1, item2, …)",
            "explanation": "The new Array() constructor can be used to create an array, though using array literals is recommended for simplicity and readability."
        },
        {
            "question": "How can you check if a variable is an array in JavaScript?",
            "options": [
                "Using the typeof operator",
                "Using the isArray() method",
                "Checking if the variable has a length property",
                "Using the instanceof operator"
            ],
            "answer": "Using the isArray() method",
            "explanation": "To check if a variable is an array, the Array.isArray() method is used, as the typeof operator will return 'object' for arrays."
        },
        {
            "question": "What is the outcome of using the typeof operator on an array in JavaScript?",
            "options": [
                "\"array\"",
                "\"object\"",
                "\"list\"",
                "\"collection\""
            ],
            "answer": "\"object\"",
            "explanation": "The typeof operator returns 'object' for arrays in JavaScript because arrays are a special type of object."
        },
        {
            "question": "Why is it not recommended to use arrays with named indexes in JavaScript?",
            "options": [
                "Named indexes convert the array into an object",
                "Named indexes are not supported in JavaScript",
                "Named indexes decrease array performance",
                "JavaScript treats arrays with named indexes as associative arrays"
            ],
            "answer": "Named indexes convert the array into an object",
            "explanation": "Using named indexes in an array effectively converts it into an object, as JavaScript does not support arrays with named indexes."
        },
        {
            "question": "What is a characteristic of associative arrays in JavaScript?",
            "options": [
                "They are a special type of array with key-value pairs",
                "They are the same as regular arrays",
                "JavaScript converts them into objects",
                "They are used for complex data structures"
            ],
            "answer": "JavaScript converts them into objects",
            "explanation": "While many languages support associative arrays (arrays with named indexes), JavaScript does not. Using named indexes in an array will convert it into an object."
        },
        {
            "question": "What is the basic syntax of an if statement in JavaScript?",
            "options": [
                "if (condition) {statements}",
                "if condition {statements}",
                "if {condition, statements}",
                "if [condition] {statements}"
            ],
            "answer": "if (condition) {statements}",
            "explanation": "The basic syntax of an if statement in JavaScript includes the if keyword, followed by a condition in parentheses, and then a block of statements in curly braces."
        },
        {
            "question": "How does JavaScript evaluate the condition in an if statement?",
            "options": [
                "Based on whether it's true or false",
                "Based on whether it returns a number",
                "Based on whether it's defined or undefined",
                "Based on whether it throws an error"
            ],
            "answer": "Based on whether it's true or false",
            "explanation": "The condition in an if statement is evaluated as a boolean, meaning it executes if the condition is true and doesn't execute if the condition is false."
        },
        {
            "question": "What happens if the condition in an if statement is false?",
            "options": [
                "The statements in the if block are executed",
                "The statements in the if block are skipped",
                "The program terminates",
                "An error is thrown"
            ],
            "answer": "The statements in the if block are skipped",
            "explanation": "If the condition in an if statement evaluates to false, the statements within its block are not executed and the program continues with the next block of code."
        },
        {
            "question": "What is the purpose of the else block in an if-else statement?",
            "options": [
                "To specify a new condition",
                "To execute statements if the if condition is true",
                "To execute statements if the if condition is false",
                "To end the if statement"
            ],
            "answer": "To execute statements if the if condition is false",
            "explanation": "The else block is used to execute statements when the if condition evaluates to false."
        },
        {
            "question": "Can an else statement be used without an if statement?",
            "options": [
                "Yes",
                "No",
                "Only inside a function",
                "Only outside a function"
            ],
            "answer": "No",
            "explanation": "An else statement must be used in conjunction with an if statement. It executes a block of code when the if statement's condition evaluates to false."
        },
        {
            "question": "What is the purpose of the else if statement in JavaScript?",
            "options": [
                "To check multiple conditions in sequence",
                "To run the same code as the if statement",
                "To terminate the if statement",
                "To create a loop"
            ],
            "answer": "To check multiple conditions in sequence",
            "explanation": "The else if statement is used to specify a new condition to test, if the first condition is false."
        },
        {
            "question": "How many else if blocks can be used with an if statement?",
            "options": [
                "Only one",
                "Up to three",
                "As many as needed",
                "None"
            ],
            "answer": "As many as needed",
            "explanation": "You can use as many else if blocks as needed after an if statement to check multiple conditions in sequence."
        },
        {
            "question": "What is the correct syntax for an if-else if-else statement?",
            "options": [
                "if (condition1) {…} else if (condition2) {…} else {…}",
                "if (condition1) {…} elseif (condition2) {…} else {…}",
                "if condition1 {…} else if condition2 {…} else {…}",
                "if (condition1) {…} else if condition2 {…} else {…}"
            ],
            "answer": "if (condition1) {…} else if (condition2) {…} else {…}",
            "explanation": "The correct syntax includes the if keyword, followed by a condition, then the else if keyword with another condition, and finally an else block."
        },
        {
            "question": "What is a common use case for nested if statements?",
            "options": [
                "To check the same condition multiple times",
                "To create a loop",
                "To check a series of conditions that depend on each other",
                "To execute code unconditionally"
            ],
            "answer": "To check a series of conditions that depend on each other",
            "explanation": "Nested if statements are used when you need to check a series of conditions where each subsequent condition depends on the previous one being true."
        },
        {
            "question": "What type of value does the condition in an if statement expect?",
            "options": [
                "Number",
                "Boolean",
                "String",
                "Object"
            ],
            "answer": "Boolean",
            "explanation": "The condition in an if statement expects a boolean value. Non-boolean values provided as conditions are converted to boolean values (truthy or falsy)."
        },
        {
            "question": "What does the '===' operator check in an if condition?",
            "options": [
                "Equality in value",
                "Equality in value and type",
                "Only the type",
                "Inequality in value and type"
            ],
            "answer": "Equality in value and type",
            "explanation": "The '===' operator checks for strict equality, meaning both the value and the type must be the same."
        },
        {
            "question": "Can you use logical operators in an if condition?",
            "options": [
                "Yes, but only the AND operator",
                "Yes, all logical operators can be used",
                "No, logical operators are not allowed",
                "Only in nested if statements"
            ],
            "answer": "Yes, all logical operators can be used",
            "explanation": "Logical operators like AND (&&), OR (||), and NOT (!) can be used within if conditions to combine or invert conditions."
        },
        {
            "question": "How is the if-else statement different from the ternary operator?",
            "options": [
                "The ternary operator can handle multiple conditions",
                "The if-else statement is shorter",
                "The ternary operator is used for assignment based on a condition",
                "There is no difference"
            ],
            "answer": "The ternary operator is used for assignment based on a condition",
            "explanation": "The ternary operator is a concise way to perform assignments based on a condition, whereas the if-else statement is used for executing different blocks of code based on a condition."
        },
        {
            "question": "What happens if the condition in an if-else statement is neither true nor false?",
            "options": [
                "The else block is executed",
                "The if block is executed",
                "An error is thrown",
                "The program stops execution"
            ],
            "answer": "The else block is executed",
            "explanation": "If the condition in an if-else statement is not true (or truthy), the else block is executed."
        },
        {
            "question": "Can you omit curly braces in a single-line if statement?",
            "options": [
                "Yes, if there is only one statement to execute",
                "No, curly braces are mandatory",
                "Only inside a function",
                "Only if the statement is an assignment"
            ],
            "answer": "Yes, if there is only one statement to execute",
            "explanation": "In JavaScript, if there is only one statement to be executed in an if or else block, you can omit the curly braces. However, using braces is recommended for better readability."
        },
        {
            "question": "What is the purpose of the switch statement in JavaScript?",
            "options": [
                "To declare variables conditionally",
                "To execute a block of code among many alternatives",
                "To loop through a block of code",
                "To check for boolean conditions"
            ],
            "answer": "To execute a block of code among many alternatives",
            "explanation": "The switch statement is used to perform different actions based on different conditions. It allows the execution of a block of code among many alternatives."
        },
        {
            "question": "What is the correct syntax for a switch statement in JavaScript?",
            "options": [
                "switch(expression) {case x: …}",
                "switch(x) {when x: …}",
                "switch {case x: …}",
                "switch(x) {if x: …}"
            ],
            "answer": "switch(expression) {case x: …}",
            "explanation": "The correct syntax for a switch statement includes the switch keyword followed by an expression in parentheses and a series of case statements inside curly braces."
        },
        {
            "question": "How does JavaScript match a case in a switch statement?",
            "options": [
                "Using strict equality (===)",
                "Using loose equality (==)",
                "Using greater than or less than comparison",
                "Using bitwise operators"
            ],
            "answer": "Using strict equality (===)",
            "explanation": "JavaScript matches a case in a switch statement using strict equality, meaning both the value and the type must be the same."
        },
        {
            "question": "What keyword is used to define a default case in a switch statement?",
            "options": [
                "default",
                "else",
                "finally",
                "otherwise"
            ],
            "answer": "default",
            "explanation": "The default keyword is used to specify the default case in a switch statement, which is executed if no case matches."
        },
        {
            "question": "Can a switch statement include multiple cases for the same block of code?",
            "options": [
                "Yes",
                "No",
                "Only if they are adjacent",
                "Only within nested switch statements"
            ],
            "answer": "Yes",
            "explanation": "Multiple cases can be used for the same block of code in a switch statement. They are typically stacked together above a single block."
        },
        {
            "question": "What is the role of the break keyword in a switch statement?",
            "options": [
                "To stop the case execution",
                "To exit the switch statement",
                "To break out of the current case and continue executing the switch statement",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "The break keyword stops the execution of the current case and exits the switch statement."
        },
        {
            "question": "What happens if the break keyword is omitted in a switch case?",
            "options": [
                "The code execution stops immediately",
                "The switch statement becomes invalid",
                "The execution continues with the next case",
                "An error is thrown"
            ],
            "answer": "The execution continues with the next case",
            "explanation": "If the break keyword is omitted, the execution continues with the next case (fall-through behavior)."
        },
        {
            "question": "Is it mandatory to have a default case in a switch statement?",
            "options": [
                "Yes, always",
                "No, it's optional",
                "Only if there are more than three cases",
                "Only if there is no break statement"
            ],
            "answer": "No, it's optional",
            "explanation": "The default case in a switch statement is optional. It is executed if no case matches, but its absence does not invalidate the switch statement."
        },
        {
            "question": "Can the default case be placed at the beginning of a switch statement?",
            "options": [
                "Yes, but it must include a break statement",
                "Yes, and it doesn't need a break statement",
                "No, it must be at the end",
                "No, it is not allowed"
            ],
            "answer": "Yes, but it must include a break statement",
            "explanation": "The default case can be placed anywhere in a switch statement, but if it's not at the end, it should include a break statement to prevent fall-through."
        },
        {
            "question": "What type of values can be used for cases in a switch statement?",
            "options": [
                "Only strings",
                "Only numbers",
                "Both strings and numbers",
                "Any expression"
            ],
            "answer": "Both strings and numbers",
            "explanation": "In a switch statement, cases can use both strings and numbers as values. JavaScript evaluates them using strict comparison."
        },
        {
            "question": "Can a switch statement be nested inside another switch statement?",
            "options": [
                "Yes",
                "No",
                "Only inside a default case",
                "Only if the outer switch has a default case"
            ],
            "answer": "Yes",
            "explanation": "A switch statement can be nested inside another switch statement, allowing for more complex decision structures."
        },
        {
            "question": "How does JavaScript handle a case value that is an expression?",
            "options": [
                "It evaluates the expression at runtime",
                "It treats the expression as a string",
                "It only allows constant expressions",
                "It throws an error"
            ],
            "answer": "It evaluates the expression at runtime",
            "explanation": "JavaScript evaluates the expressions in case values at runtime, allowing dynamic matching in the switch statement."
        },
        {
            "question": "How is a switch statement different from a series of if-else statements?",
            "options": [
                "A switch statement is used only for numeric values",
                "A switch statement is more efficient for multiple, distinct cases",
                "if-else statements can't handle multiple cases",
                "There is no difference"
            ],
            "answer": "A switch statement is more efficient for multiple, distinct cases",
            "explanation": "A switch statement is more efficient and cleaner when you have many distinct cases to handle, compared to using multiple if-else statements."
        },
        {
            "question": "Can the cases in a switch statement be non-sequential?",
            "options": [
                "No, they must be in sequential order",
                "Yes, they can be in any order",
                "They must be in ascending order",
                "They must be grouped by data type"
            ],
            "answer": "Yes, they can be in any order",
            "explanation": "The cases in a switch statement can be in any order; they don't have to be sequential or in any specific order."
        },
        {
            "question": "Is it possible to use a variable as a case value in a switch statement?",
            "options": [
                "Yes, without any restrictions",
                "Yes, but only if the variable is a constant",
                "No, case values must be literals",
                "No, it leads to a runtime error"
            ],
            "answer": "Yes, without any restrictions",
            "explanation": "Variables can be used as case values in a switch statement, allowing for dynamic and flexible case evaluation."
        },
        {
            "question": "What is the main purpose of a while loop in JavaScript?",
            "options": [
                "To iterate over the properties of an object",
                "To execute a block of code as long as a specified condition is true",
                "To execute a block of code a fixed number of times",
                "To handle exceptions"
            ],
            "answer": "To execute a block of code as long as a specified condition is true",
            "explanation": "A while loop in JavaScript is used to execute a block of code repeatedly as long as a specified condition remains true."
        },
        {
            "question": "What is the basic syntax of a while loop in JavaScript?",
            "options": [
                "while (condition) {…}",
                "while condition {…}",
                "while {condition} {…}",
                "while [condition] {…}"
            ],
            "answer": "while (condition) {…}",
            "explanation": "The basic syntax of a while loop includes the while keyword followed by a condition in parentheses and a block of code in curly braces."
        },
        {
            "question": "How does a while loop start its execution?",
            "options": [
                "By initializing a counter",
                "By executing the block of code once",
                "By evaluating the condition",
                "By incrementing the counter"
            ],
            "answer": "By evaluating the condition",
            "explanation": "A while loop starts its execution by first evaluating the condition. If the condition is true, the loop executes the block of code."
        },
        {
            "question": "What happens if the condition in a while loop never becomes false?",
            "options": [
                "The loop stops after a certain number of iterations",
                "The loop will execute indefinitely, creating an infinite loop",
                "An error is thrown",
                "The loop skips the remaining iterations"
            ],
            "answer": "The loop will execute indefinitely, creating an infinite loop",
            "explanation": "If the condition in a while loop never becomes false, the loop will continue to execute indefinitely, resulting in an infinite loop."
        },
        {
            "question": "Can you declare and initialize variables within the while loop condition?",
            "options": [
                "Yes",
                "No",
                "Only if the variable is global",
                "Only if the variable is a constant"
            ],
            "answer": "Yes",
            "explanation": "It is possible to declare and initialize variables within the while loop condition, although it is more common to do so before the loop starts."
        },
        {
            "question": "What is the main difference between a while loop and a do-while loop?",
            "options": [
                "A do-while loop checks the condition at the end of each iteration",
                "A do-while loop is faster than a while loop",
                "A while loop can handle multiple conditions",
                "A do-while loop cannot use a counter"
            ],
            "answer": "A do-while loop checks the condition at the end of each iteration",
            "explanation": "The main difference is that a do-while loop executes the block of code once before checking the condition, ensuring that the code block is executed at least once."
        },
        {
            "question": "How can you stop the execution of a while loop?",
            "options": [
                "Using the stop keyword",
                "By setting the condition to false",
                "Using the break keyword",
                "By omitting the condition"
            ],
            "answer": "Using the break keyword",
            "explanation": "The break keyword can be used within the loop body to exit the loop prematurely and stop its execution."
        },
        {
            "question": "What happens when a break statement is executed inside a while loop?",
            "options": [
                "The current iteration is skipped",
                "The loop restarts from the beginning",
                "The loop execution is terminated immediately",
                "The loop continues with the next iteration"
            ],
            "answer": "The loop execution is terminated immediately",
            "explanation": "When a break statement is executed inside a while loop, it terminates the loop's execution immediately and exits the loop."
        },
        {
            "question": "Can a while loop contain another while loop inside it?",
            "options": [
                "Yes, this is called a nested loop",
                "No, nested loops are not allowed in JavaScript",
                "Only if the outer loop is a do-while loop",
                "Only if the inner loop has a different condition"
            ],
            "answer": "Yes, this is called a nested loop",
            "explanation": "A while loop can contain another while loop inside it, forming a nested loop structure."
        },
        {
            "question": "Is it necessary for a while loop to have a body with statements?",
            "options": [
                "Yes, at least one statement is required",
                "No, an empty while loop is allowed",
                "Only if the loop has a condition",
                "Only if the loop uses a counter"
            ],
            "answer": "No, an empty while loop is allowed",
            "explanation": "A while loop can have an empty body, though it is not common and usually not very useful."
        },
        {
            "question": "How do you ensure that a while loop eventually terminates?",
            "options": [
                "By including a break statement",
                "By changing the condition to false within the loop",
                "By using a counter that changes each iteration",
                "Both b and c"
            ],
            "answer": "Both b and c",
            "explanation": "To ensure that a while loop terminates, the condition must eventually evaluate to false. This can be achieved by modifying the condition within the loop or using a counter that changes each iteration."
        },
        {
            "question": "In a while loop, when is the condition re-evaluated?",
            "options": [
                "After each iteration of the loop",
                "Before the loop starts",
                "Only when a break statement is executed",
                "When a continue statement is executed"
            ],
            "answer": "After each iteration of the loop",
            "explanation": "In a while loop, the condition is re-evaluated after each iteration to determine if the loop should continue or terminate."
        },
        {
            "question": "Can variables used in a while loop condition be modified inside the loop?",
            "options": [
                "Yes",
                "No",
                "Only global variables",
                "Only if they are declared inside the loop"
            ],
            "answer": "Yes",
            "explanation": "Variables used in the condition of a while loop can be modified inside the loop, which is often necessary for the loop to eventually terminate."
        },
        {
            "question": "What is the function of the continue statement in a while loop?",
            "options": [
                "To pause the loop",
                "To terminate the loop",
                "To skip the current iteration and proceed to the next iteration",
                "To reset the loop condition"
            ],
            "answer": "To skip the current iteration and proceed to the next iteration",
            "explanation": "The continue statement in a while loop is used to skip the rest of the current iteration and proceed directly to the next iteration."
        },
        {
            "question": "Is it possible for a while loop to execute zero times?",
            "options": [
                "Yes, if the condition is false from the start",
                "No, it always executes at least once",
                "Only if there is a break statement in the first line",
                "Only in a nested loop"
            ],
            "answer": "Yes, if the condition is false from the start",
            "explanation": "A while loop will execute zero times if its condition is false from the very beginning, as the condition is checked before the first iteration."
        },
        {
            "question": "What is a Set in JavaScript?",
            "options": [
                "A collection of unique values",
                "A collection of key-value pairs",
                "A type of function",
                "A type of loop"
            ],
            "answer": "A collection of unique values",
            "explanation": "In JavaScript, a Set is an object that allows you to store unique values of any type, whether primitive values or object references."
        },
        {
            "question": "How do you create a Set in JavaScript?",
            "options": [
                "let mySet = Set();",
                "let mySet = new Set();",
                "let mySet = createSet();",
                "let mySet = {};"
            ],
            "answer": "let mySet = new Set();",
            "explanation": "A Set is created using the new Set() constructor."
        },
        {
            "question": "Can a JavaScript Set contain duplicate values?",
            "options": [
                "Yes",
                "No",
                "Only if they are objects",
                "Only if they are primitives"
            ],
            "answer": "No",
            "explanation": "Sets in JavaScript are collections of unique values, so they cannot contain duplicates."
        },
        {
            "question": "How can you add a value to a Set in JavaScript?",
            "options": [
                "mySet.add(value);",
                "mySet.push(value);",
                "mySet.set(value);",
                "mySet.insert(value);"
            ],
            "answer": "mySet.add(value);",
            "explanation": "The add method is used to add a new element with a specified value to a Set in JavaScript."
        },
        {
            "question": "How can you remove a value from a Set in JavaScript?",
            "options": [
                "mySet.remove(value);",
                "mySet.delete(value);",
                "mySet.clear(value);",
                "mySet.pop(value);"
            ],
            "answer": "mySet.delete(value);",
            "explanation": "The delete method is used to remove a specified value from a Set."
        },
        {
            "question": "What method is used to clear all values from a Set in JavaScript?",
            "options": [
                "mySet.clear();",
                "mySet.empty();",
                "mySet.removeAll();",
                "mySet.deleteAll();"
            ],
            "answer": "mySet.clear();",
            "explanation": "The clear method removes all elements from a Set, effectively clearing it."
        },
        {
            "question": "How can you check if a value is present in a Set in JavaScript?",
            "options": [
                "mySet.contains(value);",
                "mySet.includes(value);",
                "mySet.has(value);",
                "mySet.exists(value);"
            ],
            "answer": "mySet.has(value);",
            "explanation": "The has method is used to check if a Set contains a specified element."
        },
        {
            "question": "What does the size property of a Set in JavaScript represent?",
            "options": [
                "The total memory size of the Set",
                "The number of values in the Set",
                "The maximum capacity of the Set",
                "The number of unique types of values in the Set"
            ],
            "answer": "The number of values in the Set",
            "explanation": "The size property returns the number of values in a Set."
        },
        {
            "question": "How can you iterate over the values in a Set in JavaScript?",
            "options": [
                "Using a for loop",
                "Using the forEach method",
                "Using the map method",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "You can iterate over a Set using a for loop or the forEach method."
        },
        {
            "question": "What type of values can you store in a Set in JavaScript?",
            "options": [
                "Only strings and numbers",
                "Only objects",
                "Any type, including objects and primitive types",
                "Only primitive types"
            ],
            "answer": "Any type, including objects and primitive types",
            "explanation": "JavaScript Sets can store any type of values, whether they are primitive values or object references."
        },
        {
            "question": "Can a Set in JavaScript have a length property?",
            "options": [
                "Yes",
                "No",
                "Only if it has more than one value",
                "Only if it's converted to an array"
            ],
            "answer": "No",
            "explanation": "JavaScript Sets do not have a length property; instead, they have a size property."
        },
        {
            "question": "What happens when you try to add a duplicate value to a Set in JavaScript?",
            "options": [
                "The Set keeps both values",
                "The Set replaces the old value with the new one",
                "The Set ignores the duplicate value",
                "An error is thrown"
            ],
            "answer": "The Set ignores the duplicate value",
            "explanation": "If you try to add a duplicate value to a Set, the Set simply ignores it since all values in a Set must be unique."
        },
        {
            "question": "Is the order of elements preserved in a JavaScript Set?",
            "options": [
                "Yes, in the order of insertion",
                "No, Sets are unordered",
                "Only for string values",
                "Only for numeric values"
            ],
            "answer": "Yes, in the order of insertion",
            "explanation": "Elements in a Set are iterated in the order of their insertion."
        },
        {
            "question": "How do you convert a Set to an Array in JavaScript?",
            "options": [
                "Array.from(mySet)",
                "mySet.toArray()",
                "[…mySet]",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "A Set can be converted to an Array using the Array.from method or the spread operator […mySet]."
        },
        {
            "question": "Can a JavaScript Set be nested within another Set?",
            "options": [
                "Yes",
                "No",
                "Only if it contains primitive values",
                "Only if it contains objects"
            ],
            "answer": "Yes",
            "explanation": "Sets in JavaScript can contain any type of values, including other Sets, allowing them to be nested."
        },
        {
            "question": "What is a Map in JavaScript?",
            "options": [
                "A function to map one value to another",
                "A collection of elements indexed by a key",
                "A data structure for storing geographical data",
                "A method to iterate over arrays"
            ],
            "answer": "A collection of elements indexed by a key",
            "explanation": "In JavaScript, a Map is a collection of elements where each element is stored as a key-value pair. Maps allow efficient retrieval, addition, and deletion of elements based on their keys."
        },
        {
            "question": "How do you create a new Map in JavaScript?",
            "options": [
                "let myMap = new Map();",
                "let myMap = create Map();",
                "let myMap = Map();",
                "let myMap = {};"
            ],
            "answer": "let myMap = new Map();",
            "explanation": "A Map is created using the new Map() constructor."
        },
        {
            "question": "How can you add key-value pairs to a Map in JavaScript?",
            "options": [
                "myMap.add(key, value);",
                "myMap.set(key, value);",
                "myMap.insert(key, value);",
                "myMap.push(key, value);"
            ],
            "answer": "myMap.set(key, value);",
            "explanation": "The set method is used to add key-value pairs to a Map."
        },
        {
            "question": "What method do you use to retrieve a value from a Map in JavaScript?",
            "options": [
                "myMap.get(key);",
                "myMap.retrieve(key);",
                "myMap.pull(key);",
                "myMap.find(key);"
            ],
            "answer": "myMap.get(key);",
            "explanation": "The get method is used to retrieve the value associated with a specific key from a Map."
        },
        {
            "question": "How can you remove a key-value pair from a Map in JavaScript?",
            "options": [
                "myMap.remove(key);",
                "myMap.delete(key);",
                "myMap.clear(key);",
                "myMap.pop(key);"
            ],
            "answer": "myMap.delete(key);",
            "explanation": "The delete method is used to remove a key-value pair from a Map based on the key."
        },
        {
            "question": "What does the size property of a Map object represent?",
            "options": [
                "The total memory size of the Map",
                "The number of key-value pairs in the Map",
                "The maximum capacity of the Map",
                "The size of the largest key in the Map"
            ],
            "answer": "The number of key-value pairs in the Map",
            "explanation": "The size property of a Map object returns the number of key-value pairs it contains."
        },
        {
            "question": "Can a JavaScript Map contain functions as keys or values?",
            "options": [
                "Yes, both keys and values",
                "Only as values, not as keys",
                "Only as keys, not as values",
                "No, functions are not allowed"
            ],
            "answer": "Yes, both keys and values",
            "explanation": "In a Map, both keys and values can be of any data type, including functions."
        },
        {
            "question": "How do you check if a Map contains a specific key in JavaScript?",
            "options": [
                "myMap.contains(key);",
                "myMap.includes(key);",
                "myMap.has(key);",
                "myMap.exists(key);"
            ],
            "answer": "myMap.has(key);",
            "explanation": "The has method is used to check if a Map contains a particular key."
        },
        {
            "question": "What happens if you set a new value for an existing key in a Map?",
            "options": [
                "The Map ignores the new value",
                "The new value replaces the old value",
                "An error is thrown",
                "A duplicate key is created"
            ],
            "answer": "The new value replaces the old value",
            "explanation": "In a Map, if you set a new value for an existing key, the old value is replaced by the new value."
        },
        {
            "question": "How can you iterate over the entries in a Map?",
            "options": [
                "Using the forEach method",
                "Using a for loop",
                "Using the map method",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "You can iterate over the entries in a Map using the forEach method or a for loop (e.g., for…of loop)."
        },
        {
            "question": "What is the purpose of the clear method in a Map?",
            "options": [
                "To remove a specific key-value pair",
                "To remove all key-value pairs",
                "To check if the Map is empty",
                "To reinitialize the Map"
            ],
            "answer": "To remove all key-value pairs",
            "explanation": "The clear method is used to remove all key-value pairs from a Map, effectively clearing it."
        },
        {
            "question": "Can a JavaScript Map have non-string keys?",
            "options": [
                "Yes, keys can be of any type",
                "No, keys must be strings",
                "Only numeric keys are allowed",
                "Only object keys are allowed"
            ],
            "answer": "Yes, keys can be of any type",
            "explanation": "Unlike objects, where keys must be strings or symbols, Map keys can be of any type, including numbers, functions, and objects."
        },
        {
            "question": "What is the result of calling myMap.get(nonExistentKey) in JavaScript?",
            "options": [
                "An error is thrown",
                "undefined",
                "null",
                "false"
            ],
            "answer": "undefined",
            "explanation": "If you use the get method to retrieve the value of a key that does not exist in the Map, it returns undefined."
        },
        {
            "question": "Is the order of key-value pairs preserved in a JavaScript Map?",
            "options": [
                "Yes, in the order of insertion",
                "No, Maps are unordered",
                "Only for string keys",
                "Only for numeric keys"
            ],
            "answer": "Yes, in the order of insertion",
            "explanation": "Unlike objects, the order of key-value pairs in a Map is preserved in the order they were inserted."
        },
        {
            "question": "How can you convert a Map to an Array in JavaScript?",
            "options": [
                "Array.from(myMap)",
                "myMap.toArray()",
                "[…myMap]",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "A Map can be converted to an Array using Array.from(myMap) or the spread operator […myMap]."
        },
        {
            "question": "What is a regular expression in JavaScript?",
            "options": [
                "A method for error checking",
                "A sequence of characters forming a search pattern",
                "A way to write loops",
                "A syntax for creating arrays"
            ],
            "answer": "A sequence of characters forming a search pattern",
            "explanation": "In JavaScript, a regular expression is a sequence of characters that forms a search pattern, which can be used for matching and manipulating strings."
        },
        {
            "question": "How do you create a regular expression in JavaScript?",
            "options": [
                "Using the RegExp() constructor",
                "With the regex keyword",
                "Using square brackets []",
                "Both a and c"
            ],
            "answer": "Using the RegExp() constructor",
            "explanation": "Regular expressions in JavaScript can be created using the RegExp() constructor or by writing the pattern between forward slashes."
        },
        {
            "question": "Which character in a regular expression means \"match any character\"?",
            "options": [
                "*",
                ".",
                "^",
                "$"
            ],
            "answer": ".",
            "explanation": "In regular expressions, the dot (.) character is used to match any single character except newline characters."
        },
        {
            "question": "What does the '+' symbol represent in regular expressions?",
            "options": [
                "Match the preceding character one or more times",
                "Match the preceding character zero or more times",
                "Match the preceding character zero or one time",
                "Match the beginning of a string"
            ],
            "answer": "Match the preceding character one or more times",
            "explanation": "The '+' symbol in a regular expression indicates that the preceding character should be matched one or more times."
        },
        {
            "question": "How do you indicate that a pattern should match the beginning of a string in a regular expression?",
            "options": [
                "Using the ^ symbol",
                "Using the $ symbol",
                "Using the * symbol",
                "Using the + symbol"
            ],
            "answer": "Using the ^ symbol",
            "explanation": "The '^' symbol is used at the beginning of a regular expression to indicate that the match must start at the beginning of the string."
        },
        {
            "question": "What does the '?' symbol mean in regular expressions?",
            "options": [
                "Match the preceding character zero or one time",
                "Match the preceding character one or more times",
                "Match any character",
                "Match the end of a string"
            ],
            "answer": "Match the preceding character zero or one time",
            "explanation": "The '?' symbol in a regular expression means that the preceding character is optional and should be matched zero or one time."
        },
        {
            "question": "How do you specify a range of characters in a regular expression?",
            "options": [
                "Using parentheses ()",
                "Using curly braces {}",
                "Using square brackets []",
                "Using the pipe | symbol"
            ],
            "answer": "Using square brackets []",
            "explanation": "Square brackets [] are used in regular expressions to specify a range or a set of characters to match."
        },
        {
            "question": "What is the function of the pipe '|' symbol in a regular expression?",
            "options": [
                "Indicates the start of a range",
                "Serves as a logical OR operator",
                "Escapes special characters",
                "Groups expressions together"
            ],
            "answer": "Serves as a logical OR operator",
            "explanation": "The pipe '|' symbol in a regular expression acts as a logical OR operator, allowing for the matching of one pattern or another."
        },
        {
            "question": "How do you match a specific number of occurrences of a character in a regular expression?",
            "options": [
                "Using the * symbol",
                "Using curly braces {}",
                "Using parentheses ()",
                "Using the + symbol"
            ],
            "answer": "Using curly braces {}",
            "explanation": "Curly braces {} in a regular expression are used to specify the exact number of times a character or a group of characters should be matched."
        },
        {
            "question": "What does the '\\d' symbol represent in a regular expression?",
            "options": [
                "Any digit character",
                "Any non-digit character",
                "Any whitespace character",
                "Any word character"
            ],
            "answer": "Any digit character",
            "explanation": "The '\\d' symbol in a regular expression is used to match any digit character, equivalent to [0-9]."
        },
        {
            "question": "How do you make a regular expression case insensitive in JavaScript?",
            "options": [
                "Using the 'i' flag",
                "Using the 'c' flag",
                "Using the 's' flag",
                "By adding 'ignoreCase' after the expression"
            ],
            "answer": "Using the 'i' flag",
            "explanation": "Adding the 'i' flag to a regular expression in JavaScript makes the pattern matching case insensitive."
        },
        {
            "question": "What does the '\\s' symbol represent in a regular expression?",
            "options": [
                "Any whitespace character",
                "Any non-whitespace character",
                "Any word character",
                "Any non-word character"
            ],
            "answer": "Any whitespace character",
            "explanation": "The '\\s' symbol in a regular expression is used to match any whitespace character, including spaces, tabs, and line breaks."
        },
        {
            "question": "How do you specify that a pattern should match the end of a string in a regular expression?",
            "options": [
                "Using the ^ symbol",
                "Using the $ symbol",
                "Using the * symbol",
                "Using the + symbol"
            ],
            "answer": "Using the $ symbol",
            "explanation": "The '$' symbol is used at the end of a regular expression to indicate that the match must occur at the end of the string."
        },
        {
            "question": "What does the '\\w' symbol represent in a regular expression?",
            "options": [
                "Any word character",
                "Any non-word character",
                "Any whitespace character",
                "Any digit character"
            ],
            "answer": "Any word character",
            "explanation": "The '\\w' symbol in a regular expression matches any word character, which includes letters, digits, and underscores."
        },
        {
            "question": "How do you group parts of a regular expression?",
            "options": [
                "Using square brackets []",
                "Using curly braces {}",
                "Using parentheses ()",
                "Using the pipe | symbol"
            ],
            "answer": "Using parentheses ()",
            "explanation": "Parentheses () are used in regular expressions to group parts of the expression, which is useful for applying quantifiers to a group or for capturing groups in a match."
        },
        {
            "question": "What does DOM stand for in JavaScript?",
            "options": [
                "Document Object Model",
                "Display Object Management",
                "Data Object Model",
                "Document Orientation Model"
            ],
            "answer": "Document Object Model",
            "explanation": "DOM stands for Document Object Model, which is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content."
        },
        {
            "question": "How can you access an element by its ID in the DOM?",
            "options": [
                "document.getElement('id')",
                "document.getElementById('id')",
                "document.querySelector('#id')",
                "Both b and c"
            ],
            "answer": "Both b and c",
            "explanation": "To access an element by its ID in the DOM, you can use document.getElementById('id') or document.querySelector('#id')."
        },
        {
            "question": "Which method is used to create a new element in the DOM?",
            "options": [
                "document.createElement('element')",
                "document.createNewElement('element')",
                "document.addElement('element')",
                "document.newElement('element')"
            ],
            "answer": "document.createElement('element')",
            "explanation": "The document.createElement('element') method is used to create a new element in the DOM."
        },
        {
            "question": "How can you add a child element to a parent element in the DOM?",
            "options": [
                "parent.appendChild(child)",
                "parent.addChild(child)",
                "parent.addElement(child)",
                "parent.appendElement(child)"
            ],
            "answer": "parent.appendChild(child)",
            "explanation": "The appendChild(child) method is used to add a child element to the end of the list of children of a specified parent element."
        },
        {
            "question": "What does the querySelector method do in the DOM?",
            "options": [
                "Finds the first element that matches a specified CSS selector",
                "Queries all elements in the document",
                "Creates a new CSS selector",
                "Returns the entire DOM structure"
            ],
            "answer": "Finds the first element that matches a specified CSS selector",
            "explanation": "querySelector returns the first element that matches a specified CSS selector in the document."
        },
        {
            "question": "How do you change the text content of an element in the DOM?",
            "options": [
                "element.textContent = 'new text'",
                "element.changeText('new text')",
                "element.text = 'new text'",
                "element.setText('new text')"
            ],
            "answer": "element.textContent = 'new text'",
            "explanation": "The textContent property is used to get or set the text content of an element."
        },
        {
            "question": "Which property is used to access or change the HTML content of an element?",
            "options": [
                "element.htmlContent",
                "element.innerHTML",
                "element.contentHTML",
                "element.setHTML"
            ],
            "answer": "element.innerHTML",
            "explanation": "The innerHTML property is used to get or set the HTML content of an element."
        },
        {
            "question": "What is the purpose of the addEventListener method in the DOM?",
            "options": [
                "To create new events",
                "To remove event listeners",
                "To attach an event handler to a specific element",
                "To find elements with attached events"
            ],
            "answer": "To attach an event handler to a specific element",
            "explanation": "The addEventListener method is used to attach an event handler to a specific element."
        },
        {
            "question": "How can you remove an element from the DOM?",
            "options": [
                "element.remove()",
                "document.removeElement(element)",
                "element.delete()",
                "document.deleteElement(element)"
            ],
            "answer": "element.remove()",
            "explanation": "The remove() method removes the element from the DOM."
        },
        {
            "question": "What does the getElementById method return if no element is found?",
            "options": [
                "An empty string",
                "A new element",
                "null",
                "undefined"
            ],
            "answer": "null",
            "explanation": "If no element with the specified ID is found, getElementById returns null."
        },
        {
            "question": "How can you access the style properties of an element in the DOM?",
            "options": [
                "element.style",
                "element.getStyle()",
                "element.css",
                "element.styles"
            ],
            "answer": "element.style",
            "explanation": "The style property is used to get or set the inline style of an element."
        },
        {
            "question": "How do you get all elements with a specific class name in the DOM?",
            "options": [
                "document.getElementsByClassName('class')",
                "document.getElements('class')",
                "document.querySelector('.class')",
                "document.findElementsByClass('class')"
            ],
            "answer": "document.getElementsByClassName('class')",
            "explanation": "The getElementsByClassName method returns a live HTMLCollection of all elements with the specified class name."
        },
        {
            "question": "What is the role of the parentNode property in the DOM?",
            "options": [
                "It returns the parent element of a node",
                "It creates a new parent node",
                "It deletes the parent node",
                "It clones the parent node"
            ],
            "answer": "It returns the parent element of a node",
            "explanation": "The parentNode property returns the parent node of a specified element in the DOM tree."
        },
        {
            "question": "How can you detect when a user clicks on an element in the DOM?",
            "options": [
                "element.onClick = function() {…}",
                "element.addEventListener('click', function() {…})",
                "element.click(function() {…})",
                "Both a and b"
            ],
            "answer": "element.addEventListener('click', function() {…})",
            "explanation": "The addEventListener method is used to set up a function that will be called whenever the specified event is delivered to the target."
        },
        {
            "question": "How can you select all <div> elements in the DOM?",
            "options": [
                "document.getElementsByTagName('div')",
                "document.querySelectorAll('div')",
                "document.div",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "You can select all <div> elements using document.getElementsByTagName('div') or document.querySelectorAll('div')."
        },
        {
            "question": "What is global scope in JavaScript?",
            "options": [
                "A scope limited to a function",
                "A scope within a block of code",
                "A scope where variables are accessible from anywhere in the code",
                "A scope only within loops"
            ],
            "answer": "A scope where variables are accessible from anywhere in the code",
            "explanation": "Global scope refers to variables that are declared outside any function or block and are accessible from any part of the code."
        },
        {
            "question": "What defines the function scope in JavaScript?",
            "options": [
                "Variables declared within a function",
                "Variables declared outside a function",
                "Variables declared within a loop",
                "Variables declared within a block"
            ],
            "answer": "Variables declared within a function",
            "explanation": "Function scope is defined by variables declared within a function. These variables are accessible only within the function and not outside it."
        },
        {
            "question": "How does block scope work in JavaScript?",
            "options": [
                "Variables are confined within a function",
                "Variables are confined within a block of code, such as loops or conditionals",
                "Variables are accessible globally",
                "Variables are confined within the entire script"
            ],
            "answer": "Variables are confined within a block of code, such as loops or conditionals",
            "explanation": "Block scope means that variables declared within a block (e.g., within curly braces of if statements, loops) are only accessible within that block."
        },
        {
            "question": "Which statement about let and const in JavaScript is true?",
            "options": [
                "They create global scoped variables",
                "They create function scoped variables",
                "They create block scoped variables",
                "They do not define scope"
            ],
            "answer": "They create block scoped variables",
            "explanation": "The let and const keywords in JavaScript declare variables that are block scoped, meaning they are only accessible within the block they are defined in."
        },
        {
            "question": "What happens to a variable declared with var inside a function?",
            "options": [
                "It becomes block scoped",
                "It becomes globally scoped",
                "It becomes function scoped",
                "It is not scoped"
            ],
            "answer": "It becomes function scoped",
            "explanation": "Variables declared with var inside a function are function scoped, meaning they are accessible only within the function and not outside it."
        },
        {
            "question": "Can a variable declared in a block with let be accessed outside of the block?",
            "options": [
                "Yes, always",
                "No, it is block scoped",
                "Yes, but only within functions",
                "Yes, but only in the global scope"
            ],
            "answer": "No, it is block scoped",
            "explanation": "Variables declared with let within a block cannot be accessed outside that block as they are block scoped."
        },
        {
            "question": "What is a typical use case for block scope in JavaScript?",
            "options": [
                "To keep variables global",
                "To restrict access to variables within loops or conditional blocks",
                "To create private functions",
                "To create global constants"
            ],
            "answer": "To restrict access to variables within loops or conditional blocks",
            "explanation": "Block scope is typically used to restrict access to variables within certain blocks of code like loops or conditional statements for better control and to avoid conflicts."
        },
        {
            "question": "What type of scope does the var keyword create in a loop in JavaScript?",
            "options": [
                "Block scope",
                "Function scope",
                "Global scope",
                "Loop scope"
            ],
            "answer": "Function scope",
            "explanation": "The var keyword, even when used in a loop, creates a function scope if the loop is within a function, and global scope if the loop is in the global context."
        },
        {
            "question": "How does global scope affect variables in JavaScript?",
            "options": [
                "It limits variable accessibility to specific functions",
                "It restricts variable accessibility to specific blocks",
                "It makes variables accessible from anywhere in the code",
                "It makes variables immutable"
            ],
            "answer": "It makes variables accessible from anywhere in the code",
            "explanation": "Global scope allows variables to be accessible from any part of the code, regardless of blocks or functions."
        },
        {
            "question": "What is the best practice regarding global scope in JavaScript?",
            "options": [
                "Always use global scope for variables",
                "Limit the use of global scope to avoid conflicts",
                "Use global scope within functions only",
                "Global scope should be used for all variables"
            ],
            "answer": "Limit the use of global scope to avoid conflicts",
            "explanation": "It is best practice to limit the use of global scope as it can lead to conflicts and difficulties in managing the code, especially in larger applications."
        },
        {
            "question": "How are const and let different from var in terms of scope?",
            "options": [
                "const and let are not scoped, while var is function scoped",
                "const and let are block scoped, while var is function scoped",
                "const and let are function scoped, while var is block scoped",
                "const and let are global scoped, while var is not scoped"
            ],
            "answer": "const and let are block scoped, while var is function scoped",
            "explanation": "const and let provide block scope, which confines variables to the block where they are declared. var, however, is function scoped."
        },
        {
            "question": "What is the outcome of using a variable outside its scope?",
            "options": [
                "The code executes normally",
                "A reference error is thrown",
                "The variable automatically becomes global",
                "The variable's value is set to undefined"
            ],
            "answer": "A reference error is thrown",
            "explanation": "Attempting to use a variable outside its scope results in a reference error because the variable is not accessible outside its defined scope."
        },
        {
            "question": "Is it possible to access a block-scoped variable before its declaration?",
            "options": [
                "Yes, always",
                "Yes, but it returns undefined",
                "No, it results in a reference error",
                "No, but it can be hoisted"
            ],
            "answer": "No, it results in a reference error",
            "explanation": "Accessing a block-scoped variable (declared with let or const) before its declaration results in a ReferenceError due to the temporal dead zone."
        },
        {
            "question": "What is the scope of a variable declared outside any function or block in JavaScript?",
            "options": [
                "Function scope",
                "Block scope",
                "Local scope",
                "Global scope"
            ],
            "answer": "Global scope",
            "explanation": "Variables declared outside any function or block have global scope, making them accessible from anywhere in the code."
        },
        {
            "question": "Can a function access a variable in the scope of its calling function?",
            "options": [
                "Yes, always",
                "No, it's not possible",
                "Only if the variable is global",
                "Only if the variable is passed as an argument"
            ],
            "answer": "No, it's not possible",
            "explanation": "A function cannot access variables in the scope of its calling function unless those variables are passed to it as arguments or are in the global scope."
        },
        {
            "question": "What is hoisting in JavaScript?",
            "options": [
                "Raising all variables to the top of their function scope",
                "Moving function declarations to the top of the script",
                "Lifting up all variable and function declarations to the top of their containing scope",
                "Sorting variables alphabetically"
            ],
            "answer": "Lifting up all variable and function declarations to the top of their containing scope",
            "explanation": "Hoisting in JavaScript refers to the behavior where variable and function declarations are moved to the top of their containing scope during the compilation phase."
        },
        {
            "question": "Which types of declarations are hoisted in JavaScript?",
            "options": [
                "var declarations and function expressions",
                "let and const declarations",
                "var declarations and function declarations",
                "Only function declarations"
            ],
            "answer": "var declarations and function declarations",
            "explanation": "In JavaScript, var declarations and function declarations are hoisted, meaning they are moved to the top of their containing scope."
        },
        {
            "question": "How are variable declarations hoisted in JavaScript?",
            "options": [
                "The declaration and initialization are hoisted",
                "Only the declaration is hoisted, not the initialization",
                "The initialization is hoisted, but not the declaration",
                "Neither the declaration nor the initialization is hoisted"
            ],
            "answer": "Only the declaration is hoisted, not the initialization",
            "explanation": "When variables are hoisted in JavaScript, only the declaration is hoisted to the top of the scope, not the initialization."
        },
        {
            "question": "What is the initial value of a variable that is hoisted in JavaScript?",
            "options": [
                "0",
                "null",
                "undefined",
                "An empty string"
            ],
            "answer": "undefined",
            "explanation": "A hoisted variable in JavaScript is initialized with a value of undefined."
        },
        {
            "question": "Can a function expression be hoisted in JavaScript?",
            "options": [
                "Yes, always",
                "No, function expressions are not hoisted",
                "Yes, but only if it's assigned to a var variable",
                "Yes, but only if it's assigned to a let or const variable"
            ],
            "answer": "No, function expressions are not hoisted",
            "explanation": "Function expressions, unlike function declarations, are not hoisted in JavaScript."
        },
        {
            "question": "How does hoisting affect let and const declarations?",
            "options": [
                "They are hoisted to the top of the block",
                "They are not hoisted",
                "They are hoisted to the top of the script",
                "They are hoisted, but remain uninitialized"
            ],
            "answer": "They are hoisted, but remain uninitialized",
            "explanation": "let and const declarations are hoisted to the top of their block scope but are not initialized, resulting in a temporal dead zone until the line where they are declared."
        },
        {
            "question": "What is the result of accessing a hoisted function before its declaration?",
            "options": [
                "It executes normally",
                "It returns undefined",
                "It causes a ReferenceError",
                "It returns null"
            ],
            "answer": "It executes normally",
            "explanation": "Due to hoisting, a function can be called in JavaScript even before its declaration in the code."
        },
        {
            "question": "How do let and const behave differently from var in terms of hoisting?",
            "options": [
                "They are hoisted to the global scope",
                "They are not hoisted",
                "They create properties on the global object",
                "They are hoisted but inaccessible until their declaration"
            ],
            "answer": "They are hoisted but inaccessible until their declaration",
            "explanation": "let and const are hoisted to the top of their block scope but are not accessible until the line where they are declared, unlike var, which is accessible and initialized as undefined."
        },
        {
            "question": "What happens when a var variable is hoisted and accessed before its initialization?",
            "options": [
                "It returns null",
                "It returns its initialized value",
                "It causes a TypeError",
                "It returns undefined"
            ],
            "answer": "It returns undefined",
            "explanation": "Accessing a var variable before its initialization due to hoisting will return undefined, as the variable is hoisted and initialized with undefined."
        },
        {
            "question": "Are class declarations hoisted in JavaScript?",
            "options": [
                "Yes, like function declarations",
                "No, they are not hoisted",
                "Yes, but only if they are anonymous",
                "Yes, but they are not initialized"
            ],
            "answer": "No, they are not hoisted",
            "explanation": "Class declarations in JavaScript are not hoisted, meaning they cannot be used before they are declared in the code."
        },
        {
            "question": "What is the temporal dead zone in JavaScript?",
            "options": [
                "The time when a script is not running",
                "The time between variable hoisting and its declaration",
                "The time after a function is executed",
                "The time before a script is loaded"
            ],
            "answer": "The time between variable hoisting and its declaration",
            "explanation": "The temporal dead zone refers to the time from when a block begins until let and const variables are declared within that block. During this time, the variables are in scope but not yet initialized."
        },
        {
            "question": "How are named function expressions hoisted?",
            "options": [
                "The function name is hoisted",
                "The function name and body are hoisted",
                "Only the variable name is hoisted",
                "Neither the function name nor the body is hoisted"
            ],
            "answer": "Only the variable name is hoisted",
            "explanation": "For named function expressions, only the variable name is hoisted, not the function name or the body."
        },
        {
            "question": "Can you redeclare a variable using var in the same scope?",
            "options": [
                "Yes, without any issues",
                "No, it causes a syntax error",
                "Yes, but it overwrites the previous value",
                "No, it returns undefined"
            ],
            "answer": "Yes, without any issues",
            "explanation": "In JavaScript, redeclaring a variable using var in the same scope is allowed and does not cause an error."
        },
        {
            "question": "How does hoisting work inside a function scope?",
            "options": [
                "Variables are hoisted to the top of the script",
                "Variables and functions are hoisted to the top of their function scope",
                "Hoisting does not occur in function scopes",
                "Only functions are hoisted, not variables"
            ],
            "answer": "Variables and functions are hoisted to the top of their function scope",
            "explanation": "Inside a function scope, both variables (declared with var) and function declarations are hoisted to the top of their function scope."
        },
        {
            "question": "What is the effect of hoisting on variables declared within a for loop?",
            "options": [
                "They are hoisted to the global scope",
                "They are hoisted to the top of the function scope",
                "They are hoisted to the top of the loop block",
                "They are not hoisted"
            ],
            "answer": "They are hoisted to the top of the function scope",
            "explanation": "If a variable is declared with var within a for loop, it is hoisted to the top of the function scope in which the loop resides."
        },
        {
            "question": "What is an arrow function in JavaScript?",
            "options": [
                "A function that points to another function",
                "A shorter syntax for writing function expressions",
                "A function that can only be used as a callback",
                "A function that automatically binds to its parent object"
            ],
            "answer": "A shorter syntax for writing function expressions",
            "explanation": "Arrow functions provide a shorter syntax for writing function expressions in JavaScript. They allow for a more concise way to write functions."
        },
        {
            "question": "How is an arrow function expressed in JavaScript?",
            "options": [
                "(parameters) => { statements }",
                "function(parameters) => { statements }",
                "(parameters) = { statements }",
                "=> (parameters) { statements }"
            ],
            "answer": "(parameters) => { statements }",
            "explanation": "Arrow functions are defined using the arrow (=>) syntax, with parameters on the left side of the arrow and function statements on the right."
        },
        {
            "question": "What is the main difference between arrow functions and traditional functions in terms of 'this'?",
            "options": [
                "Arrow functions have their own 'this' context",
                "Arrow functions do not have their own 'this' context",
                "Arrow functions redefine 'this' within each block",
                "There is no difference"
            ],
            "answer": "Arrow functions do not have their own 'this' context",
            "explanation": "Arrow functions do not have their own 'this' context; instead, 'this' refers to the surrounding lexical context."
        },
        {
            "question": "Can arrow functions be used as constructors?",
            "options": [
                "Yes, they can",
                "No, they cannot",
                "Only in strict mode",
                "Only if they don't have parameters"
            ],
            "answer": "No, they cannot",
            "explanation": "Arrow functions cannot be used as constructors and will throw an error if used with the new keyword."
        },
        {
            "question": "How does an arrow function return a single expression?",
            "options": [
                "By explicitly using the return keyword",
                "It automatically returns the expression",
                "By using the return() method",
                "By enclosing the expression in parentheses"
            ],
            "answer": "It automatically returns the expression",
            "explanation": "In an arrow function, if you have a single expression, it is returned automatically without the need for the return keyword."
        },
        {
            "question": "What happens when you use parentheses around the body of an arrow function?",
            "options": [
                "It's a syntax error",
                "It indicates an implicit return",
                "It's used for returning objects",
                "It creates a function block"
            ],
            "answer": "It indicates an implicit return",
            "explanation": "Using parentheses around the body of an arrow function indicates an implicit return. This is commonly used for returning object literals."
        },
        {
            "question": "Can arrow functions be named?",
            "options": [
                "Yes, when they are assigned to a variable",
                "No, they are always anonymous",
                "Yes, by using the function keyword",
                "Only if they are not assigned to a variable"
            ],
            "answer": "Yes, when they are assigned to a variable",
            "explanation": "Arrow functions are anonymous. However, they can be named indirectly by assigning them to variables."
        },
        {
            "question": "How do you handle multiple parameters in an arrow function?",
            "options": [
                "By separating them with a comma within parentheses",
                "By using the spread operator",
                "By creating multiple arrow functions",
                "Multiple parameters are not allowed"
            ],
            "answer": "By separating them with a comma within parentheses",
            "explanation": "Multiple parameters in an arrow function are handled by separating them with a comma within parentheses."
        },
        {
            "question": "What is a common use case for arrow functions in JavaScript?",
            "options": [
                "As constructors for objects",
                "For short callback functions",
                "To redefine the value of 'this'",
                "As methods in object literals"
            ],
            "answer": "For short callback functions",
            "explanation": "Arrow functions are commonly used for short callback functions due to their concise syntax."
        },
        {
            "question": "How are arguments handled in an arrow function?",
            "options": [
                "Using the arguments object",
                "Arrow functions do not have arguments",
                "By explicitly defining each argument",
                "Using rest parameters"
            ],
            "answer": "Using rest parameters",
            "explanation": "Arrow functions do not have their own arguments object. However, you can handle arguments using rest parameters."
        },
        {
            "question": "How does the arrow function treat the 'new.target' keyword?",
            "options": [
                "It ignores it",
                "It throws an error if used",
                "It treats it the same as in regular functions",
                "It always returns undefined"
            ],
            "answer": "It throws an error if used",
            "explanation": "Arrow functions do not have a new.target keyword; using it within an arrow function will throw an error."
        },
        {
            "question": "Can arrow functions be used as methods in an object literal?",
            "options": [
                "Yes, they can",
                "No, they should not be used",
                "Only if they don't use 'this'",
                "Only in ES6 or later"
            ],
            "answer": "No, they should not be used",
            "explanation": "While you can use arrow functions as methods in object literals, it is not recommended because they inherit the 'this' value from the enclosing scope, which can lead to unexpected behavior."
        },
        {
            "question": "What is the output of using 'this' inside an arrow function within a method?",
            "options": [
                "The object that contains the method",
                "The global object",
                "The arrow function itself",
                "The object that called the method"
            ],
            "answer": "The global object",
            "explanation": "When using 'this' inside an arrow function that is within a method, 'this' refers to the global object, as arrow functions do not have their own 'this'."
        },
        {
            "question": "Can you create immediately invoked function expressions (IIFE) with arrow functions?",
            "options": [
                "Yes",
                "No",
                "Only in non-strict mode",
                "Only with a single expression"
            ],
            "answer": "Yes",
            "explanation": "Arrow functions can be used to create immediately invoked function expressions (IIFE) by enclosing the arrow function and its invocation in parentheses."
        },
        {
            "question": "How do you specify a default parameter value in an arrow function?",
            "options": [
                "Using the default keyword",
                "It's not possible in arrow functions",
                "By initializing the parameter in the function body",
                "By assigning a value in the parameter list"
            ],
            "answer": "By assigning a value in the parameter list",
            "explanation": "Default parameter values in arrow functions are specified by assigning a value to the parameter in the function's parameter list."
        },
        {
            "question": "What is a class in JavaScript?",
            "options": [
                "A blueprint for creating objects",
                "A special type of function",
                "A method used for object inheritance",
                "A constant variable type"
            ],
            "answer": "A blueprint for creating objects",
            "explanation": "In JavaScript, a class is a blueprint for creating objects with pre-defined properties and methods."
        },
        {
            "question": "How do you define a class in JavaScript?",
            "options": [
                "class MyClass {…}",
                "function MyClass() {…}",
                "MyClass = {…}",
                "var MyClass = class {…}"
            ],
            "answer": "class MyClass {…}",
            "explanation": "A class in JavaScript is defined using the class keyword followed by the class name and a set of curly braces containing its body."
        },
        {
            "question": "What is a constructor in a JavaScript class?",
            "options": [
                "A method for cloning objects",
                "A special method for initializing new objects",
                "A function that returns the class instance",
                "The first method in a class"
            ],
            "answer": "A special method for initializing new objects",
            "explanation": "The constructor is a special method within a class that is called when a new instance of the class is created, used for initializing properties of the object."
        },
        {
            "question": "How do you create an instance of a class in JavaScript?",
            "options": [
                "new MyClass()",
                "MyClass.new()",
                "MyClass()",
                "create MyClass()"
            ],
            "answer": "new MyClass()",
            "explanation": "An instance of a class is created using the new keyword followed by the class name and parentheses."
        },
        {
            "question": "What is inheritance in the context of JavaScript classes?",
            "options": [
                "Copying properties between objects",
                "A class receiving properties and methods from another class",
                "Sharing methods between two instances",
                "Overriding properties in a class"
            ],
            "answer": "A class receiving properties and methods from another class",
            "explanation": "Inheritance in JavaScript classes is a mechanism where one class (child class) can inherit properties and methods from another class (parent class)."
        },
        {
            "question": "How do you specify a class as a child of another class in JavaScript?",
            "options": [
                "childClass extends parentClass",
                "childClass inherits parentClass",
                "childClass = parentClass",
                "childClass(child of parentClass)"
            ],
            "answer": "childClass extends parentClass",
            "explanation": "The extends keyword is used in class declarations to create a class as a child of another class."
        },
        {
            "question": "What is a method in a JavaScript class?",
            "options": [
                "A global function",
                "A function defined inside a class",
                "A static property",
                "A constructor parameter"
            ],
            "answer": "A function defined inside a class",
            "explanation": "A method in a JavaScript class is a function defined inside the class that describes the behaviors of the class's instances."
        },
        {
            "question": "Can classes in JavaScript have private properties or methods?",
            "options": [
                "Yes, using the # symbol",
                "No, all properties and methods are public",
                "Only properties can be private",
                "Only methods can be private"
            ],
            "answer": "Yes, using the # symbol",
            "explanation": "JavaScript classes can have private properties and methods, which are defined using the # symbol in front of their names. These are only accessible within the class itself."
        },
        {
            "question": "What is the use of the static keyword in a JavaScript class?",
            "options": [
                "To make properties constant",
                "To create a singleton class",
                "To create a static (shared) method or property",
                "To declare static typing"
            ],
            "answer": "To create a static (shared) method or property",
            "explanation": "The static keyword is used to define static methods or properties in a class. Static methods/properties are called without instantiating the class and cannot be called through a class instance."
        },
        {
            "question": "How do you call a parent class's method from within a child class's method?",
            "options": [
                "parent.method()",
                "super.method()",
                "this.method()",
                "base.method()"
            ],
            "answer": "super.method()",
            "explanation": "The super keyword is used within a child class to call methods or the constructor of the parent class."
        },
        {
            "question": "What is encapsulation in the context of JavaScript classes?",
            "options": [
                "Combining related data and methods into a single class",
                "Hiding private data from external access",
                "Preventing classes from inheriting properties",
                "Encrypting class data"
            ],
            "answer": "Combining related data and methods into a single class",
            "explanation": "Encapsulation in JavaScript classes refers to the bundling of data (properties) and the methods that operate on that data into a single unit or class."
        },
        {
            "question": "How can you override a method in a child class in JavaScript?",
            "options": [
                "By renaming the method in the child class",
                "By calling super.method()",
                "By redeclaring the method in the child class",
                "By using the override keyword"
            ],
            "answer": "By redeclaring the method in the child class",
            "explanation": "Overriding a method in a child class is done by redeclaring the method in the child class. This new method will replace the inherited method from the parent class."
        },
        {
            "question": "What is polymorphism in the context of JavaScript classes?",
            "options": [
                "Changing the type of a class at runtime",
                "A class having multiple constructors",
                "Child classes having methods with the same name but different implementations",
                "Creating multiple instances of a class"
            ],
            "answer": "Child classes having methods with the same name but different implementations",
            "explanation": "Polymorphism in object-oriented programming, including JavaScript classes, is the ability of different classes to provide different implementations of methods that are called through the same name."
        },
        {
            "question": "Can you declare variables inside a class in JavaScript without a method?",
            "options": [
                "Yes, anywhere in the class",
                "No, variables must be declared within methods",
                "Yes, but only if they are static",
                "No, only methods are allowed inside classes"
            ],
            "answer": "No, variables must be declared within methods",
            "explanation": "In JavaScript classes, variables cannot be declared directly inside a class but must be declared within methods or as part of the class's properties."
        },
        {
            "question": "What is the result of instantiating an abstract class in JavaScript?",
            "options": [
                "It creates a new instance successfully",
                "It throws an error",
                "It creates a generic object",
                "JavaScript does not support abstract classes"
            ],
            "answer": "JavaScript does not support abstract classes",
            "explanation": "JavaScript does not have native support for abstract classes. Attempting to instantiate a class that is intended to be abstract will not throw an error but will not enforce abstract behavior."
        },
        {
            "question": "What are JavaScript modules?",
            "options": [
                "Pre-built JavaScript libraries",
                "JavaScript files that export and import functionality",
                "Functions within JavaScript",
                "HTML elements linked to JavaScript"
            ],
            "answer": "JavaScript files that export and import functionality",
            "explanation": "JavaScript modules are files that can export parts of their code (like variables, functions, or classes) and import such code from other files, making it easier to organize and maintain large codebases."
        },
        {
            "question": "How do you export a function from a JavaScript module?",
            "options": [
                "export function myFunction() {…}",
                "function myFunction() {…}; export myFunction",
                "module.export = myFunction()",
                "export default myFunction()"
            ],
            "answer": "export function myFunction() {…}",
            "explanation": "The export keyword is used to export a function from a module, allowing it to be imported and used in other modules."
        },
        {
            "question": "How can you import a specific function from a JavaScript module?",
            "options": [
                "import { myFunction } from 'module'",
                "include { myFunction } from 'module'",
                "require('module').myFunction",
                "load { myFunction } from 'module'"
            ],
            "answer": "import { myFunction } from 'module'",
            "explanation": "The import statement with curly braces is used to import a specific function or variable from a module."
        },
        {
            "question": "What is the purpose of 'export default' in JavaScript modules?",
            "options": [
                "To export variables as constants",
                "To set the default value of a module",
                "To export a single value as the default export of a module",
                "To export all functions and variables in a module"
            ],
            "answer": "To export a single value as the default export of a module",
            "explanation": "export default is used to specify a single value (function, class, object, etc.) as the default export from a module."
        },
        {
            "question": "How do you import a default export from a module?",
            "options": [
                "import myFunction from 'module'",
                "import { default as myFunction } from 'module'",
                "require('module').default",
                "Both a and b"
            ],
            "answer": "import myFunction from 'module'",
            "explanation": "When importing a default export from a module, you can use the import statement without curly braces."
        },
        {
            "question": "What is the result of having multiple 'export default' statements in a single module?",
            "options": [
                "All default exports are combined",
                "Only the last export default is considered",
                "A syntax error is thrown",
                "The module exports an object containing all defaults"
            ],
            "answer": "A syntax error is thrown",
            "explanation": "A module can only have one default export. Having multiple export default statements in a module will result in a syntax error."
        },
        {
            "question": "Can named exports coexist with a default export in a module?",
            "options": [
                "Yes",
                "No",
                "Only if they are functions",
                "Only if they are variables"
            ],
            "answer": "Yes",
            "explanation": "A module can have both named exports and a default export, allowing for flexible module structure and usage."
        },
        {
            "question": "How do you rename an imported variable from a module?",
            "options": [
                "import { originalName as newName } from 'module'",
                "import newName from 'module'",
                "import { rename: originalName to newName } from 'module'",
                "import originalName as newName from 'module'"
            ],
            "answer": "import { originalName as newName } from 'module'",
            "explanation": "The import { originalName as newName } syntax is used to import a variable under a different name."
        },
        {
            "question": "What is the main advantage of using JavaScript modules?",
            "options": [
                "Improved performance due to parallel loading",
                "Enhanced security features",
                "Automatic compatibility with all browsers",
                "Better code organization and maintainability"
            ],
            "answer": "Better code organization and maintainability",
            "explanation": "JavaScript modules provide a way to organize code into manageable and maintainable pieces, promoting better code organization and reuse."
        },
        {
            "question": "How can you import everything from a module as an object?",
            "options": [
                "import * as myModule from 'module'",
                "import myModule.* from 'module'",
                "require('module').*",
                "import all from 'module'"
            ],
            "answer": "import * as myModule from 'module'",
            "explanation": "The import * as myModule syntax imports all exports from a module as properties of an object named myModule."
        },
        {
            "question": "How are modules loaded in modern JavaScript?",
            "options": [
                "Synchronously",
                "Asynchronously",
                "Only on demand",
                "In parallel with other scripts"
            ],
            "answer": "Asynchronously",
            "explanation": "In modern JavaScript, modules are loaded asynchronously, which can improve page load times and overall performance."
        },
        {
            "question": "What is the scope of top-level variables in a JavaScript module?",
            "options": [
                "Global scope",
                "Local to the module",
                "Function scope",
                "Block scope"
            ],
            "answer": "Local to the module",
            "explanation": "Top-level variables in a module are local to the module and not added to the global scope, reducing the chance of name conflicts."
        },
        {
            "question": "Can you use conditional statements to control module imports?",
            "options": [
                "Yes, using if statements",
                "No, imports must be static",
                "Yes, using switch statements",
                "Only in function scope"
            ],
            "answer": "No, imports must be static",
            "explanation": "Imports in JavaScript modules are static and cannot be conditionally controlled using statements like if or switch."
        },
        {
            "question": "How does tree shaking relate to JavaScript modules?",
            "options": [
                "It's a process of optimizing module loading",
                "It's a technique for removing unused code from modules",
                "It's a method to combine modules",
                "It refers to dynamically loading modules"
            ],
            "answer": "It's a technique for removing unused code from modules",
            "explanation": "Tree shaking is a term commonly used in the context of module bundlers and refers to the elimination of unused code from modules to reduce bundle size and improve performance."
        },
        {
            "question": "What file extension is typically used for JavaScript modules?",
            "options": [
                ".jsm",
                ".jsx",
                ".js",
                ".module"
            ],
            "answer": ".js",
            "explanation": "JavaScript modules use the standard .js file extension, just like regular JavaScript files."
        },
        {
            "question": "What is a Promise in JavaScript?",
            "options": [
                "A function that executes asynchronously",
                "A callback function",
                "An object representing the eventual completion or failure of an asynchronous operation",
                "A way to handle events"
            ],
            "answer": "An object representing the eventual completion or failure of an asynchronous operation",
            "explanation": "A Promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation, along with its resulting value."
        },
        {
            "question": "How do you create a new Promise in JavaScript?",
            "options": [
                "new Promise(function(resolve, reject) {…})",
                "Promise.create(function(resolve, reject) {…})",
                "new AsyncPromise(function(resolve, reject) {…})",
                "Promise.new(function(resolve, reject) {…})"
            ],
            "answer": "new Promise(function(resolve, reject) {…})",
            "explanation": "A new Promise is created in JavaScript using the new Promise() constructor with a function that takes two arguments, resolve and reject."
        },
        {
            "question": "What method is used to specify the code to execute after a Promise is fulfilled?",
            "options": [
                ".then()",
                ".catch()",
                ".finally()",
                ".done()"
            ],
            "answer": ".then()",
            "explanation": "The .then() method is used on a Promise to specify what to do when the promise is fulfilled or successfully resolved."
        },
        {
            "question": "What does the .catch() method do in the context of a Promise?",
            "options": [
                "Catches any errors that occurred in the Promise",
                "Pauses the execution of the Promise",
                "Executes when the Promise is resolved",
                "Sends data to the Promise"
            ],
            "answer": "Catches any errors that occurred in the Promise",
            "explanation": "The .catch() method is used with a Promise to specify the action to be taken if the Promise is rejected or an error occurs."
        },
        {
            "question": "How can you chain multiple asynchronous operations with Promises?",
            "options": [
                "Using nested Promises",
                "Using multiple .then() methods",
                "Using the async keyword",
                "By passing an array of Promises"
            ],
            "answer": "Using multiple .then() methods",
            "explanation": "Multiple asynchronous operations can be chained together using multiple .then() methods, where each one takes the output of the previous as its input."
        },
        {
            "question": "What is the purpose of the .finally() method in a Promise?",
            "options": [
                "To execute code after the Promise is settled, regardless of its outcome",
                "To finalize the result of the Promise",
                "To stop the Promise from executing further",
                "To handle only successful resolutions"
            ],
            "answer": "To execute code after the Promise is settled, regardless of its outcome",
            "explanation": "The .finally() method is used to execute a block of code after the Promise is settled, whether it is fulfilled or rejected."
        },
        {
            "question": "What does the Promise.all() method do?",
            "options": [
                "Waits for all passed Promises to be settled",
                "Executes all Promises in parallel",
                "Rejects all Promises",
                "Resolves the first Promise that completes"
            ],
            "answer": "Waits for all passed Promises to be settled",
            "explanation": "Promise.all() takes an iterable of Promises and resolves when all of the passed Promises have resolved or rejects as soon as one of them rejects."
        },
        {
            "question": "What is the async keyword used for in JavaScript?",
            "options": [
                "To declare an asynchronous function",
                "To make a function return a Promise",
                "To pause the execution of a function",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "The async keyword is used to declare an asynchronous function, which automatically transforms the function to return a Promise."
        },
        {
            "question": "How do you handle errors in an async function?",
            "options": [
                "Using a try-catch block",
                "Using the .catch() method",
                "Using the onError handler",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "Errors in an async function can be handled using a try-catch block within the function or using a .catch() method on the Promise returned by the async function."
        },
        {
            "question": "What is the await keyword used for in async functions?",
            "options": [
                "To pause the execution of the async function until a Promise settles",
                "To automatically catch errors",
                "To create a new Promise",
                "To repeat an asynchronous operation"
            ],
            "answer": "To pause the execution of the async function until a Promise settles",
            "explanation": "The await keyword is used inside an async function to pause its execution until the Promise is resolved or rejected."
        },
        {
            "question": "Can the await keyword be used outside of an async function?",
            "options": [
                "Yes, in any function",
                "Yes, but only in top-level code",
                "No, it must be used within an async function",
                "Yes, in any asynchronous code"
            ],
            "answer": "No, it must be used within an async function",
            "explanation": "The await keyword can only be used inside an async function and is not allowed in regular functions or outside of a function."
        },
        {
            "question": "What is the result of an async function execution?",
            "options": [
                "An immediate value",
                "A synchronous result",
                "A Promise",
                "Undefined"
            ],
            "answer": "A Promise",
            "explanation": "An async function returns a Promise, which will eventually resolve with the value returned by the function."
        },
        {
            "question": "What happens when a Promise is rejected inside an async function without a catch block?",
            "options": [
                "The Promise is ignored",
                "An uncaught error is thrown",
                "The function returns null",
                "The Promise is resolved with undefined"
            ],
            "answer": "An uncaught error is thrown",
            "explanation": "If a Promise is rejected inside an async function without proper error handling (like a catch block), it results in an uncaught error."
        },
        {
            "question": "How does Promise.resolve() work?",
            "options": [
                "It creates a new Promise that is immediately resolved",
                "It rejects a Promise",
                "It pauses a Promise",
                "It combines multiple Promises"
            ],
            "answer": "It creates a new Promise that is immediately resolved",
            "explanation": "Promise.resolve() creates a new Promise that is immediately resolved with the given value."
        },
        {
            "question": "How can you convert a callback-based function to return a Promise?",
            "options": [
                "Using the Promise constructor",
                "By wrapping the function with async",
                "Using Promise.resolve()",
                "By changing the function to an arrow function"
            ],
            "answer": "Using the Promise constructor",
            "explanation": "To convert a callback-based function to return a Promise, you can wrap the function call inside a new Promise using the Promise constructor."
        },
        {
            "question": "What is the purpose of error handling in JavaScript?",
            "options": [
                "To debug the code",
                "To prevent the program from crashing",
                "To identify syntax errors",
                "To log errors to the console"
            ],
            "answer": "To prevent the program from crashing",
            "explanation": "Error handling in JavaScript is used to manage exceptions and prevent the program from crashing due to errors. It ensures smoother execution by handling runtime errors."
        },
        {
            "question": "How do you catch errors in JavaScript?",
            "options": [
                "Using a for loop",
                "Using the catch statement",
                "Using a flag variable",
                "Using the error event"
            ],
            "answer": "Using the catch statement",
            "explanation": "The catch statement is used to catch and handle errors that occur in the try block. It specifies a block of code to execute in case an error occurs."
        },
        {
            "question": "What keyword is used to throw custom errors in JavaScript?",
            "options": [
                "error",
                "throw",
                "raise",
                "emit"
            ],
            "answer": "throw",
            "explanation": "The throw keyword is used to throw custom errors. It allows the creation of custom error messages and conditions."
        },
        {
            "question": "What is the correct syntax for a try-catch block in JavaScript?",
            "options": [
                "try {…} catch(error) {…}",
                "try {…} error {…}",
                "try {…} catch {…}",
                "try {…} exception {…}"
            ],
            "answer": "try {…} catch(error) {…}",
            "explanation": "A try-catch block in JavaScript is written with the try keyword, followed by a block of code, and the catch keyword with an error object to handle any caught errors."
        },
        {
            "question": "Can finally be used without catch in a try-catch block?",
            "options": [
                "Yes",
                "No",
                "Only in strict mode",
                "Only in non-strict mode"
            ],
            "answer": "Yes",
            "explanation": "The finally block can be used after a try block even without a catch block. It executes regardless of whether an error occurred."
        },
        {
            "question": "What is the role of the finally block in error handling?",
            "options": [
                "To log errors",
                "To throw errors",
                "To execute code after try and catch, regardless of the result",
                "To handle only specific types of errors"
            ],
            "answer": "To execute code after try and catch, regardless of the result",
            "explanation": "The finally block is used to execute code after the try and catch blocks have completed, regardless of whether an exception was thrown or not."
        },
        {
            "question": "How do you create a custom error in JavaScript?",
            "options": [
                "By using the Error constructor",
                "By defining a new class",
                "By using the customError function",
                "By modifying the prototype of Error"
            ],
            "answer": "By using the Error constructor",
            "explanation": "Custom errors can be created using the Error constructor, which allows for specifying an error message and, optionally, an error name."
        },
        {
            "question": "What type of errors are caught by a try-catch block?",
            "options": [
                "Only syntax errors",
                "Only runtime errors",
                "Both syntax and runtime errors",
                "Only logic errors"
            ],
            "answer": "Only runtime errors",
            "explanation": "A try-catch block in JavaScript is used to catch and handle runtime errors. Syntax errors are not caught since they occur during the parsing of the code."
        },
        {
            "question": "Which method is used to log the stack trace of an error?",
            "options": [
                "console.trace()",
                "console.error()",
                "Error.stack",
                "console.log()"
            ],
            "answer": "Error.stack",
            "explanation": "The Error.stack property provides a stack trace that shows where the error occurred, which is useful for debugging."
        },
        {
            "question": "What is a common practice for handling rejected promises?",
            "options": [
                "Using a for loop",
                "Using the reject() function",
                "Using the .catch() method",
                "Using the finally() method"
            ],
            "answer": "Using the .catch() method",
            "explanation": "The .catch() method is commonly used to handle errors or rejections in promises. It provides a way to catch and handle any errors that occur during the execution of the promise."
        },
        {
            "question": "What is a TypeError in JavaScript?",
            "options": [
                "An error that occurs when a variable is not declared",
                "An error related to incorrect use of types, such as accessing a property on undefined",
                "An error that occurs when a function is not available",
                "An error that occurs when a script takes too long to run"
            ],
            "answer": "An error related to incorrect use of types, such as accessing a property on undefined",
            "explanation": "A TypeError occurs in JavaScript when an operation is performed on a value of the wrong type, such as trying to access a property on undefined or null."
        },
        {
            "question": "What is the difference between a ReferenceError and a SyntaxError?",
            "options": [
                "A ReferenceError occurs for undeclared variables, while a SyntaxError occurs for parsing errors",
                "A ReferenceError is thrown for runtime issues, while a SyntaxError is thrown for logic errors",
                "There is no difference",
                "A ReferenceError is only thrown in strict mode"
            ],
            "answer": "A ReferenceError occurs for undeclared variables, while a SyntaxError occurs for parsing errors",
            "explanation": "A ReferenceError in JavaScript is thrown when trying to access a variable that hasn't been declared, while a SyntaxError occurs when there are issues in the syntax of the code."
        },
        {
            "question": "Can a catch block re-throw an error in JavaScript?",
            "options": [
                "Yes, using the throw keyword",
                "No, once caught, errors cannot be re-thrown",
                "Only in strict mode",
                "Only for certain types of errors"
            ],
            "answer": "Yes, using the throw keyword",
            "explanation": "It is possible for a catch block to re-throw an error using the throw keyword, which can be useful for propagating errors up to higher-level error handlers."
        },
        {
            "question": "How can you handle multiple types of errors in a catch block?",
            "options": [
                "By using multiple catch blocks",
                "By using if-else statements to differentiate errors",
                "By using the instanceof operator",
                "Both b and c"
            ],
            "answer": "Both b and c",
            "explanation": "Within a catch block, you can differentiate between types of errors using if-else statements and the instanceof operator to handle different types of errors differently."
        },
        {
            "question": "What is the use of the Error.name property in JavaScript?",
            "options": [
                "To specify the type of error",
                "To log the error message",
                "To determine the function where the error occurred",
                "To indicate the line number of the error"
            ],
            "answer": "To specify the type of error",
            "explanation": "The Error.name property is used to specify the type or name of the error, such as TypeError, ReferenceError, or custom error names."
        }
    ],
    "Go": [
        {
            "question": "What is the correct syntax for declaring a variable in Go?",
            "options": [
                "var myVar int",
                "int myVar",
                "myVar := int",
                "declare myVar as int"
            ],
            "answer": "var myVar int",
            "explanation": "In Go, a variable is declared using the 'var' keyword followed by the variable name and the type. The syntax is 'var variableName variableType'."
        },
        {
            "question": "Which of the following is used for type inference in Go?",
            "options": [
                ":=",
                "==",
                "=",
                "::"
            ],
            "answer": ":=",
            "explanation": "The ':=' syntax is used for type inference in Go, where the compiler determines the type of the variable based on the initial value assigned to it."
        },
        {
            "question": "How do you declare a block of variables in Go?",
            "options": [
                "var { a int, b string }",
                "var ( a int; b string )",
                "var ( a int; b string; )",
                "var [ a int, b string ]"
            ],
            "answer": "var ( a int; b string; )",
            "explanation": "In Go, a block of variables is declared using the 'var' keyword followed by parentheses. Each variable declaration is separated by a semicolon."
        },
        {
            "question": "What is the zero value of a string variable in Go?",
            "options": [
                "null",
                "\"\"",
                "0",
                "undefined"
            ],
            "answer": "\"\"",
            "explanation": "The zero value of a string in Go is an empty string, denoted by \"\"."
        },
        {
            "question": "Can you redeclare a variable in the same scope in Go?",
            "options": [
                "Yes, always",
                "No, never",
                "Yes, but only if it is of a different type",
                "Yes, but only if it is not yet assigned a value"
            ],
            "answer": "No, never",
            "explanation": "In Go, you cannot redeclare a variable in the same scope. Once a variable is declared, its name cannot be reused in the same scope."
        },
        {
            "question": "Which of the following is NOT a valid way to declare and initialize a variable in Go?",
            "options": [
                "var a int = 10",
                "b := 20",
                "var c = 30",
                "d int = 40"
            ],
            "answer": "d int = 40",
            "explanation": "The correct syntax to declare and initialize a variable in Go does not include the type before the variable name when using the '=' assignment. 'd int = 40' is incorrect."
        },
        {
            "question": "How do you declare a package level variable in Go?",
            "options": [
                "package var myVar int",
                "var myVar int",
                "global myVar int",
                "public var myVar int"
            ],
            "answer": "var myVar int",
            "explanation": "Package level variables in Go are declared outside of any function using the 'var' keyword. They are accessible from any function within the package."
        },
        {
            "question": "What is the default value of a boolean variable in Go?",
            "options": [
                "true",
                "false",
                "0",
                "null"
            ],
            "answer": "false",
            "explanation": "The zero value of a boolean in Go is 'false'."
        },
        {
            "question": "Which of the following declares a pointer variable in Go?",
            "options": [
                "var ptr *int",
                "var *ptr int",
                "int *ptr",
                "ptr *int"
            ],
            "answer": "var ptr *int",
            "explanation": "In Go, a pointer variable is declared using the 'var' keyword, followed by the variable name, a star (*), and the type of the value it points to."
        },
        {
            "question": "How do you initialize a variable with a constant value in Go?",
            "options": [
                "var myVar int = 5",
                "myVar := 5",
                "const myVar = 5",
                "myVar = 5"
            ],
            "answer": "const myVar = 5",
            "explanation": "In Go, constants are declared using the 'const' keyword. The value of a constant should be known at compile-time and cannot be changed."
        },
        {
            "question": "How do you declare a constant in Go?",
            "options": [
                "const myConst = 10",
                "var myConst = 10",
                "myConst := 10",
                "#define myConst 10"
            ],
            "answer": "const myConst = 10",
            "explanation": "Constants in Go are declared using the 'const' keyword followed by the constant name and its value."
        },
        {
            "question": "Can a constant in Go be declared without an initial value?",
            "options": [
                "Yes, it can be initialized later.",
                "No, it must be initialized during declaration.",
                "Yes, but only for string types.",
                "No, unless it is a global constant."
            ],
            "answer": "No, it must be initialized during declaration.",
            "explanation": "Constants in Go must be initialized at the time of their declaration and cannot be assigned a value later."
        },
        {
            "question": "What is the type of an untyped constant in Go?",
            "options": [
                "The type is inferred from the context.",
                "It defaults to int.",
                "It is always float64.",
                "Constants are always typed in Go."
            ],
            "answer": "The type is inferred from the context.",
            "explanation": "Untyped constants in Go don't have a fixed type. Their type is inferred based on the context in which they are used."
        },
        {
            "question": "Which of these is a valid way to declare a group of constants in Go?",
            "options": [
                "const ( a = 1, b = 2, c = 3 )",
                "const a, b, c = 1, 2, 3",
                "const ( a = 1 b = 2 c = 3 )",
                "const ( a = 1; b = 2; c = 3 )"
            ],
            "answer": "const ( a = 1 b = 2 c = 3 )",
            "explanation": "In Go, a group of constants can be declared inside parentheses with each constant declaration separated by a newline."
        },
        {
            "question": "Which of the following is true about constant blocks in Go?",
            "options": [
                "Constants in a block must all be of the same type.",
                "Constants in a block can have different types.",
                "Each constant in a block must be explicitly initialized.",
                "Blocks can only define numeric constants."
            ],
            "answer": "Constants in a block can have different types.",
            "explanation": "In Go, constants in a block can be of different types, and it's not mandatory for each constant to be explicitly initialized if it follows an iota."
        },
        {
            "question": "What does 'iota' represent in Go?",
            "options": [
                "A constant type",
                "An auto-incremented constant generator",
                "A built-in function for constants",
                "A special operator for constants"
            ],
            "answer": "An auto-incremented constant generator",
            "explanation": "'iota' is a predeclared identifier in Go representing successive untyped integer constants, used to create enumerated constants."
        },
        {
            "question": "What is the zero value of an untyped boolean constant in Go?",
            "options": [
                "true",
                "false",
                "0",
                "nil"
            ],
            "answer": "false",
            "explanation": "The zero value of an untyped boolean constant in Go is 'false'."
        },
        {
            "question": "How does Go handle typed and untyped constants in an operation?",
            "options": [
                "Typed constants cannot be mixed with untyped constants.",
                "Typed and untyped constants are always compatible.",
                "An untyped constant is converted to the type of the typed constant.",
                "The operation is invalid in Go."
            ],
            "answer": "An untyped constant is converted to the type of the typed constant.",
            "explanation": "In operations involving both typed and untyped constants, the untyped constant is converted to the type of the typed constant."
        },
        {
            "question": "Are constant expressions in Go evaluated at compile-time or runtime?",
            "options": [
                "Compile-time",
                "Runtime",
                "Both",
                "Neither"
            ],
            "answer": "Compile-time",
            "explanation": "Constant expressions in Go are evaluated at compile time."
        },
        {
            "question": "Can you use arithmetic operations on constants of different types in Go?",
            "options": [
                "Yes, always.",
                "No, it results in a compile-time error.",
                "Yes, but only if they are untyped.",
                "Yes, but only if they are explicitly converted."
            ],
            "answer": "Yes, but only if they are untyped.",
            "explanation": "Arithmetic operations can be performed on untyped constants of different types, as Go will infer the type based on the context. However, typed constants must be explicitly converted to a common type."
        },
        {
            "question": "What is the default type of an integer literal in Go if it does not fit into int32?",
            "options": [
                "int32",
                "int64",
                "int",
                "uint64"
            ],
            "answer": "int64",
            "explanation": "If an integer literal exceeds the size of int32, Go defaults to int64 for the literal's type."
        },
        {
            "question": "Which of the following types represents a floating-point number in Go?",
            "options": [
                "int",
                "float32",
                "string",
                "boolean"
            ],
            "answer": "float32",
            "explanation": "In Go, float32 and float64 are the types used to represent floating-point numbers."
        },
        {
            "question": "What is the zero value of a struct in Go?",
            "options": [
                "null",
                "0",
                "An empty struct",
                "Each field set to its zero value"
            ],
            "answer": "Each field set to its zero value",
            "explanation": "The zero value of a struct in Go is a struct with all its fields set to their respective zero values."
        },
        {
            "question": "In Go, which keyword is used to define a new struct?",
            "options": [
                "class",
                "struct",
                "new",
                "type"
            ],
            "answer": "struct",
            "explanation": "The 'struct' keyword is used to define a new struct type in Go."
        },
        {
            "question": "What is the output type of the 'make' function when used with a slice in Go?",
            "options": [
                "Array",
                "Slice",
                "Map",
                "Pointer"
            ],
            "answer": "Slice",
            "explanation": "The 'make' function is used to create slices, maps, and channels in Go, and it returns a slice when used with a slice type."
        },
        {
            "question": "Which data type is used to represent a sequence of characters in Go?",
            "options": [
                "char",
                "string",
                "rune",
                "byte"
            ],
            "answer": "string",
            "explanation": "In Go, the 'string' data type is used to represent a sequence of characters."
        },
        {
            "question": "How do you declare an array of 5 integers in Go?",
            "options": [
                "var arr [5]int",
                "int arr[5]",
                "var arr = [5]int",
                "[5]int arr"
            ],
            "answer": "var arr [5]int",
            "explanation": "Arrays in Go are declared by specifying the type of elements and the number of elements in square brackets before the variable name."
        },
        {
            "question": "Which of the following is NOT a valid map declaration in Go?",
            "options": [
                "var myMap map[string]int",
                "myMap := map[string]int{}",
                "map[string]int myMap",
                "var myMap = make(map[string]int)"
            ],
            "answer": "map[string]int myMap",
            "explanation": "In Go, the correct syntax to declare a map either uses the 'var' keyword followed by the map type, or the ':=' syntax with the 'make' function or a map literal."
        },
        {
            "question": "What is the zero value for a pointer in Go?",
            "options": [
                "0",
                "null",
                "nil",
                "undefined"
            ],
            "answer": "nil",
            "explanation": "The zero value for a pointer in Go is 'nil'."
        },
        {
            "question": "Which keyword is used to define an interface in Go?",
            "options": [
                "interface",
                "struct",
                "type",
                "class"
            ],
            "answer": "interface",
            "explanation": "Interfaces in Go are defined using the 'interface' keyword."
        },
        {
            "question": "Which data type in Go is used to represent a Unicode code point?",
            "options": [
                "string",
                "char",
                "rune",
                "byte"
            ],
            "answer": "rune",
            "explanation": "The 'rune' data type in Go represents a Unicode code point. It is an alias for int32."
        },
        {
            "question": "What is the default value of a slice in Go?",
            "options": [
                "nil",
                "Empty array",
                "Zero",
                "An array with zero elements"
            ],
            "answer": "nil",
            "explanation": "The zero value of a slice in Go is 'nil'."
        },
        {
            "question": "How do you specify a variable-length argument list in a Go function?",
            "options": [
                "Using the 'varargs' keyword",
                "By prefixing the type with '…'",
                "By using an array",
                "By using a slice"
            ],
            "answer": "By prefixing the type with '…'",
            "explanation": "In Go, a variable-length argument list is specified by prefixing the type of the argument with '…'."
        },
        {
            "question": "What is the key difference between a slice and an array in Go?",
            "options": [
                "Arrays can store elements of different types, but slices cannot.",
                "Slices are fixed in size, whereas arrays are dynamic.",
                "Arrays are fixed in size, whereas slices are dynamic.",
                "Slices support direct data manipulation, arrays do not."
            ],
            "answer": "Arrays are fixed in size, whereas slices are dynamic.",
            "explanation": "In Go, arrays have a fixed size, while slices are a flexible view into the elements of an array and can dynamically change size."
        },
        {
            "question": "What does the 'range' keyword in Go return when iterating over a map?",
            "options": [
                "Only the keys",
                "Only the values",
                "Both keys and values",
                "Index and value"
            ],
            "answer": "Both keys and values",
            "explanation": "When iterating over a map with the 'range' keyword in Go, it returns both the key and the value for each entry in the map."
        },
        {
            "question": "How do you declare an array of 10 integers in Go?",
            "options": [
                "var arr [10]int",
                "var arr int[10]",
                "int arr[10]",
                "array arr[10]int"
            ],
            "answer": "var arr [10]int",
            "explanation": "In Go, arrays are declared by specifying the type of the elements and the number of elements within square brackets before the variable name."
        },
        {
            "question": "What is the length of the array declared as var myArray [5]int in Go?",
            "options": [
                "4",
                "5",
                "6",
                "0"
            ],
            "answer": "5",
            "explanation": "The length of the array 'myArray' is 5, as defined by the number in the square brackets."
        },
        {
            "question": "How do you access the third element in an array named 'data' in Go?",
            "options": [
                "data[3]",
                "data[2]",
                "data(2)",
                "data(3)"
            ],
            "answer": "data[2]",
            "explanation": "Arrays in Go are zero-indexed, so the third element is accessed with index 2."
        },
        {
            "question": "In Go, are arrays passed by value or by reference to functions?",
            "options": [
                "By value",
                "By reference",
                "Depends on the array size",
                "Depends on the array type"
            ],
            "answer": "By value",
            "explanation": "In Go, arrays are passed by value to functions, meaning a copy of the array is passed."
        },
        {
            "question": "What happens if you try to access an index out of bounds in a Go array?",
            "options": [
                "It returns nil.",
                "It returns the default value of the array type.",
                "It causes a runtime panic.",
                "It automatically extends the array."
            ],
            "answer": "It causes a runtime panic.",
            "explanation": "Accessing an index out of bounds in a Go array causes a runtime panic."
        },
        {
            "question": "How are uninitialized elements in a Go array set?",
            "options": [
                "To nil",
                "To the zero value of the array's type",
                "To an arbitrary memory value",
                "The array cannot have uninitialized elements"
            ],
            "answer": "To the zero value of the array's type",
            "explanation": "In Go, uninitialized elements in an array are automatically set to the zero value of the array's type."
        },
        {
            "question": "What is the correct way to initialize an array with specific values in Go?",
            "options": [
                "var arr = [5]int{1, 2, 3, 4, 5}",
                "var arr [5]int = {1, 2, 3, 4, 5}",
                "arr := [5]int(1, 2, 3, 4, 5)",
                "[5]int arr = [1, 2, 3, 4, 5]"
            ],
            "answer": "var arr = [5]int{1, 2, 3, 4, 5}",
            "explanation": "In Go, arrays can be initialized with specific values using curly braces following the type and size."
        },
        {
            "question": "Can you change the size of an array after its declaration in Go?",
            "options": [
                "Yes, by using append function",
                "Yes, by reassigning with a new size",
                "No, arrays have a fixed size",
                "Yes, by using resize function"
            ],
            "answer": "No, arrays have a fixed size",
            "explanation": "In Go, the size of an array is fixed upon declaration and cannot be changed."
        },
        {
            "question": "What does the 'len' function return when applied to an array in Go?",
            "options": [
                "The capacity of the array",
                "The number of initialized elements in the array",
                "The total size of the array in bytes",
                "The number of elements in the array"
            ],
            "answer": "The number of elements in the array",
            "explanation": "The 'len' function in Go returns the number of elements in the array."
        },
        {
            "question": "How can you iterate over an array in Go?",
            "options": [
                "Using the 'foreach' loop",
                "Using the 'while' loop",
                "Using the 'range' keyword",
                "Arrays in Go cannot be iterated"
            ],
            "answer": "Using the 'range' keyword",
            "explanation": "The 'range' keyword is used in Go to iterate over elements of an array."
        },
        {
            "question": "What is the default value of elements in an array of type bool in Go?",
            "options": [
                "true",
                "false",
                "nil",
                "0"
            ],
            "answer": "false",
            "explanation": "The default zero value for boolean types in Go, including elements in a boolean array, is 'false'."
        },
        {
            "question": "How do you declare a multi-dimensional array in Go?",
            "options": [
                "var arr [][]int",
                "var arr [2][3]int",
                "var arr (2)(3)int",
                "var arr 2×3 int"
            ],
            "answer": "var arr [2][3]int",
            "explanation": "Multi-dimensional arrays in Go are declared by specifying the size of each dimension in square brackets."
        },
        {
            "question": "Is it possible to compare two arrays directly in Go?",
            "options": [
                "Yes, if they are of the same type and size",
                "No, arrays cannot be compared",
                "Yes, regardless of their type and size",
                "Only if they are string arrays"
            ],
            "answer": "Yes, if they are of the same type and size",
            "explanation": "In Go, two arrays can be compared directly using the '==' operator if they are of the same type and size."
        },
        {
            "question": "How can you copy an array into another array in Go?",
            "options": [
                "Using the '=' operator",
                "Using the copy() function",
                "Arrays cannot be copied",
                "Using the clone() method"
            ],
            "answer": "Using the copy() function",
            "explanation": "The 'copy()' function is used in Go to copy elements from one array to another."
        },
        {
            "question": "What is the output of the 'cap' function when applied to an array in Go?",
            "options": [
                "The capacity of the array",
                "The number of non-nil elements in the array",
                "The number of elements in the array",
                "The total size of the array in bytes"
            ],
            "answer": "The capacity of the array",
            "explanation": "The 'cap' function in Go returns the capacity of the array, which is the number of elements it can contain."
        },
        {
            "question": "How do you declare a slice in Go?",
            "options": [
                "var mySlice []int",
                "mySlice := []int{}",
                "[]int mySlice",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "A slice in Go can be declared either with 'var mySlice []int' for a nil slice, or 'mySlice := []int{}' for an empty slice."
        },
        {
            "question": "What is the zero value of a slice in Go?",
            "options": [
                "An empty array",
                "nil",
                "A slice with one zero-valued element",
                "An uninitialized array"
            ],
            "answer": "nil",
            "explanation": "The zero value of a slice in Go is 'nil'."
        },
        {
            "question": "How do you create a slice with preallocated underlying array in Go?",
            "options": [
                "make([]int, length, capacity)",
                "new([]int, length, capacity)",
                "[]int{length, capacity}",
                "var []int{length, capacity}"
            ],
            "answer": "make([]int, length, capacity)",
            "explanation": "The 'make' function is used to create a slice with a specified length and capacity. The syntax is make([]Type, length, capacity)."
        },
        {
            "question": "What is the result of len() function when applied to a nil slice in Go?",
            "options": [
                "0",
                "1",
                "nil",
                "An error"
            ],
            "answer": "0",
            "explanation": "The len() function returns 0 when applied to a nil slice in Go."
        },
        {
            "question": "How do you append elements to a slice in Go?",
            "options": [
                "append(mySlice, element)",
                "mySlice.append(element)",
                "mySlice += element",
                "mySlice++ element"
            ],
            "answer": "append(mySlice, element)",
            "explanation": "The append function is used to add elements to a slice in Go. The syntax is append(slice, element)."
        },
        {
            "question": "Can you change the length of a slice after its declaration in Go?",
            "options": [
                "Yes, by using append function",
                "Yes, by reassigning with a new length",
                "No, slices have a fixed length",
                "Yes, by using resize function"
            ],
            "answer": "Yes, by using append function",
            "explanation": "The length of a slice in Go can be changed dynamically by appending elements to it using the append function."
        },
        {
            "question": "What does the 'cap' function return when applied to a slice in Go?",
            "options": [
                "The length of the slice",
                "The capacity of the slice",
                "The total size of the slice in bytes",
                "The number of non-nil elements in the slice"
            ],
            "answer": "The capacity of the slice",
            "explanation": "The 'cap' function in Go returns the capacity of the slice, which is the total number of elements the slice can hold without reallocating."
        },
        {
            "question": "How do you create a new slice by slicing an existing array 'arr' from index 2 to 5 in Go?",
            "options": [
                "arr[2:5]",
                "arr.slice(2, 5)",
                "newSlice := arr[2:5]",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "A new slice from an existing array can be created by specifying the start and end indices. The syntax is array[startIndex:endIndex]."
        },
        {
            "question": "What happens when you modify an element in a slice in Go?",
            "options": [
                "It modifies the corresponding element in its underlying array.",
                "It creates a new array.",
                "It leaves the underlying array unchanged.",
                "It raises an error."
            ],
            "answer": "It modifies the corresponding element in its underlying array.",
            "explanation": "Slices in Go are references to an underlying array, so modifying an element in the slice also modifies the corresponding element in the array."
        },
        {
            "question": "What is the result of slicing a slice beyond its capacity in Go?",
            "options": [
                "A new slice with increased capacity is returned.",
                "It results in a compile-time error.",
                "It results in a runtime panic.",
                "A nil slice is returned."
            ],
            "answer": "It results in a runtime panic.",
            "explanation": "Slicing a slice beyond its capacity causes a runtime panic in Go."
        },
        {
            "question": "Can you directly compare two slices in Go using the '==' operator?",
            "options": [
                "Yes",
                "No",
                "Only if they have the same length",
                "Only if they have the same capacity"
            ],
            "answer": "No",
            "explanation": "In Go, slices cannot be compared directly using the '==' operator. You must compare the individual elements."
        },
        {
            "question": "How do you copy elements from one slice to another in Go?",
            "options": [
                "Using the '=' operator",
                "Using the copy() function",
                "Slices cannot be copied",
                "Using the clone() method"
            ],
            "answer": "Using the copy() function",
            "explanation": "The copy() function is used in Go to copy elements from one slice to another."
        },
        {
            "question": "What is the underlying type of a slice in Go?",
            "options": [
                "Array",
                "Struct",
                "Pointer",
                "Map"
            ],
            "answer": "Array",
            "explanation": "A slice in Go is a reference to an underlying array."
        },
        {
            "question": "How do you remove an element from a slice in Go?",
            "options": [
                "Using the remove() function",
                "Slices do not support element removal",
                "By slicing out the element",
                "By setting the element to nil"
            ],
            "answer": "By slicing out the element",
            "explanation": "To remove an element from a slice, you can slice out the element and then append the remaining parts."
        },
        {
            "question": "How is a new underlying array created in a slice in Go?",
            "options": [
                "When the slice length exceeds its capacity",
                "By using the new() function",
                "Automatically when appending elements",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "A new underlying array for a slice is created when appending elements causes the slice length to exceed its capacity, or when explicitly using functions like append."
        },
        {
            "question": "What is the basic loop construct in Go?",
            "options": [
                "for",
                "while",
                "do-while",
                "loop"
            ],
            "answer": "for",
            "explanation": "Go uses the 'for' keyword as its basic and only loop construct."
        },
        {
            "question": "How do you create an infinite loop in Go?",
            "options": [
                "for {}",
                "for true {}",
                "while(true) {}",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "In Go, an infinite loop can be created using 'for {}' or 'for true {}'."
        },
        {
            "question": "How do you exit a loop in Go?",
            "options": [
                "exit()",
                "stop",
                "break",
                "end"
            ],
            "answer": "break",
            "explanation": "The 'break' statement is used to exit a loop in Go."
        },
        {
            "question": "What is the purpose of the 'continue' statement in Go loops?",
            "options": [
                "To pause the loop temporarily",
                "To skip the current iteration and continue with the next",
                "To exit the loop immediately",
                "To restart the loop from the beginning"
            ],
            "answer": "To skip the current iteration and continue with the next",
            "explanation": "The 'continue' statement in Go skips the remaining statements in the loop body and proceeds with the next iteration of the loop."
        },
        {
            "question": "How do you write a for loop in Go that iterates from 0 to 9?",
            "options": [
                "for i := 0; i <= 9; i++ {}",
                "for i := 0; i < 10; i++ {}",
                "for (i = 0; i < 10; i++) {}",
                "for i in range(0, 10) {}"
            ],
            "answer": "for i := 0; i < 10; i++ {}",
            "explanation": "In Go, a for loop that iterates from 0 to 9 is written as 'for i := 0; i < 10; i++ {}'."
        },
        {
            "question": "Can you declare multiple variables in the initialization statement of a Go for loop?",
            "options": [
                "Yes",
                "No",
                "Only if they are of the same type",
                "Only if they are of different types"
            ],
            "answer": "Yes",
            "explanation": "Go allows the declaration of multiple variables in the initialization statement of a for loop."
        },
        {
            "question": "How do you iterate over an array or slice in Go using a loop?",
            "options": [
                "Using a for loop with an index",
                "Using a while loop",
                "Using the range keyword with a for loop",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "Iteration over an array or slice in Go can be done using a traditional for loop with an index or using the range keyword with a for loop."
        },
        {
            "question": "What is the use of the range keyword in a Go loop?",
            "options": [
                "To specify the range of values for a loop variable",
                "To iterate over elements of a data structure like an array or map",
                "To create a range of numbers",
                "To limit the execution time of a loop"
            ],
            "answer": "To iterate over elements of a data structure like an array or map",
            "explanation": "The range keyword in Go is used to iterate over elements of data structures like arrays, slices, maps, and channels."
        },
        {
            "question": "How do you write a loop in Go that continues as long as a condition is true?",
            "options": [
                "for condition {}",
                "while(condition) {}",
                "do {} while(condition);",
                "loop while(condition) {}"
            ],
            "answer": "for condition {}",
            "explanation": "In Go, a loop that continues as long as a condition is true is written using the for keyword, e.g., 'for condition {}'."
        },
        {
            "question": "Is it possible to omit all three components (initialization, condition, post) of a Go for loop?",
            "options": [
                "Yes",
                "No",
                "Only the initialization and post can be omitted",
                "Only the condition can be omitted"
            ],
            "answer": "Yes",
            "explanation": "In Go, it's possible to omit all three components of the for loop, resulting in an infinite loop."
        },
        {
            "question": "Can a for loop in Go have multiple post statements?",
            "options": [
                "Yes, separated by commas",
                "No",
                "Yes, but only if they are of the same type",
                "Yes, separated by semicolons"
            ],
            "answer": "Yes, separated by commas",
            "explanation": "In Go, a for loop can have multiple post statements, separated by commas."
        },
        {
            "question": "How do you nest loops in Go?",
            "options": [
                "By writing one loop inside another",
                "Using the 'nest' keyword",
                "Go does not support nested loops",
                "By calling a function with a loop inside another loop"
            ],
            "answer": "By writing one loop inside another",
            "explanation": "Nested loops in Go are created by writing one loop inside another loop."
        },
        {
            "question": "What happens if you omit the loop condition in a Go for loop?",
            "options": [
                "The loop becomes an infinite loop",
                "The loop will not compile",
                "The loop runs once",
                "The loop condition defaults to true"
            ],
            "answer": "The loop becomes an infinite loop",
            "explanation": "Omitting the loop condition in a Go for loop turns it into an infinite loop."
        },
        {
            "question": "Can the range keyword in a Go loop return the index or key only?",
            "options": [
                "Yes, by omitting the value variable",
                "No, it always returns both index and value",
                "Yes, but only for arrays",
                "Yes, but only for maps"
            ],
            "answer": "Yes, by omitting the value variable",
            "explanation": "When using the range keyword in a Go loop, you can choose to get the index or key only by omitting the value variable."
        },
        {
            "question": "In a Go for loop, is it mandatory to use the post statement?",
            "options": [
                "Yes",
                "No",
                "It depends on the loop condition",
                "Only in nested loops"
            ],
            "answer": "No",
            "explanation": "The post statement in a Go for loop is not mandatory. You can omit it if not needed for the logic of your loop."
        },
        {
            "question": "How do you define a struct in Go?",
            "options": [
                "struct MyStruct {}",
                "type MyStruct struct {}",
                "define MyStruct struct",
                "MyStruct := struct {}"
            ],
            "answer": "type MyStruct struct {}",
            "explanation": "In Go, a struct is defined using the 'type' keyword followed by the struct name and the 'struct' keyword."
        },
        {
            "question": "How do you instantiate a struct in Go?",
            "options": [
                "var myStruct MyStruct",
                "myStruct := new(MyStruct)",
                "myStruct := MyStruct{}",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "A struct in Go can be instantiated using 'var myStruct MyStruct', 'myStruct := new(MyStruct)', or 'myStruct := MyStruct{}'."
        },
        {
            "question": "How do you access a field of a struct in Go?",
            "options": [
                "myStruct[field]",
                "myStruct.field",
                "myStruct->field",
                "field(myStruct)"
            ],
            "answer": "myStruct.field",
            "explanation": "In Go, a field of a struct is accessed using the dot notation, e.g., 'myStruct.field'."
        },
        {
            "question": "Can you compare two structs directly in Go?",
            "options": [
                "Yes, if they are of the same type",
                "No, structs cannot be compared",
                "Yes, regardless of their type",
                "Only if they are pointer types"
            ],
            "answer": "Yes, if they are of the same type",
            "explanation": "Two structs in Go can be compared directly using the '==' operator if they are of the same type and do not contain fields that are not comparable."
        },
        {
            "question": "How do you declare a struct with embedded fields in Go?",
            "options": [
                "Using the 'embedded' keyword",
                "By specifying the type only",
                "By declaring inner structs",
                "Using the 'inherit' keyword"
            ],
            "answer": "By specifying the type only",
            "explanation": "In Go, embedded fields in a struct are declared by specifying the type only, without a field name."
        },
        {
            "question": "What is an anonymous struct in Go?",
            "options": [
                "A struct with no name",
                "A struct with hidden fields",
                "A struct without any fields",
                "A struct with an anonymous field"
            ],
            "answer": "A struct with no name",
            "explanation": "An anonymous struct in Go is a struct that is defined without a name, usually declared and instantiated at the same time."
        },
        {
            "question": "How do you initialize a struct with named fields in Go?",
            "options": [
                "MyStruct{field1: value1, field2: value2}",
                "MyStruct(field1, field2)",
                "new(MyStruct{field1, field2})",
                "MyStruct{value1, value2}"
            ],
            "answer": "MyStruct{field1: value1, field2: value2}",
            "explanation": "In Go, a struct can be initialized with named fields using the syntax 'MyStruct{fieldName: value}'."
        },
        {
            "question": "Can structs in Go have methods associated with them?",
            "options": [
                "Yes",
                "No",
                "Only if they are pointer structs",
                "Only if they are anonymous structs"
            ],
            "answer": "Yes",
            "explanation": "In Go, methods can be defined on structs. A method is a function with a special receiver argument."
        },
        {
            "question": "What is the purpose of the 'tag' in a struct field in Go?",
            "options": [
                "To rename the field",
                "To provide metadata for reflection",
                "To specify default values",
                "To set the visibility of the field"
            ],
            "answer": "To provide metadata for reflection",
            "explanation": "Tags in Go struct fields provide metadata that can be accessed using reflection, often used for things like encoding/decoding to JSON, XML, etc."
        },
        {
            "question": "How can you ensure a struct field is not exported outside a package in Go?",
            "options": [
                "Using the 'private' keyword",
                "By starting the field name with a lowercase letter",
                "By using the '_' prefix",
                "By declaring the struct as private"
            ],
            "answer": "By starting the field name with a lowercase letter",
            "explanation": "In Go, a field name that starts with a lowercase letter is not exported outside the package."
        },
        {
            "question": "How do you embed an interface in a struct in Go?",
            "options": [
                "By declaring the interface inside the struct",
                "By using the 'implements' keyword",
                "By specifying the interface type only",
                "Interfaces cannot be embedded in structs"
            ],
            "answer": "By specifying the interface type only",
            "explanation": "In Go, you can embed an interface in a struct by specifying the interface type only, without a field name."
        },
        {
            "question": "Can a struct in Go inherit fields from another struct?",
            "options": [
                "Yes, using inheritance",
                "No, Go does not support inheritance",
                "Yes, using the 'extends' keyword",
                "Only through embedding"
            ],
            "answer": "Only through embedding",
            "explanation": "Go does not have inheritance, but you can achieve a similar effect by embedding one struct type into another."
        },
        {
            "question": "How do you pass a struct to a function in Go?",
            "options": [
                "By value",
                "By reference",
                "Both a and b",
                "Structs cannot be passed to functions"
            ],
            "answer": "Both a and b",
            "explanation": "In Go, structs can be passed to functions either by value or by reference (using a pointer)."
        },
        {
            "question": "Is it possible to have a struct with no fields in Go?",
            "options": [
                "Yes",
                "No",
                "Only in special cases",
                "Only as an embedded struct"
            ],
            "answer": "Yes",
            "explanation": "In Go, it is perfectly valid to define a struct with no fields, often used for method grouping."
        },
        {
            "question": "How do you update a field of a struct passed by reference to a function in Go?",
            "options": [
                "Using the '.' operator on the pointer",
                "By dereferencing the pointer first",
                "It is not possible to update",
                "Using the '->' operator"
            ],
            "answer": "Using the '.' operator on the pointer",
            "explanation": "In Go, when you have a pointer to a struct, you can update its fields directly using the '.' operator, without needing to dereference it explicitly."
        },
        {
            "question": "Which keyword is used for conditional execution in Go?",
            "options": [
                "if",
                "switch",
                "case",
                "check"
            ],
            "answer": "if",
            "explanation": "The 'if' keyword is used for conditional execution in Go, allowing the program to execute certain code only if a specified condition is true."
        },
        {
            "question": "What is the syntax for a switch statement in Go?",
            "options": [
                "switch variable {}",
                "switch (variable) {}",
                "switch case variable {}",
                "switch variable case {}"
            ],
            "answer": "switch variable {}",
            "explanation": "In Go, a switch statement is written using the 'switch' keyword followed by the variable being switched on, and the cases inside curly braces."
        },
        {
            "question": "How do you specify a default case in a Go switch statement?",
            "options": [
                "default:",
                "else:",
                "otherwise:",
                "case default:"
            ],
            "answer": "default:",
            "explanation": "The 'default:' case in a Go switch statement is used to specify the code to run if no other case matches."
        },
        {
            "question": "Can the 'if' statement in Go be used without an 'else'?",
            "options": [
                "Yes",
                "No",
                "Only inside a function",
                "Only outside a function"
            ],
            "answer": "Yes",
            "explanation": "In Go, the 'if' statement can be used without an accompanying 'else' statement."
        },
        {
            "question": "How do you write a loop in Go that repeats a block of code while a condition is true?",
            "options": [
                "while condition {}",
                "loop condition {}",
                "do condition {}",
                "for condition {}"
            ],
            "answer": "for condition {}",
            "explanation": "In Go, the 'for' statement is used for looping, and a 'for' loop with a condition acts like a while loop in other languages."
        },
        {
            "question": "What does a 'break' statement do in a Go loop?",
            "options": [
                "Pauses the loop",
                "Stops the loop and exits it",
                "Breaks the computer",
                "Skips the current iteration"
            ],
            "answer": "Stops the loop and exits it",
            "explanation": "The 'break' statement in Go is used to exit a loop immediately, stopping its execution."
        },
        {
            "question": "How do you write an infinite loop in Go?",
            "options": [
                "while true {}",
                "loop {}",
                "for {}",
                "forever {}"
            ],
            "answer": "for {}",
            "explanation": "An infinite loop in Go is written using 'for {}', omitting the initialization, condition, and post statements."
        },
        {
            "question": "Is the 'else if' clause available in Go?",
            "options": [
                "Yes",
                "No",
                "Only with a switch statement",
                "Only if 'else' is not used"
            ],
            "answer": "Yes",
            "explanation": "Go supports 'else if' for multiple conditional branches in an 'if-else' statement."
        },
        {
            "question": "How do you group multiple cases in a single case clause in a switch statement in Go?",
            "options": [
                "By separating them with a comma",
                "By using the 'group' keyword",
                "By listing them in separate lines under one case",
                "It's not possible in Go"
            ],
            "answer": "By separating them with a comma",
            "explanation": "In Go, multiple expressions can be grouped in a single case in a switch statement by separating them with commas."
        },
        {
            "question": "What is the use of the 'continue' statement in Go?",
            "options": [
                "Exits the loop",
                "Skips the rest of the current loop iteration",
                "Continues execution without pausing",
                "Restarts the loop"
            ],
            "answer": "Skips the rest of the current loop iteration",
            "explanation": "The 'continue' statement in Go skips the remaining code in the current loop iteration and continues with the next iteration."
        },
        {
            "question": "How is the 'fallthrough' keyword used in Go?",
            "options": [
                "To fall to the next case in a switch statement",
                "To exit a switch statement",
                "In loops, to continue to the next iteration",
                "To check for errors"
            ],
            "answer": "To fall to the next case in a switch statement",
            "explanation": "The 'fallthrough' keyword in Go is used in switch statements to indicate that the execution should continue into the next case clause."
        },
        {
            "question": "Can you nest control structures in Go?",
            "options": [
                "Yes",
                "No",
                "Only if they are of the same type",
                "Only in functions"
            ],
            "answer": "Yes",
            "explanation": "In Go, you can nest control structures, such as an 'if' statement inside a 'for' loop, or a 'switch' inside an 'if', etc."
        },
        {
            "question": "What does the 'goto' statement do in Go?",
            "options": [
                "Sends the program to a labeled statement",
                "Exits the program",
                "Skips to the next iteration of a loop",
                "Throws an error"
            ],
            "answer": "Sends the program to a labeled statement",
            "explanation": "The 'goto' statement in Go transfers control to a statement labeled with the corresponding label."
        },
        {
            "question": "How do you execute different cases based on the type of a variable in Go?",
            "options": [
                "Using the 'type' keyword",
                "Using a type switch",
                "It's not possible in Go",
                "Using multiple if-else statements"
            ],
            "answer": "Using a type switch",
            "explanation": "A type switch in Go allows you to compare the type of a variable and execute different cases based on that type."
        },
        {
            "question": "Can a 'for' loop in Go be used to iterate over elements of a slice or an array?",
            "options": [
                "Yes, using the 'range' keyword",
                "No, 'for' loops are only for conditions",
                "Only with arrays",
                "Only with slices"
            ],
            "answer": "Yes, using the 'range' keyword",
            "explanation": "In Go, the 'for' loop can be used with the 'range' keyword to iterate over the elements of a slice or an array."
        },
        {
            "question": "Which keyword is used to create a new goroutine in Go?",
            "options": [
                "go",
                "goroutine",
                "async",
                "thread"
            ],
            "answer": "go",
            "explanation": "The 'go' keyword is used in Go to launch a new goroutine, which is a lightweight thread managed by the Go runtime."
        },
        {
            "question": "What is a goroutine in Go?",
            "options": [
                "A Go routine",
                "A lightweight thread",
                "A function",
                "A concurrency library"
            ],
            "answer": "A lightweight thread",
            "explanation": "A goroutine is a lightweight thread of execution managed by the Go runtime, used for handling concurrent tasks."
        },
        {
            "question": "How do you communicate between goroutines in Go?",
            "options": [
                "Global variables",
                "Channels",
                "Direct function calls",
                "Shared memory"
            ],
            "answer": "Channels",
            "explanation": "Channels are the preferred way to communicate between goroutines in Go. They provide a way to transfer data between concurrently running goroutines."
        },
        {
            "question": "What is a channel in Go?",
            "options": [
                "A type-safe mechanism for function calling",
                "A tool for memory management",
                "A way to lock resources in concurrent programming",
                "A conduit for transmitting data between goroutines"
            ],
            "answer": "A conduit for transmitting data between goroutines",
            "explanation": "A channel in Go is a conduit through which goroutines can communicate with each other, used to send and receive values."
        },
        {
            "question": "How do you create a new channel in Go?",
            "options": [
                "new(chan Type)",
                "make(chan Type)",
                "chan Type{}",
                "create(chan Type)"
            ],
            "answer": "make(chan Type)",
            "explanation": "Channels in Go are created using the make function, like 'make(chan Type)'."
        },
        {
            "question": "What is a buffered channel in Go?",
            "options": [
                "A channel that stores data in a buffer",
                "A faster version of a standard channel",
                "A channel that compresses data",
                "A type of data structure"
            ],
            "answer": "A channel that stores data in a buffer",
            "explanation": "A buffered channel in Go has a capacity to store a limited number of values without a corresponding receiver for those values."
        },
        {
            "question": "How do you specify a buffered channel in Go?",
            "options": [
                "make(chan Type, size)",
                "buffered chan Type",
                "chan Type{size}",
                "make(chan Type) with size"
            ],
            "answer": "make(chan Type, size)",
            "explanation": "Buffered channels in Go are created using the make function with a specified capacity, like 'make(chan Type, size)'."
        },
        {
            "question": "What happens when a goroutine tries to write to a full buffered channel in Go?",
            "options": [
                "It fails immediately",
                "It blocks until space is available",
                "The program terminates",
                "It overwrites the oldest data in the channel"
            ],
            "answer": "It blocks until space is available",
            "explanation": "If a goroutine tries to write to a full buffered channel, it will block until another goroutine reads from the channel and frees up space."
        },
        {
            "question": "What is the 'select' statement used for in Go?",
            "options": [
                "Selecting a specific goroutine to run",
                "Making a choice between different types of channels",
                "Waiting on multiple channel operations",
                "Choosing between different concurrency patterns"
            ],
            "answer": "Waiting on multiple channel operations",
            "explanation": "The 'select' statement in Go allows a goroutine to wait on multiple communication operations, proceeding with one that is ready to communicate."
        },
        {
            "question": "What does closing a channel signify in Go?",
            "options": [
                "The channel is no longer needed",
                "No more values will be sent on the channel",
                "The channel's memory is being freed",
                "The channel has encountered an error"
            ],
            "answer": "No more values will be sent on the channel",
            "explanation": "Closing a channel in Go indicates that no more values will be sent on it. Receivers can still receive data already in the channel."
        },
        {
            "question": "Can a closed channel in Go be reopened?",
            "options": [
                "Yes",
                "No",
                "Only if it was buffered",
                "Only within a certain time frame"
            ],
            "answer": "No",
            "explanation": "Once a channel is closed in Go, it cannot be reopened. Attempting to send data on a closed channel will cause a panic."
        },
        {
            "question": "How do you read from a channel until it is closed in Go?",
            "options": [
                "Using a for loop with range",
                "Polling in a loop",
                "Using a select statement",
                "With a while loop"
            ],
            "answer": "Using a for loop with range",
            "explanation": "A for loop combined with the range keyword is used to read from a channel until it is closed in Go."
        },
        {
            "question": "What is a deadlock in the context of Go concurrency?",
            "options": [
                "When a goroutine is terminated unexpectedly",
                "A situation where goroutines are waiting on each other, preventing progress",
                "A failure in channel communication",
                "An error in the Go runtime"
            ],
            "answer": "A situation where goroutines are waiting on each other, preventing progress",
            "explanation": "A deadlock occurs in Go when goroutines wait on each other to complete, but none of them can proceed, resulting in a standstill."
        },
        {
            "question": "Is it possible to have multiple goroutines receive from the same channel in Go?",
            "options": [
                "Yes",
                "No",
                "Only if the channel is buffered",
                "Only if the goroutines are part of the same function"
            ],
            "answer": "Yes",
            "explanation": "In Go, multiple goroutines can receive from the same channel, allowing for concurrent processing of channel data."
        },
        {
            "question": "What does the 'sync' package in Go provide for concurrency control?",
            "options": [
                "Channels",
                "Goroutines",
                "Additional types of loops",
                "Concurrency primitives like Mutexes and WaitGroups"
            ],
            "answer": "Concurrency primitives like Mutexes and WaitGroups",
            "explanation": "The 'sync' package in Go provides concurrency primitives such as Mutexes for mutual exclusion and WaitGroups for waiting for a collection of goroutines to finish."
        },
        {
            "question": "Which package is primarily used for date and time in Go?",
            "options": [
                "time",
                "date",
                "datetime",
                "timestamp"
            ],
            "answer": "time",
            "explanation": "The 'time' package in Go provides functionality for measuring and displaying time."
        },
        {
            "question": "How do you get the current time in Go?",
            "options": [
                "time.Now()",
                "time.Current()",
                "time.GetTime()",
                "time.CurrentTime()"
            ],
            "answer": "time.Now()",
            "explanation": "The 'time.Now()' function is used to get the current local time in Go."
        },
        {
            "question": "What is the return type of time.Now() in Go?",
            "options": [
                "string",
                "Time",
                "int64",
                "Date"
            ],
            "answer": "Time",
            "explanation": "The 'time.Now()' function returns a 'Time' struct representing the current local time."
        },
        {
            "question": "How do you format a date in Go?",
            "options": [
                "date.Format(\"2006-01-02\")",
                "time.Format(\"2006-01-02\")",
                "Time.Format(\"2006-01-02\")",
                "Now.Format(\"2006-01-02\")"
            ],
            "answer": "time.Format(\"2006-01-02\")",
            "explanation": "In Go, the 'Format' method of the 'Time' type is used to format a date. The layout string \"2006-01-02\" is a reference time used to specify the format."
        },
        {
            "question": "How do you parse a string into a time object in Go?",
            "options": [
                "time.Parse(layout, value)",
                "time.Convert(layout, value)",
                "time.ToDateTime(layout, value)",
                "time.FromString(layout, value)"
            ],
            "answer": "time.Parse(layout, value)",
            "explanation": "The 'time.Parse' function is used to parse a string representation of time into a 'Time' object in Go."
        },
        {
            "question": "How do you add a duration to a time in Go?",
            "options": [
                "time.Add(duration)",
                "time.Plus(duration)",
                "time.Increase(duration)",
                "time.AddTime(duration)"
            ],
            "answer": "time.Add(duration)",
            "explanation": "The 'Add' method of the 'Time' type in Go is used to add a duration to a time."
        },
        {
            "question": "How do you find the difference between two times in Go?",
            "options": [
                "time1.Sub(time2)",
                "time.Diff(time1, time2)",
                "time1 – time2",
                "time.Difference(time1, time2)"
            ],
            "answer": "time1.Sub(time2)",
            "explanation": "The 'Sub' method in Go is used to find the duration between two 'Time' objects."
        },
        {
            "question": "What is a 'Duration' in Go?",
            "options": [
                "A specific point in time",
                "A time zone",
                "A time interval",
                "A time format"
            ],
            "answer": "A time interval",
            "explanation": "A 'Duration' in Go represents a length of time as an int64 nanosecond count."
        },
        {
            "question": "How do you get the current Unix timestamp in Go?",
            "options": [
                "time.Now().Unix()",
                "time.Unix()",
                "time.Now().UnixTime()",
                "time.Timestamp()"
            ],
            "answer": "time.Now().Unix()",
            "explanation": "The 'Unix' method of the 'Time' object in Go returns the Unix timestamp, the number of seconds elapsed since January 1, 1970 UTC."
        },
        {
            "question": "How do you create a time object with a specific date in Go?",
            "options": [
                "time.Date(year, month, day, hour, min, sec, nsec, loc)",
                "time.New(year, month, day, hour, min, sec, nsec, loc)",
                "time.Set(year, month, day, hour, min, sec, nsec, loc)",
                "time.Create(year, month, day, hour, min, sec, nsec, loc)"
            ],
            "answer": "time.Date(year, month, day, hour, min, sec, nsec, loc)",
            "explanation": "The 'time.Date' function in Go is used to create a new 'Time' object with a specific date and time."
        },
        {
            "question": "How do you find the day of the week for a given date in Go?",
            "options": [
                "date.DayOfWeek()",
                "time.Day()",
                "time.Now().Weekday()",
                "time.Weekday()"
            ],
            "answer": "time.Now().Weekday()",
            "explanation": "The 'Weekday' method of a 'Time' object in Go returns the day of the week for that date."
        },
        {
            "question": "What type is used to represent a time zone in Go?",
            "options": [
                "time.TimeZone",
                "time.Location",
                "string",
                "time.Zone"
            ],
            "answer": "time.Location",
            "explanation": "The 'Location' type in Go represents a geographical location and time zone."
        },
        {
            "question": "How do you convert a time to a different time zone in Go?",
            "options": [
                "time.Convert(location)",
                "time.ChangeZone(location)",
                "time.In(location)",
                "time.ToLocation(location)"
            ],
            "answer": "time.In(location)",
            "explanation": "The 'In' method of a 'Time' object in Go is used to convert a time to the specified location's time zone."
        },
        {
            "question": "What is the purpose of the 'After' function in the 'time' package in Go?",
            "options": [
                "To check if one time is after another",
                "To delay code execution until a future time",
                "To format a time as 'after' a certain date",
                "To add a duration to a time"
            ],
            "answer": "To check if one time is after another",
            "explanation": "The 'After' function in the 'time' package in Go is used to check if one time is after another."
        },
        {
            "question": "How do you create a timer that fires once after a specified duration in Go?",
            "options": [
                "time.NewTimer(duration)",
                "time.After(duration)",
                "time.SetTimer(duration)",
                "time.Timer(duration)"
            ],
            "answer": "time.NewTimer(duration)",
            "explanation": "The 'NewTimer' function in Go returns a new 'Timer' that will send the current time on its channel after at least the duration has elapsed."
        },
        {
            "question": "How are errors represented in Go?",
            "options": [
                "As a separate error type",
                "Using the Exception struct",
                "With integer codes",
                "As boolean flags"
            ],
            "answer": "As a separate error type",
            "explanation": "In Go, errors are represented as a built-in interface type, 'error', which is a conventional interface for handling error conditions."
        },
        {
            "question": "How do you create a simple error in Go?",
            "options": [
                "errors.New(\"error message\")",
                "newError(\"error message\")",
                "makeError(\"error message\")",
                "error(\"error message\")"
            ],
            "answer": "errors.New(\"error message\")",
            "explanation": "The 'errors' package in Go provides a function 'New' to create basic errors with a given error message."
        },
        {
            "question": "How is error handling typically done in Go functions?",
            "options": [
                "Using try-catch blocks",
                "Returning an error as the last return value",
                "Ignoring errors",
                "Using global error variables"
            ],
            "answer": "Returning an error as the last return value",
            "explanation": "In Go, functions typically return an error as their last return value. The caller should check this value to handle the error."
        },
        {
            "question": "What does a nil error signify in Go?",
            "options": [
                "A pending error",
                "A critical error",
                "No error occurred",
                "An unidentified error"
            ],
            "answer": "No error occurred",
            "explanation": "In Go, a nil error value indicates that no error has occurred."
        },
        {
            "question": "How do you check for an error in Go?",
            "options": [
                "Using the check() function",
                "Comparing the error to a known error",
                "If the error is not nil",
                "Using error handling libraries"
            ],
            "answer": "If the error is not nil",
            "explanation": "In Go, the idiomatic way to check for an error is to compare if the error is not nil."
        },
        {
            "question": "What is the purpose of the 'defer' statement in error handling in Go?",
            "options": [
                "To defer the handling of an error",
                "To ensure a function is called at the end of a function's execution",
                "To delay the return of an error",
                "To create custom error handling"
            ],
            "answer": "To ensure a function is called at the end of a function's execution",
            "explanation": "In Go, the 'defer' statement is often used to ensure that a function call is performed later in a program's execution, typically for purposes of cleanup."
        },
        {
            "question": "How do you customize error types in Go?",
            "options": [
                "By creating a struct that implements the error interface",
                "Using the customError package",
                "Defining a new error class",
                "By importing specialized error libraries"
            ],
            "answer": "By creating a struct that implements the error interface",
            "explanation": "In Go, custom error types can be created by defining a struct type that implements the Error() method of the error interface."
        },
        {
            "question": "What is the result of calling the Error() method on an error in Go?",
            "options": [
                "The error code",
                "The error message as a string",
                "A boolean indicating if there's an error",
                "The type of error"
            ],
            "answer": "The error message as a string",
            "explanation": "The Error() method on an error in Go returns the error message associated with that error as a string."
        },
        {
            "question": "Can multiple errors be returned from a Go function?",
            "options": [
                "Yes, using multiple return values",
                "No, only one error can be returned",
                "Yes, by concatenating errors",
                "Yes, using error arrays"
            ],
            "answer": "Yes, using multiple return values",
            "explanation": "While it is unusual, a Go function can return multiple errors by specifying more than one error return value."
        },
        {
            "question": "What is panic in Go?",
            "options": [
                "A way to handle errors",
                "An error that cannot be recovered",
                "A built-in function to stop the ordinary flow of control",
                "A syntax error"
            ],
            "answer": "A built-in function to stop the ordinary flow of control",
            "explanation": "The 'panic' function in Go is used to stop the ordinary flow of control and begin panicking, which typically results in the program terminating, unless recovered."
        }
    ],
    "C#": [
        {
            "question": "Which namespace is fundamental for basic C# operations?",
            "options": [
                "using CSharp;",
                "using System.Collections;",
                "using System;",
                "using Base;"
            ],
            "answer": "using System;",
            "explanation": "The System namespace contains fundamental classes and base classes that define commonly used value and reference data types, events and event handlers, interfaces, attributes, and processing exceptions."
        },
        {
            "question": "What is the Console.WriteLine() function do?",
            "options": [
                "Reads input",
                "Writes to a file",
                "Writes to the console with a new line",
                "Clears the console"
            ],
            "answer": "Writes to the console with a new line",
            "explanation": "The Console.WriteLine() function is used to display a message on the console and then move to the next line."
        },
        {
            "question": "Which keyword is used to create an instance of a class?",
            "options": [
                "class",
                "new",
                "struct",
                "this"
            ],
            "answer": "new",
            "explanation": "The new keyword is used to create an instance of a class, also known as an object."
        },
        {
            "question": "Which of the following data types can store a non-integer number?",
            "options": [
                "int",
                "char",
                "double",
                "bool"
            ],
            "answer": "double",
            "explanation": "The double data type is used to store floating-point numbers (numbers with decimal points)."
        },
        {
            "question": "What does the static keyword mean in C#?",
            "options": [
                "The variable can change",
                "The method can be overridden",
                "The member belongs to the type rather than any specific instance",
                "The value can be assigned only once"
            ],
            "answer": "The member belongs to the type rather than any specific instance",
            "explanation": "A static member belongs to the class/type itself rather than a specific instance."
        },
        {
            "question": "What is the purpose of the Main method in C#?",
            "options": [
                "To define variables",
                "To serve as the entry point for the application",
                "To close the application",
                "To initialize objects"
            ],
            "answer": "To serve as the entry point for the application",
            "explanation": "The Main method is the primary entry point for a C# console application."
        },
        {
            "question": "Which of the following is NOT a valid access modifier in C#?",
            "options": [
                "private",
                "public",
                "transient",
                "protected"
            ],
            "answer": "transient",
            "explanation": "transient is not a valid access modifier in C#. It’s used in Java for other purposes."
        },
        {
            "question": "What is encapsulation?",
            "options": [
                "Breaking the code into small functions",
                "Wrapping up data members and methods into a single unit",
                "Inheriting properties of one class into another",
                "Implementing multiple interfaces"
            ],
            "answer": "Wrapping up data members and methods into a single unit",
            "explanation": "Encapsulation refers to the bundling of data and methods that operate on that data within a single unit, typically a class."
        },
        {
            "question": "Which keyword is used to inherit from a base class in C#?",
            "options": [
                "extends",
                "inherits",
                "implement",
                ":"
            ],
            "answer": ":",
            "explanation": "In C#, the : symbol is used to indicate inheritance from a base class or implementation of an interface."
        },
        {
            "question": "Which type of exception handling uses a try-catch block?",
            "options": [
                "Unchecked",
                "Implicit",
                "Explicit",
                "Checked"
            ],
            "answer": "Checked",
            "explanation": "Checked exceptions are handled using try-catch blocks. These are the exceptions that are checked at compile time."
        },
        {
            "question": "Which of the following is NOT a loop structure in C#?",
            "options": [
                "for",
                "while",
                "loop",
                "foreach"
            ],
            "answer": "loop",
            "explanation": "C# does not have a loop structure called loop."
        },
        {
            "question": "Which operator is used for type casting in C#?",
            "options": [
                "::",
                "as",
                "cast",
                "->"
            ],
            "answer": "as",
            "explanation": "The as operator is used for type casting in C#. If the conversion is not possible, it returns null."
        },
        {
            "question": "Which of the following is the correct way to comment out multiple lines in C#?",
            "options": [
                "// …",
                "/* … */",
                "— … —",
                ""
            ],
            "answer": "/* … */",
            "explanation": "The /* … */ syntax is used to comment out multiple lines in C#."
        },
        {
            "question": "Which keyword is used to declare a constant variable in C#?",
            "options": [
                "constant",
                "con",
                "const",
                "final"
            ],
            "answer": "const",
            "explanation": "In C#, the const keyword is used to declare a variable as constant, meaning its value cannot be changed after initialization."
        },
        {
            "question": "Which of the following data types can store a Unicode character in C#?",
            "options": [
                "char",
                "string",
                "byte",
                "short"
            ],
            "answer": "char",
            "explanation": "The char data type in C# is used to store a single Unicode character."
        },
        {
            "question": "How do you define a method in C# that does not return a value?",
            "options": [
                "void",
                "null",
                "empty",
                "returnless"
            ],
            "answer": "void",
            "explanation": "In C#, the void keyword indicates that a method does not return a value."
        },
        {
            "question": "Which of the following statements about C# interfaces is TRUE?",
            "options": [
                "They can contain the implementation of methods.",
                "They can be instantiated.",
                "They can have fields.",
                "They can declare methods without implementations."
            ],
            "answer": "They can declare methods without implementations.",
            "explanation": "Interfaces in C# can only declare methods, properties, events, or indexers without providing the actual implementation."
        },
        {
            "question": "Which of the following access modifiers allows a member to be accessed from any class within the same assembly but not from outside the assembly?",
            "options": [
                "private",
                "public",
                "protected",
                "internal"
            ],
            "answer": "internal",
            "explanation": "The internal access modifier allows a member to be accessible from any class within the same assembly, but not from outside that assembly."
        },
        {
            "question": "Which of the following is NOT a type of constructor in C#?",
            "options": [
                "Copy constructor",
                "Static constructor",
                "Default constructor",
                "Derived constructor"
            ],
            "answer": "Derived constructor",
            "explanation": "There’s no concept of a “Derived constructor” in C#. Constructors in derived classes are just constructors that can call the base class constructor."
        },
        {
            "question": "What does the ?? operator do in C#?",
            "options": [
                "Compares two values",
                "Assign one of two values depending on a condition",
                "Checks for nullability and returns the non-null value",
                "Merges two values"
            ],
            "answer": "Checks for nullability and returns the non-null value",
            "explanation": "The ?? is called the null-coalescing operator. It returns the left-hand operand if it is not null; otherwise, it returns the right-hand operand."
        },
        {
            "question": "What is boxing in C#?",
            "options": [
                "Placing a value type inside an object",
                "Extracting a value type from an object",
                "Creating an array of objects",
                "Defining multiple boxes for UI design"
            ],
            "answer": "Placing a value type inside an object",
            "explanation": "Boxing is the process of converting a value type to the type object or any interface type implemented by this value type."
        },
        {
            "question": "What does the override keyword do in C#?",
            "options": [
                "Hides the base class method",
                "Makes a method static",
                "Provides a new implementation for a virtual method in a derived class",
                "Makes a method abstract"
            ],
            "answer": "Provides a new implementation for a virtual method in a derived class",
            "explanation": "The override keyword is used in a derived class to provide a new implementation for a method that is declared as virtual in the base class."
        },
        {
            "question": "Which collection in C# does NOT allow duplicate elements?",
            "options": [
                "List",
                "Array",
                "Hashtable",
                "HashSet"
            ],
            "answer": "HashSet",
            "explanation": "HashSet is designed to store unique elements, and it doesn’t allow duplicates."
        },
        {
            "question": "How do you declare a single-dimensional array in C#?",
            "options": [
                "int x[];",
                "int x();",
                "int[] x;",
                "int{} x;"
            ],
            "answer": "int[] x;",
            "explanation": "The correct way to declare a single-dimensional array in C# is int[] x;."
        },
        {
            "question": "What is LINQ in C#?",
            "options": [
                "A collection of functions",
                "A new programming language",
                "A library for parallel programming",
                "A framework for querying data in a consistent manner"
            ],
            "answer": "A framework for querying data in a consistent manner",
            "explanation": "LINQ (Language Integrated Query) is a Microsoft .NET Framework component that adds native data querying capabilities to .NET languages."
        },
        {
            "question": "Which of the following statements correctly initializes a string to an empty value?",
            "options": [
                "string str = null;",
                "string str = “”;",
                "string str = ” “;",
                "string str = String.Empty;"
            ],
            "answer": "string str = String.Empty;",
            "explanation": "Both b) and d) initialize the string to an empty value, but String.Empty is a more readable way of representing an empty string in C#."
        },
        {
            "question": "What does the finally block in exception handling do?",
            "options": [
                "Catches exceptions",
                "Throws exceptions",
                "Executes regardless of whether an exception is thrown or caught",
                "Stops exceptions from propagating"
            ],
            "answer": "Executes regardless of whether an exception is thrown or caught",
            "explanation": "The finally block is used to execute code, regardless of whether an exception is thrown or caught. It is typically used for cleanup activities, such as closing files or releasing resources."
        },
        {
            "question": "Which of the following keywords is used to declare a constant variable?",
            "options": [
                "const",
                "readonly",
                "final",
                "static"
            ],
            "answer": "const",
            "explanation": "The const keyword in C# is used to declare a constant variable. Once assigned, its value cannot be changed."
        },
        {
            "question": "Which of the following methods is used to determine the length of a string in C#?",
            "options": [
                "Length()",
                "Size()",
                "Count()",
                "Length"
            ],
            "answer": "Length",
            "explanation": "In C#, the Length property of the string class is used to get the number of characters in a string."
        },
        {
            "question": "What is the base class for all classes in C#?",
            "options": [
                "Object",
                "Base",
                "Root",
                "System"
            ],
            "answer": "Object",
            "explanation": "The Object class is the base class for all classes in C#."
        },
        {
            "question": "Which of the following is NOT a valid access modifier in C#?",
            "options": [
                "public",
                "private",
                "protected",
                "secured"
            ],
            "answer": "secured",
            "explanation": "secured is not a valid access modifier in C#. The valid access modifiers are public, private, protected, internal, and a few combinations thereof."
        },
        {
            "question": "Which of the following types is a reference type?",
            "options": [
                "int",
                "char",
                "bool",
                "string"
            ],
            "answer": "string",
            "explanation": "string is the reference type in C#."
        },
        {
            "question": "In C#, what does the is keyword do?",
            "options": [
                "Checks type compatibility",
                "Performs a deep copy of objects",
                "Implements inheritance",
                "Compares two strings"
            ],
            "answer": "Checks type compatibility",
            "explanation": "The is keyword is used in C# to check if an object is of a certain type or compatible with that type."
        },
        {
            "question": "How can you make a class in C# so that it cannot be inherited?",
            "options": [
                "final",
                "static",
                "sealed",
                "abstract"
            ],
            "answer": "sealed",
            "explanation": "In C#, the sealed keyword prevents a class from being inherited."
        },
        {
            "question": "Which of the following is the correct way to define an anonymous method in C#?",
            "options": [
                "delegate void() { }",
                "func void() { }",
                "delegate() { }",
                "delegate void { }"
            ],
            "answer": "delegate() { }",
            "explanation": "Anonymous methods in C# are created using the delegate keyword followed by the method body."
        },
        {
            "question": "Which of the following correctly declares a nullable int in C#?",
            "options": [
                "int? x;",
                "nullable int x;",
                "int x?;",
                "int x = null;"
            ],
            "answer": "int? x;",
            "explanation": "In C#, the ? modifier is used to declare a nullable value type."
        },
        {
            "question": "Which of the following is NOT a valid C# collection?",
            "options": [
                "ArrayList",
                "HashTable",
                "LinkList",
                "Queue"
            ],
            "answer": "LinkList",
            "explanation": "While LinkedList is a valid collection in C#, there’s no collection named LinkList."
        },
        {
            "question": "Which method is called to free the resources of an object manually in C#?",
            "options": [
                "delete()",
                "free()",
                "remove()",
                "Dispose()"
            ],
            "answer": "Dispose()",
            "explanation": "The Dispose() method is used to release unmanaged resources in C#."
        },
        {
            "question": "Which of the following keywords is used to handle an exception in C#?",
            "options": [
                "catch",
                "throw",
                "error",
                "handle"
            ],
            "answer": "catch",
            "explanation": "In C#, the try-catch block is used for exception handling, where the catch block catches and handles exceptions."
        },
        {
            "question": "What does the as keyword do in C#?",
            "options": [
                "It performs a deep copy of objects",
                "It checks for type compatibility and returns null if the conversion is not possible",
                "It compares two strings",
                "It enforces inheritance"
            ],
            "answer": "It checks for type compatibility and returns null if the conversion is not possible",
            "explanation": "The as keyword in C# performs a type conversion, but instead of throwing an exception, it returns null if the conversion isn’t possible."
        },
        {
            "question": "Which of the following types can be used to declare a variable that can range from -2,147,483,648 to 2,147,483,647?",
            "options": [
                "long",
                "short",
                "int",
                "byte"
            ],
            "answer": "int",
            "explanation": "In C#, the int data type is a 32-bit signed integer that can range from -2,147,483,648 to 2,147,483,647."
        },
        {
            "question": "Which of the following keywords is used to declare an abstract class in C#?",
            "options": [
                "abstracted",
                "abs",
                "abstract",
                "abstraction"
            ],
            "answer": "abstract",
            "explanation": "The abstract keyword is used in C# to declare an abstract class. Abstract classes cannot be instantiated."
        },
        {
            "question": "Which of the following methods can be overridden in a derived class?",
            "options": [
                "Static method",
                "Virtual method",
                "Sealed method",
                "Private method"
            ],
            "answer": "Virtual method",
            "explanation": "In C#, only methods declared with the virtual keyword can be overridden in a derived class."
        },
        {
            "question": "What is the default value of a bool in C#?",
            "options": [
                "true",
                "false",
                "null",
                "0"
            ],
            "answer": "false",
            "explanation": "In C#, the default value for a bool (boolean) data type is false."
        },
        {
            "question": "Which collection in C# ensures that all elements are unique?",
            "options": [
                "List",
                "Dictionary",
                "Queue",
                "HashSet"
            ],
            "answer": "HashSet",
            "explanation": "The HashSet collection in C# ensures that all elements are unique. It does not allow duplicate values."
        },
        {
            "question": "Which operator can be used to determine the type of an object at runtime?",
            "options": [
                "is",
                "typeof",
                "sizeof",
                "type"
            ],
            "answer": "typeof",
            "explanation": "The typeof operator is used to obtain the Type object for a type. However, to check an object’s type at runtime, the is operator is more commonly used."
        },
        {
            "question": "Which of the following statements about delegates in C# is true?",
            "options": [
                "Delegates can point to instance methods only.",
                "Delegates cannot be used with static methods.",
                "Delegates are type-safe.",
                "Delegates can’t be used with lambda expressions."
            ],
            "answer": "Delegates are type-safe.",
            "explanation": "Delegates in C# are type-safe. They ensure the method signature matches the delegate signature. Delegates can point to both instance and static methods and can also be used with lambda expressions."
        },
        {
            "question": "Which of the following provides a way to have multiple implementations for a method?",
            "options": [
                "Overloading",
                "Overriding",
                "Hiding",
                "Abstracting"
            ],
            "answer": "Overloading",
            "explanation": "Method overloading allows a class to have multiple methods with the same name but with different parameters."
        },
        {
            "question": "What does the virtual keyword indicate?",
            "options": [
                "The method cannot be overridden in the derived class.",
                "The method must be overridden in the derived class.",
                "The method can be overridden in the derived class.",
                "The method is abstract."
            ],
            "answer": "The method can be overridden in the derived class.",
            "explanation": "The virtual keyword in C# indicates that a method, property, indexer, or event can be overridden in derived classes."
        },
        {
            "question": "Which of the following statements correctly creates an array of 5 integers?",
            "options": [
                "int[] array = new int[5];",
                "int[] array = 5;",
                "int array[5];",
                "int array = new int[5];"
            ],
            "answer": "int[] array = new int[5];",
            "explanation": "In C#, arrays are declared by specifying the type of the elements followed by square brackets. They are then instantiated using the new keyword followed by the type and the size of the array."
        },
        {
            "question": "What is C#?",
            "options": [
                "A database management system",
                "A web development framework",
                "A programming language developed by Microsoft",
                "An operating system"
            ],
            "answer": "A programming language developed by Microsoft",
            "explanation": "C# is a modern, object-oriented programming language developed by Microsoft, widely used for a variety of software applications."
        },
        {
            "question": "Which of the following is a correct variable declaration in C#?",
            "options": [
                "int number = 5;",
                "integer number = 5;",
                "num number = 5;",
                "number: int = 5;"
            ],
            "answer": "int number = 5;",
            "explanation": "In C#, variables are declared with a type (int, in this case), followed by the variable name and an optional assignment."
        },
        {
            "question": "What is the entry point of a C# console application?",
            "options": [
                "Main()",
                "Start()",
                "Program()",
                "Init()"
            ],
            "answer": "Main()",
            "explanation": "The Main() method is the entry point of a C# console application, where the program execution begins."
        },
        {
            "question": "How do you create a single-line comment in C#?",
            "options": [
                "/* Comment */",
                "<!– Comment –>",
                "# Comment",
                "// Comment"
            ],
            "answer": "// Comment",
            "explanation": "In C#, single-line comments are created using two forward slashes (//)."
        },
        {
            "question": "What is the correct way to declare a constant in C#?",
            "options": [
                "constant double PI = 3.14;",
                "const double PI = 3.14;",
                "double const PI = 3.14;",
                "define PI = 3.14;"
            ],
            "answer": "const double PI = 3.14;",
            "explanation": "Constants in C# are declared using the 'const' keyword followed by the data type and the constant name."
        },
        {
            "question": "Which keyword is used to define a class in C#?",
            "options": [
                "class",
                "Class",
                "object",
                "struct"
            ],
            "answer": "class",
            "explanation": "The 'class' keyword is used to define a class in C#."
        },
        {
            "question": "How do you handle exceptions in C#?",
            "options": [
                "using",
                "try-catch",
                "if-else",
                "switch-case"
            ],
            "answer": "try-catch",
            "explanation": "Exceptions in C# are handled using a try-catch block, where 'try' contains the code that might throw an exception, and 'catch' is used to handle the exception."
        },
        {
            "question": "Which collection type automatically resizes in C#?",
            "options": [
                "Array",
                "List",
                "HashSet",
                "Queue"
            ],
            "answer": "List",
            "explanation": "The List<> collection in C# automatically resizes as elements are added or removed."
        },
        {
            "question": "How do you concatenate strings in C#?",
            "options": [
                "Using the '+' operator",
                "Using the '&' operator",
                "Using the concat() method",
                "Using the append() method"
            ],
            "answer": "Using the '+' operator",
            "explanation": "Strings can be concatenated using the '+' operator in C#."
        },
        {
            "question": "What is LINQ in C#?",
            "options": [
                "A database",
                "A collection of tools for handling XML",
                "A query syntax for querying data sources",
                "A method for remote data access"
            ],
            "answer": "A query syntax for querying data sources",
            "explanation": "LINQ (Language Integrated Query) is a feature in C# that provides a query syntax for querying data sources like arrays, collections, databases, etc."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "x=5, y=5",
                "x=6, y=5",
                "x=5, y=6",
                "x=6, y=6"
            ],
            "answer": "x=6, y=5",
            "explanation": "The post-increment operator (x++) increases x after its current value has been assigned to y. So, y gets 5, and then x becomes 6."
        },
        {
            "question": "What is an interface in C#?",
            "options": [
                "A method to connect to databases",
                "A class that provides default method implementations",
                "A template that defines a contract for classes",
                "A special type of enumeration"
            ],
            "answer": "A template that defines a contract for classes",
            "explanation": "An interface in C# defines a contract (a set of method and property definitions) that implementing classes must adhere to."
        },
        {
            "question": "What does the 'static' keyword denote in C#?",
            "options": [
                "That a method or variable belongs to an instance of a class",
                "That a method or variable belongs to the class itself, rather than an instance",
                "That a method cannot be overridden in a derived class",
                "That a variable will retain its value between method calls"
            ],
            "answer": "That a method or variable belongs to the class itself, rather than an instance",
            "explanation": "The 'static' keyword in C# denotes that a member (method or variable) belongs to the class itself, rather than to any specific instance of the class."
        },
        {
            "question": "Which of the following data types is a reference type in C#?",
            "options": [
                "int",
                "double",
                "string",
                "bool"
            ],
            "answer": "string",
            "explanation": "In C#, strings are reference types, whereas int, double, and bool are value types."
        },
        {
            "question": "How do you declare an array in C#?",
            "options": [
                "int array[5];",
                "int[] array = new int[5];",
                "array int[5];",
                "new int[5] array;"
            ],
            "answer": "int[] array = new int[5];",
            "explanation": "In C#, arrays are declared with the type followed by square brackets, then the variable name, and finally the 'new' keyword with the array size."
        },
        {
            "question": "What is the purpose of the 'using' directive in C#?",
            "options": [
                "To include a namespace in the file",
                "To handle exceptions",
                "To define a scope at the end of which an object will be disposed",
                "To create an alias for a class"
            ],
            "answer": "To include a namespace in the file",
            "explanation": "The 'using' directive in C# is used to include a namespace in a file, allowing the use of types defined in that namespace."
        },
        {
            "question": "What does the 'void' keyword signify in a method declaration?",
            "options": [
                "The method returns an integer",
                "The method does not return a value",
                "The method returns a boolean value",
                "The method returns an object"
            ],
            "answer": "The method does not return a value",
            "explanation": "In C#, the 'void' keyword in a method declaration indicates that the method does not return any value."
        },
        {
            "question": "What are generics in C#?",
            "options": [
                "Specific types of collections",
                "A feature that allows methods and classes to operate with generic parameters",
                "A tool for generating code",
                "A library for mathematical operations"
            ],
            "answer": "A feature that allows methods and classes to operate with generic parameters",
            "explanation": "Generics in C# allow the creation of methods and classes with the flexibility to work with any data type (specified as a generic parameter)."
        },
        {
            "question": "How do you implement inheritance in C#?",
            "options": [
                "By using the ':' operator",
                "By using the 'extends' keyword",
                "By using the 'inherits' keyword",
                "By using the 'base' keyword"
            ],
            "answer": "By using the ':' operator",
            "explanation": "Inheritance in C# is implemented by using the ':' operator followed by the base class name."
        },
        {
            "question": "What is a delegate in C#?",
            "options": [
                "A data type representing references to methods",
                "A method that delegates tasks",
                "A reference to an object",
                "A type of class that handles events"
            ],
            "answer": "A data type representing references to methods",
            "explanation": "A delegate in C# is a type that represents references to methods with a particular parameter list and return type."
        },
        {
            "question": "What is the scope of a variable declared inside a method in C#?",
            "options": [
                "Global",
                "Class-wide",
                "Local to the method",
                "Local to the assembly"
            ],
            "answer": "Local to the method",
            "explanation": "Variables declared inside a method in C# have a scope that is local to the method."
        },
        {
            "question": "What is a constructor in C#?",
            "options": [
                "A method used to create objects",
                "A special method called when an object is created",
                "A method used to initialize variables",
                "A method used to destroy objects"
            ],
            "answer": "A special method called when an object is created",
            "explanation": "A constructor is a special method in C# that is called automatically when an instance of a class is created. It is used to initialize the object."
        },
        {
            "question": "What are properties in C#?",
            "options": [
                "Special methods used to access and modify fields",
                "Constants within a class",
                "Variables defined in a class",
                "Static methods of a class"
            ],
            "answer": "Special methods used to access and modify fields",
            "explanation": "Properties in C# are special methods that provide a way to read, write, or compute values of private fields."
        },
        {
            "question": "How can you make a class abstract in C#?",
            "options": [
                "By using the 'abstract' keyword",
                "By using the 'virtual' keyword",
                "By not implementing any methods",
                "By using the 'static' keyword"
            ],
            "answer": "By using the 'abstract' keyword",
            "explanation": "In C#, a class is made abstract by using the 'abstract' keyword, which means it cannot be instantiated directly and must be inherited."
        },
        {
            "question": "What does 'namespace' represent in C#?",
            "options": [
                "A class for networking operations",
                "A container for related classes and interfaces",
                "A method for handling file operations",
                "A data type for storing collections"
            ],
            "answer": "A container for related classes and interfaces",
            "explanation": "A namespace in C# provides a way to logically organize your code. It is a container for classes, interfaces, structs, and other namespaces."
        },
        {
            "question": "How do you handle a null reference exception in C#?",
            "options": [
                "Using try-catch blocks",
                "Using if-else statements",
                "By checking for null before using an object",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Handling null reference exceptions can be done using try-catch blocks for exception handling, using if-else statements to check for null before accessing members, or a combination of both."
        },
        {
            "question": "What is the purpose of the 'ToString' method in C#?",
            "options": [
                "To convert any object to its equivalent string representation",
                "To change the value of an object",
                "To serialize an object",
                "To check if an object is a string"
            ],
            "answer": "To convert any object to its equivalent string representation",
            "explanation": "The 'ToString' method is used to convert an object to its string representation, and it can be overridden to provide meaningful string output for a class."
        },
        {
            "question": "How are method parameters passed in C# by default?",
            "options": [
                "By reference",
                "By value",
                "By pointer",
                "By name"
            ],
            "answer": "By value",
            "explanation": "In C#, method parameters are passed by value by default. This means a copy of the value is passed to the method."
        },
        {
            "question": "What is the purpose of the 'ref' keyword in method parameters?",
            "options": [
                "To pass an argument by reference",
                "To indicate a return value",
                "To mark a parameter as optional",
                "To improve performance"
            ],
            "answer": "To pass an argument by reference",
            "explanation": "The 'ref' keyword is used in C# to pass a parameter by reference, allowing the method to modify the original variable."
        },
        {
            "question": "What is an indexer in C#?",
            "options": [
                "A method for incrementing numbers",
                "A way to access elements in a class that represents a collection",
                "A special type of constructor",
                "A tool for sorting collections"
            ],
            "answer": "A way to access elements in a class that represents a collection",
            "explanation": "Indexers in C# provide a way to access elements in an object that represents a collection using array-like syntax."
        },
        {
            "question": "What are events in C#?",
            "options": [
                "Error messages generated by the runtime",
                "Messages sent by the operating system",
                "Actions recognized by an object, like clicks or key presses",
                "Scheduled tasks in an application"
            ],
            "answer": "Actions recognized by an object, like clicks or key presses",
            "explanation": "Events in C# are a way for an object to notify other objects when something of interest occurs, such as user interactions."
        },
        {
            "question": "What is the purpose of the 'out' keyword in method parameters?",
            "options": [
                "To optimize the method's performance",
                "To pass a parameter by value",
                "To indicate that a parameter will be used to return a value from the method",
                "To declare an external method"
            ],
            "answer": "To indicate that a parameter will be used to return a value from the method",
            "explanation": "The 'out' keyword is used for parameters that the method will use to return data back to the caller."
        },
        {
            "question": "What is a namespace alias in C#?",
            "options": [
                "An alternative name for a namespace",
                "A shortcut to a frequently used class",
                "A way to rename classes",
                "A feature for linking libraries"
            ],
            "answer": "An alternative name for a namespace",
            "explanation": "A namespace alias in C# allows you to provide an alternative name for a namespace, simplifying code when dealing with namespaces having long names."
        },
        {
            "question": "What is the use of the 'partial' keyword in C#?",
            "options": [
                "To allow a class to be partially implemented",
                "To indicate that a class or method is incomplete",
                "To split the definition of a class, struct, or method across multiple files",
                "To mark a class as abstract"
            ],
            "answer": "To split the definition of a class, struct, or method across multiple files",
            "explanation": "The 'partial' keyword allows the definition of a class, struct, or method to be divided across multiple files, facilitating better organization and maintainability."
        },
        {
            "question": "What is boxing in C#?",
            "options": [
                "Encrypting data",
                "Converting a value type to a reference type",
                "Packaging data into an array",
                "Sending data over a network"
            ],
            "answer": "Converting a value type to a reference type",
            "explanation": "Boxing in C# is the process of converting a value type (like int or double) to a reference type, typically to an Object or to an interface type."
        },
        {
            "question": "What is the default value of an int in C#?",
            "options": [
                "0",
                "1",
                "null",
                "undefined"
            ],
            "answer": "0",
            "explanation": "In C#, the default value of an int (integer) type is 0."
        },
        {
            "question": "Which of the following is a valid declaration of a variable in C#?",
            "options": [
                "int 1x;",
                "float myNumber;",
                "double double;",
                "bool false;"
            ],
            "answer": "float myNumber;",
            "explanation": "In C#, variable names cannot start with a number, be a keyword, or match the name of built-in data types."
        },
        {
            "question": "How do you declare a constant variable in C#?",
            "options": [
                "var CONSTANT_NAME;",
                "const int CONSTANT_NAME;",
                "static CONSTANT_NAME;",
                "final CONSTANT_NAME;"
            ],
            "answer": "const int CONSTANT_NAME;",
            "explanation": "In C#, a constant variable is declared using the 'const' keyword followed by the data type and the variable name."
        },
        {
            "question": "What is the correct way to declare a nullable integer in C#?",
            "options": [
                "int? x = null;",
                "nullable int x = null;",
                "int x = null;",
                "int x = Nullable<int>();"
            ],
            "answer": "int? x = null;",
            "explanation": "In C#, a nullable integer is declared using the int? syntax."
        },
        {
            "question": "Which of the following data types has the largest storage capacity in C#?",
            "options": [
                "int",
                "long",
                "short",
                "byte"
            ],
            "answer": "long",
            "explanation": "In C#, the long data type has a larger storage capacity compared to int, short, and byte."
        },
        {
            "question": "What does the following declaration represent in C#? string[] names;",
            "options": [
                "An array of integers",
                "An array of strings",
                "A single string variable",
                "A list of strings"
            ],
            "answer": "An array of strings",
            "explanation": "In C#, string[] is the syntax used for declaring an array of strings."
        },
        {
            "question": "Which keyword is used to declare a variable that can be modified by different threads safely in C#?",
            "options": [
                "static",
                "volatile",
                "mutable",
                "readonly"
            ],
            "answer": "volatile",
            "explanation": "The 'volatile' keyword in C# is used to indicate that a field might be modified by multiple threads."
        },
        {
            "question": "In C#, which of the following is the correct way to declare a variable for floating point numbers with high precision?",
            "options": [
                "float num = 3.14;",
                "double num = 3.14;",
                "decimal num = 3.14m;",
                "long num = 3.14;"
            ],
            "answer": "decimal num = 3.14m;",
            "explanation": "In C#, the 'decimal' type is used for high-precision floating point numbers. The 'm' suffix is used for decimal literals."
        },
        {
            "question": "What is the output of the following C# code?",
            "options": [
                "x=10, y=10",
                "x=11, y=10",
                "x=10, y=11",
                "x=11, y=11"
            ],
            "answer": "x=11, y=10",
            "explanation": "The post-increment operator (x++) increments x after its current value is assigned to y. So, y gets 10 and x becomes 11."
        },
        {
            "question": "Which of the following is true about the 'var' keyword in C#?",
            "options": [
                "It declares a constant variable.",
                "It is used for explicitly typed variables.",
                "It allows the type of the variable to be determined at compile-time.",
                "It indicates a variable with dynamic type."
            ],
            "answer": "It allows the type of the variable to be determined at compile-time.",
            "explanation": "The 'var' keyword in C# enables implicit type declaration, allowing the compiler to infer the type of the variable at compile time."
        },
        {
            "question": "In C#, which data type is used to store a single character?",
            "options": [
                "String",
                "Char",
                "Byte",
                "Short"
            ],
            "answer": "Char",
            "explanation": "The 'Char' data type in C# is used to store a single Unicode character."
        },
        {
            "question": "What is the range of values for a ushort data type in C#?",
            "options": [
                "-32,768 to 32,767",
                "0 to 65,535",
                "-2,147,483,648 to 2,147,483,647",
                "0 to 4,294,967,295"
            ],
            "answer": "0 to 65,535",
            "explanation": "The 'ushort' (unsigned short) data type in C# has a range of 0 to 65,535."
        },
        {
            "question": "Which of the following correctly declares a multi-dimensional array in C#?",
            "options": [
                "int[,] multiArray;",
                "int[][] multiArray;",
                "int[2][2] multiArray;",
                "array[,] multiArray;"
            ],
            "answer": "int[,] multiArray;",
            "explanation": "In C#, a multi-dimensional array is declared using the syntax 'int[,]'."
        },
        {
            "question": "What is the default value of a boolean variable in C#?",
            "options": [
                "true",
                "false",
                "0",
                "null"
            ],
            "answer": "false",
            "explanation": "The default value of a boolean variable in C# is 'false'."
        },
        {
            "question": "In C#, what is the output of Console.WriteLine(5 / 2);?",
            "options": [
                "2",
                "2.5",
                "3",
                "2.0"
            ],
            "answer": "2",
            "explanation": "In C#, the division of two integers results in an integer. 5 / 2 yields 2 since the fractional part is discarded."
        },
        {
            "question": "How do you explicitly convert a float to an int in C#?",
            "options": [
                "int x = (int)floatVar;",
                "int x = int.Parse(floatVar);",
                "int x = int(floatVar);",
                "int x = Convert.ToInt32(floatVar);"
            ],
            "answer": "int x = (int)floatVar;",
            "explanation": "Explicit casting is done using the (int) syntax in C#."
        },
        {
            "question": "What is the purpose of the 'dynamic' keyword in C#?",
            "options": [
                "To declare variables whose type can change at runtime.",
                "To create anonymous types.",
                "To define constants.",
                "To declare static variables."
            ],
            "answer": "To declare variables whose type can change at runtime.",
            "explanation": "The 'dynamic' keyword in C# is used for variables that are dynamically typed, allowing their type to be determined at runtime."
        },
        {
            "question": "Which of the following is a valid way to declare a string in C#?",
            "options": [
                "string s = \"Hello, World!\";",
                "char s = \"Hello, World!\";",
                "String s = \"Hello, World!\";",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "In C#, both 'string' (alias) and 'String' (class name in the System namespace) are valid for string declarations."
        },
        {
            "question": "What does the 'readonly' keyword do in C#?",
            "options": [
                "Makes a field constant.",
                "Prevents a field from being modified after construction.",
                "Declares a static variable.",
                "Indicates that a method does not return any value."
            ],
            "answer": "Prevents a field from being modified after construction.",
            "explanation": "The 'readonly' keyword in C# indicates that assignment to the field can only occur as part of the declaration or in a constructor in the same class."
        },
        {
            "question": "What is the maximum value of a 'byte' data type in C#?",
            "options": [
                "255",
                "127",
                "256",
                "128"
            ],
            "answer": "255",
            "explanation": "In C#, the 'byte' data type is an 8-bit unsigned integer with a range from 0 to 255."
        },
        {
            "question": "Which of the following is a value type in C#?",
            "options": [
                "String",
                "Class",
                "Struct",
                "Delegate"
            ],
            "answer": "Struct",
            "explanation": "In C#, struct is a value type, whereas classes, strings, and delegates are reference types."
        },
        {
            "question": "What is the size of a 'long' data type in C#?",
            "options": [
                "8 bytes",
                "4 bytes",
                "2 bytes",
                "16 bytes"
            ],
            "answer": "8 bytes",
            "explanation": "In C#, the 'long' data type is 64 bits, which equates to 8 bytes."
        },
        {
            "question": "Which data type would you use in C# to store a large, precise decimal number?",
            "options": [
                "float",
                "double",
                "decimal",
                "long"
            ],
            "answer": "decimal",
            "explanation": "The 'decimal' data type in C# is used for storing large and precise decimal numbers, especially for financial calculations."
        },
        {
            "question": "What is the range of the 'double' data type in C#?",
            "options": [
                "±1.7E±308 (15 digits)",
                "±3.4E±38 (7 digits)",
                "±5.0E±324 (28 digits)",
                "±1.0E±28 (7 digits)"
            ],
            "answer": "±1.7E±308 (15 digits)",
            "explanation": "The 'double' data type in C# has a range of ±1.7E±308 with a precision of 15-16 digits."
        },
        {
            "question": "What is the default value of a reference type in C#?",
            "options": [
                "0",
                "false",
                "null",
                "0.0"
            ],
            "answer": "null",
            "explanation": "In C#, the default value for reference types is null."
        },
        {
            "question": "Which of the following is a non-nullable value type in C#?",
            "options": [
                "int?",
                "string",
                "bool?",
                "float"
            ],
            "answer": "float",
            "explanation": "The 'float' data type is a non-nullable value type in C#. 'int?' and 'bool?' are nullable types, and 'string' is a reference type."
        },
        {
            "question": "How many bytes are used by a 'char' in C#?",
            "options": [
                "1",
                "2",
                "4",
                "8"
            ],
            "answer": "2",
            "explanation": "In C#, a 'char' (character) is stored as a 2-byte Unicode character."
        },
        {
            "question": "Which of the following data types is suitable for storing a single letter or character in C#?",
            "options": [
                "String",
                "Char",
                "Byte",
                "Single"
            ],
            "answer": "Char",
            "explanation": "The 'Char' data type in C# is used for storing a single Unicode character."
        },
        {
            "question": "In C#, what is the maximum value that an 'int' data type can hold?",
            "options": [
                "2,147,483,647",
                "4,294,967,295",
                "32,767",
                "65,535"
            ],
            "answer": "2,147,483,647",
            "explanation": "The 'int' data type in C# is a 32-bit signed integer, with a maximum value of 2,147,483,647."
        },
        {
            "question": "What is the size of a 'bool' data type in C#?",
            "options": [
                "1 bit",
                "1 byte",
                "2 bytes",
                "4 bytes"
            ],
            "answer": "1 byte",
            "explanation": "In C#, a 'bool' (boolean) data type occupies 1 byte."
        },
        {
            "question": "Which data type in C# is best suited for storing a small integer value?",
            "options": [
                "int",
                "short",
                "long",
                "byte"
            ],
            "answer": "byte",
            "explanation": "The 'byte' data type in C# is an 8-bit unsigned integer, ideal for storing small integer values."
        },
        {
            "question": "What is the default value of a struct in C#?",
            "options": [
                "null",
                "0",
                "False",
                "The default value of each individual field"
            ],
            "answer": "The default value of each individual field",
            "explanation": "In C#, the default value of a struct is the default value of each of its individual fields."
        },
        {
            "question": "What is the difference between 'string' and 'String' in C#?",
            "options": [
                "'string' is a value type, while 'String' is a reference type.",
                "'string' is a reference type, while 'String' is a value type.",
                "'string' is an alias for 'System.String'.",
                "There is no difference; they are interchangeable."
            ],
            "answer": "'string' is an alias for 'System.String'.",
            "explanation": "In C#, 'string' is an alias for the 'System.String' class, and they are functionally equivalent."
        },
        {
            "question": "In C#, what does the 'uint' data type represent?",
            "options": [
                "An unsigned 32-bit integer",
                "A signed 32-bit integer",
                "An unsigned 16-bit integer",
                "A signed 64-bit integer"
            ],
            "answer": "An unsigned 32-bit integer",
            "explanation": "The 'uint' data type in C# represents an unsigned 32-bit integer, with a range from 0 to 4,294,967,295."
        },
        {
            "question": "Which of the following data types has the smallest range in C#?",
            "options": [
                "byte",
                "sbyte",
                "short",
                "ushort"
            ],
            "answer": "sbyte",
            "explanation": "The 'sbyte' data type in C# is an 8-bit signed integer with a range from -128 to 127, which is the smallest range among the options."
        },
        {
            "question": "What is the purpose of the 'dynamic' data type in C#?",
            "options": [
                "To store any type of data that is known at compile-time.",
                "To delay type checking until runtime.",
                "To create anonymous types.",
                "To define a variable that cannot change its data type."
            ],
            "answer": "To delay type checking until runtime.",
            "explanation": "The 'dynamic' data type in C# is used to store data of any type, with its type being determined and checked at runtime."
        },
        {
            "question": "What is the output of the following C# code?",
            "options": [
                "0",
                "255",
                "256",
                "An error"
            ],
            "answer": "0",
            "explanation": "In C#, the 'byte' data type wraps around on overflow. So, incrementing 255 will result in 0."
        },
        {
            "question": "Which C# data type should be used for a variable that needs to hold a large number of true/false values?",
            "options": [
                "bool",
                "BitArray",
                "int",
                "bool[]"
            ],
            "answer": "BitArray",
            "explanation": "The 'BitArray' data type in C# is a collection that manages a compact array of bit values, suitable for handling a large number of true/false values."
        },
        {
            "question": "What is the range of the 'float' data type in C#?",
            "options": [
                "±1.5E−45 to ±3.4E38",
                "±5.0E−324 to ±1.7E308",
                "±1.0E−28 to ±7.9E28",
                "±1.0E−20 to ±1.0E20"
            ],
            "answer": "±1.5E−45 to ±3.4E38",
            "explanation": "The 'float' data type in C# is a 32-bit floating-point number with a range of ±1.5E−45 to ±3.4E38."
        },
        {
            "question": "In C#, which data type is implicitly nullable?",
            "options": [
                "int",
                "char",
                "string",
                "bool"
            ],
            "answer": "string",
            "explanation": "In C#, reference types like 'string' are implicitly nullable, meaning they can be assigned a null value."
        },
        {
            "question": "What is the output of the following expression in C#?",
            "options": [
                "16",
                "11",
                "8",
                "13"
            ],
            "answer": "11",
            "explanation": "According to the order of operations in C#, multiplication is performed before addition. So, 3 * 2 is calculated first, making the expression 5 + 6, which equals 11."
        },
        {
            "question": "In C#, which operator is used for concatenating two strings?",
            "options": [
                "+",
                "&",
                ".",
                "*"
            ],
            "answer": "+",
            "explanation": "In C#, the '+' operator is used to concatenate two strings."
        },
        {
            "question": "What is the purpose of the '??' operator in C#?",
            "options": [
                "It checks if the value is null and returns an alternative if true.",
                "It adds two nullable types.",
                "It compares two values for equality.",
                "It performs a logical OR operation."
            ],
            "answer": "It checks if the value is null and returns an alternative if true.",
            "explanation": "The '??' operator in C# is the null-coalescing operator, used to return the left-hand operand if it is not null, or the right-hand operand otherwise."
        },
        {
            "question": "Which operator in C# is used to check type compatibility?",
            "options": [
                "is",
                "typeof",
                "as",
                "=="
            ],
            "answer": "is",
            "explanation": "The 'is' operator in C# is used to check if an object is compatible with a given type."
        },
        {
            "question": "What does the following C# code return?",
            "options": [
                "10",
                "11",
                "9",
                "12"
            ],
            "answer": "10",
            "explanation": "The post-increment operator (x++) increases the value of x after its current value has been assigned to result. So, result gets the value 10."
        },
        {
            "question": "Which of the following is the correct use of the conditional (ternary) operator in C#?",
            "options": [
                "int result = (x > 10) ? x : 10;",
                "int result = x > 10 ? x : 10;",
                "int result = if(x > 10) x; else 10;",
                "int result = x > 10 : x ? 10;"
            ],
            "answer": "int result = x > 10 ? x : 10;",
            "explanation": "The correct syntax for the ternary operator in C# is 'condition ? true_expression : false_expression'."
        },
        {
            "question": "What is the purpose of the '%' operator in C#?",
            "options": [
                "Exponentiation",
                "Division",
                "Modulus",
                "Multiplication"
            ],
            "answer": "Modulus",
            "explanation": "The '%' operator in C# is used to find the remainder after division of one number by another."
        },
        {
            "question": "In C#, which operator is used for bitwise AND operation?",
            "options": [
                "&&",
                "&",
                "||",
                "|"
            ],
            "answer": "&",
            "explanation": "The '&' operator in C# is used for bitwise AND operations."
        },
        {
            "question": "What will be the result of the expression (true || false) in C#?",
            "options": [
                "true",
                "false",
                "null",
                "1"
            ],
            "answer": "true",
            "explanation": "The logical OR operator '||' returns true if either of its operands is true. Here, since one operand is true, the result is true."
        },
        {
            "question": "Which operator in C# is used to explicitly convert a type?",
            "options": [
                "as",
                "is",
                "()",
                "typeof"
            ],
            "answer": "()",
            "explanation": "In C#, parentheses are used for explicit type conversion, also known as casting."
        },
        {
            "question": "How does the 'as' operator differ from casting in C#?",
            "options": [
                "'as' operator performs a deep copy of the object.",
                "'as' operator returns null if the conversion fails, whereas casting throws an exception.",
                "There is no difference.",
                "'as' operator is used for value types only."
            ],
            "answer": "'as' operator returns null if the conversion fails, whereas casting throws an exception.",
            "explanation": "The 'as' operator in C# is used for safe type conversion. It returns null if the conversion cannot be performed, unlike explicit casting which throws an exception."
        },
        {
            "question": "What is the precedence of the logical AND ('&&') operator compared to the logical OR ('||') operator in C#?",
            "options": [
                "'&&' has higher precedence than '||'.",
                "'||' has higher precedence than '&&'.",
                "Both have the same precedence.",
                "The precedence is determined at runtime."
            ],
            "answer": "'&&' has higher precedence than '||'.",
            "explanation": "In C#, the logical AND operator ('&&') has higher precedence than the logical OR operator ('||')."
        },
        {
            "question": "Which of the following operators can be overloaded in C#?",
            "options": [
                "+",
                "?:",
                "&&",
                "??"
            ],
            "answer": "+",
            "explanation": "In C#, operators like '+' can be overloaded, but conditional (?:), logical AND (&&), and null-coalescing (??) operators cannot be."
        },
        {
            "question": "What will be the result of the expression (5 & 3) in C#?",
            "options": [
                "6",
                "1",
                "7",
                "0"
            ],
            "answer": "1",
            "explanation": "The bitwise AND of 5 (0101 in binary) and 3 (0011 in binary) is 0001 in binary, which is 1 in decimal."
        },
        {
            "question": "What is the output of the following C# code?",
            "options": [
                "3.3333",
                "3",
                "3.3",
                "4"
            ],
            "answer": "3",
            "explanation": "In C#, the division of two integers results in an integer. The fractional part is discarded, so 10 / 3 gives 3."
        },
        {
            "question": "How do you concatenate strings in C#?",
            "options": [
                "Using the '+' operator",
                "Using the '&' operator",
                "Using the concat() method",
                "Using the append() method"
            ],
            "answer": "Using the '+' operator",
            "explanation": "In C#, strings are commonly concatenated using the '+' operator."
        },
        {
            "question": "What method is used to compare two strings for equality in C#?",
            "options": [
                "equals()",
                "isEqual()",
                "CompareTo()",
                "Compare()"
            ],
            "answer": "equals()",
            "explanation": "The equals() method is used to compare two strings for equality in C#."
        },
        {
            "question": "Which method in the String class returns the length of a string in C#?",
            "options": [
                "Length",
                "Count",
                "Size",
                "GetLength"
            ],
            "answer": "Length",
            "explanation": "The Length property of the String class is used to get the length of a string in C#."
        },
        {
            "question": "How can you convert a string to uppercase in C#?",
            "options": [
                "toUpperCase()",
                "ToUpper()",
                "Uppercase()",
                "MakeUpper()"
            ],
            "answer": "ToUpper()",
            "explanation": "The ToUpper() method is used to convert a string to uppercase in C#."
        },
        {
            "question": "What is the output of the following code in C#?",
            "options": [
                "Hello,",
                "World!",
                "ello, World!",
                ", World!"
            ],
            "answer": "World!",
            "explanation": "The Substring(7) method returns a new string starting from the 7th index of the original string."
        },
        {
            "question": "What is the character used to denote a verbatim string in C#?",
            "options": [
                "@",
                "#",
                "$",
                "%"
            ],
            "answer": "@",
            "explanation": "In C#, the '@' character is used before a string literal to denote a verbatim string."
        },
        {
            "question": "How do you split a string on specific characters in C#?",
            "options": [
                "Using the Split() method",
                "Using the Divide() method",
                "Using the Break() method",
                "Using the Cut() method"
            ],
            "answer": "Using the Split() method",
            "explanation": "The Split() method is used to split a string into an array of substrings based on specific characters."
        },
        {
            "question": "What does the Trim() method do in C#?",
            "options": [
                "Removes all whitespace",
                "Removes whitespace from the start and end of a string",
                "Trims a string to a specified length",
                "Removes specified characters from a string"
            ],
            "answer": "Removes whitespace from the start and end of a string",
            "explanation": "The Trim() method is used to remove all leading and trailing white-space characters from a string."
        },
        {
            "question": "How do you determine if a string starts with a specific substring in C#?",
            "options": [
                "StartsWith()",
                "BeginsWith()",
                "HasPrefix()",
                "LeadingString()"
            ],
            "answer": "StartsWith()",
            "explanation": "The StartsWith() method is used to check if a string starts with a specific substring."
        },
        {
            "question": "What is the result of string concatenation using the following code in C#?",
            "options": [
                "HelloWorld",
                "Hello World",
                "Hello+World",
                "Hello_World"
            ],
            "answer": "Hello World",
            "explanation": "The '+' operator is used to concatenate strings with a space in between."
        },
        {
            "question": "How do you find the position of a substring within a string in C#?",
            "options": [
                "Index()",
                "FindIndex()",
                "Locate()",
                "IndexOf()"
            ],
            "answer": "IndexOf()",
            "explanation": "The IndexOf() method is used to find the position of a substring within a string."
        },
        {
            "question": "Which method is used to replace a specified substring with another substring in a string in C#?",
            "options": [
                "Change()",
                "Switch()",
                "Replace()",
                "Modify()"
            ],
            "answer": "Replace()",
            "explanation": "The Replace() method is used to replace all occurrences of a specified substring with another substring in a string."
        },
        {
            "question": "What is the output of the following code in C#?",
            "options": [
                "S",
                "h",
                "a",
                "C"
            ],
            "answer": "h",
            "explanation": "String indexing in C# is zero-based, so text[2] refers to the third character, which is 'h'."
        },
        {
            "question": "How do you convert a string to a number in C#?",
            "options": [
                "int.Parse()",
                "Convert.ToInt32()",
                "StringToNumber()",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "Both int.Parse() and Convert.ToInt32() methods can be used to convert a string to a number."
        },
        {
            "question": "What does the IsNullOrEmpty method do in C#?",
            "options": [
                "Checks if a string is empty or consists of only whitespace characters",
                "Checks if a string is null or has a length of zero",
                "Checks if a string is null or consists of only whitespace characters",
                "Checks if a string is null or empty array"
            ],
            "answer": "Checks if a string is null or has a length of zero",
            "explanation": "The IsNullOrEmpty method checks whether a string is null or its length is zero."
        },
        {
            "question": "How do you format a string in C# using placeholders?",
            "options": [
                "Using the Format() method",
                "Using string interpolation",
                "Using the Concat() method",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "Both the String.Format() method and string interpolation can be used to format strings using placeholders in C#."
        },
        {
            "question": "What is the escape sequence used for a new line in C#?",
            "options": [
                "\\\\n",
                "\\n",
                "/n",
                "//n"
            ],
            "answer": "\\n",
            "explanation": "The '\\n' escape sequence is used to represent a new line in C#."
        },
        {
            "question": "How can you check if a string contains a specific substring in C#?",
            "options": [
                "Contains()",
                "Has()",
                "Includes()",
                "Find()"
            ],
            "answer": "Contains()",
            "explanation": "The Contains() method is used to check if a string contains a specific substring."
        },
        {
            "question": "How do you declare an array of integers in C#?",
            "options": [
                "int[] myArray;",
                "array<int> myArray;",
                "int myArray[];",
                "int array[] myArray;"
            ],
            "answer": "int[] myArray;",
            "explanation": "In C#, arrays are declared with the type followed by square brackets, as in int[]."
        },
        {
            "question": "What will be the default value of elements in a newly created int array in C#?",
            "options": [
                "0",
                "1",
                "null",
                "-1"
            ],
            "answer": "0",
            "explanation": "By default, all elements in a new integer array in C# are initialized to zero."
        },
        {
            "question": "How can you determine the length of an array in C#?",
            "options": [
                "array.length",
                "array.size",
                "array.Length",
                "array.count"
            ],
            "answer": "array.Length",
            "explanation": "The Length property is used to find the number of elements in an array in C#."
        },
        {
            "question": "Which of these is a correct way to initialize an array in C#?",
            "options": [
                "int[] array = new int[5]{1, 2, 3, 4, 5};",
                "int[] array = new int[]{1, 2, 3, 4, 5};",
                "int array[] = {1, 2, 3, 4, 5};",
                "int[] array = new int[5](1, 2, 3, 4, 5);"
            ],
            "answer": "int[] array = new int[]{1, 2, 3, 4, 5};",
            "explanation": "This syntax initializes an array with specific values without specifying the size."
        },
        {
            "question": "How do you access the third element in an array named 'data' in C#?",
            "options": [
                "data[2];",
                "data[3];",
                "data(2);",
                "data(3);"
            ],
            "answer": "data[2];",
            "explanation": "Array indices in C# start at 0, so the third element is accessed with data[2]."
        },
        {
            "question": "What is the output of the following C# code?",
            "options": [
                "1",
                "2",
                "3",
                "Error"
            ],
            "answer": "2",
            "explanation": "The index 1 corresponds to the second element in the array, which is 2."
        },
        {
            "question": "How do you create a two-dimensional array in C#?",
            "options": [
                "int[,] multiArray = new int[2,3];",
                "int[][] multiArray = new int[2][3];",
                "int[2][3] multiArray = new int[][];",
                "int[,] multiArray = { {1, 2}, {3, 4, 5} };"
            ],
            "answer": "int[,] multiArray = new int[2,3];",
            "explanation": "A two-dimensional array is declared with two sets of square brackets and initialized with the 'new' keyword followed by the array dimensions."
        },
        {
            "question": "What does the following code do in C#?",
            "options": [
                "Reverses the array",
                "Sorts the array in descending order",
                "Sorts the array in ascending order",
                "Shuffles the array randomly"
            ],
            "answer": "Sorts the array in ascending order",
            "explanation": "Array.Sort() sorts the elements of an array in ascending order."
        },
        {
            "question": "Which method is used to reverse the elements of an array in C#?",
            "options": [
                "Array.Reverse()",
                "Array.Flip()",
                "Array.Invert()",
                "Reverse.Array()"
            ],
            "answer": "Array.Reverse()",
            "explanation": "Array.Reverse() is used to reverse the order of the elements in an array."
        },
        {
            "question": "In C#, what exception is thrown if you access an array index that is out of bounds?",
            "options": [
                "ArrayIndexOutOfBoundsException",
                "IndexOutOfRangeException",
                "ArgumentOutOfRangeException",
                "InvalidOperationException"
            ],
            "answer": "IndexOutOfRangeException",
            "explanation": "Accessing an invalid array index in C# results in an IndexOutOfRangeException."
        },
        {
            "question": "What is the correct way to declare a jagged array in C#?",
            "options": [
                "int[][] jaggedArray;",
                "int[,] jaggedArray;",
                "int[] jaggedArray[];",
                "int[][,] jaggedArray;"
            ],
            "answer": "int[][] jaggedArray;",
            "explanation": "A jagged array is an array of arrays, and it is declared with two sets of square brackets."
        },
        {
            "question": "How do you copy an array in C#?",
            "options": [
                "Array.Copy(sourceArray, destinationArray, length);",
                "sourceArray.Copy(destinationArray, length);",
                "destinationArray = sourceArray.Copy(length);",
                "destinationArray = sourceArray;"
            ],
            "answer": "Array.Copy(sourceArray, destinationArray, length);",
            "explanation": "Array.Copy() is a static method used to copy elements from one array to another."
        },
        {
            "question": "Which keyword is used to iterate over an array in C#?",
            "options": [
                "foreach",
                "for",
                "in",
                "iterate"
            ],
            "answer": "foreach",
            "explanation": "The foreach loop is commonly used for iterating over the elements of an array in C#."
        },
        {
            "question": "What is the default value for elements in a boolean array in C#?",
            "options": [
                "true",
                "false",
                "null",
                "0"
            ],
            "answer": "false",
            "explanation": "By default, all elements in a new boolean array in C# are initialized to false."
        },
        {
            "question": "How do you initialize an array of strings with 3 elements in C#?",
            "options": [
                "string[] names = new string[3]{\"John\", \"Jane\", \"Doe\"};",
                "string[] names = new string[]{\"John\", \"Jane\", \"Doe\"};",
                "string[] names = {\"John\", \"Jane\", \"Doe\"};",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "All the options are valid ways to initialize an array of strings with three elements in C#."
        },
        {
            "question": "How do you check if an array is empty in C#?",
            "options": [
                "array.IsEmpty()",
                "array.Length == 0",
                "array.Count() == 0",
                "array == null"
            ],
            "answer": "array.Length == 0",
            "explanation": "The Length property of the array is used to check if it is empty by comparing it to 0."
        },
        {
            "question": "Which method is used to find a specific element in an array in C#?",
            "options": [
                "Array.Find()",
                "Array.Search()",
                "Array.Get()",
                "Array.Lookup()"
            ],
            "answer": "Array.Find()",
            "explanation": "Array.Find() is used to search for an element that matches a certain condition in an array."
        },
        {
            "question": "What is the result of using the Clone() method on an array in C#?",
            "options": [
                "It creates a deep copy of the array.",
                "It creates a shallow copy of the array.",
                "It sorts the array.",
                "It reverses the array."
            ],
            "answer": "It creates a shallow copy of the array.",
            "explanation": "The Clone() method creates a shallow copy of the array, meaning it copies the elements but not the objects they reference."
        },
        {
            "question": "How do you declare an array with initial size but without initializing the elements in C#?",
            "options": [
                "int[] nums = new int[5];",
                "int[] nums = new int[]{5};",
                "int[] nums = new int[] {0, 0, 0, 0, 0};",
                "int[] nums = {5};"
            ],
            "answer": "int[] nums = new int[5];",
            "explanation": "This syntax declares an array with a specified size (5 in this case) without initializing the elements."
        },
        {
            "question": "Which of the following is not a valid array declaration in C#?",
            "options": [
                "int[] arr = new int[5];",
                "var arr = new int[5];",
                "int[] arr = new int[]{1, 2, 3, 4, 5};",
                "int arr[] = new int[5];"
            ],
            "answer": "int arr[] = new int[5];",
            "explanation": "The correct syntax for array declaration in C# does not include the type after the array brackets."
        },
        {
            "question": "Which of the following is the correct syntax for an if statement in C#?",
            "options": [
                "if (condition) { /* code */ }",
                "if condition { /* code */ }",
                "if (condition) then { /* code */ }",
                "if condition then { /* code */ }"
            ],
            "answer": "if (condition) { /* code */ }",
            "explanation": "The correct syntax for an if statement in C# includes parentheses around the condition and curly braces for the code block."
        },
        {
            "question": "How do you add an else statement in C#?",
            "options": [
                "if (condition) { /* code if true */ } else { /* code if false */ }",
                "if (condition) { /* code if true */ } otherwise { /* code if false */ }",
                "if (condition) then { /* code if true */ } else { /* code if false */ }",
                "if condition { /* code if true */ } else { /* code if false */ }"
            ],
            "answer": "if (condition) { /* code if true */ } else { /* code if false */ }",
            "explanation": "The else statement is added after the closing brace of the if statement's code block."
        },
        {
            "question": "What is the purpose of the else if statement in C#?",
            "options": [
                "To execute code if the previous if condition is true",
                "To execute code if the previous if condition is false, and a new condition is true",
                "To execute code regardless of the previous if condition",
                "None of the above"
            ],
            "answer": "To execute code if the previous if condition is false, and a new condition is true",
            "explanation": "The else if statement allows for additional conditions to be checked if the previous if condition is false."
        },
        {
            "question": "Can the else statement in C# exist without the preceding if statement?",
            "options": [
                "Yes, else can exist on its own",
                "No, else must always follow an if",
                "Yes, but only if there are no conditions",
                "No, but it can follow an else if"
            ],
            "answer": "No, else must always follow an if",
            "explanation": "The else statement is always paired with an if statement. It cannot exist independently."
        },
        {
            "question": "How many else if statements can you have in a single if statement block in C#?",
            "options": [
                "Only one",
                "Up to five",
                "As many as needed",
                "None, else if is not allowed in C#"
            ],
            "answer": "As many as needed",
            "explanation": "You can have as many else if statements as necessary in an if statement block in C#."
        },
        {
            "question": "What is the result of using nested if statements in C#?",
            "options": [
                "Increases code complexity and readability",
                "Allows the checking of another condition within an if or else if block",
                "Causes a syntax error",
                "Reduces the efficiency of the code"
            ],
            "answer": "Allows the checking of another condition within an if or else if block",
            "explanation": "Nested if statements are used to check additional conditions within an if or else if block."
        },
        {
            "question": "Which of the following demonstrates the use of multiple conditions in an if statement in C#?",
            "options": [
                "if (condition1 && condition2) { /* code */ }",
                "if condition1 and condition2 { /* code */ }",
                "if (condition1 + condition2) { /* code */ }",
                "if condition1 & condition2 { /* code */ }"
            ],
            "answer": "if (condition1 && condition2) { /* code */ }",
            "explanation": "The && operator is used to combine multiple conditions in an if statement."
        },
        {
            "question": "What is the correct way to write an if statement without a code block in C#?",
            "options": [
                "if (condition) statement;",
                "if (condition) -> statement;",
                "if (condition) : statement;",
                "if condition -> statement;"
            ],
            "answer": "if (condition) statement;",
            "explanation": "In C#, you can write a single statement after the if condition without using curly braces."
        },
        {
            "question": "How does C# handle the evaluation of conditions in an if-else if-else block?",
            "options": [
                "All conditions are evaluated regardless of their outcome",
                "Evaluates conditions until one is true, then skips the remaining",
                "Evaluates only the first and last conditions",
                "Evaluates all if conditions but skips the else"
            ],
            "answer": "Evaluates conditions until one is true, then skips the remaining",
            "explanation": "In an if-else if-else block, C# stops evaluating further conditions as soon as one condition evaluates to true."
        },
        {
            "question": "What will happen if the condition in an if statement is always true?",
            "options": [
                "The program will enter an infinite loop",
                "The if block will be ignored",
                "The program will throw a runtime error",
                "The if block will execute every time"
            ],
            "answer": "The if block will execute every time",
            "explanation": "If the condition in an if statement is always true, the code inside the if block will execute each time the condition is checked."
        },
        {
            "question": "In C#, what type of values can be used as conditions in an if statement?",
            "options": [
                "Only boolean values",
                "Integers",
                "Any type, as long as it's not null",
                "Boolean values and expressions that result in a boolean"
            ],
            "answer": "Boolean values and expressions that result in a boolean",
            "explanation": "In C#, conditions in if statements must be boolean values or expressions that evaluate to a boolean."
        },
        {
            "question": "Which of the following is not a valid way to write an if statement in C#?",
            "options": [
                "if (1 == 1) { /* code */ }",
                "if (true) { /* code */ }",
                "if (false) { /* code */ } else { /* code */ }",
                "if (x = 5) { /* code */ }"
            ],
            "answer": "if (x = 5) { /* code */ }",
            "explanation": "The expression 'x = 5' is an assignment, not a comparison. It's not a valid condition for an if statement."
        },
        {
            "question": "What happens if an if condition in C# evaluates to false and there is no else block?",
            "options": [
                "The program throws an error",
                "The if block executes with a default value",
                "The program exits",
                "The if block is skipped"
            ],
            "answer": "The if block is skipped",
            "explanation": "If the if condition evaluates to false and there is no else block, the code inside the if block is skipped."
        },
        {
            "question": "Is it possible to have an if statement without an else statement in C#?",
            "options": [
                "Yes, it is possible",
                "No, else is mandatory",
                "Only in certain conditions",
                "Yes, but only inside a loop"
            ],
            "answer": "Yes, it is possible",
            "explanation": "It is perfectly valid to have an if statement without an accompanying else statement."
        },
        {
            "question": "What does the following code do in C#?",
            "options": [
                "Executes code block 1 if condition is true, otherwise checks anotherCondition",
                "Always executes code block 3",
                "Executes each code block in order",
                "Executes code block 1 and then code block 3"
            ],
            "answer": "Executes code block 1 if condition is true, otherwise checks anotherCondition",
            "explanation": "If condition is true, code block 1 executes. If not, it checks anotherCondition, executing code block 2 if true, and code block 3 if both conditions are false."
        },
        {
            "question": "Which of the following is the correct syntax for a switch statement in C#?",
            "options": [
                "switch(variable) { case value: /* code */ }",
                "switch variable { case value: /* code */ }",
                "switch(variable) { when value: /* code */ }",
                "switch(variable) { if value: /* code */ }"
            ],
            "answer": "switch(variable) { case value: /* code */ }",
            "explanation": "The correct syntax includes the 'switch' keyword followed by the variable in parentheses, and 'case' keywords for different values."
        },
        {
            "question": "What keyword is used to terminate a case in a switch statement in C#?",
            "options": [
                "end",
                "stop",
                "break",
                "exit"
            ],
            "answer": "break",
            "explanation": "The 'break' keyword is used to terminate a case in a switch statement and exit the switch block."
        },
        {
            "question": "How does a switch statement in C# behave if the break statement is omitted in a case?",
            "options": [
                "It will throw a compile-time error.",
                "It will continue executing the next case.",
                "It will exit the switch statement.",
                "It will repeat the current case."
            ],
            "answer": "It will continue executing the next case.",
            "explanation": "If the 'break' statement is omitted, the switch statement will perform \"fall-through\" and execute the code in the next case."
        },
        {
            "question": "Which of the following data types can be used in a C# switch statement?",
            "options": [
                "int",
                "string",
                "char",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "The switch statement in C# can be used with several data types including int, string, and char."
        },
        {
            "question": "What is the role of the 'default' case in a switch statement in C#?",
            "options": [
                "To define the initial case",
                "To catch any values not matched by other cases",
                "To set a default return value",
                "To optimize the switch performance"
            ],
            "answer": "To catch any values not matched by other cases",
            "explanation": "The 'default' case in a switch statement is executed if none of the other case values match the switch expression."
        },
        {
            "question": "Can a case in a switch statement in C# have multiple values?",
            "options": [
                "Yes, by using commas to separate values",
                "No, each case can have only one value",
                "Yes, by using the 'or' operator",
                "No, it throws a syntax error"
            ],
            "answer": "Yes, by using commas to separate values",
            "explanation": "In C#, a case statement can match multiple values by specifying them as a comma-separated list."
        },
        {
            "question": "What is the output of the following code?",
            "options": [
                "One or Two",
                "Other",
                "No output",
                "Error"
            ],
            "answer": "One or Two",
            "explanation": "Since x is 2, the case for 2 is executed, printing \"One or Two\"."
        },
        {
            "question": "How do you handle multiple conditions with the same code in a switch statement?",
            "options": [
                "By using if-else statements inside the switch",
                "By stacking case statements without a break until the last one",
                "By creating a function and calling it in each case",
                "By using the '&&' operator in the case statement"
            ],
            "answer": "By stacking case statements without a break until the last one",
            "explanation": "In C#, you can stack multiple case statements one after the other without a break statement until the last one to handle multiple conditions with the same code."
        },
        {
            "question": "Which of the following is a valid use of the switch statement in C#?",
            "options": [
                "switch(x) { case 1: /* code */; case 2: /* code */; default: /* code */ }",
                "switch(x) { 1: /* code */; 2: /* code */; else: /* code */ }",
                "switch(x) { when 1: /* code */; when 2: /* code */; otherwise: /* code */ }",
                "switch(x) { if 1: /* code */; if 2: /* code */; else: /* code */ }"
            ],
            "answer": "switch(x) { case 1: /* code */; case 2: /* code */; default: /* code */ }",
            "explanation": "The correct syntax for a switch statement in C# uses 'case' for different values and 'default' for the default case."
        },
        {
            "question": "In C#, can a switch statement be nested inside another switch statement?",
            "options": [
                "Yes",
                "No",
                "Only inside a default case",
                "Only with a special compiler directive"
            ],
            "answer": "Yes",
            "explanation": "C# allows nesting of switch statements, where one switch statement can be placed inside another."
        },
        {
            "question": "What is required to use a string in a switch statement in C#?",
            "options": [
                "The string must be constant.",
                "The string should be converted to a char array.",
                "No special requirements; strings can be used directly.",
                "The string needs to be normalized."
            ],
            "answer": "No special requirements; strings can be used directly.",
            "explanation": "In C#, strings can be used directly in switch statements without any special requirements."
        },
        {
            "question": "What happens if the switch expression matches no case and there is no default case?",
            "options": [
                "The first case is executed",
                "The last case is executed",
                "An exception is thrown",
                "Nothing is executed"
            ],
            "answer": "Nothing is executed",
            "explanation": "If there's no matching case and no default case, the switch statement does nothing."
        },
        {
            "question": "Can a switch statement in C# be used with boolean values?",
            "options": [
                "Yes, but only with true and false cases",
                "No, switch statements don't support boolean values",
                "Yes, with any boolean expression",
                "No, it requires conversion to an integer"
            ],
            "answer": "Yes, but only with true and false cases",
            "explanation": "A switch statement in C# can be used with boolean values, but the cases must be explicitly true or false."
        },
        {
            "question": "How do you ensure that a switch case in C# falls through to the next case?",
            "options": [
                "By using the fallthrough keyword",
                "By omitting the break statement",
                "By writing 'continue;'",
                "C# does not allow fall-through by default"
            ],
            "answer": "By omitting the break statement",
            "explanation": "In C#, a case will fall through to the next one if the break statement is omitted. Note that explicit fall-through is not allowed; only when no code is executed in a case."
        },
        {
            "question": "Which of the following is not a valid type for switch expression in C#?",
            "options": [
                "int",
                "enum",
                "float",
                "char"
            ],
            "answer": "float",
            "explanation": "In C#, the switch statement does not support the float data type for the switch expression."
        },
        {
            "question": "What is the basic structure of a while loop in C#?",
            "options": [
                "while (condition) { /* code */ }",
                "while condition { /* code */ }",
                "while (condition) -> { /* code */ }",
                "while: (condition) { /* code */ }"
            ],
            "answer": "while (condition) { /* code */ }",
            "explanation": "The while loop in C# starts with the 'while' keyword followed by a condition in parentheses and a block of code in curly braces."
        },
        {
            "question": "How many times does the code inside a while loop execute if the condition is initially false?",
            "options": [
                "Once",
                "Twice",
                "Zero times",
                "Infinite times"
            ],
            "answer": "Zero times",
            "explanation": "If the condition of a while loop is false initially, the loop's code block will not execute at all."
        },
        {
            "question": "Which of the following is essential to prevent a while loop from running indefinitely?",
            "options": [
                "A break statement",
                "An increment or decrement operation within the loop",
                "A return statement",
                "An else statement"
            ],
            "answer": "An increment or decrement operation within the loop",
            "explanation": "To prevent an infinite loop, the condition of the while loop must eventually become false, often achieved by modifying a variable within the loop."
        },
        {
            "question": "What is an infinite loop in C#?",
            "options": [
                "A loop that runs a fixed number of times",
                "A loop that never starts",
                "A loop that doesn't have a body",
                "A loop that runs indefinitely"
            ],
            "answer": "A loop that runs indefinitely",
            "explanation": "An infinite loop is a loop where the condition never becomes false, causing it to run indefinitely."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "1 2 3",
                "1 2",
                "1 2 3 4",
                "The loop does not execute"
            ],
            "answer": "1 2 3",
            "explanation": "The while loop prints the numbers 1, 2, and 3 as it increments 'i' each time until 'i' is greater than 3."
        },
        {
            "question": "Is it possible to exit a while loop without meeting the condition in C#?",
            "options": [
                "Yes, using the break statement",
                "No, the condition must be met",
                "Yes, using the continue statement",
                "No, while loops cannot be exited prematurely"
            ],
            "answer": "Yes, using the break statement",
            "explanation": "The break statement can be used to exit a while loop immediately, regardless of the loop's condition."
        },
        {
            "question": "What happens if the increment statement in a while loop is accidentally omitted?",
            "options": [
                "The loop will execute once",
                "The loop will terminate immediately",
                "The loop may become an infinite loop",
                "A compile-time error will occur"
            ],
            "answer": "The loop may become an infinite loop",
            "explanation": "If the increment (or decrement) statement is omitted, the condition of the loop may never become false, leading to an infinite loop."
        },
        {
            "question": "Which of the following statements is true about the while loop in C#?",
            "options": [
                "The while loop is a pre-test loop",
                "The while loop is a post-test loop",
                "The condition in a while loop can only be a boolean variable",
                "The while loop cannot be used for iteration"
            ],
            "answer": "The while loop is a pre-test loop",
            "explanation": "In a while loop, the condition is tested before the execution of the loop's body, making it a pre-test loop."
        },
        {
            "question": "How can you skip the current iteration in a while loop in C#?",
            "options": [
                "Using the break statement",
                "Using the continue statement",
                "Using the pass statement",
                "Using the skip statement"
            ],
            "answer": "Using the continue statement",
            "explanation": "The continue statement is used to skip the remaining code in the current iteration and proceeds to the next iteration of the loop."
        },
        {
            "question": "Which of the following is a valid while loop in C#?",
            "options": [
                "while true { /* code */ }",
                "while (true) { /* code */ }",
                "while (true) -> { /* code */ }",
                "while: (true) { /* code */ }"
            ],
            "answer": "while (true) { /* code */ }",
            "explanation": "The correct syntax for a while loop includes the condition in parentheses."
        },
        {
            "question": "What is the role of the condition in a while loop?",
            "options": [
                "It determines how many times the loop will run",
                "It determines whether the loop's code block will execute",
                "It increments a counter variable",
                "It is optional and can be omitted"
            ],
            "answer": "It determines whether the loop's code block will execute",
            "explanation": "The condition in a while loop determines whether or not the loop's code block should be executed."
        },
        {
            "question": "Can a while loop contain multiple conditions in C#?",
            "options": [
                "Yes, separated by commas",
                "Yes, using logical operators like && and ||",
                "No, it can only have a single condition",
                "Yes, but only using bitwise operators"
            ],
            "answer": "Yes, using logical operators like && and ||",
            "explanation": "Multiple conditions in a while loop can be combined using logical operators such as && (and) and || (or)."
        },
        {
            "question": "What happens when a return statement is executed inside a while loop?",
            "options": [
                "The loop pauses and resumes after the function call",
                "The loop continues to the next iteration",
                "The function containing the loop returns immediately",
                "The loop exits and the rest of the function continues"
            ],
            "answer": "The function containing the loop returns immediately",
            "explanation": "When a return statement is executed inside a while loop, the function containing the loop returns immediately, exiting the loop."
        },
        {
            "question": "In C#, what is the difference between a while loop and a do-while loop?",
            "options": [
                "A while loop is a pre-test loop, and a do-while loop is a post-test loop",
                "There is no difference; they function identically",
                "A do-while loop cannot have a break statement",
                "A while loop cannot be nested, but a do-while loop can"
            ],
            "answer": "A while loop is a pre-test loop, and a do-while loop is a post-test loop",
            "explanation": "The main difference is that a while loop checks its condition before the first iteration (pre-test), whereas a do-while loop checks its condition after the first iteration (post-test)."
        },
        {
            "question": "How can you ensure a while loop executes at least once in C#?",
            "options": [
                "By setting the initial condition to true",
                "By using a do-while loop instead",
                "By placing the condition at the end of the loop",
                "By initializing all variables outside the loop"
            ],
            "answer": "By using a do-while loop instead",
            "explanation": "To ensure a loop executes at least once regardless of the condition, a do-while loop should be used, as it checks the condition after executing the loop's body."
        },
        {
            "question": "What is the basic syntax of a for loop in C#?",
            "options": [
                "for (initialization; condition; iteration) { /* code */ }",
                "for (condition; initialization; iteration) { /* code */ }",
                "for (initialization; iteration; condition) { /* code */ }",
                "for where (initialization; condition; iteration) { /* code */ }"
            ],
            "answer": "for (initialization; condition; iteration) { /* code */ }",
            "explanation": "A for loop in C# typically includes initialization, a condition, and an iteration expression."
        },
        {
            "question": "Which part of a for loop is executed only once?",
            "options": [
                "The condition",
                "The iteration statement",
                "The body of the loop",
                "The initialization statement"
            ],
            "answer": "The initialization statement",
            "explanation": "The initialization statement of a for loop is executed only once at the beginning of the loop."
        },
        {
            "question": "What will be the output of the following code?",
            "options": [
                "0 1 2",
                "0 1 2 3",
                "1 2 3",
                "1 2 3 4"
            ],
            "answer": "0 1 2",
            "explanation": "The loop starts with i = 0 and runs while i < 3, so it prints 0, 1, and 2."
        },
        {
            "question": "Which part of the for loop is optional?",
            "options": [
                "The condition",
                "The initialization",
                "The iteration",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "All three parts of the for loop—initialization, condition, and iteration—are optional. Omitting the condition results in an infinite loop."
        },
        {
            "question": "How can you exit a for loop prematurely in C#?",
            "options": [
                "Using the stop statement",
                "Using the exit statement",
                "Using the break statement",
                "Using the return statement"
            ],
            "answer": "Using the break statement",
            "explanation": "The break statement is used to exit a for loop before its normal termination."
        },
        {
            "question": "What is the purpose of the continue statement in a for loop in C#?",
            "options": [
                "To exit the loop",
                "To skip the current iteration and continue with the next one",
                "To repeat the current iteration",
                "To pause the loop execution"
            ],
            "answer": "To skip the current iteration and continue with the next one",
            "explanation": "The continue statement skips the rest of the code in the current iteration and proceeds with the next iteration of the loop."
        },
        {
            "question": "What happens if you omit the iteration expression in a for loop?",
            "options": [
                "The loop does not execute",
                "The loop executes once",
                "The loop becomes an infinite loop",
                "A compile-time error occurs"
            ],
            "answer": "The loop becomes an infinite loop",
            "explanation": "Omitting the iteration expression can lead to an infinite loop if the condition never becomes false."
        },
        {
            "question": "Which type of loop is most appropriate for iterating over an array in C#?",
            "options": [
                "While loop",
                "Do-while loop",
                "For loop",
                "All of the above"
            ],
            "answer": "For loop",
            "explanation": "A for loop is often the most appropriate choice for iterating over an array due to its structure that easily accommodates an index variable."
        },
        {
            "question": "In a for loop, is it possible to have multiple initialization statements?",
            "options": [
                "Yes, separated by commas",
                "No, only one statement is allowed",
                "Yes, separated by semicolons",
                "No, initialization must be done outside the loop"
            ],
            "answer": "Yes, separated by commas",
            "explanation": "Multiple initialization statements can be included in a for loop, separated by commas."
        },
        {
            "question": "Can the condition in a for loop be a complex expression?",
            "options": [
                "Yes, as long as it evaluates to a boolean value",
                "No, it must be a simple true or false condition",
                "Yes, but only with logical AND operators",
                "No, complex conditions are not allowed in for loops"
            ],
            "answer": "Yes, as long as it evaluates to a boolean value",
            "explanation": "The condition in a for loop can be any expression that evaluates to a boolean value, including complex expressions."
        },
        {
            "question": "What is the scope of a variable declared in the initialization section of a for loop?",
            "options": [
                "Global",
                "Local to the loop",
                "Local to the method containing the loop",
                "Local to the class containing the loop"
            ],
            "answer": "Local to the loop",
            "explanation": "Variables declared in the initialization section of a for loop are local to the loop and cannot be accessed outside of it."
        },
        {
            "question": "How many times does the body of a for loop execute if its condition is never true?",
            "options": [
                "Once",
                "Twice",
                "Zero times",
                "Infinite times"
            ],
            "answer": "Zero times",
            "explanation": "If the condition of a for loop is never true, the body of the loop does not execute at all."
        },
        {
            "question": "What is the correct syntax for a for loop with no body in C#?",
            "options": [
                "for (initialization; condition; iteration);",
                "for (initialization; condition; iteration) {}",
                "for (initialization; condition; iteration) /;",
                "for (initialization; condition; iteration) //;"
            ],
            "answer": "for (initialization; condition; iteration);",
            "explanation": "A for loop with no body can be written with a semicolon after the iteration expression."
        },
        {
            "question": "Can you declare a variable of a different type in the iteration part of a for loop?",
            "options": [
                "Yes",
                "No, it must be of the same type as the initialization part",
                "Yes, but only if it is a numeric type",
                "No, the iteration part cannot have declarations"
            ],
            "answer": "No, it must be of the same type as the initialization part",
            "explanation": "Variables declared in the iteration part of a for loop must be of the same type as those in the initialization part, or else a compile-time error will occur."
        },
        {
            "question": "Is it possible to nest for loops in C#?",
            "options": [
                "Yes, you can nest for loops within each other",
                "No, for loops cannot be nested",
                "Yes, but only two levels deep",
                "Yes, but only if they iterate over different types"
            ],
            "answer": "Yes, you can nest for loops within each other",
            "explanation": "In C#, for loops can be nested within each other to any depth, allowing for complex iteration patterns."
        },
        {
            "question": "How do you define a method in C#?",
            "options": [
                "dataType methodName(parameters) { /* code */ }",
                "method dataType methodName(parameters) { /* code */ }",
                "dataType methodName = (parameters) { /* code */ }",
                "function dataType methodName(parameters) { /* code */ }"
            ],
            "answer": "dataType methodName(parameters) { /* code */ }",
            "explanation": "A method in C# is defined with a return type, followed by the method name and parameters within parentheses."
        },
        {
            "question": "What is the return type of a method that does not return any value?",
            "options": [
                "void",
                "null",
                "None",
                "Empty"
            ],
            "answer": "void",
            "explanation": "In C#, the 'void' keyword is used as the return type for methods that do not return a value."
        },
        {
            "question": "How can you call a method in C#?",
            "options": [
                "methodName.call(parameters);",
                "methodName(parameters);",
                "Call methodName(parameters);",
                "Execute methodName(parameters);"
            ],
            "answer": "methodName(parameters);",
            "explanation": "Methods are called by specifying the method name followed by parentheses containing any arguments."
        },
        {
            "question": "What are parameters in a C# method?",
            "options": [
                "Variables passed into the method",
                "The return values of the method",
                "Internal variables of the method",
                "External requirements for the method"
            ],
            "answer": "Variables passed into the method",
            "explanation": "Parameters are variables that are passed into a method to provide input for its execution."
        },
        {
            "question": "Which keyword is used to indicate that a method parameter is optional in C#?",
            "options": [
                "optional",
                "default",
                "params",
                "OptionalParameter"
            ],
            "answer": "params",
            "explanation": "The 'params' keyword in C# is used to specify that a method parameter is optional."
        },
        {
            "question": "What is method overloading in C#?",
            "options": [
                "Changing the return type of a method",
                "Creating a method with the same name but different parameters",
                "Increasing the efficiency of a method",
                "Writing the method code in multiple languages"
            ],
            "answer": "Creating a method with the same name but different parameters",
            "explanation": "Method overloading in C# refers to creating multiple methods with the same name but different parameters."
        },
        {
            "question": "What is the correct way to declare a method that returns an integer in C#?",
            "options": [
                "int methodName() { /* code */ }",
                "method int methodName() { /* code */ }",
                "function int methodName() { /* code */ }",
                "methodName() : int { /* code */ }"
            ],
            "answer": "int methodName() { /* code */ }",
            "explanation": "The return type (int) precedes the method name in C# method declarations."
        },
        {
            "question": "How are arguments passed to a method by default in C#?",
            "options": [
                "By reference",
                "By value",
                "By pointer",
                "By object"
            ],
            "answer": "By value",
            "explanation": "In C#, arguments are passed to methods by value by default, meaning a copy of the value is passed."
        },
        {
            "question": "What keyword is used to define a method that belongs to a class rather than an instance of a class in C#?",
            "options": [
                "static",
                "const",
                "class",
                "shared"
            ],
            "answer": "static",
            "explanation": "The 'static' keyword is used to define a method that belongs to a class itself rather than any instance of the class."
        },
        {
            "question": "How can you return multiple values from a method in C#?",
            "options": [
                "Using a struct or class",
                "Returning an array or a list",
                "Using out or ref parameters",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Multiple values can be returned from a C# method using a struct/class, an array/list, or out/ref parameters."
        },
        {
            "question": "What does the 'ref' keyword do in a C# method signature?",
            "options": [
                "Specifies a reference type parameter",
                "Indicates that a parameter is optional",
                "Allows the method to modify the argument's value",
                "Signals a recursive method"
            ],
            "answer": "Allows the method to modify the argument's value",
            "explanation": "The 'ref' keyword allows a method to modify the value of the argument passed to it."
        },
        {
            "question": "What is recursion in C#?",
            "options": [
                "A method that calls itself",
                "Repeating a method multiple times",
                "Looping through method calls",
                "Overloading a method"
            ],
            "answer": "A method that calls itself",
            "explanation": "Recursion is a programming technique where a method calls itself."
        },
        {
            "question": "What is a constructor in C#?",
            "options": [
                "A method that constructs data types",
                "A static method that initializes a class",
                "A special method used to initialize objects",
                "A method that is called when an object is destroyed"
            ],
            "answer": "A special method used to initialize objects",
            "explanation": "A constructor is a special method in a class that is called when an instance of the class is created, used to initialize objects."
        },
        {
            "question": "Can a C# method return null?",
            "options": [
                "Yes, if the method's return type is a reference type or a nullable value type",
                "No, methods in C# cannot return null",
                "Yes, but only for string return types",
                "No, unless explicitly allowed by the 'null' keyword"
            ],
            "answer": "Yes, if the method's return type is a reference type or a nullable value type",
            "explanation": "In C#, a method can return null if its return type is either a reference type or a nullable value type."
        },
        {
            "question": "What is the difference between 'ref' and 'out' parameters in C#?",
            "options": [
                "'ref' parameters must be initialized before being passed; 'out' parameters do not",
                "'out' parameters can be passed by value",
                "'ref' parameters are for input only; 'out' parameters are for output only",
                "There is no difference"
            ],
            "answer": "'ref' parameters must be initialized before being passed; 'out' parameters do not",
            "explanation": "'ref' parameters require initialization before being passed to a method, whereas 'out' parameters do not require initialization and are intended to return a value."
        },
        {
            "question": "What is encapsulation in C#?",
            "options": [
                "Breaking a program into multiple parts",
                "Hiding the internal state of an object and requiring all interaction to be performed through an object's methods",
                "The ability of a class to extend the functionality of another class",
                "A class that can be used to create objects"
            ],
            "answer": "Hiding the internal state of an object and requiring all interaction to be performed through an object's methods",
            "explanation": "Encapsulation involves hiding the internal state of an object and exposing only necessary methods for interaction, enhancing security and ease of maintenance."
        },
        {
            "question": "What does the 'public' keyword denote in C#?",
            "options": [
                "The method can only be accessed within its class",
                "The variable is a constant",
                "The method or property is accessible from any class",
                "The method is static"
            ],
            "answer": "The method or property is accessible from any class",
            "explanation": "The 'public' keyword is an access modifier in C# that makes a method or property accessible from any class."
        },
        {
            "question": "What is a class in C#?",
            "options": [
                "A blueprint from which objects are created",
                "A specific instance of an object",
                "A method in object-oriented programming",
                "A variable type"
            ],
            "answer": "A blueprint from which objects are created",
            "explanation": "A class in C# defines a blueprint for objects, specifying what data and behavior they have."
        },
        {
            "question": "What is polymorphism in C#?",
            "options": [
                "The ability of different classes to use methods of the same name in different ways",
                "Splitting a class into multiple subclasses",
                "Changing the data type of a variable",
                "Protecting data from access by unauthorized code"
            ],
            "answer": "The ability of different classes to use methods of the same name in different ways",
            "explanation": "Polymorphism allows methods with the same name to be used differently in different classes, supporting concepts like method overriding and method overloading."
        },
        {
            "question": "What is inheritance in C#?",
            "options": [
                "Copying properties from one class to another",
                "The process where one class acquires the properties and behaviors of another class",
                "Using the same method in multiple classes",
                "Storing data within a class"
            ],
            "answer": "The process where one class acquires the properties and behaviors of another class",
            "explanation": "Inheritance is an OOP feature where a new class (derived class) inherits properties and methods from an existing class (base class)."
        },
        {
            "question": "What is the purpose of constructors in C#?",
            "options": [
                "To initialize objects of a class",
                "To perform calculations",
                "To connect to a database",
                "To destroy objects of a class"
            ],
            "answer": "To initialize objects of a class",
            "explanation": "Constructors are special methods used to initialize objects of a class with a valid state."
        },
        {
            "question": "What is an object in C#?",
            "options": [
                "A variable in a class",
                "An instance of a class",
                "A method in a class",
                "A property in a class"
            ],
            "answer": "An instance of a class",
            "explanation": "An object is an instance of a class that encapsulates data and behavior related to that data."
        },
        {
            "question": "What is an abstract class in C#?",
            "options": [
                "A class that cannot be instantiated and must be inherited",
                "A class designed for creating objects",
                "A class without any methods",
                "A class used for data storage only"
            ],
            "answer": "A class that cannot be instantiated and must be inherited",
            "explanation": "An abstract class cannot be instantiated and is designed to be a base class for other classes."
        },
        {
            "question": "What is the purpose of the 'this' keyword in C#?",
            "options": [
                "To reference the current instance of a class",
                "To destroy the current instance of a class",
                "To create a new instance of a class",
                "To exit the current method"
            ],
            "answer": "To reference the current instance of a class",
            "explanation": "The 'this' keyword in C# is used within an instance method or constructor to refer to the current instance of the class."
        },
        {
            "question": "What does the term 'interface' refer to in C#?",
            "options": [
                "A class that provides a default implementation of methods",
                "A protocol that defines a set of methods and properties without implementing them",
                "A method that connects two classes",
                "A built-in data type"
            ],
            "answer": "A protocol that defines a set of methods and properties without implementing them",
            "explanation": "An interface in C# is a contract that defines a set of methods and properties, which implementing classes must define."
        },
        {
            "question": "What is method overloading in C#?",
            "options": [
                "Changing the return type of a method",
                "Creating multiple methods with the same name but different parameters in the same class",
                "Using the same method name in different classes",
                "Creating a method that loads data"
            ],
            "answer": "Creating multiple methods with the same name but different parameters in the same class",
            "explanation": "Method overloading is defining methods with the same name but different parameter lists within the same class."
        },
        {
            "question": "What is the use of the 'virtual' keyword in C#?",
            "options": [
                "To declare a variable that can change types",
                "To mark a method or property as overridable in a derived class",
                "To create a virtual class",
                "To define a method that must be implemented in a derived class"
            ],
            "answer": "To mark a method or property as overridable in a derived class",
            "explanation": "The 'virtual' keyword is used in a base class to indicate that a method or property can be overridden in a derived class."
        },
        {
            "question": "What is method overriding in C#?",
            "options": [
                "Renaming a method in a derived class",
                "Providing a new implementation of a method in a derived class that already exists in the base class",
                "Overloading a method in the same class",
                "Changing the return type of a method in a derived class"
            ],
            "answer": "Providing a new implementation of a method in a derived class that already exists in the base class",
            "explanation": "Method overriding involves providing a new implementation in a derived class for a method that was defined in the base class."
        },
        {
            "question": "What does the 'sealed' keyword do in C#?",
            "options": [
                "Seals a method so it cannot be overridden",
                "Seals a class so it cannot be extended",
                "Protects a variable from being modified",
                "Encrypts data within a class"
            ],
            "answer": "Seals a class so it cannot be extended",
            "explanation": "The 'sealed' keyword is used to prevent a class from being inherited or a virtual method from being overridden in derived classes."
        },
        {
            "question": "What is a destructor in C#?",
            "options": [
                "A method for destroying classes",
                "A special method used to clean up before an object is garbage collected",
                "A method used to delete variables",
                "An overloaded version of a constructor"
            ],
            "answer": "A special method used to clean up before an object is garbage collected",
            "explanation": "Destructors in C# are special methods invoked automatically when an object is about to be destroyed or garbage collected, used for cleanup."
        },
        {
            "question": "What is a property in C#?",
            "options": [
                "A global variable in a class",
                "A special type of class",
                "A method that does not take any parameters",
                "A member that provides a flexible mechanism to read, write, or compute the value of a private field"
            ],
            "answer": "A member that provides a flexible mechanism to read, write, or compute the value of a private field",
            "explanation": "Properties in C# are used to control access to class members, providing a way to get or set values while encapsulating implementation details."
        },
        {
            "question": "What is the difference between a class and a struct in C#?",
            "options": [
                "A class is a reference type, while a struct is a value type",
                "There is no difference",
                "Structs can have methods, while classes cannot",
                "Classes are used for small objects, while structs are used for large objects"
            ],
            "answer": "A class is a reference type, while a struct is a value type",
            "explanation": "The key difference is that classes are reference types and structs are value types, affecting how they are stored and passed in memory."
        },
        {
            "question": "What is an 'interface' in C#?",
            "options": [
                "A collection of abstract methods",
                "A class that cannot be instantiated",
                "A protocol that defines a set of methods and properties without implementing them",
                "A built-in data type"
            ],
            "answer": "A protocol that defines a set of methods and properties without implementing them",
            "explanation": "An interface in C# is a contract that specifies a set of methods and properties. Classes or structs that implement the interface agree to implement the specified members."
        },
        {
            "question": "What is the purpose of the 'override' keyword in C#?",
            "options": [
                "To replace a method in a base class with a new implementation in a derived class",
                "To prevent a method from being overridden",
                "To make a method available for overloading",
                "To indicate that a method is optional to implement"
            ],
            "answer": "To replace a method in a base class with a new implementation in a derived class",
            "explanation": "The 'override' keyword is used in a derived class to provide a new implementation of a virtual method defined in a base class."
        },
        {
            "question": "What does 'encapsulation' achieve in C# OOP?",
            "options": [
                "It ensures that only necessary aspects of a class are exposed to other parts of the program",
                "It allows a class to inherit from multiple base classes",
                "It provides a mechanism to copy objects",
                "It allows a method to change its behavior based on the input"
            ],
            "answer": "It ensures that only necessary aspects of a class are exposed to other parts of the program",
            "explanation": "In an Object Oriented programming language, encapsulation is one of the key language features. Encapsulation is the procedure of encapsulating data and functions into a single unit."
        },
        {
            "question": "What does the 'public' access modifier do in C#?",
            "options": [
                "Restricts access to the member within its declaring type",
                "Allows access to the member from any other code",
                "Allows access only within the same assembly",
                "Provides global access to a variable"
            ],
            "answer": "Allows access to the member from any other code",
            "explanation": "The 'public' access modifier in C# makes a member accessible from any other code, regardless of assembly or class."
        },
        {
            "question": "Which access modifier in C# is the most restrictive?",
            "options": [
                "public",
                "private",
                "protected",
                "internal"
            ],
            "answer": "private",
            "explanation": "The 'private' access modifier is the most restrictive, limiting access to the member within its declaring type only."
        },
        {
            "question": "What is the default access modifier for a class in C#?",
            "options": [
                "public",
                "private",
                "protected",
                "internal"
            ],
            "answer": "internal",
            "explanation": "In C#, the default access modifier for classes is 'internal', meaning the class is accessible only within its own assembly."
        },
        {
            "question": "What does the 'protected' access modifier do in C#?",
            "options": [
                "Allows access from any class",
                "Restricts access to within the class and derived classes",
                "Restricts access to the same assembly",
                "Allows access only within the same namespace"
            ],
            "answer": "Restricts access to within the class and derived classes",
            "explanation": "The 'protected' access modifier allows access to a member from within its declaring type and any derived classes."
        },
        {
            "question": "How does the 'internal' access modifier work in C#?",
            "options": [
                "Restricts access to within the current class",
                "Allows access from any class within the same assembly",
                "Allows access only from derived classes",
                "Provides unrestricted access to the member"
            ],
            "answer": "Allows access from any class within the same assembly",
            "explanation": "The 'internal' access modifier in C# makes a member accessible only within the same assembly."
        },
        {
            "question": "What is the combination of 'protected' and 'internal' called in C#?",
            "options": [
                "protected internal",
                "internal protected",
                "private public",
                "public private"
            ],
            "answer": "protected internal",
            "explanation": "The 'protected internal' access modifier in C# allows access to a member from within its declaring type, derived types, or any type in the same assembly."
        },
        {
            "question": "What access modifier should be used to allow a member to be accessible only within its declaring type?",
            "options": [
                "public",
                "private",
                "protected",
                "internal"
            ],
            "answer": "private",
            "explanation": "The 'private' access modifier restricts access to a member exclusively within its declaring type."
        },
        {
            "question": "Which access modifier allows a member to be accessed from derived classes, even in different assemblies?",
            "options": [
                "private",
                "internal",
                "protected internal",
                "public"
            ],
            "answer": "protected internal",
            "explanation": "The 'protected internal' access modifier allows a member to be accessible from derived classes, even if they are in different assemblies."
        },
        {
            "question": "What is the default access modifier for a method in C#?",
            "options": [
                "public",
                "private",
                "protected",
                "internal"
            ],
            "answer": "private",
            "explanation": "In C#, the default access modifier for methods is 'private' unless specified otherwise."
        },
        {
            "question": "Can a 'private' member of a class in C# be accessed from an instance of that class?",
            "options": [
                "Yes, from anywhere",
                "No, never",
                "Yes, but only within the class itself",
                "Yes, but only from derived classes"
            ],
            "answer": "Yes, but only within the class itself",
            "explanation": "Private members of a class are accessible from within the class itself but not from outside it, including from instances of the class."
        },
        {
            "question": "What is the effect of the 'protected internal' access modifier on a member in C#?",
            "options": [
                "Accessible only within the same assembly and from derived classes in other assemblies",
                "Accessible from anywhere",
                "Accessible only from derived classes",
                "Accessible only within the same class"
            ],
            "answer": "Accessible only within the same assembly and from derived classes in other assemblies",
            "explanation": "The 'protected internal' access modifier allows a member to be accessed from within its own assembly and from derived classes, even in other assemblies."
        },
        {
            "question": "Which access modifier should be used for members that should be accessible only to derived classes and classes within the same assembly?",
            "options": [
                "private",
                "protected",
                "internal",
                "protected internal"
            ],
            "answer": "protected internal",
            "explanation": "The 'protected internal' access modifier allows access to a member by derived classes and any class within the same assembly."
        },
        {
            "question": "What does the 'public' access modifier indicate about a member's accessibility?",
            "options": [
                "Restricted within the class",
                "Restricted within the assembly",
                "Accessible from any other code",
                "Accessible only within derived classes"
            ],
            "answer": "Accessible from any other code",
            "explanation": "Members declared as 'public' are accessible from any other code, making them the least restrictive in terms of access control."
        },
        {
            "question": "If a member is declared without any access modifier, which access level is applied by default in C#?",
            "options": [
                "public",
                "private",
                "internal",
                "protected"
            ],
            "answer": "private",
            "explanation": "In C#, if no access modifier is specified for a member, it is implicitly 'private'."
        },
        {
            "question": "What is the purpose of using different access modifiers in C#?",
            "options": [
                "To optimize code performance",
                "To control the scope of access to class members for encapsulation and security",
                "To define different types of classes",
                "To specify the return type of methods"
            ],
            "answer": "To control the scope of access to class members for encapsulation and security",
            "explanation": "Access modifiers in C# are used to control the visibility and accessibility of class members, which is essential for encapsulation and security in object-oriented programming."
        },
        {
            "question": "What is inheritance in C#?",
            "options": [
                "The process of creating new classes from existing ones",
                "Copying the same method into multiple classes",
                "Using the same variables in different classes",
                "Connecting classes through interfaces"
            ],
            "answer": "The process of creating new classes from existing ones",
            "explanation": "Inheritance in C# is the process of deriving new classes from existing ones, allowing the new classes to adopt and possibly extend the properties and methods of the base class."
        },
        {
            "question": "What keyword is used to inherit from a base class in C#?",
            "options": [
                "extends",
                "super",
                "base",
                ":"
            ],
            "answer": ":",
            "explanation": "In C#, the colon (:) is used in the class declaration to inherit from a base class."
        },
        {
            "question": "Which class in C# is the base class for all other classes?",
            "options": [
                "Object",
                "Base",
                "Root",
                "Main"
            ],
            "answer": "Object",
            "explanation": "In C#, the 'Object' class is the ultimate base class from which all other classes implicitly inherit."
        },
        {
            "question": "Can a derived class override a non-virtual method of the base class in C#?",
            "options": [
                "Yes, always",
                "No, only virtual methods can be overridden",
                "Yes, but only if the method is static",
                "No, unless the method is abstract"
            ],
            "answer": "No, only virtual methods can be overridden",
            "explanation": "In C#, a derived class can only override methods in the base class that are marked as virtual, abstract, or override."
        },
        {
            "question": "What is the correct way to call a constructor of the base class in C#?",
            "options": [
                "super()",
                "base()",
                ":base()",
                "parent()"
            ],
            "answer": ":base()",
            "explanation": "In C#, :base() is used within a derived class constructor to call a specific constructor of the base class."
        },
        {
            "question": "What is the default access modifier for base class inheritance in C#?",
            "options": [
                "public",
                "private",
                "protected",
                "internal"
            ],
            "answer": "public",
            "explanation": "If no access modifier is specified for inheritance, the default is 'public' in C#."
        },
        {
            "question": "Can structures (structs) in C# inherit from other structures or classes?",
            "options": [
                "Yes, from both structures and classes",
                "No, structures cannot inherit from any type",
                "Yes, but only from other structures",
                "Yes, but only from classes"
            ],
            "answer": "No, structures cannot inherit from any type",
            "explanation": "In C#, structures (structs) cannot inherit from other structures or classes, but they can implement interfaces."
        },
        {
            "question": "What is the purpose of the 'sealed' keyword in relation to inheritance in C#?",
            "options": [
                "To prevent a class from inheriting from other classes",
                "To allow a class to be inheritable",
                "To prevent a class from being a base class",
                "To seal methods so they cannot be overridden"
            ],
            "answer": "To prevent a class from being a base class",
            "explanation": "The 'sealed' keyword in C# is used to prevent a class from being used as a base class, effectively stopping inheritance from that class."
        },
        {
            "question": "What is multiple inheritance in the context of C#?",
            "options": [
                "Inheriting from multiple base classes",
                "Inheriting both methods and properties",
                "A class inheriting from another class and multiple interfaces",
                "A concept not supported in C#"
            ],
            "answer": "A concept not supported in C#",
            "explanation": "Multiple inheritance, or inheriting from more than one base class, is not supported in C#. However, a class can implement multiple interfaces."
        },
        {
            "question": "Can a derived class in C# access private members of its base class?",
            "options": [
                "Yes, always",
                "No, private members are accessible only within the class they are declared",
                "Yes, but only through public or protected methods",
                "No, unless the class is sealed"
            ],
            "answer": "No, private members are accessible only within the class they are declared",
            "explanation": "Private members of a base class are not accessible to derived classes. Derived classes can only access public, protected, and internal members of the base class."
        },
        {
            "question": "What is polymorphism in C#?",
            "options": [
                "A way to process different data types with a single interface",
                "The ability of different classes to provide unique implementations of the same method",
                "A feature that allows a class to have multiple constructors",
                "The ability to change a variable's type at runtime"
            ],
            "answer": "The ability of different classes to provide unique implementations of the same method",
            "explanation": "Polymorphism in C# allows methods with the same name to behave differently in different classes, usually through method overriding."
        },
        {
            "question": "Which keyword is used for method overriding in C#?",
            "options": [
                "virtual",
                "override",
                "new",
                "base"
            ],
            "answer": "override",
            "explanation": "The 'override' keyword is used in a derived class to override a method defined in the base class."
        },
        {
            "question": "What is method overloading in C#?",
            "options": [
                "Creating methods in a derived class with the same name as the base class",
                "Defining multiple methods with the same name but different parameters within the same class",
                "Changing the return type of a method",
                "Calling methods from the base class"
            ],
            "answer": "Defining multiple methods with the same name but different parameters within the same class",
            "explanation": "Method overloading involves creating multiple methods in the same class with the same name but different parameter lists."
        },
        {
            "question": "What is required to make a method overridable in a base class in C#?",
            "options": [
                "The method must be static",
                "The method must be private",
                "The method must be declared with the 'virtual' keyword",
                "The method must be sealed"
            ],
            "answer": "The method must be declared with the 'virtual' keyword",
            "explanation": "To allow a method to be overridden in derived classes, it must be declared with the 'virtual' keyword in the base class."
        },
        {
            "question": "How can you hide a method in a base class without overriding it in C#?",
            "options": [
                "Using the 'new' keyword",
                "Using the 'hide' keyword",
                "By making the method private",
                "By making the method static"
            ],
            "answer": "Using the 'new' keyword",
            "explanation": "The 'new' keyword can be used in a derived class to hide a non-virtual method of the base class."
        },
        {
            "question": "What is dynamic polymorphism in C#?",
            "options": [
                "Polymorphism determined at compile time",
                "Polymorphism that occurs when code is executed",
                "Polymorphism achieved through method overloading",
                "Polymorphism achieved with dynamic types"
            ],
            "answer": "Polymorphism that occurs when code is executed",
            "explanation": "Dynamic polymorphism is determined at runtime, typically through method overriding, allowing objects to be treated as instances of their base type."
        },
        {
            "question": "What happens when a virtual method is called on a reference whose compile-time type is different from its runtime type?",
            "options": [
                "The method of the compile-time type is executed",
                "The method of the runtime type is executed",
                "A runtime error occurs",
                "The method call is ignored"
            ],
            "answer": "The method of the runtime type is executed",
            "explanation": "When a virtual method is called, the version of the method that corresponds to the runtime type of the object is executed."
        },
        {
            "question": "Can interfaces be used to achieve polymorphism in C#?",
            "options": [
                "No, interfaces cannot be used for polymorphism",
                "Yes, by allowing different classes to implement the same interface differently",
                "Only if the interface methods are static",
                "Only within the same assembly"
            ],
            "answer": "Yes, by allowing different classes to implement the same interface differently",
            "explanation": "Interfaces provide a way to achieve polymorphism in C# by defining a contract that can be implemented differently by multiple classes."
        },
        {
            "question": "What is the difference between static and dynamic polymorphism?",
            "options": [
                "Static polymorphism is compile-time, while dynamic polymorphism is runtime",
                "Static polymorphism uses virtual methods, while dynamic polymorphism uses new methods",
                "There is no difference",
                "Static polymorphism uses inheritance, while dynamic polymorphism uses interfaces"
            ],
            "answer": "Static polymorphism is compile-time, while dynamic polymorphism is runtime",
            "explanation": "Static polymorphism (method overloading) is resolved at compile time, while dynamic polymorphism (method overriding) is resolved at runtime."
        },
        {
            "question": "In C#, how do you prevent a method from being overridden in a derived class?",
            "options": [
                "By declaring the method as private",
                "By using the 'final' keyword",
                "By using the 'sealed' keyword on the method",
                "By omitting the 'virtual' keyword"
            ],
            "answer": "By using the 'sealed' keyword on the method",
            "explanation": "The 'sealed' keyword is used on a method in a derived class to prevent further overriding of that method in any subsequent derived classes."
        },
        {
            "question": "What is an enum in C#?",
            "options": [
                "A method that returns several values",
                "A user-defined data type that consists of integral constants",
                "A special type of class for storing collections",
                "A data structure similar to an array"
            ],
            "answer": "A user-defined data type that consists of integral constants",
            "explanation": "An enum (enumeration) in C# is a value type defined by a set of named integral constants."
        },
        {
            "question": "What is the default underlying type of an enum in C#?",
            "options": [
                "int",
                "short",
                "long",
                "byte"
            ],
            "answer": "int",
            "explanation": "In C#, the default underlying type of an enum is 'int'."
        },
        {
            "question": "How can you define an enum in C# with a different underlying type?",
            "options": [
                "enum MyEnum : byte { Value1, Value2 }",
                "enum MyEnum { Value1, Value2 } as byte",
                "byte enum MyEnum { Value1, Value2 }",
                "enum byte MyEnum { Value1, Value2 }"
            ],
            "answer": "enum MyEnum : byte { Value1, Value2 }",
            "explanation": "The underlying type of an enum can be specified after the colon in the enum declaration."
        },
        {
            "question": "Can an enum in C# contain duplicate values?",
            "options": [
                "Yes",
                "No",
                "Only if they are of different types",
                "Only if they are explicitly allowed"
            ],
            "answer": "No",
            "explanation": "Enums in C# cannot contain duplicate values. Each value in an enum must be unique."
        },
        {
            "question": "How do you assign a specific value to an enum member in C#?",
            "options": [
                "enum MyEnum { Value1 = 1, Value2 = 2 }",
                "enum MyEnum { Value1(1), Value2(2) }",
                "enum MyEnum { 1, 2 }",
                "enum MyEnum { Value1, Value2 } = { 1, 2 }"
            ],
            "answer": "enum MyEnum { Value1 = 1, Value2 = 2 }",
            "explanation": "Specific values can be assigned to enum members by using the equals sign followed by the value."
        },
        {
            "question": "What is the first value of an enum in C# if no value is explicitly assigned?",
            "options": [
                "0",
                "1",
                "null",
                "It generates a compile-time error"
            ],
            "answer": "0",
            "explanation": "If no value is explicitly assigned to the first member of an enum, its value defaults to 0."
        },
        {
            "question": "How can you convert an enum to its corresponding numeric value?",
            "options": [
                "(int)MyEnum.Value1",
                "Convert.ToInt32(MyEnum.Value1)",
                "MyEnum.Value1.ToInt()",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "An enum can be cast to its underlying type or converted using the Convert class."
        },
        {
            "question": "How do you define a flag enum in C#?",
            "options": [
                "enum MyEnum { Value1, Value2 } with flags",
                "enum MyEnum { Value1 = 1, Value2 = 2 } as flags",
                "[Flags] enum MyEnum { Value1 = 1, Value2 = 2 }",
                "enum MyEnum : Flags { Value1, Value2 }"
            ],
            "answer": "[Flags] enum MyEnum { Value1 = 1, Value2 = 2 }",
            "explanation": "A flag enum is defined by applying the [Flags] attribute and usually assigning values as powers of two."
        },
        {
            "question": "Can you use strings as enum values in C#?",
            "options": [
                "Yes",
                "No",
                "Only with the [Strings] attribute",
                "Only in a special type of enum"
            ],
            "answer": "No",
            "explanation": "Enums in C# must be integral types; string values are not allowed."
        },
        {
            "question": "What happens when you try to parse an invalid string to an enum in C#?",
            "options": [
                "It returns null",
                "It defaults to the first enum value",
                "It throws an exception",
                "It ignores the invalid value"
            ],
            "answer": "It throws an exception",
            "explanation": "Attempting to parse an invalid string to an enum using Enum.Parse will result in a runtime exception."
        },
        {
            "question": "Which namespace is commonly used for file handling in C#?",
            "options": [
                "System.IO",
                "System.File",
                "System.Data",
                "System.Text"
            ],
            "answer": "System.IO",
            "explanation": "The System.IO namespace contains types for handling files and data streams, making it the primary namespace used for file handling in C#."
        },
        {
            "question": "How do you create a text file in C#?",
            "options": [
                "File.CreateText(\"filename.txt\")",
                "File.New(\"filename.txt\")",
                "File.Create(\"filename.txt\")",
                "FileStream.Create(\"filename.txt\")"
            ],
            "answer": "File.CreateText(\"filename.txt\")",
            "explanation": "The File.CreateText method is used to create a new text file in C#. It returns a StreamWriter."
        },
        {
            "question": "What class is used to read text from a file in C#?",
            "options": [
                "FileReader",
                "File.Read",
                "StreamReader",
                "TextReader"
            ],
            "answer": "StreamReader",
            "explanation": "StreamReader is a class in the System.IO namespace used for reading text from files."
        },
        {
            "question": "Which method is used to write text to a file in C#?",
            "options": [
                "File.WriteText()",
                "StreamWriter.Write()",
                "File.AppendText()",
                "File.WriteAllLines()"
            ],
            "answer": "File.WriteAllLines()",
            "explanation": "File.WriteAllLines() writes a string array to a file, with each string as a line. For appending or continuous writing, StreamWriter can be used."
        },
        {
            "question": "How do you append text to an existing file in C#?",
            "options": [
                "File.Append(\"filename.txt\", \"text\")",
                "File.AppendText(\"filename.txt\")",
                "StreamWriter.Append(\"filename.txt\", \"text\")",
                "File.AppendAllText(\"filename.txt\", \"text\")"
            ],
            "answer": "File.AppendAllText(\"filename.txt\", \"text\")",
            "explanation": "File.AppendAllText method appends text to the end of an existing file."
        },
        {
            "question": "What is the purpose of the FileStream class in C#?",
            "options": [
                "To stream data to memory",
                "To read and write to a network stream",
                "To read from and write to files",
                "To serialize objects"
            ],
            "answer": "To read from and write to files",
            "explanation": "FileStream is used for reading from and writing to files as streams of bytes, providing control over byte positions in files."
        },
        {
            "question": "Which method checks for the existence of a file in C#?",
            "options": [
                "File.Exists(\"filename.txt\")",
                "File.Check(\"filename.txt\")",
                "File.IsPresent(\"filename.txt\")",
                "Directory.Exists(\"filename.txt\")"
            ],
            "answer": "File.Exists(\"filename.txt\")",
            "explanation": "File.Exists method is used to check if a file exists at a specified path."
        },
        {
            "question": "How do you copy a file in C#?",
            "options": [
                "File.CopyTo(\"source.txt\", \"destination.txt\")",
                "File.Copy(\"source.txt\", \"destination.txt\")",
                "FileStream.Copy(\"source.txt\", \"destination.txt\")",
                "StreamWriter.Copy(\"source.txt\", \"destination.txt\")"
            ],
            "answer": "File.Copy(\"source.txt\", \"destination.txt\")",
            "explanation": "The File.Copy method is used to copy a file to a new location."
        },
        {
            "question": "How do you delete a file in C#?",
            "options": [
                "File.Delete(\"filename.txt\")",
                "File.Remove(\"filename.txt\")",
                "File.Erase(\"filename.txt\")",
                "FileStream.Delete(\"filename.txt\")"
            ],
            "answer": "File.Delete(\"filename.txt\")",
            "explanation": "File.Delete method is used to delete a specified file."
        },
        {
            "question": "Which class is used to read and write binary files in C#?",
            "options": [
                "BinaryReader and BinaryWriter",
                "FileStream",
                "StreamReader and StreamWriter",
                "BufferedStream"
            ],
            "answer": "BinaryReader and BinaryWriter",
            "explanation": "BinaryReader and BinaryWriter are used for reading and writing binary data to and from files."
        },
        {
            "question": "How do you move a file in C#?",
            "options": [
                "File.MoveTo(\"source.txt\", \"destination.txt\")",
                "File.Move(\"source.txt\", \"destination.txt\")",
                "FileStream.Move(\"source.txt\", \"destination.txt\")",
                "StreamWriter.Move(\"source.txt\", \"destination.txt\")"
            ],
            "answer": "File.Move(\"source.txt\", \"destination.txt\")",
            "explanation": "The File.Move method is used to move a file to a new location."
        },
        {
            "question": "What is the use of the Path class in C#?",
            "options": [
                "To handle file paths and directories",
                "To create new paths in the file system",
                "To encrypt file paths",
                "To stream file paths"
            ],
            "answer": "To handle file paths and directories",
            "explanation": "The Path class in the System.IO namespace provides methods for manipulating file and directory paths."
        },
        {
            "question": "What exception is commonly associated with file handling errors in C#?",
            "options": [
                "IOException",
                "FileNotFoundException",
                "FileAccessException",
                "PathException"
            ],
            "answer": "IOException",
            "explanation": "IOException is a general exception that occurs when an I/O error happens during file handling operations."
        },
        {
            "question": "How can you read all lines of a text file into a string array in C#?",
            "options": [
                "File.ReadAllLines(\"filename.txt\")",
                "StreamReader.ReadAllLines(\"filename.txt\")",
                "FileStream.ReadAllLines(\"filename.txt\")",
                "File.ReadLines(\"filename.txt\")"
            ],
            "answer": "File.ReadAllLines(\"filename.txt\")",
            "explanation": "File.ReadAllLines reads all the lines of the specified file into a string array."
        },
        {
            "question": "Which method is used to read all text from a file in one go in C#?",
            "options": [
                "File.ReadAllText(\"filename.txt\")",
                "StreamReader.ReadToEnd(\"filename.txt\")",
                "FileStream.ReadAll(\"filename.txt\")",
                "File.ReadAll(\"filename.txt\")"
            ],
            "answer": "File.ReadAllText(\"filename.txt\")",
            "explanation": "File.ReadAllText reads all text from the file and returns it as a single string."
        }
    ],
    "PHP": [
        {
            "question": "What does PHP stand for?",
            "options": [
                "Personal Hypertext Preprocessor",
                "Public Home Page",
                "Preprocessed Hypertext Page",
                "PHP: Hypertext Preprocessor"
            ],
            "answer": "PHP: Hypertext Preprocessor",
            "explanation": "PHP originally stood for “Personal Home Page”, but it now stands for the recursive acronym “PHP: Hypertext Preprocessor.”"
        },
        {
            "question": "Who is often referred to as the father of PHP?",
            "options": [
                "Mark Zuckerberg",
                "Rasmus Lerdorf",
                "Larry Page",
                "Linus Torvalds"
            ],
            "answer": "Rasmus Lerdorf",
            "explanation": "Rasmus Lerdorf originally developed PHP in 1994. While others have since contributed and it has evolved, Rasmus is often recognized as the father of PHP due to his foundational work on the language."
        },
        {
            "question": "Which of the options below represents the default file extension for PHP scripts?",
            "options": [
                ".ph",
                ".php5",
                ".phtml",
                ".php"
            ],
            "answer": ".php",
            "explanation": "While PHP files can occasionally be seen with extensions like .phtml or .php5 depending on the configuration or the context, the standard and most common default file extension for PHP scripts is .php."
        },
        {
            "question": "What will the following code print?",
            "options": [
                "HelloWorld!",
                "Hello World!",
                "Hello.World!",
                "Error"
            ],
            "answer": "Hello World!",
            "explanation": "The . (dot) operator is used for string concatenation in PHP."
        },
        {
            "question": "Which symbol is used to declare a variable in PHP?",
            "options": [
                "!",
                "&",
                "%",
                "$"
            ],
            "answer": "$",
            "explanation": "In PHP, variables are declared with the $ symbol."
        },
        {
            "question": "How can you define a constant in PHP?",
            "options": [
                "using the const keyword",
                "using the define() function",
                "using the $ symbol",
                "both a and b"
            ],
            "answer": "both a and b",
            "explanation": "Constants in PHP can be defined using either the define() function or the const keyword."
        },
        {
            "question": "Which of the following loops will execute the code block at least once and then evaluate the condition for subsequent repetitions?",
            "options": [
                "do…while",
                "for",
                "foreach",
                "while"
            ],
            "answer": "do…while",
            "explanation": "In the do…while loop, the code block gets executed once before the condition is checked. It then continues to execute as long as the condition is true."
        },
        {
            "question": "Which loop is most appropriate for iterating over the elements of an array in PHP?",
            "options": [
                "for",
                "while",
                "do…while",
                "foreach"
            ],
            "answer": "foreach",
            "explanation": "The foreach loop is specifically designed for iterating over arrays in PHP. It provides an easy way to access both keys and values."
        },
        {
            "question": "How can you break out of a loop prematurely in PHP?",
            "options": [
                "Using the stop keyword",
                "Using the break keyword",
                "Using the exit keyword",
                "Using the terminate keyword"
            ],
            "answer": "Using the break keyword",
            "explanation": "The break keyword is used to exit a loop prematurely in PHP."
        },
        {
            "question": "Which statement is used to skip the current iteration of a loop and continue with the next one in PHP?",
            "options": [
                "skip",
                "jump",
                "continue",
                "next"
            ],
            "answer": "continue",
            "explanation": "The continue statement is used to skip the current iteration of a loop and proceed to the next one."
        },
        {
            "question": "For a loop like for($i=0; $i<5; $i++),how many times will the loop execute?",
            "options": [
                "4 times",
                "5 times",
                "6 times",
                "0 times"
            ],
            "answer": "5 times",
            "explanation": "The loop starts with $i at 0 and runs until $i is less than 5. So, it will run for 0, 1, 2, 3, and 4, which is a total of 5 times."
        },
        {
            "question": "What is the primary purpose of the foreach loop in PHP?",
            "options": [
                "Iterating only over numeric arrays",
                "Iterating over properties of an object",
                "Iterating over keys and/or values of an array",
                "Iterating a fixed number of times"
            ],
            "answer": "Iterating over keys and/or values of an array",
            "explanation": "The primary purpose of the foreach loop in PHP is to iterate over the keys and/or values of an array."
        },
        {
            "question": "If you want to loop indefinitely until a certain condition is met, which loop can you use?",
            "options": [
                "for",
                "while",
                "do…while",
                "Any of the above"
            ],
            "answer": "Any of the above",
            "explanation": "Any loop (for, while, or do…while) can be used to loop indefinitely until a specific condition is met, though it’s commonly achieved using while."
        },
        {
            "question": "Which function can be used to check if a function exists in PHP?",
            "options": [
                "func_exist()",
                "is_function()",
                "function_exists()",
                "check_function()"
            ],
            "answer": "function_exists()",
            "explanation": "The function_exists() function checks if a given function has been defined."
        },
        {
            "question": "How can you count the number of elements in an array $arr?",
            "options": [
                "count($arr)",
                "sizeof($arr)",
                "$arr->length",
                "both a and b"
            ],
            "answer": "both a and b",
            "explanation": "Both count() and sizeof() can be used to find the number of elements in an array."
        },
        {
            "question": "Which of the following functions is used to replace a string?",
            "options": [
                "str_replace()",
                "str_swap()",
                "replace_string()",
                "swap_str()"
            ],
            "answer": "str_replace()",
            "explanation": "The str_replace() function is used for string replacement in PHP."
        },
        {
            "question": "Which keyword is used to inherit a class in PHP?",
            "options": [
                "inherit",
                "extends",
                "implements",
                "uses"
            ],
            "answer": "extends",
            "explanation": "In PHP, the extends keyword is used to create a class that inherits the properties and methods from another class."
        },
        {
            "question": "What is the main purpose of constructors in PHP OOP?",
            "options": [
                "To destroy an object once it’s no longer needed.",
                "To initiate an object’s properties when an object is created.",
                "To clone an existing object.",
                "To make the final changes before the object is destroyed."
            ],
            "answer": "To initiate an object’s properties when an object is created.",
            "explanation": "Constructors are special methods that get automatically invoked when an object is instantiated. Their primary purpose is to initialize the object’s properties or to perform actions needed to set up the object."
        },
        {
            "question": "Which keyword is used in PHP to create an instance of a class (an object)?",
            "options": [
                "create",
                "instantiate",
                "new",
                "instance"
            ],
            "answer": "new",
            "explanation": "The new keyword is used to create an instance of a class, i.e., an object."
        },
        {
            "question": "Which of the following statements about interfaces in PHP is true?",
            "options": [
                "Interfaces can have properties.",
                "Interfaces can have both abstract and concrete methods.",
                "Interfaces can be instantiated.",
                "All methods declared in an interface are implicitly abstract."
            ],
            "answer": "All methods declared in an interface are implicitly abstract.",
            "explanation": "In PHP, interfaces can only have abstract methods, which means they cannot have any concrete methods with a body."
        },
        {
            "question": "In PHP OOP, what is the purpose of the final keyword when used with a class?",
            "options": [
                "The class cannot be extended.",
                "The class becomes an abstract class.",
                "The class can no longer be instantiated.",
                "The class becomes a parent class."
            ],
            "answer": "The class cannot be extended.",
            "explanation": "When the final keyword is used before a class, it means that the class cannot be extended by any other class."
        },
        {
            "question": "What is “polymorphism” in the context of PHP OOP?",
            "options": [
                "The ability of a class to inherit properties and methods from multiple classes.",
                "The process of using the same method in different ways for different data inputs.",
                "The encapsulation of properties and methods within a single class.",
                "The act of representing an abstract concept in the form of a class."
            ],
            "answer": "The process of using the same method in different ways for different data inputs.",
            "explanation": "Polymorphism refers to the ability of OOP to present the same interface for differing data types. It allows the same method to be used in different ways for different inputs."
        },
        {
            "question": "Which of the following PHP keywords is used to define an abstract class?",
            "options": [
                "polymorphic",
                "interface",
                "virtual",
                "abstract"
            ],
            "answer": "abstract",
            "explanation": "The abstract keyword is used to declare a class as abstract. Abstract classes cannot be instantiated directly, and they can contain abstract methods, which are methods without a body."
        },
        {
            "question": "What does the “overloading” concept in OOP PHP refer to?",
            "options": [
                "Redefining a method in a child class that is already present in the parent class.",
                "Loading an object multiple times into memory.",
                "Using the same method name but with a different number or type of parameters.",
                "Increasing the memory allocated to an object during runtime."
            ],
            "answer": "Using the same method name but with a different number or type of parameters.",
            "explanation": "In the context of OOP, overloading refers to the ability to use the same method or function name with different parameters."
        },
        {
            "question": "If a class does not want to allow other classes to inherit from it, which keyword should it use?",
            "options": [
                "sealed",
                "final",
                "abstract",
                "noninherit"
            ],
            "answer": "final",
            "explanation": "In PHP, a class can be declared as final to prevent inheritance."
        },
        {
            "question": "Which PHP function is used to read a file into an array?",
            "options": [
                "file_into_array()",
                "readfile()",
                "file()",
                "read_into_array()"
            ],
            "answer": "file()",
            "explanation": "The file() function in PHP reads a file into an array, with each line of the file as a separate element of the array."
        },
        {
            "question": "Which function in PHP is used to check if a file exists?",
            "options": [
                "is_file_exists()",
                "file_exists()",
                "exists_file()",
                "check_file()"
            ],
            "answer": "file_exists()",
            "explanation": "The file_exists() function checks if the given file or directory exists."
        },
        {
            "question": "Which of the following is NOT a valid PHP exception handling method?",
            "options": [
                "throw",
                "catch",
                "try",
                "error"
            ],
            "answer": "error",
            "explanation": "In PHP, exceptions are handled using the try, catch, and throw methods. error is not a method used for exception handling."
        },
        {
            "question": "To handle user-defined exceptions, you should:",
            "options": [
                "Use a predefined PHP exception class",
                "Extend the base exception class",
                "Use the error() function",
                "None of the above"
            ],
            "answer": "Extend the base exception class",
            "explanation": "For user-defined exceptions, one should extend the base exception class and create custom exception classes as needed."
        },
        {
            "question": "Which of the following PHP functions will output $x to the output buffer?",
            "options": [
                "print()",
                "echo",
                "output()",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "In PHP, both print() and echo can be used to output values to the output buffer."
        },
        {
            "question": "Which PHP function returns the current timestamp?",
            "options": [
                "time_now()",
                "timestamp()",
                "current_time()",
                "time()"
            ],
            "answer": "time()",
            "explanation": "The time() function in PHP returns the current Unix timestamp."
        },
        {
            "question": "Which function in PHP returns a part of a string?",
            "options": [
                "str_part()",
                "substr()",
                "part_string()",
                "string_cut()"
            ],
            "answer": "substr()",
            "explanation": "The substr() function in PHP returns a part of a string."
        },
        {
            "question": "Which of the following delimiter is often used in regular expressions in PHP?",
            "options": [
                "{}",
                "[]",
                "()",
                "//"
            ],
            "answer": "//",
            "explanation": "In PHP, the // delimiters are often used to enclose regular expressions."
        },
        {
            "question": "What does the end() function do in PHP for an array?",
            "options": [
                "Resets the pointer to the beginning",
                "Advances the pointer to the last element",
                "Checks the end value of an array",
                "None of the above"
            ],
            "answer": "Advances the pointer to the last element",
            "explanation": "The end() function in PHP moves the internal pointer of an array to its last element."
        },
        {
            "question": "Which function can be used to sort an array in descending order in PHP?",
            "options": [
                "sort_desc()",
                "rsort()",
                "sort_reverse()",
                "d_sort()"
            ],
            "answer": "rsort()",
            "explanation": "The rsort() function sorts an array in descending order."
        },
        {
            "question": "Which keyword is used to declare a class property as protected, meaning it can be accessed within the class itself and by its child or parent classes?",
            "options": [
                "private",
                "public",
                "protected",
                "internal"
            ],
            "answer": "protected",
            "explanation": "In PHP, the protected keyword is used to declare properties or methods that can be accessed within the class and by its child or parent classes."
        },
        {
            "question": "What is the main difference between an interface and an abstract class in PHP?",
            "options": [
                "An interface can have properties, while an abstract class cannot",
                "An abstract class can have concrete methods, while an interface cannot",
                "An interface can be instantiated, but an abstract class cannot",
                "There’s no difference; they can be used interchangeably"
            ],
            "answer": "An abstract class can have concrete methods, while an interface cannot",
            "explanation": "In PHP, an abstract class can have both abstract and concrete methods, whereas an interface can only have abstract methods."
        },
        {
            "question": "What function in PHP is used to open a file for reading only?",
            "options": [
                "fopen_read()",
                "file_open_read()",
                "fread()",
                "fopen(‘filename’, ‘r’)"
            ],
            "answer": "fopen(‘filename’, ‘r’)",
            "explanation": "The fopen() function with the ‘r’ parameter is used to open a file for reading only."
        },
        {
            "question": "Which PHP function can be used to write to an open file?",
            "options": [
                "fput()",
                "fwrite()",
                "write_file()",
                "fappend()"
            ],
            "answer": "fwrite()",
            "explanation": "The fwrite() function in PHP can be used to write to an open file."
        },
        {
            "question": "Which function sets a user-defined error handler function?",
            "options": [
                "set_error_function()",
                "user_error_handler()",
                "set_error_handler()",
                "define_error_handler()"
            ],
            "answer": "set_error_handler()",
            "explanation": "The set_error_handler() function allows you to define a custom error handler method."
        },
        {
            "question": "In exception handling in PHP, which keyword is used to “catch” exceptions?",
            "options": [
                "grab",
                "except",
                "catch",
                "handle"
            ],
            "answer": "catch",
            "explanation": "In PHP’s exception handling, the catch block is used to catch exceptions thrown by the throw keyword."
        },
        {
            "question": "What symbol is used to denote a variable in PHP?",
            "options": [
                "$",
                "@",
                "#",
                "%"
            ],
            "answer": "$",
            "explanation": "In PHP, a variable starts with the $ symbol, followed by the name of the variable."
        },
        {
            "question": "Which of the following is a valid variable name in PHP?",
            "options": [
                "1variable",
                "_variable",
                "variable-1",
                "variable?"
            ],
            "answer": "_variable",
            "explanation": "A valid PHP variable name starts with a letter or underscore, followed by any number of letters, numbers, or underscores."
        },
        {
            "question": "How is a variable with a string value declared in PHP?",
            "options": [
                "$var = \"Hello\";",
                "$var = 'Hello';",
                "Both a) and b)",
                "None of the above"
            ],
            "answer": "Both a) and b)",
            "explanation": "In PHP, string values can be declared with either single or double quotes."
        },
        {
            "question": "Which of the following is the correct way to declare a constant in PHP?",
            "options": [
                "$const NAME = \"Value\";",
                "define(\"NAME\", \"Value\");",
                "constant NAME = \"Value\";",
                "const NAME = \"Value\";"
            ],
            "answer": "define(\"NAME\", \"Value\");",
            "explanation": "In PHP, constants are declared using the define() function."
        },
        {
            "question": "What is the scope of a variable declared outside of any function in PHP?",
            "options": [
                "Local",
                "Global",
                "Static",
                "None of the above"
            ],
            "answer": "Global",
            "explanation": "Variables declared outside any function have a global scope in PHP."
        },
        {
            "question": "In PHP, which of the following is a superglobal variable?",
            "options": [
                "$_GET",
                "$_SESSION",
                "$_COOKIE",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "$_GET, $_SESSION, and $_COOKIE are all examples of superglobal variables in PHP."
        },
        {
            "question": "What is the correct way to check if a variable is set in PHP?",
            "options": [
                "isset($var)",
                "is_set($var)",
                "set($var)",
                "$var != null"
            ],
            "answer": "isset($var)",
            "explanation": "The isset() function is used to check if a variable is set and is not NULL."
        },
        {
            "question": "Which of the following is a valid way to increment a variable in PHP?",
            "options": [
                "++$var",
                "$var++",
                "$var += 1",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "All the options are valid ways to increment a variable's value by 1 in PHP."
        },
        {
            "question": "How are arrays declared in PHP?",
            "options": [
                "$array = array(1, 2, 3);",
                "$array = [1, 2, 3];",
                "Both a) and b)",
                "None of the above"
            ],
            "answer": "Both a) and b)",
            "explanation": "Arrays in PHP can be declared using either the array() function or the short array syntax []."
        },
        {
            "question": "What is the purpose of the global keyword in PHP functions?",
            "options": [
                "To create a global variable",
                "To access a global variable inside a function",
                "To declare a function as global",
                "None of the above"
            ],
            "answer": "To access a global variable inside a function",
            "explanation": "The global keyword is used inside a function to access a variable that is defined in the global scope."
        },
        {
            "question": "Which of the following is used to output one or more strings in PHP?",
            "options": [
                "echo",
                "print",
                "Both a) and b)",
                "None of the above"
            ],
            "answer": "Both a) and b)",
            "explanation": "Both echo and print are used to output strings in PHP."
        },
        {
            "question": "What is the main difference between echo and print?",
            "options": [
                "echo can output multiple strings, print cannot",
                "print returns a value, echo does not",
                "echo is faster than print",
                "Both a) and b)"
            ],
            "answer": "Both a) and b)",
            "explanation": "echo can accept multiple arguments whereas print can only handle one, and print always returns 1, unlike echo."
        },
        {
            "question": "How do you output a variable and a string together using echo?",
            "options": [
                "echo \"$variable string\";",
                "echo $variable + \"string\";",
                "echo $variable . \"string\";",
                "echo ($variable \"string\");"
            ],
            "answer": "echo $variable . \"string\";",
            "explanation": "The . operator is used for string concatenation in PHP."
        },
        {
            "question": "Which of the following is a correct way to use echo?",
            "options": [
                "echo(\"Hello World\");",
                "echo \"Hello World\";",
                "Both a) and b)",
                "None of the above"
            ],
            "answer": "Both a) and b)",
            "explanation": "echo can be used with or without parentheses."
        },
        {
            "question": "What is the correct way to output HTML tags using print?",
            "options": [
                "print \"<h1>Hello World</h1>\";",
                "print (\"<h1>Hello World</h1>\");",
                "Both a) and b)",
                "None of the above"
            ],
            "answer": "Both a) and b)",
            "explanation": "print can output HTML tags either directly or within parentheses."
        },
        {
            "question": "How can you output multiple strings using echo?",
            "options": [
                "echo \"string1\", \"string2\";",
                "echo \"string1\" + \"string2\";",
                "echo \"string1\" . \"string2\";",
                "echo \"string1 string2\";"
            ],
            "answer": "echo \"string1\", \"string2\";",
            "explanation": "echo can take multiple parameters separated by commas to output strings consecutively."
        },
        {
            "question": "What is the output of print('Hello' . ' ' . 'World')?",
            "options": [
                "Hello World",
                "HelloWorld",
                "Error",
                "1"
            ],
            "answer": "Hello World",
            "explanation": "The . operator concatenates strings, and print outputs the concatenated string."
        },
        {
            "question": "Which statement is true about echo and print?",
            "options": [
                "echo and print can both be used in expressions",
                "print can be used in expressions, but echo cannot",
                "echo can be used in expressions, but print cannot",
                "Neither can be used in expressions"
            ],
            "answer": "print can be used in expressions, but echo cannot",
            "explanation": "print returns a value, so it can be used in expressions, unlike echo."
        },
        {
            "question": "What will the following PHP code output: echo 10 + 20;",
            "options": [
                "1020",
                "30",
                "Error",
                "Nothing"
            ],
            "answer": "30",
            "explanation": "echo outputs the result of the arithmetic operation, which is 30 in this case."
        },
        {
            "question": "Which of the following is a valid use of print in PHP?",
            "options": [
                "$result = print \"Hello World\";",
                "$result = print (\"Hello World\");",
                "Both a) and b)",
                "None of the above"
            ],
            "answer": "Both a) and b)",
            "explanation": "print can be used in this way and will assign the value 1 to $result."
        },
        {
            "question": "Can echo be used to output the value of an array directly?",
            "options": [
                "Yes",
                "No",
                "Only with associative arrays",
                "Only with numeric arrays"
            ],
            "answer": "No",
            "explanation": "echo cannot output array values directly; it only works with strings and numbers."
        },
        {
            "question": "What is the output of the following code: print \"Hello\" . \"World\";",
            "options": [
                "Hello World",
                "HelloWorld",
                "Error",
                "1"
            ],
            "answer": "HelloWorld",
            "explanation": "The . operator concatenates the strings without adding any space."
        },
        {
            "question": "How can you output a newline character using echo?",
            "options": [
                "echo \"\\n\";",
                "echo \"\\\\n\";",
                "echo '/n';",
                "echo '//n';"
            ],
            "answer": "echo \"\\n\";",
            "explanation": "In double-quoted strings, \\n represents a newline character."
        },
        {
            "question": "What is the result of using print in a ternary operator like this: $result = (true ? print \"Yes\" : print \"No\");",
            "options": [
                "Yes",
                "No",
                "1",
                "An error"
            ],
            "answer": "Yes",
            "explanation": "The ternary operation evaluates to true, so print \"Yes\" is executed."
        },
        {
            "question": "Can echo and print be used interchangeably without affecting the output?",
            "options": [
                "Yes, always",
                "No, never",
                "Only in simple strings",
                "Only in complex strings"
            ],
            "answer": "Only in simple strings",
            "explanation": "In simple strings without the need for a return value or multiple arguments, echo and print can often be used interchangeably."
        },
        {
            "question": "Which of the following is a scalar data type in PHP?",
            "options": [
                "Array",
                "Object",
                "Boolean",
                "NULL"
            ],
            "answer": "Boolean",
            "explanation": "Boolean is a scalar data type in PHP, representing two possible values: true or false."
        },
        {
            "question": "What data type is used for textual data in PHP?",
            "options": [
                "String",
                "Char",
                "Text",
                "Varchar"
            ],
            "answer": "String",
            "explanation": "In PHP, textual data is represented as a string."
        },
        {
            "question": "Which of the following is a compound data type in PHP?",
            "options": [
                "Integer",
                "Float",
                "Array",
                "Boolean"
            ],
            "answer": "Array",
            "explanation": "Array is a compound data type in PHP, which can hold multiple values of different data types."
        },
        {
            "question": "How is an integer value defined in PHP?",
            "options": [
                "Int 10",
                "10",
                "\"10\"",
                "10.0"
            ],
            "answer": "10",
            "explanation": "Integers in PHP are non-decimal numbers without any quotes."
        },
        {
            "question": "What is the correct way to define a floating-point number in PHP?",
            "options": [
                "1.234",
                "\"1.234\"",
                "float(1.234)",
                "1234e-3"
            ],
            "answer": "1.234",
            "explanation": "A floating-point number in PHP is defined as a number with a decimal point."
        },
        {
            "question": "How is a Boolean TRUE value represented in PHP?",
            "options": [
                "1",
                "TRUE",
                "true",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "In PHP, a Boolean TRUE value can be represented as 1, TRUE, or true."
        },
        {
            "question": "What data type does the following PHP variable belong to: $var = \"Hello World!\";",
            "options": [
                "String",
                "Integer",
                "Float",
                "Array"
            ],
            "answer": "String",
            "explanation": "The variable $var is a string because it contains textual data enclosed in quotes."
        },
        {
            "question": "Which of the following data types does not exist in PHP?",
            "options": [
                "Double",
                "Short",
                "Integer",
                "NULL"
            ],
            "answer": "Short",
            "explanation": "PHP does not have a data type called Short. It supports Integer, Double, and NULL."
        },
        {
            "question": "What is the data type of a variable that has been assigned the value NULL in PHP?",
            "options": [
                "String",
                "Integer",
                "NULL",
                "Boolean"
            ],
            "answer": "NULL",
            "explanation": "A variable that is assigned the value NULL belongs to the NULL data type."
        },
        {
            "question": "In PHP, what data type is an associative array?",
            "options": [
                "String",
                "Array",
                "Object",
                "Resource"
            ],
            "answer": "Array",
            "explanation": "Both indexed and associative arrays in PHP are of the Array data type."
        },
        {
            "question": "Which of the following is a special data type in PHP?",
            "options": [
                "Resource",
                "Constant",
                "Function",
                "Variable"
            ],
            "answer": "Resource",
            "explanation": "The Resource type in PHP is a special data type used to store references to external resources."
        },
        {
            "question": "How does PHP treat variables of type Integer and Float during arithmetic operations?",
            "options": [
                "It converts integers to floats",
                "It converts floats to integers",
                "It throws an error",
                "It depends on the operation"
            ],
            "answer": "It converts integers to floats",
            "explanation": "PHP automatically converts integers to floats as needed during arithmetic operations."
        },
        {
            "question": "What is the output of var_dump(is_int(25.5)) in PHP?",
            "options": [
                "true",
                "false",
                "1",
                "NULL"
            ],
            "answer": "false",
            "explanation": "is_int() checks whether a variable is of type integer. 25.5 is a float, not an integer."
        },
        {
            "question": "Which of the following values is considered FALSE in PHP?",
            "options": [
                "0",
                "\"0\"",
                "[]",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "In PHP, 0, \"0\", and an empty array are considered as FALSE in a Boolean context."
        },
        {
            "question": "What is the result of gettype(12345.678) in PHP?",
            "options": [
                "\"Integer\"",
                "\"Double\"",
                "\"Float\"",
                "\"Numeric\""
            ],
            "answer": "\"Double\"",
            "explanation": "In PHP, floating-point numbers are considered as type \"Double\"."
        },
        {
            "question": "Which function is used to find the length of a string in PHP?",
            "options": [
                "strlen()",
                "strlength()",
                "length()",
                "len()"
            ],
            "answer": "strlen()",
            "explanation": "The strlen() function is used to find the length of a string in PHP."
        },
        {
            "question": "How do you concatenate two strings in PHP?",
            "options": [
                "Using the + operator",
                "Using the . operator",
                "Using the & operator",
                "Using the && operator"
            ],
            "answer": "Using the . operator",
            "explanation": "The . operator is used for string concatenation in PHP."
        },
        {
            "question": "Which of the following is the correct way to declare a string in PHP?",
            "options": [
                "$string = 'Hello World';",
                "$string = \"Hello World\";",
                "Both a) and b)",
                "None of the above"
            ],
            "answer": "Both a) and b)",
            "explanation": "In PHP, strings can be declared with either single quotes or double quotes."
        },
        {
            "question": "What is the output of the following PHP code? $str = \"Hello\"; echo $str[1];",
            "options": [
                "H",
                "e",
                "l",
                "o"
            ],
            "answer": "e",
            "explanation": "Strings in PHP are zero-indexed. $str[1] refers to the second character, which is 'e'."
        },
        {
            "question": "How do you replace 'world' with 'PHP' in the string 'Hello world' using PHP?",
            "options": [
                "replace('world', 'PHP', 'Hello world');",
                "str_replace('world', 'PHP', 'Hello world');",
                "substr_replace('Hello world', 'PHP', 5);",
                "None of the above"
            ],
            "answer": "str_replace('world', 'PHP', 'Hello world');",
            "explanation": "The str_replace() function is used for string replacement in PHP."
        },
        {
            "question": "Which function is used to reverse a string in PHP?",
            "options": [
                "reverse()",
                "strreverse()",
                "strrev()",
                "revstr()"
            ],
            "answer": "strrev()",
            "explanation": "The strrev() function is used to reverse a string in PHP."
        },
        {
            "question": "How can you convert a string to lowercase in PHP?",
            "options": [
                "strtolower()",
                "tolower()",
                "lower()",
                "strlower()"
            ],
            "answer": "strtolower()",
            "explanation": "The strtolower() function is used to convert a string to lowercase in PHP."
        },
        {
            "question": "What does the strpos() function do in PHP?",
            "options": [
                "Splits a string",
                "Replaces part of a string",
                "Finds the position of the first occurrence of a substring in a string",
                "Counts the number of characters in a string"
            ],
            "answer": "Finds the position of the first occurrence of a substring in a string",
            "explanation": "The strpos() function is used to find the position of the first occurrence of a specified substring in a string."
        },
        {
            "question": "Which of the following is not a valid way to declare a multiline string in PHP?",
            "options": [
                "Using single quotes",
                "Using double quotes",
                "Using heredoc syntax",
                "Using nowdoc syntax"
            ],
            "answer": "Using single quotes",
            "explanation": "Multiline strings can be declared using double quotes, heredoc, or nowdoc syntax, but not with single quotes."
        },
        {
            "question": "What is the output of the following code? $str = \"Hello\"; echo strtoupper($str);",
            "options": [
                "hello",
                "Hello",
                "HELLO",
                "HeLlO"
            ],
            "answer": "HELLO",
            "explanation": "strtoupper() converts all characters in a string to uppercase."
        },
        {
            "question": "How do you access the last character of a string in PHP?",
            "options": [
                "$str[-1]",
                "$str[strlen($str) – 1]",
                "$str->last()",
                "end($str)"
            ],
            "answer": "$str[strlen($str) – 1]",
            "explanation": "$str[strlen($str) – 1] will return the last character of the string."
        },
        {
            "question": "Which function is used to split a string into an array in PHP?",
            "options": [
                "split()",
                "explode()",
                "divide()",
                "break()"
            ],
            "answer": "explode()",
            "explanation": "The explode() function is used to split a string by a delimiter into an array."
        },
        {
            "question": "How do you trim whitespace from the beginning and end of a string in PHP?",
            "options": [
                "trim()",
                "rtrim()",
                "ltrim()",
                "strtrim()"
            ],
            "answer": "trim()",
            "explanation": "The trim() function removes whitespace from the beginning and end of a string."
        },
        {
            "question": "What does the substr() function do in PHP?",
            "options": [
                "Finds a substring in a string",
                "Replaces a substring in a string",
                "Returns part of a string",
                "Converts a substring to uppercase"
            ],
            "answer": "Returns part of a string",
            "explanation": "The substr() function is used to return a part of a string."
        },
        {
            "question": "Which of the following characters is used to escape special characters in a string in PHP?",
            "options": [
                "!",
                "&",
                "\\",
                "%"
            ],
            "answer": "\\",
            "explanation": "The backslash (\\) is used to escape special characters in a string in PHP."
        },
        {
            "question": "What is the largest integer value supported in 64-bit PHP?",
            "options": [
                "2^31 – 1",
                "2^63 – 1",
                "9,223,372,036,854,775,807",
                "4,294,967,295"
            ],
            "answer": "2^63 – 1",
            "explanation": "In a 64-bit version of PHP, the largest integer is 2^63 – 1."
        },
        {
            "question": "How is a hexadecimal number specified in PHP?",
            "options": [
                "0x followed by the number",
                "# followed by the number",
                "0h followed by the number",
                "Hex followed by the number"
            ],
            "answer": "0x followed by the number",
            "explanation": "Hexadecimal numbers are specified with a leading 0x in PHP."
        },
        {
            "question": "What function checks if a variable is a number or a numeric string in PHP?",
            "options": [
                "is_num()",
                "is_numeric()",
                "is_number()",
                "is_integer()"
            ],
            "answer": "is_numeric()",
            "explanation": "The is_numeric() function checks if a variable is a number or a numeric string."
        },
        {
            "question": "How do you convert a string to an integer in PHP?",
            "options": [
                "intval()",
                "(int)",
                "parse_int()",
                "Both a) and b)"
            ],
            "answer": "Both a) and b)",
            "explanation": "intval() and casting with (int) are both used to convert a string to an integer."
        },
        {
            "question": "What is the result of the expression 0.1 + 0.2 in PHP?",
            "options": [
                "0.3",
                "0.30000000000000004",
                "0.2",
                "0.4"
            ],
            "answer": "0.30000000000000004",
            "explanation": "Due to floating-point precision, the sum of 0.1 and 0.2 may not exactly equal 0.3."
        },
        {
            "question": "Which function can be used to format a number with grouped thousands in PHP?",
            "options": [
                "number_format()",
                "format_number()",
                "group_number()",
                "thousand_format()"
            ],
            "answer": "number_format()",
            "explanation": "The number_format() function is used to format numbers with grouped thousands."
        },
        {
            "question": "What is the output of the following PHP code? echo (int)(8.9);",
            "options": [
                "8",
                "9",
                "8.9",
                "Error"
            ],
            "answer": "8",
            "explanation": "Casting a float to an int in PHP truncates the decimal part."
        },
        {
            "question": "How do you define a float number in scientific notation in PHP?",
            "options": [
                "1.2E4",
                "1.2e4",
                "Both a) and b)",
                "1.2 * 10^4"
            ],
            "answer": "Both a) and b)",
            "explanation": "Scientific notation in PHP can be written using either uppercase E or lowercase e."
        },
        {
            "question": "What is the purpose of the PHP function round()?",
            "options": [
                "To round a number to its nearest integer",
                "To round a number to a specified number of decimal points",
                "Both a) and b)",
                "To eliminate the decimal part of a number"
            ],
            "answer": "Both a) and b)",
            "explanation": "round() can round a number to its nearest integer or to a specified number of decimal points."
        },
        {
            "question": "How does PHP handle arithmetic operations on an integer that exceed its maximum value?",
            "options": [
                "It causes an overflow error",
                "It wraps around to the minimum value",
                "It converts the number to a float",
                "It returns NULL"
            ],
            "answer": "It converts the number to a float",
            "explanation": "PHP automatically converts integers to floats when they exceed their maximum value."
        },
        {
            "question": "What is the output of the PHP expression var_dump(0123)?",
            "options": [
                "int(123)",
                "int(83)",
                "string(4) \"0123\"",
                "NULL"
            ],
            "answer": "int(83)",
            "explanation": "Numbers starting with 0 are interpreted as octal numbers. 0123 in octal is equivalent to 83 in decimal."
        },
        {
            "question": "Which function checks whether a variable is a float in PHP?",
            "options": [
                "is_float()",
                "is_double()",
                "is_real()",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "is_float(), is_double(), and is_real() are all equivalent and check if a variable is of type float."
        },
        {
            "question": "What is the maximum number of decimal digits guaranteed to be preserved in float operations in PHP?",
            "options": [
                "13",
                "14",
                "15",
                "16"
            ],
            "answer": "14",
            "explanation": "PHP guarantees that at least 14 decimal digits can be preserved in float operations."
        },
        {
            "question": "What is the result of the following PHP code? echo gettype(10.0);",
            "options": [
                "integer",
                "double",
                "float",
                "number"
            ],
            "answer": "double",
            "explanation": "In PHP, floating-point numbers are of the type double."
        },
        {
            "question": "Which PHP function will return a string representation of a number in binary format?",
            "options": [
                "decbin()",
                "bindec()",
                "hexbin()",
                "bin2hex()"
            ],
            "answer": "decbin()",
            "explanation": "The decbin() function converts a decimal number to a binary string."
        },
        {
            "question": "Which function is used to calculate the absolute value of a number in PHP?",
            "options": [
                "abs()",
                "fabs()",
                "absolute()",
                "mod()"
            ],
            "answer": "abs()",
            "explanation": "The abs() function is used to calculate the absolute value of a number in PHP."
        },
        {
            "question": "How do you generate a random number between 5 and 15 in PHP?",
            "options": [
                "rand(5, 15)",
                "random(5, 15)",
                "mt_rand(5, 15)",
                "Both a) and c)"
            ],
            "answer": "Both a) and c)",
            "explanation": "Both rand() and mt_rand() can be used to generate a random number in the specified range."
        },
        {
            "question": "Which function is used to round a float to the nearest integer in PHP?",
            "options": [
                "round()",
                "floor()",
                "ceil()",
                "int()"
            ],
            "answer": "round()",
            "explanation": "The round() function is used to round a float to the nearest integer."
        },
        {
            "question": "What is the result of the expression pow(2, 3) in PHP?",
            "options": [
                "5",
                "6",
                "8",
                "9"
            ],
            "answer": "8",
            "explanation": "pow(2, 3) calculates 2 raised to the power of 3, which is 8."
        },
        {
            "question": "How do you calculate the square root of a number in PHP?",
            "options": [
                "sqrt()",
                "square()",
                "root()",
                "pow()"
            ],
            "answer": "sqrt()",
            "explanation": "The sqrt() function is used to calculate the square root of a number."
        },
        {
            "question": "What does the PHP function fmod() do?",
            "options": [
                "Finds the modulus of two numbers",
                "Rounds a float to the nearest integer",
                "Formats a number",
                "Converts a number to float"
            ],
            "answer": "Finds the modulus of two numbers",
            "explanation": "fmod() returns the floating-point remainder (modulus) of the division of the arguments."
        },
        {
            "question": "Which function would you use to format a number with thousands separators in PHP?",
            "options": [
                "number_format()",
                "format_number()",
                "sep_number()",
                "thousands_sep()"
            ],
            "answer": "number_format()",
            "explanation": "number_format() is used to format a number with grouped thousands."
        },
        {
            "question": "How do you calculate the natural logarithm of a number in PHP?",
            "options": [
                "log()",
                "ln()",
                "logn()",
                "natural_log()"
            ],
            "answer": "log()",
            "explanation": "The log() function is used to calculate the natural logarithm of a number."
        },
        {
            "question": "What is the purpose of the PHP function ceil()?",
            "options": [
                "Rounds a number down to the nearest integer",
                "Rounds a number up to the nearest integer",
                "Rounds a number to a specified number of decimal points",
                "Finds the ceiling value of a number"
            ],
            "answer": "Rounds a number up to the nearest integer",
            "explanation": "ceil() rounds a number up to the next highest integer."
        },
        {
            "question": "Which function in PHP is used to get the highest value in an array?",
            "options": [
                "max()",
                "min()",
                "highest()",
                "top()"
            ],
            "answer": "max()",
            "explanation": "The max() function is used to find the highest value in an array."
        },
        {
            "question": "What is the result of the PHP code intval(12.99)?",
            "options": [
                "12",
                "13",
                "12.99",
                "Error"
            ],
            "answer": "12",
            "explanation": "intval() converts a float into an integer by truncating the decimal part."
        },
        {
            "question": "How do you calculate the cosine of a number in PHP?",
            "options": [
                "cos()",
                "cosine()",
                "cosh()",
                "acos()"
            ],
            "answer": "cos()",
            "explanation": "The cos() function is used to calculate the cosine of a number."
        },
        {
            "question": "What is the purpose of the PHP function floor()?",
            "options": [
                "Rounds a number up to the nearest integer",
                "Rounds a number down to the nearest integer",
                "Rounds a number to a specified number of decimal points",
                "Finds the floor value of a number"
            ],
            "answer": "Rounds a number down to the nearest integer",
            "explanation": "floor() rounds a number down to the next lowest integer."
        },
        {
            "question": "Which PHP function is used to calculate the arc tangent of two variables?",
            "options": [
                "atan()",
                "atan2()",
                "tan()",
                "atanh()"
            ],
            "answer": "atan2()",
            "explanation": "atan2() function calculates the arc tangent of two variables y and x."
        },
        {
            "question": "How do you find the smallest value in an array of numbers in PHP?",
            "options": [
                "smallest()",
                "min()",
                "lower()",
                "least()"
            ],
            "answer": "min()",
            "explanation": "The min() function is used to find the smallest value in an array of numbers."
        },
        {
            "question": "Which function is used to define a constant in PHP?",
            "options": [
                "set_constant()",
                "const()",
                "define()",
                "constant()"
            ],
            "answer": "define()",
            "explanation": "The define() function is used to define a constant in PHP."
        },
        {
            "question": "Once a constant is defined in PHP, can its value be changed?",
            "options": [
                "Yes",
                "No",
                "Only if it's not a system constant",
                "Only within the same script"
            ],
            "answer": "No",
            "explanation": "The value of a constant in PHP cannot be changed once it is set."
        },
        {
            "question": "Which of the following is the correct way to check if a constant is defined in PHP?",
            "options": [
                "is_defined()",
                "defined()",
                "const_defined()",
                "is_constant()"
            ],
            "answer": "defined()",
            "explanation": "The defined() function is used to check whether a constant is defined."
        },
        {
            "question": "How are constants accessed in PHP?",
            "options": [
                "Using the $ symbol",
                "Directly by their name without any $ symbol",
                "Using the const() function",
                "Using the define() function"
            ],
            "answer": "Directly by their name without any $ symbol",
            "explanation": "Constants are accessed directly by their name without any $ symbol."
        },
        {
            "question": "What is the output of the following PHP code if the constant 'MAX' is not defined? defined('MAX') ? 'Yes' : 'No';",
            "options": [
                "Yes",
                "No",
                "Error",
                "NULL"
            ],
            "answer": "No",
            "explanation": "The defined() function returns false if the constant is not defined, so the output will be 'No'."
        },
        {
            "question": "Which of the following is true about magic constants in PHP?",
            "options": [
                "They are predefined by PHP",
                "Their value changes depending on their location",
                "Both a) and b)",
                "None of the above"
            ],
            "answer": "Both a) and b)",
            "explanation": "Magic constants are predefined by PHP, and their value changes based on where they are used."
        },
        {
            "question": "What does the PHP constant PHP_VERSION represent?",
            "options": [
                "The current PHP version",
                "The PHP installation path",
                "The maximum PHP script execution time",
                "The PHP configuration settings"
            ],
            "answer": "The current PHP version",
            "explanation": "The PHP_VERSION constant contains the current version of PHP."
        },
        {
            "question": "Which magic constant returns the function or method name from which it is called?",
            "options": [
                "__FUNCTION__",
                "__METHOD__",
                "__CLASS__",
                "__LINE__"
            ],
            "answer": "__METHOD__",
            "explanation": "The __METHOD__ magic constant returns the name of the method, whereas __FUNCTION__ returns the name of the function."
        },
        {
            "question": "Can you create an array as a constant in PHP?",
            "options": [
                "Yes, in all PHP versions",
                "No, it's not possible in PHP",
                "Only in PHP 7.0 and later",
                "Only in PHP 5.6 and earlier"
            ],
            "answer": "Only in PHP 7.0 and later",
            "explanation": "As of PHP 7.0, it is possible to define an array as a constant using the define() function."
        },
        {
            "question": "What is the scope of a constant in PHP?",
            "options": [
                "Global",
                "Local",
                "Static",
                "Both Global and Local"
            ],
            "answer": "Global",
            "explanation": "Constants in PHP are automatically global and can be accessed from any part of the script."
        },
        {
            "question": "What does the '==' operator do in PHP?",
            "options": [
                "Assigns a value",
                "Compares two values for equality",
                "Adds two values",
                "Checks if one value is greater than the other"
            ],
            "answer": "Compares two values for equality",
            "explanation": "The '==' operator is used for comparing two values for equality in PHP."
        },
        {
            "question": "What is the function of the '===' operator in PHP?",
            "options": [
                "Assignment",
                "Equality comparison",
                "Identity comparison",
                "Addition"
            ],
            "answer": "Identity comparison",
            "explanation": "The '===' operator checks if two values are equal and of the same type."
        },
        {
            "question": "Which operator is used for string concatenation in PHP?",
            "options": [
                "+",
                ".",
                "&",
                "#"
            ],
            "answer": ".",
            "explanation": "The '.' operator is used to concatenate strings in PHP."
        },
        {
            "question": "What does the '!=' operator do in PHP?",
            "options": [
                "Assigns a value",
                "Checks if two values are not equal",
                "Subtracts one value from another",
                "Divides two values"
            ],
            "answer": "Checks if two values are not equal",
            "explanation": "The '!=' operator is used to check if two values are not equal in PHP."
        },
        {
            "question": "How is the modulus operation performed in PHP?",
            "options": [
                "Using the % operator",
                "Using the mod() function",
                "Using the / operator",
                "Using the // operator"
            ],
            "answer": "Using the % operator",
            "explanation": "The '%' operator is used to perform modulus operation in PHP, which gives the remainder of a division."
        },
        {
            "question": "Which operator increases a variable's value by one in PHP?",
            "options": [
                "++",
                "—",
                "+=",
                "-="
            ],
            "answer": "++",
            "explanation": "The '++' operator is used to increment a variable's value by one in PHP."
        },
        {
            "question": "What is the purpose of the '&&' operator in PHP?",
            "options": [
                "To perform addition",
                "To concatenate strings",
                "To perform logical AND operation",
                "To compare two values"
            ],
            "answer": "To perform logical AND operation",
            "explanation": "The '&&' operator is used to perform a logical AND operation in PHP."
        },
        {
            "question": "How do you check if a variable $x is less than or equal to 10 in PHP?",
            "options": [
                "$x < 10",
                "$x <= 10",
                "$x =< 10",
                "$x == 10"
            ],
            "answer": "$x <= 10",
            "explanation": "The '<=' operator checks if a value is less than or equal to another."
        },
        {
            "question": "What does the '??' operator do in PHP?",
            "options": [
                "Null coalescing operator",
                "Ternary operator",
                "Concatenation operator",
                "Equality operator"
            ],
            "answer": "Null coalescing operator",
            "explanation": "The '??' operator is used as the null coalescing operator in PHP, returning its first operand if it exists and is not null, otherwise its second operand."
        },
        {
            "question": "Which operator is used to compare two values for inequality in PHP?",
            "options": [
                "!=",
                "==",
                "===",
                "<=>"
            ],
            "answer": "!=",
            "explanation": "The '!=' operator is used to compare two values for inequality."
        },
        {
            "question": "What is the result of the spaceship operator '1 <=> 2' in PHP?",
            "options": [
                "1",
                "0",
                "-1",
                "2"
            ],
            "answer": "-1",
            "explanation": "The spaceship operator '<=>' returns -1 if the left operand is less than the right, 0 if they are equal, and 1 if the left is greater."
        },
        {
            "question": "Which operator is used for error control in PHP?",
            "options": [
                "@",
                "#",
                "!",
                "?"
            ],
            "answer": "@",
            "explanation": "The '@' operator is used for error control in PHP to suppress error messages."
        },
        {
            "question": "How do you perform a bitwise AND operation in PHP?",
            "options": [
                "&",
                "&&",
                "AND",
                "&&"
            ],
            "answer": "&",
            "explanation": "The '&' operator is used for bitwise AND operations in PHP."
        },
        {
            "question": "What does the '<<<' operator represent in PHP?",
            "options": [
                "Left shift",
                "Right shift",
                "Heredoc syntax",
                "Nowdoc syntax"
            ],
            "answer": "Heredoc syntax",
            "explanation": "The '<<<' operator is used to start the Heredoc syntax for string declaration in PHP."
        },
        {
            "question": "What is the use of the ternary operator '?:' in PHP?",
            "options": [
                "To perform division",
                "To assign values",
                "To perform a short form of if-else",
                "To check equality"
            ],
            "answer": "To perform a short form of if-else",
            "explanation": "The ternary operator '?:' is a shorthand for the if-else conditional statement in PHP."
        },
        {
            "question": "What is the basic structure for an if statement in PHP?",
            "options": [
                "if (condition) { code to be executed; }",
                "if condition { code to be executed; }",
                "if (condition) execute code;",
                "if: condition { code to be executed; }"
            ],
            "answer": "if (condition) { code to be executed; }",
            "explanation": "The correct syntax for an if statement in PHP is if (condition) { code to be executed; }"
        },
        {
            "question": "How do you execute some code if the 'if' condition is false in PHP?",
            "options": [
                "Using an else statement",
                "Using another if statement",
                "Using a while statement",
                "No need to execute code"
            ],
            "answer": "Using an else statement",
            "explanation": "An else statement is used to execute code when the 'if' condition is false."
        },
        {
            "question": "What is the correct syntax for adding multiple conditions in an if statement in PHP?",
            "options": [
                "if (condition1 && condition2) { code to be executed; }",
                "if condition1 and condition2 { code to be executed; }",
                "if (condition1) and (condition2) { code to be executed; }",
                "if (condition1, condition2) { code to be executed; }"
            ],
            "answer": "if (condition1 && condition2) { code to be executed; }",
            "explanation": "Logical AND (&&) is used to combine multiple conditions in an if statement."
        },
        {
            "question": "What is the purpose of the elseif statement in PHP?",
            "options": [
                "To specify a new condition to test, if the first condition is false",
                "To stop the script",
                "To create a loop",
                "To check the same condition again"
            ],
            "answer": "To specify a new condition to test, if the first condition is false",
            "explanation": "The elseif statement is used to specify a new condition if the first condition is false."
        },
        {
            "question": "What happens if the condition in an if statement in PHP is true?",
            "options": [
                "The script stops executing",
                "The code inside the if block does not execute",
                "The code inside the if block executes",
                "The code inside the else block executes"
            ],
            "answer": "The code inside the if block executes",
            "explanation": "When the condition in an if statement is true, the code inside the if block executes."
        },
        {
            "question": "How many elseif statements can you have in a single if…else structure in PHP?",
            "options": [
                "Only one",
                "As many as you want",
                "Two",
                "None"
            ],
            "answer": "As many as you want",
            "explanation": "You can have as many elseif statements as you want in a single if…else structure."
        },
        {
            "question": "What is the correct way to write an if statement without curly braces in PHP?",
            "options": [
                "if (condition) execute code;",
                "if condition: execute code;",
                "if (condition) execute code endif;",
                "if condition execute code"
            ],
            "answer": "if (condition) execute code;",
            "explanation": "In PHP, if the if statement has only one line of code to be executed, curly braces can be omitted."
        },
        {
            "question": "How do you execute different code for more than two conditions in PHP?",
            "options": [
                "Using multiple if statements",
                "Using if and else",
                "Using if, else, and elseif",
                "Using a switch statement"
            ],
            "answer": "Using if, else, and elseif",
            "explanation": "The if, else, and elseif statements are used to execute different code blocks for more than two conditions."
        },
        {
            "question": "Can an else statement exist without a preceding if statement in PHP?",
            "options": [
                "Yes",
                "No",
                "Only in a loop",
                "Only in a function"
            ],
            "answer": "No",
            "explanation": "An else statement must always be preceded by an if statement."
        },
        {
            "question": "What is the output of this PHP code? if (false) { echo \"True\"; } else { echo \"False\"; }",
            "options": [
                "True",
                "False",
                "Error",
                "Nothing"
            ],
            "answer": "False",
            "explanation": "Since the condition is false, the else block will be executed, outputting \"False\"."
        },
        {
            "question": "Which operator is commonly used inside an if condition to compare two values in PHP?",
            "options": [
                "=",
                "==",
                "===",
                "!="
            ],
            "answer": "==",
            "explanation": "The == operator is commonly used for equality comparison in an if condition."
        },
        {
            "question": "What is the correct syntax for an if…elseif…else statement in PHP?",
            "options": [
                "if (condition) { code1; } elseif (condition) { code2; } else { code3; }",
                "if (condition) { code1; } else if (condition) { code2; } else { code3; }",
                "Both a) and b)",
                "if (condition) then { code1; } elseif (condition) then { code2; } else { code3; }"
            ],
            "answer": "Both a) and b)",
            "explanation": "Both syntaxes are correct for writing if…elseif…else statements in PHP."
        },
        {
            "question": "In which case would you use an else statement in PHP?",
            "options": [
                "When you want to execute code regardless of the outcome of the if condition",
                "When you want to execute code only if the if condition is true",
                "When you want to execute code only if the if condition is false",
                "When you have multiple conditions to check"
            ],
            "answer": "When you want to execute code only if the if condition is false",
            "explanation": "An else statement is used to execute code only when the if condition evaluates to false."
        },
        {
            "question": "Is it mandatory to use an else statement with every if statement in PHP?",
            "options": [
                "Yes",
                "No",
                "Depends on the PHP version",
                "Only in certain cases"
            ],
            "answer": "No",
            "explanation": "It is not mandatory to use an else statement with every if statement. It's used when you need to execute code if the if condition is false."
        },
        {
            "question": "What does the following PHP code do? if ($x > 10) { echo \"Greater\"; } elseif ($x == 10) { echo \"Equal\"; } else { echo \"Smaller\"; }",
            "options": [
                "Prints \"Greater\" if $x is greater than 10, \"Equal\" if $x is 10, otherwise \"Smaller\"",
                "Always prints \"Greater\"",
                "Always prints \"Smaller\"",
                "Results in an error"
            ],
            "answer": "Prints \"Greater\" if $x is greater than 10, \"Equal\" if $x is 10, otherwise \"Smaller\"",
            "explanation": "The code checks three conditions using if, elseif, and else, and executes different code based on which condition is true."
        },
        {
            "question": "What is the primary use of a switch statement in PHP?",
            "options": [
                "To perform different actions based on different conditions",
                "To loop through a block of code",
                "To declare variables",
                "To define functions"
            ],
            "answer": "To perform different actions based on different conditions",
            "explanation": "A switch statement is used to perform different actions based on different conditions."
        },
        {
            "question": "How does a switch statement compare its expression to the case values in PHP?",
            "options": [
                "Using strict comparison (===)",
                "Using loose comparison (==)",
                "Using greater than or less than",
                "Using bitwise operators"
            ],
            "answer": "Using loose comparison (==)",
            "explanation": "A switch statement uses loose comparison (==) to compare its expression with the case values."
        },
        {
            "question": "What keyword is used to terminate a case in a switch statement in PHP?",
            "options": [
                "stop",
                "end",
                "break",
                "exit"
            ],
            "answer": "break",
            "explanation": "The break keyword is used to terminate a case in a switch statement."
        },
        {
            "question": "Which of the following is the correct syntax of a switch statement in PHP?",
            "options": [
                "switch (variable) { case 'value': … }",
                "switch variable { case 'value': … }",
                "switch (variable) [ case 'value': … ]",
                "switch: variable { case 'value': … }"
            ],
            "answer": "switch (variable) { case 'value': … }",
            "explanation": "The correct syntax for a switch statement in PHP is switch (variable) { case 'value': … }"
        },
        {
            "question": "What is the purpose of the default case in a switch statement in PHP?",
            "options": [
                "To define the default value of a variable",
                "To execute code if no case is matched",
                "To start the switch statement",
                "To provide a default case value"
            ],
            "answer": "To execute code if no case is matched",
            "explanation": "The default case in a switch statement is executed if no case value matches the switch expression."
        },
        {
            "question": "Can a switch statement in PHP work with integer values?",
            "options": [
                "Yes",
                "No",
                "Only with positive integers",
                "Only with negative integers"
            ],
            "answer": "Yes",
            "explanation": "A switch statement in PHP can work with integer values, as well as strings."
        },
        {
            "question": "What happens if the break statement is omitted in a case of a switch statement?",
            "options": [
                "The script stops executing",
                "It causes a syntax error",
                "Execution will continue with the next case",
                "The default case is executed"
            ],
            "answer": "Execution will continue with the next case",
            "explanation": "If the break statement is omitted, PHP will continue executing the next case (fall-through behavior)."
        },
        {
            "question": "Is it possible to have multiple cases with the same code block in a switch statement in PHP?",
            "options": [
                "Yes",
                "No",
                "Only in PHP 7 and later",
                "Only in PHP 5 and earlier"
            ],
            "answer": "Yes",
            "explanation": "It is possible to have multiple cases share the same code block by stacking them before using a break."
        },
        {
            "question": "How do you match multiple values in a single case in a switch statement in PHP?",
            "options": [
                "Using the || operator",
                "By listing the values separated by commas",
                "By writing multiple case statements before a break",
                "Using the && operator"
            ],
            "answer": "By writing multiple case statements before a break",
            "explanation": "Multiple values can be matched in a single case by stacking case statements before a break."
        },
        {
            "question": "Can a switch statement in PHP handle floating-point numbers?",
            "options": [
                "Yes, always",
                "No, never",
                "Only if explicitly cast to integers",
                "Only in certain PHP versions"
            ],
            "answer": "No, never",
            "explanation": "It's not recommended to use floating-point numbers in switch statements due to potential precision issues."
        },
        {
            "question": "What is the output of the following code if $var = 10; switch ($var) { case 10: echo 'Ten'; break; default: echo 'Not ten'; }?",
            "options": [
                "Ten",
                "Not ten",
                "Error",
                "No output"
            ],
            "answer": "Ten",
            "explanation": "Since $var matches the case value 10, 'Ten' will be outputted."
        },
        {
            "question": "Is the expression in a switch statement in PHP limited to only variables?",
            "options": [
                "Yes",
                "No",
                "Only in certain contexts",
                "Only for scalar data types"
            ],
            "answer": "No",
            "explanation": "The expression in a switch statement can be any expression that evaluates to a value, not just variables."
        },
        {
            "question": "How is a switch statement different from an if…else statement in PHP?",
            "options": [
                "Switch is faster than if…else",
                "Switch can only evaluate equality, while if…else can evaluate any condition",
                "Switch cannot handle as many conditions as if…else",
                "There is no difference"
            ],
            "answer": "Switch can only evaluate equality, while if…else can evaluate any condition",
            "explanation": "A switch statement is used for equality comparison against multiple values, while if…else can evaluate a wider range of conditions."
        },
        {
            "question": "Can the cases in a switch statement be expressions in PHP?",
            "options": [
                "Yes",
                "No",
                "Only constant expressions",
                "Only string expressions"
            ],
            "answer": "Yes",
            "explanation": "The cases in a switch statement can be expressions that are evaluated at run time."
        },
        {
            "question": "Is it mandatory to have a default case in a switch statement in PHP?",
            "options": [
                "Yes, always",
                "No, it's optional",
                "Only if there are more than two cases",
                "Only if there are no break statements"
            ],
            "answer": "No, it's optional",
            "explanation": "The default case in a switch statement is optional and is used to capture any cases not specifically handled by other case statements."
        },
        {
            "question": "Which of these is a loop structure in PHP?",
            "options": [
                "if",
                "while",
                "echo",
                "isset"
            ],
            "answer": "while",
            "explanation": "The while loop is a loop structure in PHP that executes a block of code as long as the specified condition is true."
        },
        {
            "question": "What is the syntax of a for loop in PHP?",
            "options": [
                "for (init; condition; increment) { code to be executed; }",
                "for (condition; init; increment) { code to be executed; }",
                "for { init; condition; increment } (code to be executed)",
                "for (init, condition, increment) { code to be executed; }"
            ],
            "answer": "for (init; condition; increment) { code to be executed; }",
            "explanation": "The correct syntax for a for loop in PHP is for (init; condition; increment) { code to be executed; }"
        },
        {
            "question": "Which loop will execute the code block at least once, before checking the condition in PHP?",
            "options": [
                "while loop",
                "do-while loop",
                "for loop",
                "foreach loop"
            ],
            "answer": "do-while loop",
            "explanation": "The do-while loop will execute its code block once before checking the condition at the end of the loop."
        },
        {
            "question": "How do you break out of a loop in PHP?",
            "options": [
                "exit",
                "return",
                "break",
                "continue"
            ],
            "answer": "break",
            "explanation": "The break statement is used to break out of a loop in PHP."
        },
        {
            "question": "What is the purpose of the continue statement in a loop in PHP?",
            "options": [
                "Stops the loop",
                "Skips the current iteration and continues with the next iteration",
                "Continues execution outside of the loop",
                "Restarts the loop"
            ],
            "answer": "Skips the current iteration and continues with the next iteration",
            "explanation": "The continue statement skips the rest of the current loop iteration and continues with the next iteration."
        },
        {
            "question": "What type of loop is the foreach loop in PHP?",
            "options": [
                "Conditional loop",
                "Count-controlled loop",
                "Infinite loop",
                "Iterative loop over arrays"
            ],
            "answer": "Iterative loop over arrays",
            "explanation": "The foreach loop is used to iterate over arrays in PHP."
        },
        {
            "question": "What does the following PHP code do? for ($i = 0; $i < 10; $i++) { echo $i; }",
            "options": [
                "Prints numbers from 0 to 9",
                "Prints numbers from 1 to 10",
                "Results in an infinite loop",
                "Throws an error"
            ],
            "answer": "Prints numbers from 0 to 9",
            "explanation": "The for loop initializes $i to 0 and runs until $i is less than 10, incrementing $i in each iteration."
        },
        {
            "question": "How many expressions are there in a typical for loop declaration in PHP?",
            "options": [
                "One",
                "Two",
                "Three",
                "Four"
            ],
            "answer": "Three",
            "explanation": "A typical for loop in PHP contains three expressions: initialization, condition, and increment."
        },
        {
            "question": "Which loop is best suited for iterating over an associative array in PHP?",
            "options": [
                "while loop",
                "do-while loop",
                "for loop",
                "foreach loop"
            ],
            "answer": "foreach loop",
            "explanation": "The foreach loop is best suited for iterating over associative arrays in PHP."
        },
        {
            "question": "How do you create an infinite loop in PHP?",
            "options": [
                "while (true) { code to be executed; }",
                "for (;;) { code to be executed; }",
                "Both a) and b)",
                "Using the infinite() function"
            ],
            "answer": "Both a) and b)",
            "explanation": "Both while (true) and for (;;) create infinite loops in PHP."
        },
        {
            "question": "What is the initial value of the loop variable in a typical PHP for loop?",
            "options": [
                "0",
                "1",
                "NULL",
                "Depends on the loop"
            ],
            "answer": "Depends on the loop",
            "explanation": "The initial value of the loop variable in a for loop depends on what the programmer sets it to."
        },
        {
            "question": "In a nested loop, what does the inner loop do?",
            "options": [
                "Executes once for each iteration of the outer loop",
                "Replaces the outer loop",
                "Is ignored",
                "Causes an error"
            ],
            "answer": "Executes once for each iteration of the outer loop",
            "explanation": "In a nested loop, the inner loop completes all its iterations for each single iteration of the outer loop."
        },
        {
            "question": "How does the while loop in PHP differ from the do-while loop?",
            "options": [
                "The while loop checks the condition before executing the code block, the do-while loop checks it after",
                "There is no difference",
                "The while loop is faster",
                "The do-while loop can't be used with arrays"
            ],
            "answer": "The while loop checks the condition before executing the code block, the do-while loop checks it after",
            "explanation": "The main difference between while and do-while loops is that while checks the condition before executing the loop body, whereas do-while checks it after."
        },
        {
            "question": "What will happen if the increment statement is omitted in a for loop in PHP?",
            "options": [
                "The loop will not execute",
                "The loop may become an infinite loop",
                "The loop will execute once",
                "The loop will execute normally"
            ],
            "answer": "The loop may become an infinite loop",
            "explanation": "Omitting the increment statement in a for loop can result in an infinite loop if the loop condition is always true."
        },
        {
            "question": "Can the foreach loop be used with both arrays and objects in PHP?",
            "options": [
                "Yes",
                "No",
                "Only with arrays",
                "Only with objects"
            ],
            "answer": "Yes",
            "explanation": "The foreach loop in PHP can be used to iterate over both arrays and objects."
        },
        {
            "question": "How do you declare a function in PHP?",
            "options": [
                "function myFunction() { … }",
                "declare myFunction() { … }",
                "create myFunction() { … }",
                "newFunction myFunction() { … }"
            ],
            "answer": "function myFunction() { … }",
            "explanation": "Functions in PHP are declared using the 'function' keyword followed by the function name and parentheses."
        },
        {
            "question": "Can PHP functions return a value?",
            "options": [
                "Yes, using the return statement",
                "No, PHP functions cannot return values",
                "Only if specified at the time of function declaration",
                "Only integer values can be returned"
            ],
            "answer": "Yes, using the return statement",
            "explanation": "PHP functions can return a value using the 'return' statement."
        },
        {
            "question": "Which of the following is a valid function name in PHP?",
            "options": [
                "2myFunction",
                "my_function",
                "my function",
                "myFunction!"
            ],
            "answer": "my_function",
            "explanation": "Function names in PHP can contain letters, numbers, and underscores, but they cannot start with a number or contain spaces and special characters."
        },
        {
            "question": "How are arguments passed to a function in PHP?",
            "options": [
                "Inside square brackets []",
                "Inside curly braces {}",
                "Inside parentheses ()",
                "Separated by commas, without any brackets"
            ],
            "answer": "Inside parentheses ()",
            "explanation": "Arguments are passed to a PHP function inside parentheses, separated by commas."
        },
        {
            "question": "What is a default argument value in a PHP function?",
            "options": [
                "An argument that must be provided",
                "An argument that is optional and has a predefined value",
                "The first argument in every function",
                "An argument that sets default settings for the function"
            ],
            "answer": "An argument that is optional and has a predefined value",
            "explanation": "Default argument values allow a function to be called without explicitly passing all the parameters, using predefined values for missing arguments."
        },
        {
            "question": "Can a PHP function call itself?",
            "options": [
                "Yes, this is called recursion",
                "No, functions cannot call themselves",
                "Only in a loop",
                "Only if it's a static function"
            ],
            "answer": "Yes, this is called recursion",
            "explanation": "A function that calls itself is known as a recursive function in PHP."
        },
        {
            "question": "What is the scope of a function in PHP?",
            "options": [
                "Global",
                "Local to the file it's declared in",
                "Local to the block it's declared in",
                "Only within other functions"
            ],
            "answer": "Global",
            "explanation": "Functions in PHP have a global scope and can be called from anywhere in the script after they are declared."
        },
        {
            "question": "How do you specify a type for a function's return value in PHP?",
            "options": [
                "Using the type keyword",
                "Before the function name",
                "After the function's parameters, preceded by a colon",
                "It is not possible to specify a return type"
            ],
            "answer": "After the function's parameters, preceded by a colon",
            "explanation": "Return types are specified after the function's parameters and a colon in PHP."
        },
        {
            "question": "Which keyword is used to create an anonymous function in PHP?",
            "options": [
                "anonymous",
                "lambda",
                "function",
                "anon"
            ],
            "answer": "function",
            "explanation": "Anonymous functions are declared with the 'function' keyword without a name in PHP."
        },
        {
            "question": "What is the purpose of the 'global' keyword inside a function in PHP?",
            "options": [
                "To create a global variable",
                "To access a global variable inside the function",
                "To make the function global",
                "To export a local variable to the global scope"
            ],
            "answer": "To access a global variable inside the function",
            "explanation": "The 'global' keyword is used inside a function to access a variable that is defined in the global scope."
        },
        {
            "question": "Can PHP functions have optional parameters?",
            "options": [
                "Yes, by defining default values for parameters",
                "No, all parameters must be specified",
                "Only if the function is declared static",
                "Only in object-oriented PHP"
            ],
            "answer": "Yes, by defining default values for parameters",
            "explanation": "PHP functions can have optional parameters by providing default values for those parameters."
        },
        {
            "question": "How do you call a PHP function by reference?",
            "options": [
                "By prefixing the function name with &",
                "By prefixing the argument with &",
                "By using the reference keyword",
                "PHP does not support calling functions by reference"
            ],
            "answer": "By prefixing the argument with &",
            "explanation": "In PHP, to call a function by reference, you prefix the argument with an ampersand (&)."
        },
        {
            "question": "What is variable scope in the context of a PHP function?",
            "options": [
                "The accessibility of variables inside and outside functions",
                "The ability to declare variables",
                "The range of values a variable can hold",
                "The duration for which a variable exists"
            ],
            "answer": "The accessibility of variables inside and outside functions",
            "explanation": "Variable scope refers to the accessibility of variables in different parts of the script, particularly inside and outside functions."
        },
        {
            "question": "How can you pass an unlimited number of arguments to a PHP function?",
            "options": [
                "Using variadic parameters with …",
                "By declaring the function with an array parameter",
                "By using the unlimited keyword",
                "It is not possible in PHP"
            ],
            "answer": "Using variadic parameters with …",
            "explanation": "Variadic parameters, denoted by …, allow a function to accept an unlimited number of arguments."
        },
        {
            "question": "What will happen if a PHP function does not contain a return statement?",
            "options": [
                "The function will return null",
                "The function will return false",
                "The script will produce an error",
                "The function will return true"
            ],
            "answer": "The function will return null",
            "explanation": "If a function does not contain a return statement, it implicitly returns null in PHP."
        },
        {
            "question": "How do you open a file in PHP?",
            "options": [
                "open('filename', 'mode')",
                "fopen('filename', 'mode')",
                "file_open('filename', 'mode')",
                "open_file('filename', 'mode')"
            ],
            "answer": "fopen('filename', 'mode')",
            "explanation": "The fopen() function is used to open a file in a specified mode in PHP."
        },
        {
            "question": "Which mode in fopen() function is used to read from a file in PHP?",
            "options": [
                "'r'",
                "'w'",
                "'a'",
                "'x'"
            ],
            "answer": "'r'",
            "explanation": "The 'r' mode in the fopen() function is used for reading from a file."
        },
        {
            "question": "How do you write to a file in PHP?",
            "options": [
                "fwrite()",
                "write()",
                "fputs()",
                "Both a) and c)"
            ],
            "answer": "Both a) and c)",
            "explanation": "Both fwrite() and fputs() functions are used to write to a file in PHP."
        },
        {
            "question": "What does the file_get_contents() function do in PHP?",
            "options": [
                "Gets the file size",
                "Reads the entire file into a string",
                "Checks if the file exists",
                "Opens a file for writing"
            ],
            "answer": "Reads the entire file into a string",
            "explanation": "The file_get_contents() function reads the entire file into a string."
        },
        {
            "question": "How do you close an opened file in PHP?",
            "options": [
                "fclose()",
                "close()",
                "file_close()",
                "end()"
            ],
            "answer": "fclose()",
            "explanation": "The fclose() function is used to close an opened file in PHP."
        },
        {
            "question": "What is the purpose of the file_put_contents() function in PHP?",
            "options": [
                "To get the contents of a file",
                "To write a string to a file",
                "To close a file",
                "To open a file for reading"
            ],
            "answer": "To write a string to a file",
            "explanation": "The file_put_contents() function writes a string to a file, creating the file if it does not exist."
        },
        {
            "question": "Which function checks if a file exists in PHP?",
            "options": [
                "file_exists()",
                "exists_file()",
                "is_file()",
                "file_present()"
            ],
            "answer": "file_exists()",
            "explanation": "The file_exists() function checks whether a file or directory exists."
        },
        {
            "question": "How do you read a single line from a file in PHP?",
            "options": [
                "fgets()",
                "readline()",
                "get_line()",
                "read_file_line()"
            ],
            "answer": "fgets()",
            "explanation": "The fgets() function is used to read a single line from a file."
        },
        {
            "question": "Which mode in fopen() is used to write to a file, clearing its contents in PHP?",
            "options": [
                "'r+'",
                "'w'",
                "'a'",
                "'x'"
            ],
            "answer": "'w'",
            "explanation": "The 'w' mode in fopen() is used for writing to a file, and it clears the file's contents if it already exists."
        },
        {
            "question": "What does the feof() function do in PHP?",
            "options": [
                "Checks if a file exists",
                "Checks for the end of a file",
                "Closes a file",
                "Writes to a file"
            ],
            "answer": "Checks for the end of a file",
            "explanation": "The feof() function checks if the \"end-of-file\" (EOF) has been reached."
        },
        {
            "question": "How do you append data to an existing file in PHP?",
            "options": [
                "Using fopen() with 'a' mode",
                "Using file_put_contents() with FILE_APPEND flag",
                "Both a) and b)",
                "Using fwrite() only"
            ],
            "answer": "Both a) and b)",
            "explanation": "Data can be appended to an existing file using fopen() with 'a' mode or file_put_contents() with the FILE_APPEND flag."
        },
        {
            "question": "Which function deletes a file in PHP?",
            "options": [
                "delete_file()",
                "remove()",
                "unlink()",
                "delete()"
            ],
            "answer": "unlink()",
            "explanation": "The unlink() function is used to delete a file in PHP."
        },
        {
            "question": "What is the purpose of the file() function in PHP?",
            "options": [
                "Opens a file",
                "Reads a file line by line into an array",
                "Writes to a file",
                "Deletes a file"
            ],
            "answer": "Reads a file line by line into an array",
            "explanation": "The file() function reads a file and stores each line as an element in an array."
        },
        {
            "question": "How can you check the file size in PHP?",
            "options": [
                "filesize()",
                "get_file_size()",
                "file_size()",
                "size_of_file()"
            ],
            "answer": "filesize()",
            "explanation": "The filesize() function is used to get the size of a file in bytes."
        },
        {
            "question": "What does the move_uploaded_file() function do in PHP?",
            "options": [
                "Moves a file from one location to another",
                "Uploads a file to the server",
                "Renames a file",
                "Copies a file to a new location"
            ],
            "answer": "Moves a file from one location to another",
            "explanation": "The move_uploaded_file() function is used to move an uploaded file to a new location, commonly used in file uploading processes."
        },
        {
            "question": "What function is used to perform a regular expression match in PHP?",
            "options": [
                "preg_match()",
                "reg_match()",
                "match_regex()",
                "regex()"
            ],
            "answer": "preg_match()",
            "explanation": "The preg_match() function is used for performing a regular expression match in PHP."
        },
        {
            "question": "Which character is used as the delimiter in PHP regular expressions?",
            "options": [
                "/",
                "#",
                "Both a) and b)",
                "$"
            ],
            "answer": "Both a) and b)",
            "explanation": "In PHP, regular expressions are typically enclosed within delimiters like / or #."
        },
        {
            "question": "How do you denote the beginning of a string in a PHP regular expression?",
            "options": [
                "^",
                "$",
                "*",
                "+"
            ],
            "answer": "^",
            "explanation": "The ^ character is used to denote the beginning of a string in regular expressions."
        },
        {
            "question": "What does the '?' character represent in a PHP regular expression?",
            "options": [
                "Zero or one occurrence of the preceding character",
                "One or more occurrences of the preceding character",
                "Exactly one occurrence of any character",
                "Any number of occurrences of the preceding character"
            ],
            "answer": "Zero or one occurrence of the preceding character",
            "explanation": "In regular expressions, '?' denotes zero or one occurrence of the preceding character."
        },
        {
            "question": "What is the role of the preg_replace() function in PHP?",
            "options": [
                "To split a string by a regular expression",
                "To check if a regular expression matches a string",
                "To replace text in a string using a regular expression",
                "To escape special characters in a regular expression"
            ],
            "answer": "To replace text in a string using a regular expression",
            "explanation": "preg_replace() is used to perform a search and replace with a regular expression."
        },
        {
            "question": "Which metacharacter is used to represent any single character in a regular expression?",
            "options": [
                ".",
                "*",
                "?",
                "+"
            ],
            "answer": ".",
            "explanation": "The '.' metacharacter is used to match any single character in regular expressions."
        },
        {
            "question": "How do you denote the end of a string in a PHP regular expression?",
            "options": [
                "^",
                "$",
                "*",
                "+"
            ],
            "answer": "$",
            "explanation": "The $ character is used to denote the end of a string in regular expressions."
        },
        {
            "question": "What does the '*' character represent in a PHP regular expression?",
            "options": [
                "Zero or one occurrence of the preceding character",
                "One or more occurrences of the preceding character",
                "Zero or more occurrences of the preceding character",
                "Exactly one occurrence of any character"
            ],
            "answer": "Zero or more occurrences of the preceding character",
            "explanation": "In regular expressions, '*' denotes zero or more occurrences of the preceding character."
        },
        {
            "question": "In PHP, how do you perform a case-insensitive regular expression match?",
            "options": [
                "Using the 'i' modifier",
                "Using the strtolower() function",
                "Using the 'm' modifier",
                "PHP regular expression matches are always case-insensitive"
            ],
            "answer": "Using the 'i' modifier",
            "explanation": "The 'i' modifier is used to perform a case-insensitive match in PHP regular expressions."
        },
        {
            "question": "What does the '\\d' metacharacter represent in a regular expression in PHP?",
            "options": [
                "Any non-digit character",
                "Any digit character",
                "Any whitespace character",
                "Any non-whitespace character"
            ],
            "answer": "Any digit character",
            "explanation": "In regular expressions, '\\d' represents any digit character (0-9)."
        },
        {
            "question": "Which function is used to split a string by a regular expression in PHP?",
            "options": [
                "preg_split()",
                "preg_match()",
                "split()",
                "explode()"
            ],
            "answer": "preg_split()",
            "explanation": "The preg_split() function is used to split a string into an array using a regular expression as the delimiter."
        },
        {
            "question": "What does the '|' character represent in PHP regular expressions?",
            "options": [
                "And operator",
                "Or operator",
                "Concatenation",
                "None of the above"
            ],
            "answer": "Or operator",
            "explanation": "The '|' character is used as the OR operator in regular expressions."
        },
        {
            "question": "How do you escape special characters in a regular expression in PHP?",
            "options": [
                "Using the preg_escape() function",
                "Using the escape() function",
                "By prefixing them with a backslash (\\)",
                "Special characters do not need to be escaped in PHP regular expressions"
            ],
            "answer": "By prefixing them with a backslash (\\)",
            "explanation": "Special characters in regular expressions are escaped by prefixing them with a backslash."
        },
        {
            "question": "What does the '+ 'character represent in a PHP regular expression?",
            "options": [
                "Zero or one occurrence of the preceding character",
                "One or more occurrences of the preceding character",
                "Zero or more occurrences of the preceding character",
                "Exactly one occurrence of any character"
            ],
            "answer": "One or more occurrences of the preceding character",
            "explanation": "In regular expressions, '+' denotes one or more occurrences of the preceding character."
        },
        {
            "question": "Which regular expression pattern in PHP matches any whitespace character?",
            "options": [
                "\\s",
                "\\S",
                "\\w",
                "\\W"
            ],
            "answer": "\\s",
            "explanation": "The '\\s' metacharacter is used to match any whitespace character, including spaces, tabs, and line breaks."
        },
        {
            "question": "How does PHP receive form data sent via the GET method?",
            "options": [
                "$_GET array",
                "$_POST array",
                "$_REQUEST array",
                "get_data()"
            ],
            "answer": "$_GET array",
            "explanation": "PHP receives data sent via the GET method through the global $_GET array."
        },
        {
            "question": "What method should be used to send sensitive data, like passwords, in a PHP form?",
            "options": [
                "GET",
                "POST",
                "Either GET or POST",
                "SEND"
            ],
            "answer": "POST",
            "explanation": "The POST method should be used for sending sensitive data, as it does not expose data in the URL."
        },
        {
            "question": "How do you retrieve a form input value in PHP if the method is POST?",
            "options": [
                "$_POST['input_name']",
                "$_GET['input_name']",
                "$_REQUEST['input_name']",
                "post_data('input_name')"
            ],
            "answer": "$_POST['input_name']",
            "explanation": "Form data sent via POST is accessed in PHP using the $_POST array with the name of the input."
        },
        {
            "question": "What is the purpose of the htmlspecialchars function in form handling in PHP?",
            "options": [
                "To enhance the appearance of the text",
                "To prevent SQL injection",
                "To prevent XSS attacks",
                "To convert HTML into PHP code"
            ],
            "answer": "To prevent XSS attacks",
            "explanation": "htmlspecialchars() converts special characters to HTML entities, helping prevent XSS attacks."
        },
        {
            "question": "Which superglobal array in PHP contains information about both GET and POST data?",
            "options": [
                "$_SERVER",
                "$_ENV",
                "$_REQUEST",
                "$_SESSION"
            ],
            "answer": "$_REQUEST",
            "explanation": "The $_REQUEST array contains data from both $_GET and $_POST as well as cookies."
        },
        {
            "question": "How do you check if a form has been submitted in PHP?",
            "options": [
                "Checking if $_SERVER['REQUEST_METHOD'] is set",
                "Checking if $_GET or $_POST array is not empty",
                "Using the isset() function on submit button",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Form submission can be checked using several methods, including checking the request method, if data arrays are not empty, or if the submit button is set."
        },
        {
            "question": "What attribute must be included in an HTML form to upload files to a PHP script?",
            "options": [
                "method=\"upload\"",
                "enctype=\"multipart/form-data\"",
                "type=\"file\"",
                "upload=\"true\""
            ],
            "answer": "enctype=\"multipart/form-data\"",
            "explanation": "The enctype attribute must be set to \"multipart/form-data\" for uploading files through a form."
        },
        {
            "question": "How are file uploads accessed in PHP?",
            "options": [
                "$_FILE",
                "$_FILES",
                "$_UPLOAD",
                "$_FILE_UPLOAD"
            ],
            "answer": "$_FILES",
            "explanation": "Uploaded files in PHP are accessed using the $_FILES superglobal array."
        },
        {
            "question": "How do you access a checkbox value in PHP if it is checked?",
            "options": [
                "Directly using $_POST['checkbox_name']",
                "Using isset($_POST['checkbox_name'])",
                "Checkboxes do not have values in PHP",
                "Using get_checkbox('checkbox_name')"
            ],
            "answer": "Using isset($_POST['checkbox_name'])",
            "explanation": "To access a checkbox value, you need to check if it is set using isset() since unchecked boxes are not sent in the request."
        },
        {
            "question": "Which method, GET or POST, appends form data to the URL?",
            "options": [
                "GET",
                "POST",
                "Both",
                "Neither"
            ],
            "answer": "GET",
            "explanation": "The GET method appends form data to the URL, while POST sends data in the request body."
        },
        {
            "question": "How do you ensure a form field is not empty in PHP?",
            "options": [
                "Using empty($_POST['field_name'])",
                "Using isset($_POST['field_name']) and $_POST['field_name'] != ''",
                "Checking the length of the $_POST['field_name']",
                "Both a) and b)"
            ],
            "answer": "Using isset($_POST['field_name']) and $_POST['field_name'] != ''",
            "explanation": "To ensure a form field is not empty, check that it is set and its value is not an empty string."
        },
        {
            "question": "Which PHP function is used to validate email addresses?",
            "options": [
                "email_validate()",
                "validate_email()",
                "filter_var() with FILTER_VALIDATE_EMAIL",
                "is_email()"
            ],
            "answer": "filter_var() with FILTER_VALIDATE_EMAIL",
            "explanation": "The filter_var() function with the FILTER_VALIDATE_EMAIL filter is used to validate email addresses."
        },
        {
            "question": "How do you retain form field values after submission in PHP?",
            "options": [
                "Using cookies",
                "Using session variables",
                "Echoing the form values in the value attribute",
                "All of the above"
            ],
            "answer": "Echoing the form values in the value attribute",
            "explanation": "To retain form field values, echo the submitted values in the value attribute of the form fields."
        },
        {
            "question": "What is the default form submission method in HTML?",
            "options": [
                "GET",
                "POST",
                "REQUEST",
                "PUT"
            ],
            "answer": "GET",
            "explanation": "If the method attribute is not specified in an HTML form, the default submission method is GET."
        },
        {
            "question": "How do you access form data sent via both GET and POST methods in PHP without knowing the method used?",
            "options": [
                "Using $_GLOBAL",
                "Using $_REQUEST",
                "Using $_FORM",
                "It's not possible"
            ],
            "answer": "Using $_REQUEST",
            "explanation": "The $_REQUEST superglobal array can be used to access form data regardless of whether the GET or POST method was used."
        },
        {
            "question": "What keyword is used to declare a class in PHP?",
            "options": [
                "class",
                "Class",
                "declare",
                "new"
            ],
            "answer": "class",
            "explanation": "The 'class' keyword is used to declare a class in PHP."
        },
        {
            "question": "How do you create an instance of a class in PHP?",
            "options": [
                "new ClassName()",
                "create ClassName()",
                "class ClassName()",
                "instance ClassName()"
            ],
            "answer": "new ClassName()",
            "explanation": "An instance of a class is created using the 'new' keyword followed by the class name."
        },
        {
            "question": "What is the method inside a class that is called automatically when an object is created?",
            "options": [
                "start()",
                "__begin()",
                "__construct()",
                "__init()"
            ],
            "answer": "__construct()",
            "explanation": "The __construct() method is a constructor method in PHP that is called automatically when an object is created."
        },
        {
            "question": "What is the visibility keyword that allows properties or methods to be accessible from anywhere?",
            "options": [
                "public",
                "private",
                "protected",
                "global"
            ],
            "answer": "public",
            "explanation": "The 'public' visibility keyword allows properties or methods to be accessible from anywhere."
        },
        {
            "question": "What keyword is used to define a constant inside a class in PHP?",
            "options": [
                "define",
                "const",
                "constant",
                "def"
            ],
            "answer": "const",
            "explanation": "The 'const' keyword is used to define a constant inside a class in PHP."
        },
        {
            "question": "What is it called when a class inherits the properties and methods of another class in PHP?",
            "options": [
                "Class cloning",
                "Extending",
                "Implementing",
                "Instantiating"
            ],
            "answer": "Extending",
            "explanation": "Inheritance in PHP is achieved when a class 'extends' another class, inheriting its properties and methods."
        },
        {
            "question": "What is encapsulation in PHP OOP?",
            "options": [
                "Packaging data and methods together",
                "Splitting a class into multiple classes",
                "Copying properties from one class to another",
                "Hiding the internal state of an object"
            ],
            "answer": "Packaging data and methods together",
            "explanation": "Encapsulation involves bundling the data (properties) and methods that operate on the data into a single unit or class."
        },
        {
            "question": "How do you refer to the current object's properties or methods from within a class's methods in PHP?",
            "options": [
                "$this",
                "self",
                "static",
                "this"
            ],
            "answer": "$this",
            "explanation": "The $this keyword is used to refer to the current object's properties or methods within a class."
        },
        {
            "question": "What is the meaning of polymorphism in PHP OOP?",
            "options": [
                "A class can have only one form",
                "A class can take on many forms",
                "Multiple classes can have the same name",
                "Changing properties at runtime"
            ],
            "answer": "A class can take on many forms",
            "explanation": "Polymorphism allows objects of different classes to be treated as objects of a common super class."
        },
        {
            "question": "Which keyword is used to define a method that cannot be overridden in a child class in PHP?",
            "options": [
                "final",
                "static",
                "sealed",
                "fixed"
            ],
            "answer": "final",
            "explanation": "The 'final' keyword is used to define a method that cannot be overridden in a child class."
        },
        {
            "question": "How do you create an abstract class in PHP?",
            "options": [
                "abstract class ClassName { … }",
                "class abstract ClassName { … }",
                "class ClassName abstract { … }",
                "Abstract class ClassName { … }"
            ],
            "answer": "abstract class ClassName { … }",
            "explanation": "An abstract class is created using the 'abstract' keyword before the 'class' keyword."
        },
        {
            "question": "What is an interface in PHP?",
            "options": [
                "A class that implements all methods",
                "A template that defines what methods a class should implement",
                "A built-in PHP class",
                "A way to interact with objects"
            ],
            "answer": "A template that defines what methods a class should implement",
            "explanation": "An interface is a template that defines a set of methods that a class must implement."
        },
        {
            "question": "What is the purpose of the 'static' keyword for properties and methods in PHP?",
            "options": [
                "To make them constant",
                "To make them accessible without needing an instance of the class",
                "To protect them from being modified",
                "To make them private"
            ],
            "answer": "To make them accessible without needing an instance of the class",
            "explanation": "Static properties and methods can be accessed directly without creating an instance of the class."
        },
        {
            "question": "What is method overloading in PHP?",
            "options": [
                "Changing the way a method works",
                "Creating multiple methods with the same name but different parameters",
                "Increasing the efficiency of a method",
                "Replacing an existing method in a parent class"
            ],
            "answer": "Creating multiple methods with the same name but different parameters",
            "explanation": "Method overloading involves creating multiple methods with the same name but different parameters, which is not natively supported in PHP."
        },
        {
            "question": "How is a property or method of a parent class referred to within a child class in PHP?",
            "options": [
                "parent::",
                "super::",
                "base::",
                "Parent::"
            ],
            "answer": "parent::",
            "explanation": "The 'parent::' syntax is used to refer to a property or method of a parent class within a child class."
        },
        {
            "question": "What is an object in the context of PHP OOP?",
            "options": [
                "A variable",
                "An instance of a class",
                "A function",
                "A data type"
            ],
            "answer": "An instance of a class",
            "explanation": "In object-oriented programming, an object is an instance of a class."
        },
        {
            "question": "What is the correct way to declare a property in a PHP class?",
            "options": [
                "var $property;",
                "public $property;",
                "property $var;",
                "$property public;"
            ],
            "answer": "public $property;",
            "explanation": "A property in a PHP class is declared with a visibility keyword (like public) followed by the property name."
        },
        {
            "question": "Can a PHP class have more than one constructor method?",
            "options": [
                "Yes",
                "No",
                "Only if it's a child class",
                "Only in PHP 7 and above"
            ],
            "answer": "No",
            "explanation": "A PHP class can only have one constructor method, named __construct."
        },
        {
            "question": "Which visibility keyword allows access to a property or method only within the class itself and its child classes?",
            "options": [
                "public",
                "private",
                "protected",
                "internal"
            ],
            "answer": "protected",
            "explanation": "The 'protected' visibility keyword allows access within the class itself and its child classes."
        },
        {
            "question": "What is a trait in PHP?",
            "options": [
                "A special kind of class",
                "A way to extend multiple classes",
                "A mechanism for code reuse in single inheritance languages like PHP",
                "A built-in PHP interface"
            ],
            "answer": "A mechanism for code reuse in single inheritance languages like PHP",
            "explanation": "Traits are a mechanism in PHP for reusing code in single inheritance languages, allowing a developer to reuse sets of methods freely in several independent classes."
        },
        {
            "question": "What is Exception Handling in PHP?",
            "options": [
                "Handling HTML exceptions",
                "A method to handle errors and exceptions in a program",
                "A syntax for declaring variables",
                "Handling database exceptions only"
            ],
            "answer": "A method to handle errors and exceptions in a program",
            "explanation": "Exception handling in PHP is a way to handle errors and exceptions gracefully during the execution of a program."
        },
        {
            "question": "Which keyword is used to throw an exception in PHP?",
            "options": [
                "throw",
                "catch",
                "try",
                "error"
            ],
            "answer": "throw",
            "explanation": "The 'throw' keyword is used to throw an exception in PHP."
        },
        {
            "question": "What is the purpose of the try block in PHP?",
            "options": [
                "To execute code that may cause an exception",
                "To catch exceptions",
                "To finally execute code regardless of exceptions",
                "To declare exceptions"
            ],
            "answer": "To execute code that may cause an exception",
            "explanation": "A try block is used to wrap the code that may potentially cause an exception."
        },
        {
            "question": "What does the catch block do in PHP?",
            "options": [
                "Catches errors that occur in the script",
                "Catches exceptions thrown within the try block",
                "Catches user input errors",
                "Catches database errors"
            ],
            "answer": "Catches exceptions thrown within the try block",
            "explanation": "The catch block is used to handle exceptions that are thrown within the associated try block."
        },
        {
            "question": "How do you create a custom exception in PHP?",
            "options": [
                "By using the exception() function",
                "By extending the Exception class",
                "By declaring a new exception variable",
                "By using the custom_exception() function"
            ],
            "answer": "By extending the Exception class",
            "explanation": "Custom exceptions are created in PHP by extending the built-in Exception class."
        },
        {
            "question": "Can multiple catch blocks be used with a single try block?",
            "options": [
                "Yes",
                "No",
                "Only in PHP 7 and later",
                "Only with custom exceptions"
            ],
            "answer": "Yes",
            "explanation": "Multiple catch blocks can be used with a single try block to handle different types of exceptions."
        },
        {
            "question": "What is the purpose of the finally block in PHP?",
            "options": [
                "To execute code after try and catch blocks, regardless of whether an exception was thrown",
                "To finalize exception handling",
                "To clean up resources",
                "To throw the final exception"
            ],
            "answer": "To execute code after try and catch blocks, regardless of whether an exception was thrown",
            "explanation": "The finally block is used to execute code after try and catch blocks, regardless of whether an exception was thrown or not."
        },
        {
            "question": "Which class do all exceptions extend in PHP?",
            "options": [
                "Error",
                "MyException",
                "Exception",
                "Throwable"
            ],
            "answer": "Exception",
            "explanation": "All exceptions in PHP extend the base Exception class."
        },
        {
            "question": "What happens if an exception is not caught in PHP?",
            "options": [
                "The script continues execution",
                "A default exception handler is called",
                "The script terminates with a fatal error",
                "The exception is ignored"
            ],
            "answer": "The script terminates with a fatal error",
            "explanation": "If an exception is not caught, the script will terminate with a fatal error."
        },
        {
            "question": "What is the correct way to specify the type of exception to catch in PHP?",
            "options": [
                "catch(ExceptionType $e) { … }",
                "catch as ExceptionType $e { … }",
                "catch in ExceptionType $e { … }",
                "catch with ExceptionType $e { … }"
            ],
            "answer": "catch(ExceptionType $e) { … }",
            "explanation": "The catch block specifies the type of exception to catch using catch(ExceptionType $e) syntax."
        },
        {
            "question": "How can you rethrow an exception in PHP?",
            "options": [
                "By using the rethrow keyword",
                "By calling throw again within a catch block",
                "By using the continue keyword",
                "Rethrowing exceptions is not possible in PHP"
            ],
            "answer": "By calling throw again within a catch block",
            "explanation": "An exception can be rethrown in PHP by using the throw keyword again within a catch block."
        },
        {
            "question": "What is the primary purpose of exception handling in PHP?",
            "options": [
                "To optimize code performance",
                "To improve code readability",
                "To handle runtime errors gracefully",
                "To debug code"
            ],
            "answer": "To handle runtime errors gracefully",
            "explanation": "The primary purpose of exception handling is to handle runtime errors in a way that does not crash the program and allows for graceful recovery or termination."
        },
        {
            "question": "Which of the following is a built-in exception in PHP?",
            "options": [
                "UserException",
                "DatabaseException",
                "InvalidArgumentException",
                "FormException"
            ],
            "answer": "InvalidArgumentException",
            "explanation": "InvalidArgumentException is an example of a built-in exception in PHP."
        },
        {
            "question": "Can you nest try-catch blocks in PHP?",
            "options": [
                "Yes",
                "No",
                "Only in classes",
                "Only in functions"
            ],
            "answer": "Yes",
            "explanation": "Try-catch blocks can be nested within each other in PHP."
        },
        {
            "question": "What is the output of getMessage() function in an exception object in PHP?",
            "options": [
                "The line number where the exception occurred",
                "The exception message",
                "The stack trace",
                "The exception code"
            ],
            "answer": "The exception message",
            "explanation": "The getMessage() function returns the message of the exception that was thrown."
        },
        {
            "question": "What is the primary purpose of PHP filters?",
            "options": [
                "To modify the output of PHP scripts",
                "To sanitize and validate data from external sources",
                "To filter the contents of a file",
                "To apply CSS filters in PHP"
            ],
            "answer": "To sanitize and validate data from external sources",
            "explanation": "PHP filters are primarily used to sanitize and validate data coming from insecure sources, such as user input."
        },
        {
            "question": "Which function is used to filter a single variable with a specified filter in PHP?",
            "options": [
                "filter_var()",
                "filter_input()",
                "filter_process()",
                "var_filter()"
            ],
            "answer": "filter_var()",
            "explanation": "The filter_var() function is used to filter a single variable with a specified filter."
        },
        {
            "question": "What does the FILTER_SANITIZE_STRING filter do in PHP?",
            "options": [
                "Validates whether the data is a string",
                "Sanitizes a string by removing tags",
                "Encrypts a string",
                "Converts a string to an array"
            ],
            "answer": "Sanitizes a string by removing tags",
            "explanation": "FILTER_SANITIZE_STRING removes all HTML tags from a string, effectively sanitizing it."
        },
        {
            "question": "Which filter in PHP is used to validate email addresses?",
            "options": [
                "FILTER_VALIDATE_EMAIL",
                "FILTER_SANITIZE_EMAIL",
                "FILTER_EMAIL",
                "EMAIL_FILTER"
            ],
            "answer": "FILTER_VALIDATE_EMAIL",
            "explanation": "FILTER_VALIDATE_EMAIL is used to validate whether the given value is a valid email address."
        },
        {
            "question": "How do you check if a variable is an integer using PHP filters?",
            "options": [
                "Using FILTER_VALIDATE_INT",
                "Using FILTER_SANITIZE_NUMBER_INT",
                "Using INT_FILTER",
                "Using VALIDATE_INT"
            ],
            "answer": "Using FILTER_VALIDATE_INT",
            "explanation": "FILTER_VALIDATE_INT is used to validate whether a variable is an integer."
        },
        {
            "question": "What does the filter_input() function do in PHP?",
            "options": [
                "Filters a variable from a script",
                "Gets an external variable and optionally filters it",
                "Filters all input data",
                "Validates input data"
            ],
            "answer": "Gets an external variable and optionally filters it",
            "explanation": "The filter_input() function is used to get an external variable like data from a form and optionally filters it."
        },
        {
            "question": "Which filter in PHP is used to sanitize a URL?",
            "options": [
                "FILTER_SANITIZE_URL",
                "FILTER_VALIDATE_URL",
                "URL_FILTER",
                "SANITIZE_URL"
            ],
            "answer": "FILTER_SANITIZE_URL",
            "explanation": "FILTER_SANITIZE_URL is used to sanitize a URL by removing all illegal URL characters."
        },
        {
            "question": "What is the purpose of the FILTER_FLAG_NO_ENCODE_QUOTES flag in PHP?",
            "options": [
                "To prevent encoding of quotes",
                "To encode quotes",
                "To remove quotes",
                "To add quotes"
            ],
            "answer": "To prevent encoding of quotes",
            "explanation": "When used with certain filters, FILTER_FLAG_NO_ENCODE_QUOTES prevents the encoding of quotation marks."
        },
        {
            "question": "How do you validate an IP address in PHP?",
            "options": [
                "Using FILTER_VALIDATE_IP",
                "Using FILTER_SANITIZE_IP",
                "Using IP_VALIDATE",
                "Using VALIDATE_IP"
            ],
            "answer": "Using FILTER_VALIDATE_IP",
            "explanation": "FILTER_VALIDATE_IP is used to validate if a value is a valid IP address."
        },
        {
            "question": "What does the FILTER_SANITIZE_NUMBER_FLOAT filter do in PHP?",
            "options": [
                "Validates a floating-point number",
                "Sanitizes a number by removing illegal characters",
                "Converts a string to a floating-point number",
                "Rounds a floating-point number"
            ],
            "answer": "Sanitizes a number by removing illegal characters",
            "explanation": "FILTER_SANITIZE_NUMBER_FLOAT removes all illegal characters from a number, leaving only digits, +- and optionally .,eE."
        }
    ],
    "Swift": [
        {
            "question": "Which of the following is the correct way to declare a constant in Swift?",
            "options": [
                "let constantName = value",
                "const constantName = value",
                "var constantName = value",
                "final constantName = value"
            ],
            "answer": "let constantName = value",
            "explanation": "In Swift, constants are declared using the let keyword."
        },
        {
            "question": "Which data type is used to store textual data in Swift?",
            "options": [
                "char",
                "text",
                "String",
                "str"
            ],
            "answer": "String",
            "explanation": "Swift uses the String data type to store textual data."
        },
        {
            "question": "What does the following code print?",
            "options": [
                "nil",
                "No value",
                "0",
                "Error"
            ],
            "answer": "No value",
            "explanation": "The ?? operator provides a default value (“No value”) if the optional (number) contains nil."
        },
        {
            "question": "Which of the following is not a valid loop in Swift?",
            "options": [
                "for",
                "while",
                "repeat",
                "loop"
            ],
            "answer": "loop",
            "explanation": "Swift has for, while, and repeat-while loops. There is no loop keyword."
        },
        {
            "question": "Which Swift feature allows you to group multiple values together?",
            "options": [
                "Class",
                "Array",
                "Tuple",
                "Dictionary"
            ],
            "answer": "Tuple",
            "explanation": "A tuple allows you to group multiple values together, possibly of different types."
        },
        {
            "question": "What does the following code declare?",
            "options": [
                "An array of strings",
                "A dictionary with string keys",
                "A set of strings",
                "A tuple of strings"
            ],
            "answer": "An array of strings",
            "explanation": "The syntax specifies an array of String type."
        },
        {
            "question": "Which operator is used for string concatenation?",
            "options": [
                "+",
                "&",
                ".",
                "*"
            ],
            "answer": "+",
            "explanation": "In Swift, the + operator is used to concatenate strings."
        },
        {
            "question": "How can you safely unwrap an optional in Swift?",
            "options": [
                "Force unwrap",
                "Optional binding",
                "Implicit unwrap",
                "Unwrap"
            ],
            "answer": "Optional binding",
            "explanation": "Optional binding (using if let or guard let) is a safe way to unwrap optionals without risking a runtime crash."
        },
        {
            "question": "Which of the following is a valid function declaration in Swift?",
            "options": [
                "func functionName() -> return",
                "function functionName() {}",
                "def functionName() {}",
                "func functionName() {}"
            ],
            "answer": "func functionName() {}",
            "explanation": "In Swift, functions are declared using the func keyword."
        },
        {
            "question": "Which keyword is used to declare a class in Swift?",
            "options": [
                "class",
                "struct",
                "interface",
                "object"
            ],
            "answer": "class",
            "explanation": "The class keyword is used to declare classes in Swift."
        },
        {
            "question": "What does the ! symbol represent when used after a variable?",
            "options": [
                "It forces the variable to be optional.",
                "It casts the variable to a different type.",
                "It force unwraps the optional.",
                "It checks if the variable is nil."
            ],
            "answer": "It force unwraps the optional.",
            "explanation": "The ! symbol, when used after an optional, forcefully unwraps it. This can lead to a runtime crash if the optional is nil."
        },
        {
            "question": "Which collection is unordered and stores unique values?",
            "options": [
                "Array",
                "Set",
                "Dictionary",
                "List"
            ],
            "answer": "Set",
            "explanation": "Sets are collections of unique values that are unordered."
        },
        {
            "question": "Which type alias represents a function type in Swift?",
            "options": [
                "Type",
                "Func",
                "Closure",
                "Method"
            ],
            "answer": "Closure",
            "explanation": "In Swift, closures represent blocks of self-contained code, and they can be thought of as function types."
        },
        {
            "question": "Which operator checks for object identity?",
            "options": [
                "==",
                "===",
                "!=",
                "!=="
            ],
            "answer": "===",
            "explanation": "The === operator checks if two object references refer to the same instance."
        },
        {
            "question": "Which is a valid dictionary declaration?",
            "options": [
                "var dictionary: [Key: Value]",
                "var dictionary: Key -> Value",
                "var dictionary: Key, Value",
                "var dictionary: [Key, Value]"
            ],
            "answer": "var dictionary: [Key: Value]",
            "explanation": "Dictionaries in Swift use a [Key: Value] syntax for declaration."
        },
        {
            "question": "Which keyword is used to handle exceptions in Swift?",
            "options": [
                "catch",
                "error",
                "except",
                "fault"
            ],
            "answer": "catch",
            "explanation": "Swift uses do, try, and catch for exception handling."
        },
        {
            "question": "Which of the following is not a valid access control modifier in Swift?",
            "options": [
                "private",
                "protected",
                "public",
                "fileprivate"
            ],
            "answer": "protected",
            "explanation": "Swift doesn’t have a protected access level. The available ones are public, internal, fileprivate, and private."
        },
        {
            "question": "Which protocol is used to check for equality?",
            "options": [
                "Equatable",
                "Comparable",
                "Equal",
                "Matchable"
            ],
            "answer": "Equatable",
            "explanation": "The Equatable protocol is used to check for equality between instances."
        },
        {
            "question": "Which is the correct way to define an enumeration in Swift?",
            "options": [
                "enum Name {case, case}",
                "enumerate Name: case, case",
                "enum Name: {case, case}",
                "enum Name {case case1, case case2}"
            ],
            "answer": "enum Name {case case1, case case2}",
            "explanation": "Enumerations are defined using the enum keyword, followed by cases inside curly braces."
        },
        {
            "question": "Which Swift feature ensures type safety at compile-time?",
            "options": [
                "Dynamic typing",
                "Static typing",
                "Type inference",
                "Type conversion"
            ],
            "answer": "Static typing",
            "explanation": "Swift is a statically-typed language, which means type checking is done at compile-time."
        },
        {
            "question": "Which of the following denotes a multiline string?",
            "options": [
                "“””…”””",
                "”’…”’",
                "“…”",
                "‘…’"
            ],
            "answer": "“””…”””",
            "explanation": "In Swift, multiline strings are enclosed in triple double quotes."
        },
        {
            "question": "Which of these is not a valid numeric type in Swift?",
            "options": [
                "Int",
                "Double",
                "Float",
                "Short"
            ],
            "answer": "Short",
            "explanation": "Swift doesn’t have a Short numeric type. Instead, it has Int, UInt, Double, and Float."
        },
        {
            "question": "Which method is called when an instance of a class is deallocated?",
            "options": [
                "deinit",
                "dealloc",
                "delete",
                "destroy"
            ],
            "answer": "deinit",
            "explanation": "The deinit method is called just before an instance of a class is deallocated."
        },
        {
            "question": "Which operator allows you to provide a default value for an optional?",
            "options": [
                "?.",
                "!!",
                "??",
                "!?"
            ],
            "answer": "??",
            "explanation": "The ?? operator (nil coalescing operator) provides a default value if the optional is nil."
        },
        {
            "question": "Which of these is the base protocol for most Swift standard library types?",
            "options": [
                "Base",
                "Object",
                "Any",
                "Element"
            ],
            "answer": "Any",
            "explanation": "Any can represent an instance of any type, and is the base type for most types in Swift."
        }
    ],
    "Ruby": [
        {
            "question": "What is the creator of Ruby's name?",
            "options": [
                "Guido van Rossum",
                "Brendan Eich",
                "Yukihiro Matsumoto",
                "Linus Torvalds"
            ],
            "answer": "Yukihiro Matsumoto",
            "explanation": "Yukihiro Matsumoto, also known as \"Matz\", is the creator of Ruby."
        },
        {
            "question": "Which method checks if an array is empty?",
            "options": [
                "isEmpty",
                "nil?",
                "empty?",
                "none?"
            ],
            "answer": "empty?",
            "explanation": "The empty? method is used to check if an array is empty in Ruby."
        },
        {
            "question": "Which of the following is used to define an instance variable in Ruby?",
            "options": [
                "$variableName",
                "@@variableName",
                "variableName",
                "@variableName"
            ],
            "answer": "@variableName",
            "explanation": "Instance variables in Ruby are prefixed with an @ symbol. This denotes that the variable belongs to an instance of the class."
        },
        {
            "question": "What does the following Ruby code return? [\"Ruby\", \"Python\", \"Java\"].length",
            "options": [
                "0",
                "3",
                "4",
                "nil"
            ],
            "answer": "3",
            "explanation": "This code returns the number of elements in the array, which is 3."
        },
        {
            "question": "Which method in Ruby is used to convert a string to uppercase?",
            "options": [
                "to_upper",
                "uppercase",
                "upcase",
                "capitalize"
            ],
            "answer": "upcase",
            "explanation": "The upcase method is used in Ruby to convert all characters in a string to uppercase."
        },
        {
            "question": "What is the output of \"Ruby\" * 3?",
            "options": [
                "RubyRubyRuby",
                "Ruby3",
                "RubyRuby",
                "Error"
            ],
            "answer": "RubyRubyRuby",
            "explanation": "In Ruby, the * operator when used with a string and a number repeats the string that number of times."
        },
        {
            "question": "Which operator in Ruby is used for equality comparison?",
            "options": [
                "=",
                "==",
                "===",
                "equal?"
            ],
            "answer": "==",
            "explanation": "The == operator in Ruby is used to check if two values are equal in content."
        },
        {
            "question": "Which of the following is true about Ruby's nil?",
            "options": [
                "It's equivalent to false.",
                "It's an instance of NilClass.",
                "It represents the absence of a value.",
                "All of the above."
            ],
            "answer": "All of the above.",
            "explanation": "nil in Ruby is an instance of the NilClass and represents the absence of a value. Moreover, in boolean contexts, only false and nil evaluate as false."
        },
        {
            "question": "How do you comment out multiple lines in Ruby?",
            "options": [
                "// … //",
                "/* … */",
                "# … #",
                "You prefix each line with #."
            ],
            "answer": "You prefix each line with #.",
            "explanation": "Ruby doesn’t have a multiple line comment feature. You have to prefix each line with the # symbol."
        },
        {
            "question": "Which keyword is used to define a method in Ruby?",
            "options": [
                "function",
                "method",
                "define",
                "def"
            ],
            "answer": "def",
            "explanation": "In Ruby, the def keyword is used to define a method."
        },
        {
            "question": "What will the following code return: 5.eql?(5.0)?",
            "options": [
                "true",
                "false",
                "nil",
                "Error"
            ],
            "answer": "false",
            "explanation": "The eql? method checks both the value and type. 5 is an integer and 5.0 is a float, so they are not equivalent."
        },
        {
            "question": "Which of the following is a truthy value in Ruby?",
            "options": [
                "false",
                "nil",
                "0",
                "\"\""
            ],
            "answer": "0",
            "explanation": "In Ruby, only false and nil are falsy. All other values, including 0 and \"\", are considered truthy."
        },
        {
            "question": "How is a block defined in Ruby?",
            "options": [
                "Using do..end",
                "With {}",
                "Both a and b",
                "Using []"
            ],
            "answer": "Both a and b",
            "explanation": "Blocks in Ruby can be defined using both do..end and {} notations."
        },
        {
            "question": "How do you catch exceptions in Ruby?",
            "options": [
                "catch..throw",
                "try..catch",
                "rescue..begin",
                "begin..rescue"
            ],
            "answer": "begin..rescue",
            "explanation": "In Ruby, the begin..rescue construct is used to handle exceptions."
        },
        {
            "question": "Which operator is used for string concatenation?",
            "options": [
                "+",
                "&",
                "..",
                "#"
            ],
            "answer": "+",
            "explanation": "The + operator is used for string concatenation in Ruby."
        },
        {
            "question": "What is the super class of all classes in Ruby?",
            "options": [
                "Root",
                "Base",
                "Object",
                "Super"
            ],
            "answer": "Object",
            "explanation": "In Ruby, every class implicitly inherits from the Object class."
        },
        {
            "question": "Which method is NOT defined in Ruby's Array class?",
            "options": [
                "first",
                "pick",
                "last",
                "length"
            ],
            "answer": "pick",
            "explanation": "There's no pick method for arrays in Ruby by default."
        },
        {
            "question": "What does the self keyword refer to in Ruby?",
            "options": [
                "The current file",
                "The current method",
                "The current object",
                "The superclass"
            ],
            "answer": "The current object",
            "explanation": "In Ruby, self refers to the object on which the current method is being executed."
        },
        {
            "question": "Which of the following methods returns the reversed version of a string without modifying the original string?",
            "options": [
                "upturn",
                "reverse",
                "backwards",
                "invert"
            ],
            "answer": "reverse",
            "explanation": "The reverse method returns a new string that is a reversed version of the original."
        },
        {
            "question": "How do you represent a range from 1 to 5 in Ruby?",
            "options": [
                "1..5",
                "1-5",
                "1:5",
                "1…5"
            ],
            "answer": "1..5",
            "explanation": "In Ruby, 1..5 creates a range inclusive of both 1 and 5."
        },
        {
            "question": "Which of the following loops isn't present in Ruby?",
            "options": [
                "for",
                "while",
                "do",
                "until"
            ],
            "answer": "do",
            "explanation": "Ruby doesn't have a standalone do loop. Instead, do is used to define blocks."
        },
        {
            "question": "How do you define a global variable in Ruby?",
            "options": [
                "Using the global keyword",
                "Prefixing with $",
                "Prefixing with @",
                "Prefixing with @@"
            ],
            "answer": "Prefixing with $",
            "explanation": "Global variables in Ruby are prefixed with the $ sign."
        },
        {
            "question": "What does the attr_accessor keyword do in Ruby?",
            "options": [
                "Creates a private method",
                "Provides read and write access for a variable",
                "Executes a block",
                "Provides read-only access for a variable"
            ],
            "answer": "Provides read and write access for a variable",
            "explanation": "attr_accessor creates both a getter and a setter method for a given variable."
        },
        {
            "question": "What is the result of the expression nil || \"hello\"?",
            "options": [
                "nil",
                "true",
                "hello",
                "false"
            ],
            "answer": "hello",
            "explanation": "In Ruby, the || operator returns the first truthy value it encounters. Since nil is falsy, the string \"hello\" is returned."
        },
        {
            "question": "Which of the following can be used to add an element to the end of an array?",
            "options": [
                "push",
                "<<",
                "add",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "In Ruby, both the push method and the << operator can be used to add an element to the end of an array."
        },
        {
            "question": "Which of the following is NOT a valid way to define a symbol in Ruby?",
            "options": [
                ":hello",
                "hello:",
                ":\"hello world\"",
                ":'hello world'"
            ],
            "answer": "hello:",
            "explanation": "The correct ways to define a symbol in Ruby include :hello, :\"hello world\", and :'hello world'."
        },
        {
            "question": "What is the main difference between the puts and print methods?",
            "options": [
                "puts returns nil, while print returns the string it printed.",
                "print adds a newline character at the end, while puts doesn't.",
                "puts adds a newline character at the end, while print doesn't.",
                "There is no difference."
            ],
            "answer": "puts adds a newline character at the end, while print doesn't.",
            "explanation": "puts stands for \"put string\" and automatically appends a newline character, whereas print does not."
        },
        {
            "question": "How is an instance variable defined in Ruby?",
            "options": [
                "By prefixing with a @@",
                "By prefixing with a @",
                "By using the instance keyword",
                "By prefixing with a #"
            ],
            "answer": "By prefixing with a @",
            "explanation": "Instance variables in Ruby are prefixed with the @ sign."
        },
        {
            "question": "Which of the following methods returns the number of characters in a string?",
            "options": [
                "size",
                "count",
                "length",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "In Ruby, both the size and length methods return the number of characters in a string."
        },
        {
            "question": "Which of the following is not a loop in Ruby?",
            "options": [
                "for",
                "until",
                "repeat",
                "while"
            ],
            "answer": "repeat",
            "explanation": "Ruby doesn't have a built-in repeat loop."
        },
        {
            "question": "How do you create a new empty hash in Ruby?",
            "options": [
                "{}",
                "Hash.new",
                "new Hash()",
                "Both a and b"
            ],
            "answer": "Both a and b",
            "explanation": "In Ruby, you can create a new empty hash either using the literal {} or using Hash.new."
        },
        {
            "question": "What is the result of \"hello\".class in Ruby?",
            "options": [
                "String",
                "Object",
                "Text",
                "Char"
            ],
            "answer": "String",
            "explanation": "In Ruby, the .class method returns the class of an object. The class of the string \"hello\" is String."
        },
        {
            "question": "How do you convert a string \"123\" into an integer in Ruby?",
            "options": [
                "\"123\".to_i",
                "\"123\".convert(:integer)",
                "Integer(\"123\")",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "In Ruby, you can convert a string to an integer using the to_i method of the string or using the Integer() method."
        }
    ],
    "R": [
        {
            "question": "What is the correct way to assign a value to a variable in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "Which function in R is used to read data from a CSV file?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What does the str() function do in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "How do you create a vector in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "Which function is used to install packages in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What is the output of the expression sqrt(16) in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "How do you check the type of a variable in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What is R primarily used for?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "How do you comment on a line of code in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What is the purpose of the NA value in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "Which of these is not a valid data frame operation in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "How do you access elements in a list?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What does the summary() function in R provide?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "How do you generate a sequence of numbers from 1 to 10 in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "Which operator is used for matrix multiplication in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "How do you create a factor in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What is the default method to handle categorical data in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What does the function rm() do?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "How do you subset data in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "Which function would you use to calculate the mean of a numeric vector?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What does the apply() function do?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "How do you save a plot as a PDF in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What is the purpose of the table() function in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "How is a dataset imported from an Excel file in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        },
        {
            "question": "What is the use of the lapply() function in R?",
            "options": [
                "",
                "",
                "",
                ""
            ],
            "answer": "",
            "explanation": ""
        }
    ],
    "Scala": [
        {
            "question": "What does the word 'Scala' stand for?",
            "options": [
                "Scalability",
                "Scalable Language",
                "Scalar Language",
                "Scalation"
            ],
            "answer": "Scalable Language",
            "explanation": "The name 'Scala' is a portmanteau of \"scalable\" and \"language\", indicating its design to grow with the demands of its users."
        },
        {
            "question": "Which keyword is used in Scala to declare a class?",
            "options": [
                "struct",
                "class",
                "type",
                "object"
            ],
            "answer": "class",
            "explanation": "In Scala, the class keyword is used to declare a class. It allows for the creation of objects and encapsulation of data and behavior."
        },
        {
            "question": "How do you define a singleton object in Scala?",
            "options": [
                "Using the single keyword",
                "Using the singleton keyword",
                "Using the object keyword",
                "Using the instance keyword"
            ],
            "answer": "Using the object keyword",
            "explanation": "In Scala, the object keyword is used to define a singleton object. This ensures that there's only one instance of the object throughout the JVM."
        },
        {
            "question": "Which Scala operator is used for string concatenation?",
            "options": [
                "+",
                "&",
                "concat",
                "."
            ],
            "answer": "+",
            "explanation": "Scala uses the + operator for string concatenation, similar to Java."
        },
        {
            "question": "Which operator is used for checking the equality of two objects in Scala?",
            "options": [
                "==",
                "===",
                "equals",
                "is"
            ],
            "answer": "==",
            "explanation": "In Scala, the == operator is used to check the equality of two objects. It checks the contents for objects, unlike Java where it checks the reference."
        },
        {
            "question": "Which data type is immutable in Scala?",
            "options": [
                "Array",
                "List",
                "StringBuilder",
                "StringBuffer"
            ],
            "answer": "List",
            "explanation": "In Scala, Lists are immutable, meaning their elements cannot be changed after they are created."
        },
        {
            "question": "How do you define a variable in Scala that cannot be modified?",
            "options": [
                "var x = 10",
                "const x = 10",
                "define x = 10",
                "val x = 10"
            ],
            "answer": "val x = 10",
            "explanation": "In Scala, val is used to declare a constant, or immutable, variable."
        },
        {
            "question": "Which keyword is used for inheritance in Scala?",
            "options": [
                "extends",
                "inherits",
                "using",
                "with"
            ],
            "answer": "extends",
            "explanation": "In Scala, the extends keyword is used to denote inheritance from a superclass."
        },
        {
            "question": "What does the following code return: Some(5).getOrElse(0)?",
            "options": [
                "5",
                "0",
                "Some(5)",
                "None"
            ],
            "answer": "5",
            "explanation": "getOrElse returns the value inside the Some if it's present, otherwise it returns the default value provided, which is 0 in this case."
        },
        {
            "question": "In Scala, what is the base trait for all data types?",
            "options": [
                "Object",
                "DataType",
                "Base",
                "Any"
            ],
            "answer": "Any",
            "explanation": "In Scala, Any is the root trait (or super trait) of every type."
        },
        {
            "question": "Which of the following is NOT a valid Scala collection?",
            "options": [
                "List",
                "Map",
                "Set",
                "ArrayDict"
            ],
            "answer": "ArrayDict",
            "explanation": "ArrayDict is not a part of the Scala's standard collection library."
        },
        {
            "question": "What is the result of the following code: \"Hello\".tail?",
            "options": [
                "\"Hello\"",
                "\"H\"",
                "\"ello\"",
                "Error"
            ],
            "answer": "\"ello\"",
            "explanation": "The tail method returns all characters of the string except the first one."
        },
        {
            "question": "What is a correct way to define a function in Scala?",
            "options": [
                "function add(a: Int, b: Int): Int { return a + b; }",
                "def add(a: Int, b: Int): Int = { a + b }",
                "fun add(a: Int, b: Int): Int { a + b }",
                "define add(a: Int, b: Int): Int => a + b"
            ],
            "answer": "def add(a: Int, b: Int): Int = { a + b }",
            "explanation": "Functions in Scala are defined using the def keyword."
        },
        {
            "question": "Which of the following can represent an optional value in Scala?",
            "options": [
                "Maybe",
                "Option",
                "Opt",
                "Nullable"
            ],
            "answer": "Option",
            "explanation": "In Scala, Option is used to represent a value that might be present or absent."
        },
        {
            "question": "Which method can transform an Option value?",
            "options": [
                "transform",
                "change",
                "modify",
                "map"
            ],
            "answer": "map",
            "explanation": "The map method is used to transform the value inside an Option without affecting its optional nature."
        },
        {
            "question": "In Scala, what is a trait?",
            "options": [
                "A data type",
                "A type of variable",
                "An abstract class type",
                "A type of function"
            ],
            "answer": "An abstract class type",
            "explanation": "A trait in Scala represents a set of abstract and non-abstract methods. It's akin to an interface in other languages, but can also contain concrete methods."
        },
        {
            "question": "What is the result of this Scala code: List(1, 2, 3, 4).reduceLeft(_ – _)?",
            "options": [
                "-8",
                "-2",
                "10",
                "2"
            ],
            "answer": "-2",
            "explanation": "reduceLeft applies the function from left to right: (((1-2)-3)-4) = -2."
        },
        {
            "question": "Which of the following creates an instance of a Scala tuple containing two elements?",
            "options": [
                "[1, \"Hello\"]",
                "Tuple(1, \"Hello\")",
                "(1, \"Hello\")",
                "{1, \"Hello\"}"
            ],
            "answer": "(1, \"Hello\")",
            "explanation": "In Scala, tuples are created using parentheses."
        },
        {
            "question": "Which method will throw an exception if an Option is None?",
            "options": [
                "get",
                "orElse",
                "getOrElse",
                "isEmpty"
            ],
            "answer": "get",
            "explanation": "Calling get on a None will throw a NoSuchElementException."
        },
        {
            "question": "In Scala, which of the following represents a mutable list?",
            "options": [
                "List",
                "Vector",
                "MutableList",
                "ImmutableList"
            ],
            "answer": "MutableList",
            "explanation": "While List and Vector are immutable collections, MutableList allows modification."
        },
        {
            "question": "Which operator checks the type of a variable in Scala?",
            "options": [
                "::",
                ":",
                "as",
                "isInstanceOf"
            ],
            "answer": "isInstanceOf",
            "explanation": "isInstanceOf is used to check the type of a variable in Scala."
        },
        {
            "question": "How do you create an instance of a class Person in Scala?",
            "options": [
                "new Person",
                "Person.new",
                "Person()",
                "create Person"
            ],
            "answer": "new Person",
            "explanation": "Instances of classes in Scala are created using the new keyword followed by the class name."
        },
        {
            "question": "Which keyword is used for pattern matching in Scala?",
            "options": [
                "match",
                "switch",
                "case",
                "pattern"
            ],
            "answer": "match",
            "explanation": "match is the keyword used for pattern matching in Scala, although case is used within the match expression to define patterns."
        },
        {
            "question": "How do you concatenate two lists in Scala?",
            "options": [
                "++",
                "+",
                ".add",
                "concat"
            ],
            "answer": "++",
            "explanation": "In Scala, two lists can be concatenated using the ++ operator."
        },
        {
            "question": "Which Scala keyword is used to define an abstract class?",
            "options": [
                "abs",
                "abstract",
                "abstraction",
                "virtual"
            ],
            "answer": "abstract",
            "explanation": "The abstract keyword in Scala is used to declare a class as abstract, meaning it can't be instantiated directly and may contain abstract (undefined) methods."
        }
    ],
    "SQL": [
        {
            "question": "Which SQL statement is used to extract data from a database?",
            "options": [
                "GET",
                "EXTRACT",
                "FETCH",
                "SELECT"
            ],
            "answer": "SELECT",
            "explanation": "The SELECT statement is used to select data from a database. The result is stored in a result table."
        },
        {
            "question": "Which SQL keyword is used to sort the result-set?",
            "options": [
                "SORT BY",
                "ORDER BY",
                "ARRANGE BY",
                "ALIGN BY"
            ],
            "answer": "ORDER BY",
            "explanation": "The ORDER BY keyword is used to sort the result-set in ascending or descending order."
        },
        {
            "question": "Which SQL keyword is used to delete data from a database?",
            "options": [
                "REMOVE",
                "DELETE",
                "DESTROY",
                "ERASE"
            ],
            "answer": "DELETE",
            "explanation": "The DELETE statement is used to delete existing records in a table."
        },
        {
            "question": "What SQL clause is used to filter the results of a query?",
            "options": [
                "FILTER BY",
                "SELECT BY",
                "WHERE",
                "LOCATE"
            ],
            "answer": "WHERE",
            "explanation": "The WHERE clause is used to filter records and extract only those records that fulfill a specified condition."
        },
        {
            "question": "Which SQL function returns the number of rows in a query?",
            "options": [
                "NUM",
                "COUNT",
                "SUM",
                "TOTAL"
            ],
            "answer": "COUNT",
            "explanation": "The COUNT function returns the number of rows that matches a specified criterion."
        },
        {
            "question": "Which SQL keyword gives a nickname to a table (typically for the purpose of a join)?",
            "options": [
                "NICKNAME",
                "AS",
                "ALIAS",
                "CALL"
            ],
            "answer": "ALIAS",
            "explanation": "An alias only exists for the duration of the query. It can be used for column names and table names."
        },
        {
            "question": "What type of SQL command is INSERT INTO?",
            "options": [
                "Data Definition Language",
                "Data Manipulation Language",
                "Data Control Language",
                "Transaction Control Language"
            ],
            "answer": "Data Manipulation Language",
            "explanation": "INSERT INTO is a command used to insert new records into a table, making it a Data Manipulation Language (DML) command."
        },
        {
            "question": "Which command is used to remove a table from a database?",
            "options": [
                "REMOVE",
                "ERASE",
                "DROP",
                "DELETE"
            ],
            "answer": "DROP",
            "explanation": "The DROP command is used to delete an existing table (or database)."
        },
        {
            "question": "In SQL, which command is used to make changes made by a transaction permanent in a database?",
            "options": [
                "SAVE",
                "SAVEPOINT",
                "COMMIT",
                "HOLD"
            ],
            "answer": "COMMIT",
            "explanation": "The COMMIT command saves all the transactions to the database since the last COMMIT or ROLLBACK command."
        },
        {
            "question": "What will the SQL query SELECT * FROM Users WHERE FirstName = ‘John’ AND LastName = ‘Doe’; return?",
            "options": [
                "All users with the first name 'John'.",
                "All users with the last name 'Doe'.",
                "All users with the first name 'John' or the last name 'Doe'.",
                "All users with the first name 'John' and the last name 'Doe'."
            ],
            "answer": "All users with the first name 'John' and the last name 'Doe'.",
            "explanation": "The query uses the AND operator, which means both conditions specified must be true for a row to be included in the result set."
        },
        {
            "question": "What is the default sort order of the ORDER BY clause in SQL?",
            "options": [
                "Descending",
                "Ascending",
                "Random",
                "Hierarchical"
            ],
            "answer": "Ascending",
            "explanation": "By default, the ORDER BY clause sorts the records in ascending order."
        },
        {
            "question": "Which SQL statement is used to update data in a database?",
            "options": [
                "MODIFY",
                "REVISE",
                "CHANGE",
                "UPDATE"
            ],
            "answer": "UPDATE",
            "explanation": "The UPDATE statement is used to modify existing records in a table."
        },
        {
            "question": "Which SQL function calculates the total sum of a numeric column?",
            "options": [
                "SUMMARIZE",
                "TOTAL",
                "COUNT",
                "SUM"
            ],
            "answer": "SUM",
            "explanation": "The SUM function is used to get the sum of a numeric column."
        },
        {
            "question": "What does the SQL LIKE operator do?",
            "options": [
                "Compares two values for equality",
                "Finds rows that match a specified pattern",
                "Calculates the sum of values",
                "Sorts result in ascending or descending order"
            ],
            "answer": "Finds rows that match a specified pattern",
            "explanation": "The LIKE operator is used in a WHERE clause to search for a specified pattern in a column."
        },
        {
            "question": "Which SQL clause is used to group rows that have the same values in specified columns?",
            "options": [
                "GROUP BY",
                "ORDER BY",
                "PARTITION BY",
                "SORT BY"
            ],
            "answer": "GROUP BY",
            "explanation": "The GROUP BY statement groups rows that have the same values in specified columns into aggregate data."
        },
        {
            "question": "What does SQL stand for?",
            "options": [
                "Structured Question Language",
                "Simple Query Language",
                "Structured Query Language",
                "System Query Language"
            ],
            "answer": "Structured Query Language",
            "explanation": "SQL stands for Structured Query Language, a standard language for storing, manipulating, and retrieving data in databases."
        },
        {
            "question": "In SQL, which operator is used to test for a value within a range of values?",
            "options": [
                "IN",
                "BETWEEN",
                "LIKE",
                "CONTAINS"
            ],
            "answer": "BETWEEN",
            "explanation": "The BETWEEN operator selects values within a given range."
        },
        {
            "question": "Which SQL statement is used to add, modify, or drop columns in a table?",
            "options": [
                "MODIFY TABLE",
                "CHANGE TABLE",
                "ALTER TABLE",
                "UPDATE TABLE"
            ],
            "answer": "ALTER TABLE",
            "explanation": "The ALTER TABLE statement is used to add, delete, or modify columns in an existing table."
        },
        {
            "question": "What is the purpose of the SQL DISTINCT keyword?",
            "options": [
                "To sort results",
                "To remove duplicates",
                "To update records",
                "To join tables"
            ],
            "answer": "To remove duplicates",
            "explanation": "The DISTINCT keyword is used in SELECT statements to eliminate duplicate rows in the result set."
        },
        {
            "question": "Which SQL command creates a new database?",
            "options": [
                "NEW DATABASE",
                "ADD DATABASE",
                "CREATE DATABASE",
                "INIT DATABASE"
            ],
            "answer": "CREATE DATABASE",
            "explanation": "The CREATE DATABASE statement is used to create a new SQL database."
        },
        {
            "question": "Which SQL statement is used to return only different values?",
            "options": [
                "SELECT UNIQUE",
                "SELECT DIFFERENT",
                "SELECT DISTINCT",
                "SELECT SEPARATE"
            ],
            "answer": "SELECT DISTINCT",
            "explanation": "The SELECT DISTINCT statement is used to return only distinct (different) values."
        },
        {
            "question": "In SQL, which command is used to roll back a transaction?",
            "options": [
                "REVERT",
                "UNDO",
                "ROLLBACK",
                "RESET"
            ],
            "answer": "ROLLBACK",
            "explanation": "The ROLLBACK command restores the database to the last committed state."
        },
        {
            "question": "Which SQL function returns the highest value in a column?",
            "options": [
                "MAX",
                "HIGH",
                "UP",
                "TOP"
            ],
            "answer": "MAX",
            "explanation": "The MAX function returns the highest value of the selected column."
        },
        {
            "question": "What is the SQL keyword used to retrieve a maximum of 5 records from a table?",
            "options": [
                "TOP 5",
                "FIRST 5",
                "BEST 5",
                "LEADING 5"
            ],
            "answer": "TOP 5",
            "explanation": "The TOP clause is used to specify the number of records to return."
        },
        {
            "question": "What does the SQL NULL value represent?",
            "options": [
                "Zero",
                "Empty string",
                "Undefined or missing data",
                "False"
            ],
            "answer": "Undefined or missing data",
            "explanation": "A field with a NULL value is a field with no value, representing missing or unknown data."
        },
        {
            "question": "Which SQL clause allows filtering AFTER the GROUP BY clause has been applied?",
            "options": [
                "FILTER BY",
                "WHERE",
                "HAVING",
                "AFTER"
            ],
            "answer": "HAVING",
            "explanation": "The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions."
        },
        {
            "question": "What SQL keyword is used to introduce an alias?",
            "options": [
                "INTRODUCE",
                "AS",
                "ALIAS FOR",
                "NAME"
            ],
            "answer": "AS",
            "explanation": "The \"AS\" keyword is used in SQL to rename a column or table using an alias."
        },
        {
            "question": "Which SQL keyword combines the result of two or more SELECT statements?",
            "options": [
                "COMBINE",
                "UNION",
                "JOIN",
                "MERGE"
            ],
            "answer": "UNION",
            "explanation": "The UNION operator is used to combine the result-set of two or more SELECT statements."
        },
        {
            "question": "What is the main difference between UNION and UNION ALL?",
            "options": [
                "UNION ALL allows duplicate records.",
                "UNION requires the same number of columns in each SELECT statement.",
                "UNION ALL can only be used with two SELECT statements.",
                "UNION allows different data types in the SELECT statements."
            ],
            "answer": "UNION ALL allows duplicate records.",
            "explanation": "UNION removes duplicate records (where all columns in the results are the same), UNION ALL does not."
        },
        {
            "question": "Which SQL statement is used to create a stored procedure in a database?",
            "options": [
                "CREATE STORED PROCEDURE",
                "ADD PROCEDURE",
                "DEFINE PROCEDURE",
                "MAKE PROCEDURE"
            ],
            "answer": "CREATE STORED PROCEDURE",
            "explanation": "The CREATE PROCEDURE statement is used to create a stored procedure."
        },
        {
            "question": "In SQL, how do you select all the records from a table named “Users” where the “FirstName” column is not empty?",
            "options": [
                "SELECT * FROM Users WHERE FirstName = ''",
                "SELECT * FROM Users WHERE FirstName != ''",
                "SELECT * FROM Users WHERE FirstName IS NOT NULL",
                "SELECT * FROM Users WHERE FirstName EXISTS"
            ],
            "answer": "SELECT * FROM Users WHERE FirstName IS NOT NULL",
            "explanation": "To ensure that the \"FirstName\" column is not empty, we need to check if it's not NULL."
        },
        {
            "question": "Which SQL function returns the smallest value of the selected column?",
            "options": [
                "LEAST",
                "MINIMUM",
                "MIN",
                "SMALL"
            ],
            "answer": "MIN",
            "explanation": "The MIN function returns the smallest value of the selected column."
        },
        {
            "question": "What type of SQL command is GRANT?",
            "options": [
                "Data Definition Language",
                "Data Manipulation Language",
                "Data Control Language",
                "Transaction Control Language"
            ],
            "answer": "Data Control Language",
            "explanation": "The GRANT command is a Data Control Language (DCL) command that provides specific privileges to users."
        },
        {
            "question": "Which SQL statement is used to delete a table definition and all its data?",
            "options": [
                "DELETE TABLE",
                "REMOVE TABLE",
                "DROP TABLE",
                "TRUNCATE TABLE"
            ],
            "answer": "DROP TABLE",
            "explanation": "The DROP TABLE statement deletes the table definition and all data, indexes, triggers, constraints, and permission specifications for that table."
        },
        {
            "question": "What does the TRUNCATE TABLE statement do in SQL?",
            "options": [
                "Deletes the table definition",
                "Deletes only the table data but not its schema",
                "Modifies the table data type",
                "Makes a copy of the table"
            ],
            "answer": "Deletes only the table data but not its schema",
            "explanation": "The TRUNCATE TABLE statement deletes all rows from a table, but the table structure and its columns, constraints, indexes, and so on, remain."
        },
        {
            "question": "Which SQL clause specifies a condition while fetching data from a single table or by joining multiple tables?",
            "options": [
                "AND",
                "ALIAS",
                "ON",
                "WHERE"
            ],
            "answer": "ON",
            "explanation": "The ON clause is used to specify conditions when joining tables. The conditions determine how the tables are related."
        },
        {
            "question": "Which type of SQL join returns only the rows where there is a match in both the left and the right table?",
            "options": [
                "INNER JOIN",
                "LEFT JOIN",
                "RIGHT JOIN",
                "FULL JOIN"
            ],
            "answer": "INNER JOIN",
            "explanation": "An INNER JOIN gets the records that have matching values in both tables."
        },
        {
            "question": "If you use a LEFT JOIN between two tables, which of the following statements is true?",
            "options": [
                "It retrieves only the matched records from both tables.",
                "It retrieves all the records from the right table and the matched records from the left table.",
                "It retrieves all the records from the left table and the matched records from the right table.",
                "It retrieves all the records from both tables regardless of a match."
            ],
            "answer": "It retrieves all the records from the left table and the matched records from the right table.",
            "explanation": "A LEFT JOIN will fetch all records from the left table and only the matching ones from the right table. If there's no match, NULL values will be displayed for columns from the right table."
        },
        {
            "question": "What does a FULL JOIN do in SQL?",
            "options": [
                "Returns only the rows where there is a match in one of the tables.",
                "Returns all the rows when there is a match in one of the tables.",
                "Returns only the rows where there is a match in both tables.",
                "Returns all rows from both tables and puts NULL in the columns from the table that doesn’t have a match."
            ],
            "answer": "Returns all rows from both tables and puts NULL in the columns from the table that doesn’t have a match.",
            "explanation": "A FULL JOIN returns all records when there is a match in one of the tables. So, it will show all records from both tables and will display NULL for columns from the table that doesn’t have a match."
        },
        {
            "question": "If you perform a CROSS JOIN between a table with 5 rows and a table with 8 rows, how many rows will the result set contain?",
            "options": [
                "13",
                "40",
                "3",
                "8"
            ],
            "answer": "40",
            "explanation": "A CROSS JOIN gives the Cartesian product of the two tables. It returns all possible combinations of all rows. Therefore, it'd be 5 * 8 = 40 rows."
        }
    ],
    "DBMC": [
        {
            "question": "What does DBMS stand for?",
            "options": [
                "Digital Base Management System",
                "Database Management Software",
                "Database Management System",
                "Data Block Management System"
            ],
            "answer": "Database Management System",
            "explanation": "DBMS stands for Database Management System, which is a software system that manages databases."
        },
        {
            "question": "Which of the following is NOT a type of DBMS?",
            "options": [
                "RDBMS",
                "HDBMS",
                "OODBMS",
                "FDBMS"
            ],
            "answer": "FDBMS",
            "explanation": "There’s no type of DBMS known as FDBMS. RDBMS stands for Relational DBMS, HDBMS for Hierarchical DBMS, and OODBMS for Object-Oriented DBMS."
        },
        {
            "question": "What language is used by most relational DBMSs for queries?",
            "options": [
                "QL",
                "SQL",
                "RQL",
                "DQL"
            ],
            "answer": "SQL",
            "explanation": "SQL stands for Structured Query Language and is the standard language used to query a relational database."
        },
        {
            "question": "In a database, what is a collection of related data entries called?",
            "options": [
                "Cell",
                "Key",
                "Table",
                "Schema"
            ],
            "answer": "Table",
            "explanation": "In a database, a table is a collection of related data entries. It consists of columns and rows."
        },
        {
            "question": "What is a single entry in a database table called?",
            "options": [
                "Key",
                "Record",
                "Field",
                "Pointer"
            ],
            "answer": "Record",
            "explanation": "A single entry in a database table, representing a set of related data, is called a record or a row."
        },
        {
            "question": "Which of the following best describes the purpose of a primary key in a database table?",
            "options": [
                "Encrypting data",
                "Speeding up search queries",
                "Uniquely identifying a record",
                "Indicating relationships between tables"
            ],
            "answer": "Uniquely identifying a record",
            "explanation": "A primary key is used to uniquely identify each record in a database table."
        },
        {
            "question": "What type of database relationship links records in two tables based on common values?",
            "options": [
                "Dynamic link",
                "Embedded link",
                "Foreign link",
                "Foreign key relationship"
            ],
            "answer": "Foreign key relationship",
            "explanation": "A foreign key relationship in one table links records to primary key values in another table based on common values."
        },
        {
            "question": "What does a composite key mean in a DBMS?",
            "options": [
                "A key that is composed of two or more columns",
                "A key that is used in complex queries",
                "A key that is composed of duplicate values",
                "A key that can be divided into multiple parts"
            ],
            "answer": "A key that is composed of two or more columns",
            "explanation": "A composite key is made up of two or more columns in a table that are used together to uniquely identify each row."
        },
        {
            "question": "Which one is NOT a characteristic of a database?",
            "options": [
                "Persistent data",
                "Multi-user access",
                "Limited data redundancy",
                "Temporary data"
            ],
            "answer": "Temporary data",
            "explanation": "Databases store persistent data, which means the data remains in the database even if the system is turned off."
        },
        {
            "question": "In a relational database, a table is also known as a?",
            "options": [
                "Tuple",
                "Relation",
                "Field",
                "Attribute"
            ],
            "answer": "Relation",
            "explanation": "In a relational model, a table is often referred to as a relation, whereas rows are called tuples and columns are called attributes."
        },
        {
            "question": "A foreign key in one table points to the ________ in another table.",
            "options": [
                "Foreign Key",
                "Secondary Key",
                "Primary Key",
                "Composite Key"
            ],
            "answer": "Primary Key",
            "explanation": "A foreign key in one table references the primary key of another table, establishing a link between them."
        },
        {
            "question": "Which of the following refers to the correctness and completeness of data?",
            "options": [
                "Integrity",
                "Security",
                "Redundancy",
                "Consistency"
            ],
            "answer": "Integrity",
            "explanation": "Data integrity ensures that the data in the database is accurate and reliable."
        },
        {
            "question": "What is the primary purpose of normalization in DBMS?",
            "options": [
                "Speeding up transactions",
                "Reducing data redundancy",
                "Increasing storage",
                "Enhancing security"
            ],
            "answer": "Reducing data redundancy",
            "explanation": "Normalization is a process of organizing data to reduce redundancy and improve data integrity."
        },
        {
            "question": "What does the acronym ACID stand for in database transactions?",
            "options": [
                "Atomicity, Consistency, Isolation, Durability",
                "Availability, Concurrency, Isolation, Data Integrity",
                "Atomicity, Concurrency, Integrity, Durability",
                "Access, Consistency, Integrity, Durability"
            ],
            "answer": "Atomicity, Consistency, Isolation, Durability",
            "explanation": "ACID properties ensure the reliable processing of transactions within a DBMS."
        },
        {
            "question": "Which of the following models uses a tree-like structure?",
            "options": [
                "Relational model",
                "Hierarchical model",
                "Network model",
                "Object-oriented model"
            ],
            "answer": "Hierarchical model",
            "explanation": "The hierarchical model represents data in a tree-like structure, with one root and a hierarchy of subordinate segments or records."
        },
        {
            "question": "What does DDL stand for in DBMS?",
            "options": [
                "Data Definition Language",
                "Data Driven Language",
                "Database Driven Language",
                "Data Deployment Language"
            ],
            "answer": "Data Definition Language",
            "explanation": "DDL, or Data Definition Language, consists of SQL commands that define and manage database structures, like creating, altering, and dropping tables."
        },
        {
            "question": "In a database, what does a ‘foreign key’ represent?",
            "options": [
                "A primary key from another table",
                "A unique identifier for the database",
                "A special key used for encryption",
                "The secondary index key"
            ],
            "answer": "A primary key from another table",
            "explanation": "A foreign key is a field (or set of fields) in a table that uniquely identifies a row of another table, enforcing referential integrity in the database."
        },
        {
            "question": "Which normal form ensures that a table has a primary key and that all columns are fully functionally dependent on it?",
            "options": [
                "1NF",
                "2NF",
                "3NF",
                "BCNF"
            ],
            "answer": "1NF",
            "explanation": "The First Normal Form (1NF) ensures that each column contains atomic (indivisible) values, and there is a primary key present."
        },
        {
            "question": "What does the ‘C’ in CRUD operations stand for?",
            "options": [
                "Create",
                "Call",
                "Copy",
                "Clear"
            ],
            "answer": "Create",
            "explanation": "CRUD stands for Create, Read, Update, and Delete – the four basic functions of persistent storage in DBMS."
        },
        {
            "question": "Which of the following is NOT a type of database join?",
            "options": [
                "Inner Join",
                "Outer Join",
                "Middle Join",
                "Cross Join"
            ],
            "answer": "Middle Join",
            "explanation": "There’s no type of database join known as a Middle Join. Joins combine rows from two or more tables based on related columns."
        },
        {
            "question": "Which of the following DBMS is NOT based on the relational model?",
            "options": [
                "MySQL",
                "PostgreSQL",
                "Oracle",
                "MongoDB"
            ],
            "answer": "MongoDB",
            "explanation": "MongoDB is a NoSQL database, which means it doesn’t rely on the traditional relational database model."
        },
        {
            "question": "What is the main advantage of using an index in a DBMS?",
            "options": [
                "It reduces storage space.",
                "It speeds up search/query performance.",
                "It ensures data consistency.",
                "It makes data encryption easier."
            ],
            "answer": "It speeds up search/query performance.",
            "explanation": "Indexing speeds up the search/query performance by creating a data structure that can be quickly traversed to find the required data."
        },
        {
            "question": "Which command is used to remove a table from a database in SQL?",
            "options": [
                "REMOVE TABLE",
                "DELETE TABLE",
                "DROP TABLE",
                "ERASE TABLE"
            ],
            "answer": "DROP TABLE",
            "explanation": "The “DROP TABLE” command is used to delete an existing table from a database."
        },
        {
            "question": "Which of the following is a disadvantage of a database management system?",
            "options": [
                "Data redundancy",
                "Data integrity",
                "Complexity",
                "Data consistency"
            ],
            "answer": "Complexity",
            "explanation": "While DBMS offers many advantages, they can be complex systems requiring specialized knowledge to set up and maintain."
        },
        {
            "question": "What is a data warehouse?",
            "options": [
                "A tool for backup and recovery",
                "A database designed for transactional processes",
                "A large database specifically designed for query and analysis",
                "A temporary storage for data before it’s inserted into the database"
            ],
            "answer": "A large database specifically designed for query and analysis",
            "explanation": "A data warehouse is a system used for reporting and analyzing and is a central repository of data integrated from different sources."
        },
        {
            "question": "What does the SQL command “ALTER” do?",
            "options": [
                "Deletes a database",
                "Modifies an existing database object",
                "Lists the structure of a table",
                "Inserts data into a table"
            ],
            "answer": "Modifies an existing database object",
            "explanation": "The “ALTER” command is used to modify an existing object inside a database, such as adding, deleting, or modifying columns in an existing table."
        },
        {
            "question": "Which SQL statement is used to retrieve data from a database?",
            "options": [
                "SELECT",
                "FETCH",
                "RETRIEVE",
                "GET"
            ],
            "answer": "SELECT",
            "explanation": "The “SELECT” statement is used to select data from one or more tables."
        },
        {
            "question": "In a DBMS, what is the role of a schema?",
            "options": [
                "To define the structure of the database",
                "To encrypt the database",
                "To define the database backup process",
                "To authenticate users"
            ],
            "answer": "To define the structure of the database",
            "explanation": "A schema in a DBMS defines the logical structure of the database, including tables, columns, keys, indexes, relationships, and more."
        },
        {
            "question": "Which of the following SQL statements is used to update existing data in a database?",
            "options": [
                "UPDATE",
                "MODIFY",
                "CHANGE",
                "REVISE"
            ],
            "answer": "UPDATE",
            "explanation": "The “UPDATE” statement is used to modify existing data in a table."
        },
        {
            "question": "Which of the following is not a property of transaction in DBMS?",
            "options": [
                "Atomicity",
                "Consistency",
                "Durability",
                "Flexibility"
            ],
            "answer": "Flexibility",
            "explanation": "Transactions in DBMS follow the ACID properties: Atomicity, Consistency, Isolation, and Durability."
        },
        {
            "question": "Which normal form aims to remove transitive dependencies in a relational database?",
            "options": [
                "1NF",
                "2NF",
                "3NF",
                "BCNF"
            ],
            "answer": "3NF",
            "explanation": "The Third Normal Form (3NF) is focused on eliminating transitive dependencies from a relational database."
        },
        {
            "question": "What is a ‘view’ in a DBMS?",
            "options": [
                "A snapshot of the data",
                "A backup of the data",
                "A virtual table based on the result of an SQL statement",
                "A user-defined function"
            ],
            "answer": "A virtual table based on the result of an SQL statement",
            "explanation": "A view in DBMS is a virtual table that is based on the result of a SQL statement. It does not hold data itself but rather references data contained in other tables."
        },
        {
            "question": "Which of the following is NOT a SQL constraint?",
            "options": [
                "UNIQUE",
                "FOREIGN KEY",
                "DELETE",
                "PRIMARY KEY"
            ],
            "answer": "DELETE",
            "explanation": "“DELETE” is an SQL command to remove records from a table, not a constraint."
        },
        {
            "question": "What does the SQL command “JOIN” specifically do?",
            "options": [
                "Combines rows from two or more tables based on a related column.",
                "Creates a new table in the database.",
                "Deletes data from a table.",
                "Updates data in a table."
            ],
            "answer": "Combines rows from two or more tables based on a related column.",
            "explanation": "The “JOIN” command in SQL is used to combine rows from two or more tables based on a related column between them."
        },
        {
            "question": "What is the purpose of the “GROUP BY” clause in SQL?",
            "options": [
                "To sort the results in ascending or descending order.",
                "To group the results based on one or more columns.",
                "To retrieve a single value after calculations.",
                "To filter the results based on a condition."
            ],
            "answer": "To group the results based on one or more columns.",
            "explanation": "“GROUP BY” groups the rows that have the same values in specified columns into summary rows."
        },
        {
            "question": "Which SQL clause is used to specify a condition while fetching data from a single table?",
            "options": [
                "AND",
                "OR",
                "NOT",
                "WHERE"
            ],
            "answer": "WHERE",
            "explanation": "The “WHERE” clause is used to filter records and extract only those that fulfill a specified condition."
        },
        {
            "question": "What is the result of the SQL command “DROP TABLE table name;”?",
            "options": [
                "It deletes the data in the table.",
                "It deletes the table structure.",
                "It deletes both the table structure and the data within it.",
                "It archives the table."
            ],
            "answer": "It deletes both the table structure and the data within it.",
            "explanation": "The “DROP TABLE” command removes a table and all of its data permanently from the database."
        },
        {
            "question": "In which normal form, does a table have all entries in a column of the same kind?",
            "options": [
                "1NF",
                "2NF",
                "3NF",
                "4NF"
            ],
            "answer": "1NF",
            "explanation": "In the First Normal Form (1NF), each column must have atomic (indivisible) values."
        },
        {
            "question": "In a relational database, what does a row represent?",
            "options": [
                "Field",
                "Relation",
                "Tuple",
                "Attribute"
            ],
            "answer": "Tuple",
            "explanation": "In the context of a relational database, a row is also known as a tuple."
        },
        {
            "question": "Which SQL statement is used to insert a new record in a table?",
            "options": [
                "ADD NEW",
                "INSERT INTO",
                "ADD INTO",
                "ADD RECORD"
            ],
            "answer": "INSERT INTO",
            "explanation": "The “INSERT INTO” statement is used to insert new records into a table."
        },
        {
            "question": "Which of the following operations allows for extracting a subset of a database?",
            "options": [
                "Union",
                "Intersection",
                "Projection",
                "Cartesian Product"
            ],
            "answer": "Projection",
            "explanation": "The projection operation extracts only the desired columns without modifying the rows."
        }
    ],
    "MySQL": [
        {
            "question": "Which SQL command is used to retrieve data from a database?",
            "options": [
                "INSERT",
                "DELETE",
                "SELECT",
                "UPDATE"
            ],
            "answer": "SELECT",
            "explanation": "The SELECT command is used to retrieve data from one or more tables in a database."
        },
        {
            "question": "Which SQL statement is used to remove a table from the database?",
            "options": [
                "DELETE TABLE",
                "DROP TABLE",
                "REMOVE TABLE",
                "CLEAR TABLE"
            ],
            "answer": "DROP TABLE",
            "explanation": "The DROP TABLE statement is used to delete an existing table from the database."
        },
        {
            "question": "Which keyword is used to sort the result set in ascending order?",
            "options": [
                "SORT",
                "ORDER",
                "ORDER BY",
                "SORT BY"
            ],
            "answer": "ORDER BY",
            "explanation": "The ORDER BY keyword is used in SQL to sort the result set in ascending or descending order."
        },
        {
            "question": "How can you fetch unique values from a column?",
            "options": [
                "UNIQUE",
                "DISTINCT",
                "SINGLE",
                "UNO"
            ],
            "answer": "DISTINCT",
            "explanation": "The DISTINCT keyword is used to fetch unique values from a column in a table."
        },
        {
            "question": "Which of the following SQL commands will delete all records from a table named customers but retain the table structure?",
            "options": [
                "DROP TABLE customers;",
                "TRUNCATE TABLE customers;",
                "DELETE TABLE customers;",
                "REMOVE ALL FROM customers;"
            ],
            "answer": "TRUNCATE TABLE customers;",
            "explanation": "The TRUNCATE TABLE command removes all records from a table but retains its structure for future use."
        },
        {
            "question": "In which SQL command would you use the WHERE clause?",
            "options": [
                "INSERT",
                "UPDATE",
                "CREATE",
                "ALTER"
            ],
            "answer": "UPDATE",
            "explanation": "The WHERE clause is commonly used in UPDATE (and SELECT and DELETE) to filter records based on a condition."
        },
        {
            "question": "What is the default sort order of the ORDER BY clause?",
            "options": [
                "DESC",
                "ASC",
                "RANDOM",
                "NONE"
            ],
            "answer": "ASC",
            "explanation": "By default, the ORDER BY clause sorts the records in ascending order."
        },
        {
            "question": "Which SQL command is used to add a new column to an existing table?",
            "options": [
                "ADD COLUMN",
                "NEW COLUMN",
                "INSERT COLUMN",
                "ALTER TABLE"
            ],
            "answer": "ALTER TABLE",
            "explanation": "The ALTER TABLE command is used to add, delete, or modify columns in an existing table."
        },
        {
            "question": "Which data type is used to store text values in MySQL?",
            "options": [
                "CHAR",
                "INT",
                "FLOAT",
                "BOOL"
            ],
            "answer": "CHAR",
            "explanation": "In MySQL, the CHAR and VARCHAR data types are used to store text values."
        },
        {
            "question": "Which keyword is used to join two tables in SQL?",
            "options": [
                "CONNECT",
                "LINK",
                "JOIN",
                "COMBINE"
            ],
            "answer": "JOIN",
            "explanation": "The JOIN keyword is used in SQL to combine rows from two or more tables based on a related column."
        },
        {
            "question": "Which MySQL function returns the current date and time?",
            "options": [
                "NOW()",
                "DATE()",
                "TODAY()",
                "TIMESTAMP()"
            ],
            "answer": "NOW()",
            "explanation": "The NOW() function returns the current date and time."
        },
        {
            "question": "What does SQL stand for?",
            "options": [
                "Structured Quality Language",
                "Simple Query Logic",
                "Structured Query Language",
                "System Query Language"
            ],
            "answer": "Structured Query Language",
            "explanation": "SQL stands for Structured Query Language, used to communicate with databases."
        },
        {
            "question": "Which command is used to create a new database in MySQL?",
            "options": [
                "CREATE NEW DATABASE",
                "ADD DATABASE",
                "NEW DATABASE",
                "CREATE DATABASE"
            ],
            "answer": "CREATE DATABASE",
            "explanation": "The CREATE DATABASE command is used to create a new database."
        },
        {
            "question": "Which operator is used to compare if two values are not equal?",
            "options": [
                "!=",
                "<>",
                "><",
                "Both A and B"
            ],
            "answer": "Both A and B",
            "explanation": "In SQL, both != and <> operators are used to indicate not equal."
        },
        {
            "question": "Which MySQL data type is used to store large blocks of text?",
            "options": [
                "TEXT",
                "CHAR",
                "BIGCHAR",
                "LARGETEXT"
            ],
            "answer": "TEXT",
            "explanation": "The TEXT data type in MySQL is used to store large blocks of text."
        },
        {
            "question": "Which SQL clause is used to filter the results returned by a query?",
            "options": [
                "SORT BY",
                "FILTER BY",
                "WHERE",
                "HAVING"
            ],
            "answer": "WHERE",
            "explanation": "The WHERE clause is used to filter query results based on specified conditions."
        },
        {
            "question": "Which command is used to back up a MySQL database?",
            "options": [
                "BACKUP DATABASE",
                "SAVE DATABASE",
                "mysqldump",
                "mysqlsave"
            ],
            "answer": "mysqldump",
            "explanation": "mysqldump is a command-line utility to take backups of MySQL databases."
        },
        {
            "question": "Which SQL statement is used to insert a new record in a table?",
            "options": [
                "ADD RECORD",
                "INSERT NEW",
                "INSERT INTO",
                "ADD INTO"
            ],
            "answer": "INSERT INTO",
            "explanation": "The INSERT INTO statement is used to add a new record to a table."
        },
        {
            "question": "What type of JOIN returns only rows when there is at least one match in both tables?",
            "options": [
                "LEFT JOIN",
                "RIGHT JOIN",
                "INNER JOIN",
                "FULL JOIN"
            ],
            "answer": "INNER JOIN",
            "explanation": "An INNER JOIN fetches rows when there is at least one match in both tables."
        },
        {
            "question": "Which MySQL function can be used to return the length of a string?",
            "options": [
                "LENGTH()",
                "SIZE()",
                "STRLEN()",
                "COUNT()"
            ],
            "answer": "LENGTH()",
            "explanation": "The LENGTH() function is used to obtain the length of a string in MySQL."
        },
        {
            "question": "Which keyword can be used to specify a unique constraint for a table column?",
            "options": [
                "UNIQUE",
                "DISTINCT",
                "SINGLE",
                "RARE"
            ],
            "answer": "UNIQUE",
            "explanation": "The UNIQUE keyword ensures that all values in a column are distinct."
        },
        {
            "question": "In MySQL, which command is used to return the version of the MySQL server?",
            "options": [
                "SELECT VERSION();",
                "GET VERSION();",
                "SELECT MYSQLVERSION();",
                "SELECT SERVER();"
            ],
            "answer": "SELECT VERSION();",
            "explanation": "SELECT VERSION(); returns the version of the MySQL server."
        },
        {
            "question": "Which SQL statement is used to update data in a database?",
            "options": [
                "REFRESH",
                "MODIFY",
                "REPLACE",
                "UPDATE"
            ],
            "answer": "UPDATE",
            "explanation": "The UPDATE statement is used to modify existing records in a table."
        },
        {
            "question": "Which of the following is not a valid SQL data type?",
            "options": [
                "FLOAT",
                "CHAR",
                "SINGLE",
                "DECIMAL"
            ],
            "answer": "SINGLE",
            "explanation": "SINGLE is not a valid SQL data type."
        },
        {
            "question": "Which clause is used with the GROUP BY clause to filter grouped results in SQL?",
            "options": [
                "WHERE",
                "ORDER BY",
                "HAVING",
                "LIKE"
            ],
            "answer": "HAVING",
            "explanation": "The HAVING clause is used to filter results after data has been grouped with the GROUP BY clause."
        },
        {
            "question": "Which of the following is used to make a column’s value automatically increase for each new record?",
            "options": [
                "AUTOINCREMENT",
                "AUTOADD",
                "INCREMENTAL",
                "ADDAUTO"
            ],
            "answer": "AUTOINCREMENT",
            "explanation": "The AUTOINCREMENT attribute automatically increases the value of the column for each new record."
        },
        {
            "question": "How do you select all columns from a table named “students”?",
            "options": [
                "SELECT * INTO students;",
                "SELECT students.*;",
                "SELECT ALL FROM students;",
                "SELECT * FROM students;"
            ],
            "answer": "SELECT * FROM students;",
            "explanation": "The SELECT * FROM statement retrieves all columns from the specified table."
        },
        {
            "question": "What would be the result of the following SQL query: SELECT UPPER(‘mysql’);?",
            "options": [
                "mysql",
                "MYSQL",
                "UPPER",
                "None of the above"
            ],
            "answer": "MYSQL",
            "explanation": "The UPPER() function converts all characters of a string to uppercase."
        },
        {
            "question": "Which SQL function is used to round a number?",
            "options": [
                "ROUND",
                "RND",
                "CIRCLE",
                "LOOP"
            ],
            "answer": "ROUND",
            "explanation": "The ROUND() function is used to round a number to the nearest whole number or to a specified number of decimals."
        },
        {
            "question": "Which of the following is not an SQL aggregate function?",
            "options": [
                "COUNT()",
                "MAX()",
                "CONCAT()",
                "SUM()"
            ],
            "answer": "CONCAT()",
            "explanation": "CONCAT() is a string function used to concatenate two or more strings, whereas the others are aggregate functions."
        },
        {
            "question": "Which command is used to remove a specific row from a table?",
            "options": [
                "REMOVE",
                "DROP",
                "DELETE",
                "DESTROY"
            ],
            "answer": "DELETE",
            "explanation": "The DELETE statement is used to remove specific rows from a table based on a condition."
        },
        {
            "question": "Which keyword defines a primary key constraint on a table in MySQL?",
            "options": [
                "PRIMARY",
                "MAIN",
                "UNIQUE",
                "PRIMARY KEY"
            ],
            "answer": "PRIMARY KEY",
            "explanation": "The PRIMARY KEY constraint uniquely identifies each record in a table."
        },
        {
            "question": "Which keyword would you use to rename a table in MySQL?",
            "options": [
                "RENAME",
                "RENAME TABLE",
                "ALTER",
                "CHANGE TABLE"
            ],
            "answer": "RENAME TABLE",
            "explanation": "The RENAME TABLE statement is used to rename an existing table."
        },
        {
            "question": "Which SQL statement is used to access data from multiple tables based on a relationship between certain columns?",
            "options": [
                "COMBINE",
                "UNION",
                "JOIN",
                "MERGE"
            ],
            "answer": "JOIN",
            "explanation": "The JOIN statement is used to combine rows from two or more tables based on a related column."
        },
        {
            "question": "What is the maximum length of a table name in MySQL?",
            "options": [
                "64 characters",
                "128 characters",
                "256 characters",
                "512 characters"
            ],
            "answer": "64 characters",
            "explanation": "In MySQL, the maximum length for a table name is 64 characters."
        },
        {
            "question": "Which MySQL function returns the smallest integer value not less than a number?",
            "options": [
                "CEILING()",
                "FLOOR()",
                "ROUNDUP()",
                "TOP()"
            ],
            "answer": "CEILING()",
            "explanation": "The CEILING() function returns the smallest integer value that is not less than the provided number."
        },
        {
            "question": "Which SQL keyword is used to retrieve a maximum of 5 records from a table?",
            "options": [
                "FETCH",
                "TOP",
                "LIMIT",
                "GET"
            ],
            "answer": "LIMIT",
            "explanation": "The LIMIT keyword is used in SQL to specify the maximum number of records to return."
        },
        {
            "question": "What is the SQL query for retrieving all records from a table named ‘products’ where the price is greater than 50?",
            "options": [
                "SELECT * FROM products WHERE price > 50;",
                "FETCH * FROM products WHEN price > 50;",
                "GET * FROM products HAVING price > 50;",
                "RECEIVE * FROM products WHERE price > 50;"
            ],
            "answer": "SELECT * FROM products WHERE price > 50;",
            "explanation": "The SELECT statement combined with the WHERE clause retrieves specific records based on a condition."
        },
        {
            "question": "Which SQL clause is used to specify a condition while fetching data from a table?",
            "options": [
                "DECISION",
                "CHECK",
                "WHERE",
                "CONDITION"
            ],
            "answer": "WHERE",
            "explanation": "The WHERE clause is used to filter records and fetch only those that satisfy a specific condition."
        },
        {
            "question": "What is the primary purpose of creating an index on a MySQL column?",
            "options": [
                "To consume more disk space.",
                "To slow down SELECT query performance.",
                "To improve the speed of retrieval operations.",
                "To enhance the look of the database."
            ],
            "answer": "To improve the speed of retrieval operations.",
            "explanation": "Indexes are primarily used to enhance the speed of database retrieval operations."
        },
        {
            "question": "Which of the following tools can be used to analyze query performance in MySQL?",
            "options": [
                "EXPLAIN",
                "DEBUG",
                "TRACE",
                "LISTEN"
            ],
            "answer": "EXPLAIN",
            "explanation": "The EXPLAIN keyword provides insights into how MySQL will execute a query, helping to identify potential bottlenecks."
        },
        {
            "question": "Which storage engine in MySQL supports transactions?",
            "options": [
                "MEMORY",
                "MERGE",
                "MyISAM",
                "InnoDB"
            ],
            "answer": "InnoDB",
            "explanation": "InnoDB is a storage engine in MySQL that supports transactions, row-level locking, and foreign keys."
        }
    ],
    "PostgreSQL": [
        {
            "question": "What is PostgreSQL?",
            "options": [
                "A NoSQL database",
                "A relational database management system (RDBMS)",
                "A programming language",
                "A web server"
            ],
            "answer": "A relational database management system (RDBMS)",
            "explanation": "PostgreSQL is an open-source RDBMS known for its extensibility and standards compliance."
        },
        {
            "question": "Which of the following is a key feature of PostgreSQL?",
            "options": [
                "Support for JSON",
                "Exclusively uses the MyISAM storage engine",
                "Proprietary software",
                "Limited to small datasets"
            ],
            "answer": "Support for JSON",
            "explanation": "PostgreSQL offers extensive support for JSON, allowing for a mix of structured and semi-structured data storage."
        },
        {
            "question": "Which command-line utility is used for interactive PostgreSQL operations?",
            "options": [
                "pgadmin",
                "psql",
                "pgsql",
                "adminsql"
            ],
            "answer": "psql",
            "explanation": "psql is the interactive terminal for working with PostgreSQL."
        },
        {
            "question": "Which SQL command is used to create a new PostgreSQL database?",
            "options": [
                "NEW DATABASE",
                "ADD DATABASE",
                "CREATE DATABASE",
                "DATABASE CREATE"
            ],
            "answer": "CREATE DATABASE",
            "explanation": "The command CREATE DATABASE is used to create a new PostgreSQL database."
        },
        {
            "question": "How do you add a comment in SQL in PostgreSQL?",
            "options": [
                "/* Comment Here */",
                "// Comment Here",
                "— Comment Here",
                "# Comment Here"
            ],
            "answer": "— Comment Here",
            "explanation": "In PostgreSQL, the double dash — is used to add a single-line comment."
        },
        {
            "question": "Which data type in PostgreSQL can be used to store binary data?",
            "options": [
                "CHAR",
                "BINARY",
                "BYTEA",
                "DATA_BYTE"
            ],
            "answer": "BYTEA",
            "explanation": "The BYTEA type is used to store binary data or “byte arrays”."
        },
        {
            "question": "Which command in PostgreSQL is used to list all the available databases?",
            "options": [
                "SHOW DATABASES;",
                "\\ld",
                "\\l",
                "DISPLAY DATABASES;"
            ],
            "answer": "\\l",
            "explanation": "In the psql interface, the command \\l lists all available databases."
        },
        {
            "question": "Which keyword is used in PostgreSQL to define a primary key constraint?",
            "options": [
                "PRIMARY",
                "KEY",
                "UNIQUE",
                "PRIMARY KEY"
            ],
            "answer": "PRIMARY KEY",
            "explanation": "The PRIMARY KEY constraint uniquely identifies each record in a table."
        },
        {
            "question": "Which of the following PostgreSQL functions can be used to obtain the current date and time?",
            "options": [
                "GET_TIMESTAMP()",
                "CURRENT_TIMESTAMP",
                "NOW_DATE_TIME()",
                "FETCH_DATETIME()"
            ],
            "answer": "CURRENT_TIMESTAMP",
            "explanation": "In PostgreSQL, CURRENT_TIMESTAMP returns the current date and time."
        },
        {
            "question": "What is the maximum length of a table name in PostgreSQL?",
            "options": [
                "32 characters",
                "64 characters",
                "128 characters",
                "256 characters"
            ],
            "answer": "64 characters",
            "explanation": "By default, PostgreSQL has a maximum identifier length of 64 characters."
        },
        {
            "question": "Which PostgreSQL function returns the number of characters in a string?",
            "options": [
                "STRLEN()",
                "LENGTH()",
                "CHAR_COUNT()",
                "NUMCHAR()"
            ],
            "answer": "LENGTH()",
            "explanation": "The LENGTH() function in PostgreSQL is used to get the number of characters in a string."
        },
        {
            "question": "What does the SERIAL keyword in PostgreSQL do?",
            "options": [
                "Creates a series of numbers",
                "Creates an auto-increment integer column",
                "Serializes a table for export",
                "Links tables in a series"
            ],
            "answer": "Creates an auto-increment integer column",
            "explanation": "SERIAL is used to define auto-incrementing integer columns in PostgreSQL."
        },
        {
            "question": "In which language is PostgreSQL written?",
            "options": [
                "Python",
                "Java",
                "C",
                "Ruby"
            ],
            "answer": "C",
            "explanation": "PostgreSQL is primarily written in the C programming language."
        },
        {
            "question": "Which of the following is NOT a valid backup option for PostgreSQL?",
            "options": [
                "pg_dump",
                "pg_restore",
                "pg_backup",
                "pg_basebackup"
            ],
            "answer": "pg_backup",
            "explanation": "While pg_dump, pg_restore, and pg_basebackup are valid PostgreSQL backup tools, pg_backup is not."
        },
        {
            "question": "Which command can be used to see the query plan for a statement without executing it?",
            "options": [
                "EXPLAIN",
                "DESCRIBE",
                "QUERY PLAN",
                "INSPECT"
            ],
            "answer": "EXPLAIN",
            "explanation": "The EXPLAIN command in PostgreSQL displays the execution plan of a SQL statement without running it."
        },
        {
            "question": "Which PostgreSQL feature allows for partitioning tables?",
            "options": [
                "Table Slicing",
                "Table Mapping",
                "Table Segmentation",
                "Table Inheritance"
            ],
            "answer": "Table Inheritance",
            "explanation": "Table inheritance in PostgreSQL can be used as a way to achieve table partitioning."
        },
        {
            "question": "How do you retrieve the version of the PostgreSQL server you’re connected to?",
            "options": [
                "SHOW VERSION();",
                "SELECT version();",
                "RETRIEVE VERSION;",
                "SELECT @version;"
            ],
            "answer": "SELECT version();",
            "explanation": "The version() function returns the version of the PostgreSQL server."
        },
        {
            "question": "Which command-line utility is used for administrative tasks like creating, deleting, and maintaining PostgreSQL databases?",
            "options": [
                "pgadmin",
                "pgsql",
                "psql",
                "createdb and dropdb"
            ],
            "answer": "createdb and dropdb",
            "explanation": "createdb and dropdb are command-line utilities for creating and deleting PostgreSQL databases, respectively."
        },
        {
            "question": "Which datatype is used in PostgreSQL to store IPv4 and IPv6 addresses?",
            "options": [
                "IP",
                "NET_ADDR",
                "INET",
                "NETWORK"
            ],
            "answer": "INET",
            "explanation": "The INET type in PostgreSQL is used to store both IPv4 and IPv6 addresses."
        },
        {
            "question": "Which command can be used to list all the tables in the current PostgreSQL database?",
            "options": [
                "\\tables",
                "\\l",
                "\\dt",
                "LIST TABLES;"
            ],
            "answer": "\\dt",
            "explanation": "In the psql interface, the command \\dt lists all the tables in the current database."
        },
        {
            "question": "Which of the following is NOT a locking mechanism in PostgreSQL?",
            "options": [
                "Advisory Locks",
                "Tuple Locks",
                "Transaction Locks",
                "Segment Locks"
            ],
            "answer": "Segment Locks",
            "explanation": "PostgreSQL does not have a “Segment Locks” mechanism."
        },
        {
            "question": "PostgreSQL is often referred to as an ORDBMS. What does the “OR” stand for?",
            "options": [
                "Operational Relational",
                "Object-Relational",
                "Organized Record",
                "Open-Resource"
            ],
            "answer": "Object-Relational",
            "explanation": "PostgreSQL is often termed as an Object-Relational Database Management System (ORDBMS) because it supports both relational and object-oriented database features."
        },
        {
            "question": "How would you retrieve unique values from a column named “names” in a table called “users”?",
            "options": [
                "SELECT DISTINCT(names) FROM users;",
                "UNIQUE SELECT names FROM users;",
                "SELECT names UNIQUE FROM users;",
                "GET DISTINCT names FROM users;"
            ],
            "answer": "SELECT DISTINCT(names) FROM users;",
            "explanation": "The DISTINCT keyword is used to retrieve unique values from a column in PostgreSQL."
        },
        {
            "question": "Which function would you use to obtain the current user name in PostgreSQL?",
            "options": [
                "GET_USER();",
                "CURRENT_USER();",
                "USER_NAME();",
                "CURRENT_USER;"
            ],
            "answer": "CURRENT_USER;",
            "explanation": "The CURRENT_USER keyword in PostgreSQL returns the name of the current user."
        },
        {
            "question": "Which command will allow you to switch to a different database named ‘testdb’ in the psql interface?",
            "options": [
                "USE testdb;",
                "\\c testdb;",
                "SWITCH testdb;",
                "SELECT DATABASE testdb;"
            ],
            "answer": "\\c testdb;",
            "explanation": "In the psql interface, the command \\c followed by the database name allows you to switch to a different database."
        },
        {
            "question": "What is the primary role of the WAL in PostgreSQL?",
            "options": [
                "Web Access Layer",
                "Write Ahead Logging",
                "Write After Load",
                "Workload Allocation Logic"
            ],
            "answer": "Write Ahead Logging",
            "explanation": "In PostgreSQL, WAL stands for Write Ahead Logging. It’s a method where changes are logged before they are applied to the database, ensuring data integrity and consistency."
        },
        {
            "question": "Which of the following data types would be best for storing monetary values in PostgreSQL?",
            "options": [
                "FLOAT",
                "INTEGER",
                "MONEY",
                "DECIMAL"
            ],
            "answer": "MONEY",
            "explanation": "The MONEY type is specifically designed for storing currency amounts in PostgreSQL. It handles currency symbols and formatting."
        },
        {
            "question": "What is the purpose of the VACUUM command in PostgreSQL?",
            "options": [
                "To clean and optimize the database",
                "To backup the database",
                "To restore the database",
                "To migrate data"
            ],
            "answer": "To clean and optimize the database",
            "explanation": "The VACUUM command reclaims storage occupied by dead tuples, and optionally, optimizes the database file structures."
        },
        {
            "question": "Which of these is a PostgreSQL tool for creating a physical backup?",
            "options": [
                "pg_dump",
                "pg_backup",
                "pg_basebackup",
                "pg_clone"
            ],
            "answer": "pg_basebackup",
            "explanation": "pg_basebackup is used for taking base backups of a running PostgreSQL database cluster."
        },
        {
            "question": "How do you concatenate two columns in PostgreSQL?",
            "options": [
                "USING",
                "JOIN",
                "+",
                "||"
            ],
            "answer": "||",
            "explanation": "In PostgreSQL, you can concatenate columns using the || operator."
        },
        {
            "question": "Which of these commands is used to remove a table from PostgreSQL?",
            "options": [
                "DELETE TABLE",
                "DROP TABLE",
                "REMOVE TABLE",
                "DISCARD TABLE"
            ],
            "answer": "DROP TABLE",
            "explanation": "The DROP TABLE command is used to remove a table from PostgreSQL."
        },
        {
            "question": "What does the CASCADE option do when used with the DROP TABLE command?",
            "options": [
                "Drops the table and all associated indexes",
                "Drops the table and any dependent objects",
                "Recreates the table after dropping",
                "Ignores any dependencies and drops the table"
            ],
            "answer": "Drops the table and any dependent objects",
            "explanation": "When using CASCADE with DROP TABLE, it ensures that the table and any dependent objects (like views) are dropped."
        },
        {
            "question": "What is the default port on which PostgreSQL listens?",
            "options": [
                "3306",
                "8080",
                "5432",
                "80"
            ],
            "answer": "5432",
            "explanation": "By default, PostgreSQL listens on port 5432."
        },
        {
            "question": "Which command in psql will list all the databases?",
            "options": [
                "\\list",
                "\\databases",
                "\\showdb",
                "\\db"
            ],
            "answer": "\\list",
            "explanation": "In the psql interface, the \\list or \\l command lists all the available databases."
        },
        {
            "question": "How would you describe the structure of a table named “employees” using psql?",
            "options": [
                "\\d employees",
                "DESCRIBE employees;",
                "\\tableinfo employees",
                "\\struct employees"
            ],
            "answer": "\\d employees",
            "explanation": "In psql, you can use the \\d command followed by the table name to describe its structure."
        },
        {
            "question": "If you want to see the list of users and their roles in psql, which command would you use?",
            "options": [
                "\\users",
                "\\roles",
                "\\du",
                "\\listusers"
            ],
            "answer": "\\du",
            "explanation": "The \\du command in psql lists all roles (users are also roles) and their attributes."
        },
        {
            "question": "Which psql command would you use to turn on the timing of commands?",
            "options": [
                "\\timeon",
                "\\timing",
                "\\showtime",
                "\\settime"
            ],
            "answer": "\\timing",
            "explanation": "The \\timing command in psql can be used to turn the timing of commands on or off."
        },
        {
            "question": "How would you quit out of the psql interface?",
            "options": [
                "\\exit",
                "QUIT;",
                "\\q",
                "LEAVE;"
            ],
            "answer": "\\q",
            "explanation": "To quit psql, you simply enter the command \\q."
        },
        {
            "question": "Which command is used to display the history of executed SQL commands in psql?",
            "options": [
                "\\history",
                "\\h",
                "\\s",
                "\\log"
            ],
            "answer": "\\s",
            "explanation": "The \\s command in psql displays the history of SQL commands that have been executed in the current session."
        },
        {
            "question": "What does the psql command \\e do?",
            "options": [
                "Exits the psql shell",
                "Opens the last SQL command in an editor",
                "Executes the SQL command",
                "Echoes the SQL command"
            ],
            "answer": "Opens the last SQL command in an editor",
            "explanation": "The \\e command in psql opens the last SQL command in a text editor. This is useful for long queries that need editing."
        }
    ],
    "MongoDB": [
        {
            "question": "Which of the following best describes MongoDB?",
            "options": [
                "Relational database",
                "Spreadsheet program",
                "Document-based NoSQL database",
                "Graph database"
            ],
            "answer": "Document-based NoSQL database",
            "explanation": "MongoDB is a document-based NoSQL database, which means it stores data in BSON format (binary representation of JSON-like documents)."
        },
        {
            "question": "In MongoDB, a record is equivalent to a:",
            "options": [
                "Row",
                "Table",
                "Document",
                "Database"
            ],
            "answer": "Document",
            "explanation": "In MongoDB, a single entry or record is termed as a document."
        },
        {
            "question": "Which of the following is the default port for MongoDB?",
            "options": [
                "27017",
                "8080",
                "3306",
                "5432"
            ],
            "answer": "27017",
            "explanation": "MongoDB, by default, runs on port 27017."
        },
        {
            "question": "Which MongoDB command is used to display the database you are currently using?",
            "options": [
                "show currentDatabase",
                "show db",
                "use db",
                "db"
            ],
            "answer": "db",
            "explanation": "Typing db in the MongoDB shell displays the name of the current database."
        },
        {
            "question": "To create or switch to a database in MongoDB, which command would you use?",
            "options": [
                "createDatabase(name)",
                "switchDatabase(name)",
                "use <database_name>",
                "db.<database_name>"
            ],
            "answer": "use <database_name>",
            "explanation": "The use command is used to create or switch to a specified database."
        },
        {
            "question": "Which of the following commands will show you all the collections in your current database?",
            "options": [
                "show collections",
                "list collections",
                "display collections",
                "db.collections()"
            ],
            "answer": "show collections",
            "explanation": "The show collections command lists all the collections in the current database."
        },
        {
            "question": "How do you insert a new document into a collection in MongoDB?",
            "options": [
                "db.<collection_name>.insert()",
                "db.<collection_name>.newDocument()",
                "db.<collection_name>.add()",
                "db.<collection_name>.append()"
            ],
            "answer": "db.<collection_name>.insert()",
            "explanation": "The insert() method is used to add a new document into a specified collection."
        },
        {
            "question": "Which of the following commands deletes a MongoDB database?",
            "options": [
                "db.dropDatabase()",
                "removeDatabase()",
                "deleteDatabase()",
                "destroyDatabase()"
            ],
            "answer": "db.dropDatabase()",
            "explanation": "The db.dropDatabase() command deletes the current database."
        },
        {
            "question": "Which MongoDB method can be used to remove one or more documents from a collection?",
            "options": [
                "db.<collection_name>.delete()",
                "db.<collection_name>.remove()",
                "db.<collection_name>.discard()",
                "db.<collection_name>.drop()"
            ],
            "answer": "db.<collection_name>.remove()",
            "explanation": "The remove() method is used to delete documents from a collection based on specified criteria."
        },
        {
            "question": "What is the BSON in MongoDB?",
            "options": [
                "A database engine",
                "A query language",
                "A backup tool",
                "Binary representation of JSON"
            ],
            "answer": "Binary representation of JSON",
            "explanation": "BSON stands for “Binary JSON”. It’s a binary representation of JSON-like documents, which MongoDB uses for storage and data transmission."
        },
        {
            "question": "Which MongoDB command returns statistics about the database?",
            "options": [
                "db.stats()",
                "db.info()",
                "db.data()",
                "db.details()"
            ],
            "answer": "db.stats()",
            "explanation": "The db.stats() command returns a variety of statistics about the current database."
        },
        {
            "question": "What format does MongoDB use for its queries?",
            "options": [
                "SQL",
                "XML",
                "BSON",
                "XQuery"
            ],
            "answer": "BSON",
            "explanation": "MongoDB uses BSON (Binary JSON) format for its queries and documents."
        },
        {
            "question": "To update a document in a collection, which method is appropriate?",
            "options": [
                "db.<collection_name>.modify()",
                "db.<collection_name>.edit()",
                "db.<collection_name>.revise()",
                "db.<collection_name>.update()"
            ],
            "answer": "db.<collection_name>.update()",
            "explanation": "The update() method is used to modify existing documents within a collection based on specified criteria."
        },
        {
            "question": "Which of the following operations provides a sorted list of the documents in a collection?",
            "options": [
                "db.<collection_name>.sort()",
                "db.<collection_name>.arrange()",
                "db.<collection_name>.listSorted()",
                "db.<collection_name>.orderBy()"
            ],
            "answer": "db.<collection_name>.sort()",
            "explanation": "The sort() method is used to return a sorted list of documents."
        },
        {
            "question": "How can you backup your MongoDB database?",
            "options": [
                "mongodump",
                "mongobackup",
                "mongosave",
                "mongoarchive"
            ],
            "answer": "mongodump",
            "explanation": "The mongodump tool is used to create a binary export of the contents of a MongoDB database."
        },
        {
            "question": "Which tool can be used to import content from a BSON file into a MongoDB database?",
            "options": [
                "mongoimport",
                "mongorestore",
                "mongoload",
                "mongofetch"
            ],
            "answer": "mongorestore",
            "explanation": "mongorestore is used to restore data from a binary database dump, i.e., from a BSON file."
        },
        {
            "question": "Which of the following commands lists all available MongoDB databases?",
            "options": [
                "show dbs",
                "list dbs",
                "show databases",
                "db.list()"
            ],
            "answer": "show dbs",
            "explanation": "The show dbs command lists all available databases in MongoDB."
        },
        {
            "question": "Which MongoDB function is used to limit the number of results returned?",
            "options": [
                "db.<collection_name>.count()",
                "db.<collection_name>.skip()",
                "db.<collection_name>.limit()",
                "db.<collection_name>.restrict()"
            ],
            "answer": "db.<collection_name>.limit()",
            "explanation": "The limit() function limits the number of results returned from a query."
        },
        {
            "question": "In which language is MongoDB written?",
            "options": [
                "Python",
                "Java",
                "C++",
                "Go"
            ],
            "answer": "C++",
            "explanation": "MongoDB is written in C++."
        },
        {
            "question": "If you wish to retrieve only the specified fields of a document, which method would you use?",
            "options": [
                "project()",
                "show()",
                "select()",
                "find()"
            ],
            "answer": "find()",
            "explanation": "You would use the find() method with a projection argument to retrieve only specified fields of a document."
        },
        {
            "question": "Which of the following ensures atomic transactions in MongoDB?",
            "options": [
                "WriteConcern",
                "Sharding",
                "Indexing",
                "Replication"
            ],
            "answer": "WriteConcern",
            "explanation": "WriteConcern specifies the level of acknowledgment requested from MongoDB for write operations to ensure atomic transactions."
        },
        {
            "question": "Which of the following is NOT a valid logical operator in MongoDB?",
            "options": [
                "$and",
                "$or",
                "$nor",
                "$between"
            ],
            "answer": "$between",
            "explanation": "MongoDB does not have a $between logical operator. For range queries, $gte and $lte are often used together."
        },
        {
            "question": "If you want to join collections in MongoDB, which operator would you use?",
            "options": [
                "$join",
                "$link",
                "$lookup",
                "$merge"
            ],
            "answer": "$lookup",
            "explanation": "$lookup is used to perform a left outer join to another collection in the same database."
        },
        {
            "question": "What type of index in MongoDB allows you to search text fields?",
            "options": [
                "Text index",
                "Compound index",
                "Unique index",
                "Sparse index"
            ],
            "answer": "Text index",
            "explanation": "A text index allows you to search for words and phrases in string content."
        },
        {
            "question": "Which MongoDB command provides execution statistics about query performance?",
            "options": [
                "db.<collection_name>.stats()",
                "db.<collection_name>.explain()",
                "db.<collection_name>.details()",
                "db.<collection_name>.analyze()"
            ],
            "answer": "db.<collection_name>.explain()",
            "explanation": "The explain() method provides details about how MongoDB executed a query, which can be useful for optimizing performance."
        },
        {
            "question": "How do you create a unique index on a field in MongoDB?",
            "options": [
                "{ uniqueKey: 1 }",
                "{ index: “unique” }",
                "{ type: “unique” }",
                "{ unique: true }"
            ],
            "answer": "{ unique: true }",
            "explanation": "When creating an index, setting the unique option to true ensures that the indexed field contains unique values only."
        },
        {
            "question": "Which MongoDB shell method is used to rename a collection?",
            "options": [
                "db.<collection_name>.rename()",
                "db.<collection_name>.renameCollection()",
                "db.<collection_name>.changeName()",
                "db.<collection_name>.alter()"
            ],
            "answer": "db.<collection_name>.renameCollection()",
            "explanation": "The renameCollection() method is used to rename a collection."
        },
        {
            "question": "What does the mongos command do?",
            "options": [
                "Starts the MongoDB server.",
                "Starts a shard server.",
                "Starts the MongoDB routing service.",
                "Dumps the MongoDB database."
            ],
            "answer": "Starts the MongoDB routing service.",
            "explanation": "mongos is the sharded cluster query router and is used to direct client requests to the appropriate shard(s)."
        },
        {
            "question": "In which format does MongoDB store its data?",
            "options": [
                "XML",
                "JSON",
                "CSV",
                "BSON"
            ],
            "answer": "BSON",
            "explanation": "MongoDB stores its data in BSON format, which is a binary representation of JSON-like documents."
        },
        {
            "question": "Which command is used to terminate a long-running operation in MongoDB?",
            "options": [
                "db.killOp()",
                "db.stopOp()",
                "db.terminate()",
                "db.endOp()"
            ],
            "answer": "db.killOp()",
            "explanation": "The db.killOp() command can be used to terminate a long-running operation."
        }
    ],
    "Oracle": [
        {
            "question": "What does RDBMS stand for?",
            "options": [
                "Relational Database Management System",
                "Rational Database Management System",
                "Random Database Measurement System",
                "Rational Database Measurement System"
            ],
            "answer": "Relational Database Management System",
            "explanation": "RDBMS stands for Relational Database Management System, emphasizing the relational nature of the data."
        },
        {
            "question": "Which SQL command is used to retrieve data from a database in Oracle?",
            "options": [
                "GET",
                "FETCH",
                "SELECT",
                "RETRIEVE"
            ],
            "answer": "SELECT",
            "explanation": "The SELECT command is used to query and retrieve data from a database table."
        },
        {
            "question": "Which Oracle feature ensures that the data remains consistent even after a system failure?",
            "options": [
                "Redundancy",
                "Replication",
                "Atomicity",
                "Backup"
            ],
            "answer": "Atomicity",
            "explanation": "Atomicity is one of the ACID properties, ensuring that all operations in a transaction are completed successfully or none at all, ensuring data consistency."
        },
        {
            "question": "Which clause is used in conjunction with the SELECT statement to filter results?",
            "options": [
                "SORT BY",
                "LIMIT",
                "WHERE",
                "FILTER"
            ],
            "answer": "WHERE",
            "explanation": "The WHERE clause is used with the SELECT statement to filter the query results based on specified conditions."
        },
        {
            "question": "Which Oracle SQL function returns the current date and time?",
            "options": [
                "GET_DATE",
                "CURRENT_DATE",
                "NOW",
                "TODAY"
            ],
            "answer": "CURRENT_DATE",
            "explanation": "CURRENT_DATE returns the current date in Oracle SQL."
        },
        {
            "question": "Which Oracle clause allows you to sort the results of a SELECT query?",
            "options": [
                "SORT BY",
                "ORDER BY",
                "ALIGN BY",
                "GROUP BY"
            ],
            "answer": "ORDER BY",
            "explanation": "The ORDER BY clause is used to sort the results of a SELECT query in ascending or descending order based on one or more columns."
        },
        {
            "question": "Which data type in Oracle is used to store large blocks of text?",
            "options": [
                "CHAR",
                "STRING",
                "TEXT",
                "CLOB"
            ],
            "answer": "CLOB",
            "explanation": "CLOB (Character Large Object) is used to store large blocks of text data in Oracle."
        },
        {
            "question": "What is the maximum size of a VARCHAR2 in Oracle?",
            "options": [
                "2000 bytes",
                "4000 bytes",
                "8000 bytes",
                "16000 bytes"
            ],
            "answer": "4000 bytes",
            "explanation": "The maximum size of a VARCHAR2 in Oracle is 4000 bytes."
        },
        {
            "question": "In Oracle, which command is used to remove a table from the database?",
            "options": [
                "DELETE TABLE",
                "REMOVE TABLE",
                "DROP TABLE",
                "DISCARD TABLE"
            ],
            "answer": "DROP TABLE",
            "explanation": "The DROP TABLE command is used to remove an existing table from the Oracle database."
        },
        {
            "question": "Which keyword is used to create a unique constraint on a column in Oracle?",
            "options": [
                "UNIQUE",
                "DISTINCT",
                "ONLY",
                "SPECIAL"
            ],
            "answer": "UNIQUE",
            "explanation": "The UNIQUE keyword is used to ensure that all values in a column are distinct."
        },
        {
            "question": "Which Oracle command is used to apply changes of a transaction permanently to the database?",
            "options": [
                "COMMIT",
                "SAVE",
                "APPLY",
                "CONFIRM"
            ],
            "answer": "COMMIT",
            "explanation": "The COMMIT command is used to permanently save all the changes made during the current transaction."
        },
        {
            "question": "What is the primary purpose of a primary key in an Oracle table?",
            "options": [
                "To enhance the performance of the table",
                "To ensure unique values in a column",
                "To create relationships with other tables",
                "To automatically increment values"
            ],
            "answer": "To ensure unique values in a column",
            "explanation": "A primary key's main purpose is to ensure unique values for a column and identify each record uniquely in a table."
        },
        {
            "question": "Which Oracle clause would you use to retrieve distinct values from a column?",
            "options": [
                "UNIQUE",
                "DISTINCT",
                "SPECIAL",
                "ONLY"
            ],
            "answer": "DISTINCT",
            "explanation": "The DISTINCT keyword is used with the SELECT statement to fetch unique values from a column."
        },
        {
            "question": "In Oracle, which command would you use to modify an existing table structure?",
            "options": [
                "MODIFY TABLE",
                "CHANGE TABLE",
                "ALTER TABLE",
                "ADJUST TABLE"
            ],
            "answer": "ALTER TABLE",
            "explanation": "The ALTER TABLE command is used to make changes to an existing table structure, such as adding or deleting columns."
        },
        {
            "question": "What does PL/SQL stand for in Oracle?",
            "options": [
                "Procedural Language/Structured Query Language",
                "Programming Language/SQL",
                "Processed Logic/SQL",
                "Protocol Language/SQL"
            ],
            "answer": "Procedural Language/Structured Query Language",
            "explanation": "PL/SQL stands for Procedural Language/Structured Query Language, and it's Oracle's procedural extension to SQL."
        },
        {
            "question": "What does the Oracle SYSDATE function return?",
            "options": [
                "The system's date and time",
                "Only the system's date",
                "Only the system's time",
                "The start date of the system"
            ],
            "answer": "The system's date and time",
            "explanation": "The SYSDATE function in Oracle returns the current date and time of the system."
        },
        {
            "question": "Which Oracle feature helps in recovering the database to a previous state without using backups?",
            "options": [
                "Flashback",
                "Rollback",
                "Restore Point",
                "Recovery Point"
            ],
            "answer": "Flashback",
            "explanation": "The Flashback feature in Oracle allows you to recover the database to a previous state without the need for traditional point-in-time recovery methods."
        },
        {
            "question": "Which Oracle SQL function returns the first non-null value in a list?",
            "options": [
                "NVL()",
                "COALESCE()",
                "NULLIF()",
                "ISNULL()"
            ],
            "answer": "COALESCE()",
            "explanation": "The COALESCE() function returns the first non-null value from a list of expressions."
        },
        {
            "question": "Which Oracle clause aggregates data returned from a query into subgroups?",
            "options": [
                "ORDER BY",
                "ALIGN BY",
                "SORT BY",
                "GROUP BY"
            ],
            "answer": "GROUP BY",
            "explanation": "The GROUP BY clause is used in Oracle SQL to aggregate data into subgroups based on columns."
        },
        {
            "question": "Which Oracle command is used to reverse the changes of a transaction before it’s been committed?",
            "options": [
                "REVERT",
                "UNDO",
                "ROLLBACK",
                "RESET"
            ],
            "answer": "ROLLBACK",
            "explanation": "The ROLLBACK command is used to reverse the changes made during the current transaction that have not been permanently saved to the database."
        },
        {
            "question": "Which Oracle feature allows a column’s value to be automatically incremented with each new record insertion?",
            "options": [
                "Auto-fill",
                "Auto-increment",
                "Sequence",
                "Increment-by-one"
            ],
            "answer": "Sequence",
            "explanation": "In Oracle, the SEQUENCE is used to generate a series of unique numbers for primary keys automatically."
        },
        {
            "question": "Which command removes all records from a table but retains the table structure in Oracle?",
            "options": [
                "DELETE",
                "REMOVE",
                "EMPTY",
                "TRUNCATE"
            ],
            "answer": "TRUNCATE",
            "explanation": "The TRUNCATE command is used to remove all records from a table but it does not delete the table structure."
        },
        {
            "question": "Which of the following SQL clauses is used to provide a substitute value for NULL?",
            "options": [
                "DEFAULT",
                "SUBSTITUTE",
                "NVL",
                "COALESCE"
            ],
            "answer": "NVL",
            "explanation": "The NVL function in Oracle is used to replace NULL values with another value."
        },
        {
            "question": "What is the primary difference between an INNER JOIN and an OUTER JOIN in Oracle?",
            "options": [
                "INNER JOIN returns only the rows when there is a match in both tables, while OUTER JOIN returns all rows from one table and the matching rows from another.",
                "INNER JOIN returns all rows from both tables, while OUTER JOIN returns only the rows where there is a match.",
                "There is no difference; both are the same.",
                "INNER JOIN uses indexes while OUTER JOIN does not."
            ],
            "answer": "INNER JOIN returns only the rows when there is a match in both tables, while OUTER JOIN returns all rows from one table and the matching rows from another.",
            "explanation": "The primary difference between INNER JOIN and OUTER JOIN is how they handle non-matching rows."
        },
        {
            "question": "Which Oracle SQL function returns the number of characters in a string?",
            "options": [
                "CHAR_COUNT",
                "COUNT",
                "LENGTH",
                "NUM_CHARS"
            ],
            "answer": "LENGTH",
            "explanation": "The LENGTH function in Oracle returns the number of characters in a string."
        },
        {
            "question": "In Oracle, a logical unit of work is defined by which of the following?",
            "options": [
                "Session",
                "Transaction",
                "Instance",
                "Process"
            ],
            "answer": "Transaction",
            "explanation": "In Oracle, a transaction represents a logical unit of work that may consist of one or more SQL statements."
        },
        {
            "question": "Which Oracle feature provides a real-time, memory-resident database, which maximizes performance by eliminating disk I/O?",
            "options": [
                "Oracle Real-Time Database",
                "Oracle In-Memory",
                "Oracle Flash",
                "Oracle QuickDB"
            ],
            "answer": "Oracle In-Memory",
            "explanation": "Oracle In-Memory provides a real-time, memory-resident database for improved performance."
        },
        {
            "question": "In Oracle SQL, what is the result of the following expression: SELECT ROUND(50.456, 1) FROM DUAL;?",
            "options": [
                "50.4",
                "50.5",
                "50.46",
                "50.46"
            ],
            "answer": "50.5",
            "explanation": "The ROUND function rounds the number to the specified number of decimal places. In this case, it rounds to one decimal place, so 50.456 becomes 50.5."
        },
        {
            "question": "Which type of index in Oracle uses a bitmap to indicate the row locations?",
            "options": [
                "Primary Index",
                "Bitmap Index",
                "B-tree Index",
                "Spatial Index"
            ],
            "answer": "Bitmap Index",
            "explanation": "Bitmap Index uses a bitmap for each key value and includes pointers to the rows having that value."
        },
        {
            "question": "Which command in Oracle is used to remove a stored procedure?",
            "options": [
                "REMOVE PROCEDURE",
                "DELETE PROCEDURE",
                "DROP PROCEDURE",
                "DESTROY PROCEDURE"
            ],
            "answer": "DROP PROCEDURE",
            "explanation": "The DROP PROCEDURE command is used to remove a stored procedure from the database."
        }
    ],
    "SQL Server": [
        {
            "question": "Which of the following is the default port for SQL Server?",
            "options": [
                "80",
                "8080",
                "3306",
                "1433"
            ],
            "answer": "1433",
            "explanation": "The default port for SQL Server is 1433. However, it can be changed if needed."
        },
        {
            "question": "Which programming language is used to develop MS SQL?",
            "options": [
                "C",
                "C++",
                "Both A and B",
                "Java"
            ],
            "answer": "Both A and B",
            "explanation": "Microsoft SQL Server is primarily developed in C and C++. While C was used for the earlier versions, later versions, and additional components have been developed using C++. Java is not the language used for the development of MS SQL Server."
        },
        {
            "question": "The primary key of a table ensures:",
            "options": [
                "Data Accuracy",
                "Data consistency",
                "Data redundancy",
                "Data uniqueness"
            ],
            "answer": "Data uniqueness",
            "explanation": "The primary key ensures that each record in the table has a unique value and does not allow NULL values."
        },
        {
            "question": "Which SQL statement is used to extract data from a database?",
            "options": [
                "SELECT",
                "GET",
                "EXTRACT",
                "PULL"
            ],
            "answer": "SELECT",
            "explanation": "The SELECT statement is used to fetch data from a database."
        },
        {
            "question": "Which of the following is NOT a SQL Server data type?",
            "options": [
                "varchar",
                "integer",
                "blob",
                "datetime"
            ],
            "answer": "blob",
            "explanation": "blob is not a SQL Server data type. It is used in some other databases like MySQL."
        },
        {
            "question": "In SQL Server, which command is used to delete a table?",
            "options": [
                "REMOVE TABLE",
                "DELETE TABLE",
                "DROP TABLE",
                "DESTROY TABLE"
            ],
            "answer": "DROP TABLE",
            "explanation": "The DROP TABLE command is used to delete an existing table in SQL Server."
        },
        {
            "question": "What is the purpose of the GO command in SQL Server?",
            "options": [
                "To create a loop",
                "To execute the preceding batch of statements",
                "To invoke a stored procedure",
                "To initialize a variable"
            ],
            "answer": "To execute the preceding batch of statements",
            "explanation": "In SQL Server, the GO command is used to signal the end of a batch of Transact-SQL statements to the server."
        },
        {
            "question": "Which SQL clause is used to filter the results of a query?",
            "options": [
                "FILTER",
                "WHERE",
                "CHECK",
                "LOCATE"
            ],
            "answer": "WHERE",
            "explanation": "The WHERE clause is used to filter the records based on a specified condition."
        },
        {
            "question": "What is the maximum size of a VARCHAR(MAX) data type in SQL Server?",
            "options": [
                "8000 characters",
                "2^31-1 characters",
                "Unlimited",
                "10000 characters"
            ],
            "answer": "2^31-1 characters",
            "explanation": "The VARCHAR(MAX) data type can store a maximum of 2^31-1 characters."
        },
        {
            "question": "In SQL Server, what does the IDENTITY property do?",
            "options": [
                "Associates a unique identity with each user",
                "Makes a column read-only",
                "Automatically generates sequential numbers for a column",
                "Encrypts data in a column"
            ],
            "answer": "Automatically generates sequential numbers for a column",
            "explanation": "The IDENTITY property in SQL Server is used to auto-generate sequential numbers for a column, often used for primary keys."
        },
        {
            "question": "Which of the following SQL Server system databases is used to store system-level information for an instance?",
            "options": [
                "master",
                "model",
                "msdb",
                "tempdb"
            ],
            "answer": "master",
            "explanation": "The master database holds system-level information for a SQL Server instance, including instance-wide metadata and login information."
        },
        {
            "question": "The CHAR and VARCHAR data types are different because:",
            "options": [
                "CHAR is used for numbers, and VARCHAR is used for text",
                "CHAR is a fixed length, and VARCHAR is a variable length",
                "VARCHAR can store up to 8000 characters, but CHAR can store only 255",
                "CHAR supports Unicode characters, but VARCHAR does not"
            ],
            "answer": "CHAR is a fixed length, and VARCHAR is a variable length",
            "explanation": "The primary difference between CHAR and VARCHAR in SQL Server is that CHAR is a fixed-length data type, whereas VARCHAR is variable-length."
        },
        {
            "question": "Which SQL statement is used to create a database in SQL Server?",
            "options": [
                "CREATE DATABASE",
                "NEW DATABASE",
                "SETUP DATABASE",
                "ADD DATABASE"
            ],
            "answer": "CREATE DATABASE",
            "explanation": "The CREATE DATABASE statement is used to create a new database in SQL Server."
        },
        {
            "question": "What does the @@ROWCOUNT function return in SQL Server?",
            "options": [
                "The number of rows affected by the last query",
                "The total number of rows in the current database",
                "The number of rows in a specific table",
                "The row number of the last inserted record"
            ],
            "answer": "The number of rows affected by the last query",
            "explanation": "The @@ROWCOUNT function returns the number of rows affected by the last executed statement in SQL Server."
        },
        {
            "question": "Which of the following functions returns the current date and time in SQL Server?",
            "options": [
                "NOW()",
                "CURRENT_TIME()",
                "GETTIME()",
                "GETDATE()"
            ],
            "answer": "GETDATE()",
            "explanation": "The GETDATE() function returns the current date and time in SQL Server."
        },
        {
            "question": "How can you prevent SQL injection in SQL Server?",
            "options": [
                "By using the ESCAPE clause",
                "By using dynamic SQL",
                "By using stored procedures",
                "By using direct user input in queries"
            ],
            "answer": "By using stored procedures",
            "explanation": "One of the most effective ways to prevent SQL injection is by using stored procedures and avoiding the concatenation of user input directly into SQL queries."
        },
        {
            "question": "In SQL Server, which command is used to remove all data from a table without deleting the table itself?",
            "options": [
                "REMOVE",
                "DELETE",
                "TRUNCATE",
                "EMPTY"
            ],
            "answer": "TRUNCATE",
            "explanation": "The TRUNCATE command removes all rows from a table without logging individual row deletions and is typically faster than the DELETE command."
        },
        {
            "question": "Which of the following commands is used to return only distinct (different) values?",
            "options": [
                "UNIQUE",
                "DISTINCT",
                "DIFFER",
                "SEPARATE"
            ],
            "answer": "DISTINCT",
            "explanation": "The DISTINCT keyword is used in conjunction with the SELECT statement to eliminate all the duplicate records and fetch only unique records."
        },
        {
            "question": "Which of the following is an SQL Server system function to get the current user?",
            "options": [
                "CURRENT_USER()",
                "GET_USER()",
                "USER_NAME()",
                "FETCH_USER()"
            ],
            "answer": "USER_NAME()",
            "explanation": "USER_NAME() is a system function in SQL Server that returns the name of the current user."
        },
        {
            "question": "SQL Server operates in which of the following authentication modes?",
            "options": [
                "Windows Authentication Mode",
                "Server Authentication Mode",
                "Mixed Mode",
                "Both A and C"
            ],
            "answer": "Both A and C",
            "explanation": "SQL Server operates in two authentication modes: Windows Authentication Mode and Mixed Mode (which allows both Windows Authentication and SQL Server Authentication)."
        },
        {
            "question": "Which clause can be used in SQL Server to group rows that have the same values in specified columns?",
            "options": [
                "GROUP_BY",
                "GROUP EACH",
                "GROUPING",
                "GROUP BY"
            ],
            "answer": "GROUP BY",
            "explanation": "The GROUP BY clause groups rows that have the same values in specified columns into summary rows, like “total quantity of items sold by a salesperson.”"
        },
        {
            "question": "Which SQL Server function returns the length of a string?",
            "options": [
                "SIZE()",
                "LENGTH()",
                "CHAR_LENGTH()",
                "LEN()"
            ],
            "answer": "LEN()",
            "explanation": "The LEN() function in SQL Server returns the length of a string."
        },
        {
            "question": "The process of organizing data to reduce redundancy and improve data integrity is known as:",
            "options": [
                "Normalization",
                "Serialization",
                "Minimization",
                "Summarization"
            ],
            "answer": "Normalization",
            "explanation": "Normalization is the process of efficiently organizing data in a database, reducing redundancy and ensuring data integrity."
        },
        {
            "question": "Which of the following is a valid aggregate function in SQL Server?",
            "options": [
                "CONCATENATE()",
                "TOTAL()",
                "AVERAGE()",
                "SUM()"
            ],
            "answer": "SUM()",
            "explanation": "The SUM() function is an aggregate function in SQL Server that returns the sum of all values in a particular column."
        },
        {
            "question": "Which command is used to retrieve previous transactions and log events in SQL Server?",
            "options": [
                "UNDO",
                "REDO",
                "BACKLOG",
                "ROLLBACK"
            ],
            "answer": "ROLLBACK",
            "explanation": "The ROLLBACK command in SQL Server is used to undo transactions that have not been saved to the database."
        },
        {
            "question": "If you want to find out the total number of tables in a specific database, which system table would you query?",
            "options": [
                "sys.tables",
                "sys.databasenames",
                "sys.objects",
                "sys.columns"
            ],
            "answer": "sys.tables",
            "explanation": "The sys.tables system table in SQL Server provides information about all the tables in a particular database."
        },
        {
            "question": "Which command in SQL Server is used to make permanent changes done by the transaction?",
            "options": [
                "COMMIT",
                "SAVE",
                "HOLD",
                "RETAIN"
            ],
            "answer": "COMMIT",
            "explanation": "The COMMIT command in SQL Server is used to permanently save all changes made during the current transaction."
        },
        {
            "question": "Which of the following statements is true about temporary tables in SQL Server?",
            "options": [
                "Temporary tables can be backed up.",
                "Temporary tables persist even after the server is restarted.",
                "Temporary tables are stored in the tempdb database.",
                "Temporary tables can be accessed by multiple users."
            ],
            "answer": "Temporary tables are stored in the tempdb database.",
            "explanation": "Temporary tables in SQL Server are stored in the tempdb database and are automatically deleted when they are no longer used."
        },
        {
            "question": "Which of the following is a built-in scalar function in SQL Server that returns the current database ID?",
            "options": [
                "GETDBID()",
                "CURRENT_DBID()",
                "DB_ID()",
                "FETCHDBID()"
            ],
            "answer": "DB_ID()",
            "explanation": "DB_ID() is a built-in scalar function in SQL Server that returns the database ID of the current database."
        },
        {
            "question": "Which of the following is not a system database in SQL Server?",
            "options": [
                "master",
                "model",
                "users",
                "msdb"
            ],
            "answer": "users",
            "explanation": "“users” is not a system database in SQL Server. The other options listed are system databases."
        }
    ],
    "HTML": [
        {
            "question": "What does HTML stand for?",
            "options": [
                "Hyper Transfer Markup Language",
                "Hyper Text Markup Language",
                "Hyperlinking Text Management Language",
                "High-level Text Managing Language"
            ],
            "answer": "Hyper Text Markup Language",
            "explanation": "HTML stands for Hyper Text Markup Language, a standard markup language to create web pages."
        },
        {
            "question": "Which element defines the main content of an HTML document?",
            "options": [
                "<body>",
                "<header>",
                "<main>",
                "<head>"
            ],
            "answer": "<body>",
            "explanation": "The <body> element encompasses the main content of an HTML document, essentially what's visible to the user."
        },
        {
            "question": "Which of the following elements defines the head of the document?",
            "options": [
                "<head>",
                "<header>",
                "<top>",
                "<main>"
            ],
            "answer": "<head>",
            "explanation": "The <head> element contains meta-information about the document, such as its title and links to its scripts and styles."
        },
        {
            "question": "How do you create a hyperlink in HTML?",
            "options": [
                "<link href=\"www.example.com\">Example</link>",
                "<a href=\"www.example.com\">Example</a>",
                "<web href=\"www.example.com\">Example</web>",
                "<hl href=\"www.example.com\">Example</hl>"
            ],
            "answer": "<a href=\"www.example.com\">Example</a>",
            "explanation": "The <a> tag, paired with the href attribute, is used to define hyperlinks in HTML."
        },
        {
            "question": "Which element in HTML can be used to insert a line break?",
            "options": [
                "<lb>",
                "<break>",
                "<br>",
                "<newline>"
            ],
            "answer": "<br>",
            "explanation": "The <br> element is employed to induce a line break or initiate a new line in the content."
        },
        {
            "question": "What attribute should be used in the <img> tag to display alternative text if the image fails to load?",
            "options": [
                "description",
                "text",
                "placeholder",
                "alt"
            ],
            "answer": "alt",
            "explanation": "The alt attribute provides an alternative text description for an image, aiding in accessibility and informing the user about the image if it doesn't load."
        },
        {
            "question": "Which tag creates a numbered list?",
            "options": [
                "<ul>",
                "<ol>",
                "<dl>",
                "<li>"
            ],
            "answer": "<ol>",
            "explanation": "The <ol> element is used to define an ordered list, and the list items inside are represented using the <li> tag."
        },
        {
            "question": "Which HTML element is used to define the title of the document (visible in the browser's title bar or tab)?",
            "options": [
                "<meta>",
                "<title>",
                "<tab>",
                "<header>"
            ],
            "answer": "<title>",
            "explanation": "The <title> tag is used to specify the title of the web page, which is visible in the browser's title bar or tab."
        },
        {
            "question": "Which tag is used to input data from the user in a form?",
            "options": [
                "<userinput>",
                "<input>",
                "<textfield>",
                "<dataentry>"
            ],
            "answer": "<input>",
            "explanation": "The <input> element is versatile and used for various form controls, from text fields to radio buttons."
        },
        {
            "question": "Which element is used to insert a line horizontally on your web page?",
            "options": [
                "<hl>",
                "<line>",
                "<break>",
                "<hr>"
            ],
            "answer": "<hr>",
            "explanation": "The <hr> element is used to define a thematic break or a horizontal rule, typically used for separating content."
        },
        {
            "question": "How is a comment written in HTML?",
            "options": [
                "//This is a comment//",
                "/*This is a comment*/",
                "–This is a comment–",
                "<!–This is a comment–>"
            ],
            "answer": "<!–This is a comment–>",
            "explanation": "Comments in HTML are wrapped between <!– and –>."
        },
        {
            "question": "Which attribute is used to create a link that opens a new browser window?",
            "options": [
                "new",
                "open",
                "window=\"new\"",
                "target=\"_blank\""
            ],
            "answer": "target=\"_blank\"",
            "explanation": "The target=\"_blank\" attribute ensures that the linked document opens in a new window or tab."
        },
        {
            "question": "Which HTML tag is used for creating an unordered list?",
            "options": [
                "<ul>",
                "<li>",
                "<ol>",
                "<uol>"
            ],
            "answer": "<ul>",
            "explanation": "The <ul> tag is used to define an unordered list, and the list items inside are represented using the <li> tag."
        },
        {
            "question": "Which of the following HTML elements represents emphasized text?",
            "options": [
                "<em>",
                "<i>",
                "<strong>",
                "<highlight>"
            ],
            "answer": "<em>",
            "explanation": "The <em> element is used to emphasize text. This usually results in the text being displayed in italics."
        },
        {
            "question": "What does the <meta> tag provide?",
            "options": [
                "Metadata about the HTML document.",
                "An animation.",
                "A paragraph of text.",
                "A table structure."
            ],
            "answer": "Metadata about the HTML document.",
            "explanation": "The <meta> tag provides metadata about the HTML document, such as character set, viewport settings, author, and more."
        },
        {
            "question": "Which HTML tag is used to specify a footer for a document or a section?",
            "options": [
                "<bottom>",
                "<footer>",
                "<end>",
                "<sectionend>"
            ],
            "answer": "<footer>",
            "explanation": "The <footer> tag is used to define a footer for a document or a section."
        },
        {
            "question": "What tag is used in HTML to create a dropdown list?",
            "options": [
                "<list>",
                "<drop>",
                "<dl>",
                "<select>"
            ],
            "answer": "<select>",
            "explanation": "The <select> tag is used to create a dropdown list in HTML. The options in the dropdown are defined using the <option> tag."
        },
        {
            "question": "How do you create a text area in an HTML form for user comments?",
            "options": [
                "<input type=\"text\">",
                "<comment>",
                "<input type=\"textbox\">",
                "<textarea>"
            ],
            "answer": "<textarea>",
            "explanation": "The <textarea> tag is used to define a multi-line input control, like a comment section."
        },
        {
            "question": "Which of the following is the correct way to add a background color in HTML?",
            "options": [
                "<body bgcolor=\"yellow\">",
                "<body style=\"background-color:yellow;\">",
                "<background>yellow</background>",
                "<body background-color=\"yellow\">"
            ],
            "answer": "<body style=\"background-color:yellow;\">",
            "explanation": "Modern HTML practices recommend using CSS for styling. Thus, the style attribute with the property \"background-color\" is the right way."
        },
        {
            "question": "Which of these tags are all <table> tags?",
            "options": [
                "<table><head><tfoot>",
                "<table><tr><td>",
                "<thead><body><tr>",
                "<table><th><cap>"
            ],
            "answer": "<table><tr><td>",
            "explanation": "The <table> element is used to create a table. <tr> is used to define a table row, and <td> defines a table data cell."
        },
        {
            "question": "Which HTML attribute is used to define styles inline?",
            "options": [
                "styles",
                "stylesheet",
                "type",
                "style"
            ],
            "answer": "style",
            "explanation": "The style attribute is used to apply inline styles to HTML elements."
        },
        {
            "question": "What does the <aside> element represent in HTML5?",
            "options": [
                "A main content in the document.",
                "A navigation bar.",
                "Content aside from the main content.",
                "A footer."
            ],
            "answer": "Content aside from the main content.",
            "explanation": "The <aside> element is used to represent content that's separate from the main content and can be considered independently."
        },
        {
            "question": "Which tag defines a hyperlink, or a link to another page?",
            "options": [
                "<hyperlink>",
                "<link>",
                "<hl>",
                "<a>"
            ],
            "answer": "<a>",
            "explanation": "The <a> tag, short for \"anchor\", is used to define hyperlinks in HTML."
        },
        {
            "question": "How would you define a section heading in an HTML document?",
            "options": [
                "<h1>",
                "<head>",
                "<heading>",
                "<section>"
            ],
            "answer": "<h1>",
            "explanation": "HTML provides six levels of headings, from <h1> to <h6>. <h1> defines the most important heading, while <h6> defines the least important."
        },
        {
            "question": "What does the <abbr> tag in HTML denote?",
            "options": [
                "A bold text.",
                "A block of code.",
                "An abbreviation or an acronym.",
                "An address."
            ],
            "answer": "An abbreviation or an acronym.",
            "explanation": "The <abbr> tag is used for abbreviations or acronyms. The full form can be provided using the title attribute."
        },
        {
            "question": "Which of the following is the correct way to comment out multiple lines in HTML?",
            "options": [
                "//This is a comment//",
                "/*This is a comment*/",
                "–This is a comment–",
                "<!–This is a comment–>"
            ],
            "answer": "<!–This is a comment–>",
            "explanation": "In HTML, multiple lines can be commented out using <!– to start the comment and –> to end it."
        },
        {
            "question": "What tag in HTML is used to define an internal style sheet?",
            "options": [
                "<script>",
                "<style>",
                "<css>",
                "<stylesheet>"
            ],
            "answer": "<style>",
            "explanation": "To define an internal style sheet, you use the <style> tag within the <head> section."
        },
        {
            "question": "Which of the following elements represents the root of an HTML document?",
            "options": [
                "<root>",
                "<html>",
                "<web>",
                "<base>"
            ],
            "answer": "<html>",
            "explanation": "The <html> tag represents the root of an HTML document."
        },
        {
            "question": "Which attribute specifies the character encoding for an HTML document?",
            "options": [
                "encode",
                "charset",
                "character",
                "set"
            ],
            "answer": "charset",
            "explanation": "The charset attribute specifies the character encoding for the HTML document."
        },
        {
            "question": "What is the correct way to group checkboxes using a common name?",
            "options": [
                "<input type=\"checkbox\" name=\"commonName\">",
                "<checkbox name=\"commonName\">",
                "<input type=\"box\" group=\"commonName\">",
                "<check group=\"commonName\">"
            ],
            "answer": "<input type=\"checkbox\" name=\"commonName\">",
            "explanation": "Checkboxes can be grouped using the same name attribute value."
        },
        {
            "question": "How do you mark up a navigational section in HTML5?",
            "options": [
                "<navigate>",
                "<navigation>",
                "<navbar>",
                "<nav>"
            ],
            "answer": "<nav>",
            "explanation": "The <nav> element in HTML5 represents a section of navigation links."
        },
        {
            "question": "Which of the following HTML elements would you use to embed a video file into a webpage?",
            "options": [
                "<movie>",
                "<media>",
                "<mp4>",
                "<video>"
            ],
            "answer": "<video>",
            "explanation": "The <video> element is used to embed video files into a webpage."
        },
        {
            "question": "What would you use to define a JavaScript function in an HTML document?",
            "options": [
                "<javascript>",
                "<function>",
                "<script>",
                "<jsfunction>"
            ],
            "answer": "<script>",
            "explanation": "The <script> tag is used to define client-side JavaScript in an HTML document."
        },
        {
            "question": "Which tag allows you to add a row in an HTML table?",
            "options": [
                "<row>",
                "<line>",
                "<tr>",
                "<tdr>"
            ],
            "answer": "<tr>",
            "explanation": "The <tr> tag is used to define a table row in HTML."
        },
        {
            "question": "How do you specify that the text input field should be disabled?",
            "options": [
                "<input type=\"text\" disabled=\"disabled\">",
                "<input type=\"text\" inactive=\"true\">",
                "<input type=\"text\" deactivate=\"yes\">",
                "<input type=\"text\" noinput=\"true\">"
            ],
            "answer": "<input type=\"text\" disabled=\"disabled\">",
            "explanation": "The disabled attribute makes an input field uneditable and unresponsive."
        },
        {
            "question": "In HTML5, which tag is used for graphics and graphical applications that can be drawn on the fly, typically with JavaScript?",
            "options": [
                "<canvas>",
                "<draw>",
                "<graphic>",
                "<art>"
            ],
            "answer": "<canvas>",
            "explanation": "The <canvas> element is used for graphics that can be drawn on the fly, usually with JavaScript."
        },
        {
            "question": "Which of the following is the correct way to link an external CSS file?",
            "options": [
                "<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">",
                "<style src=\"mystyle.css\">",
                "<css source=\"mystyle.css\">",
                "<stylesheet link=\"mystyle.css\">"
            ],
            "answer": "<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyle.css\">",
            "explanation": "The <link> tag, with appropriate attributes, is used to link an external stylesheet to an HTML document."
        },
        {
            "question": "What does the http-equiv attribute specify in the <meta> tag?",
            "options": [
                "The character set for the document.",
                "The author of the document.",
                "An HTTP header for the information/value of the content attribute.",
                "The viewport settings of the document."
            ],
            "answer": "An HTTP header for the information/value of the content attribute.",
            "explanation": "The http-equiv attribute provides an HTTP header for the information/value of the content attribute."
        },
        {
            "question": "What tag would you use to ensure the text displays exactly as written, respecting both spaces and line breaks?",
            "options": [
                "<pre>",
                "<verbatim>",
                "<literal>",
                "<preserve>"
            ],
            "answer": "<pre>",
            "explanation": "The <pre> tag is used to define preformatted text. The text inside a <pre> tag is displayed in a fixed-width font, and whitespace inside this element is displayed as written."
        },
        {
            "question": "How do you specify the image as a server-side image-map in HTML?",
            "options": [
                "<img src=\"img.jpg\" usemap=\"map\">",
                "<img src=\"img.jpg\" serverside=\"map\">",
                "<img src=\"img.jpg\" ismap>",
                "<img src=\"img.jpg\" maptype=\"server\">"
            ],
            "answer": "<img src=\"img.jpg\" ismap>",
            "explanation": "The ismap attribute is used to specify an image as a server-side image-map."
        }
    ],
    "CSS": [
        {
            "question": "What is the full form of the acronym CSS?",
            "options": [
                "Cascading Style Sheets",
                "Creative Style System",
                "Computer Style Sheets",
                "Cascading Simple System"
            ],
            "answer": "Cascading Style Sheets",
            "explanation": "CSS stands for Cascading Style Sheets. It's a styling language used to control the presentation of HTML documents."
        },
        {
            "question": "Which property is used to change the text color of an element?",
            "options": [
                "color",
                "font-color",
                "text-color",
                "text"
            ],
            "answer": "color",
            "explanation": "The color property in CSS is used to change the text color of an element. You can specify colors using color names, hexadecimal values, RGB values, or HSL values."
        },
        {
            "question": "Which HTML attribute is used to define inline styles?",
            "options": [
                "class",
                "font",
                "style",
                "styles"
            ],
            "answer": "style",
            "explanation": "The style attribute is used in HTML to define inline CSS."
        },
        {
            "question": "Which of the following selectors targets all <p> elements?",
            "options": [
                "#p",
                ".p",
                "p",
                "*p"
            ],
            "answer": "p",
            "explanation": "In CSS, tag/element selectors are used without prefixes. So, \"p\" targets all <p> elements."
        },
        {
            "question": "How do you set the background color of an element to red?",
            "options": [
                "background-color = red;",
                "background-color: red",
                "color: red;",
                "background: red;"
            ],
            "answer": "background-color: red",
            "explanation": "The property for setting the background color of an element is background-color."
        },
        {
            "question": "Which property controls the font of an element?",
            "options": [
                "text-style",
                "text-font",
                "font-style",
                "font-family"
            ],
            "answer": "font-family",
            "explanation": "The font-family property specifies the font for an element."
        },
        {
            "question": "How do you comment out multiple lines in CSS?",
            "options": [
                "//This is a comment//",
                "<!–This is a comment–>",
                "/This is a comment/",
                "–This is a comment–"
            ],
            "answer": "/This is a comment/",
            "explanation": "In CSS, multiple lines can be commented out using /* to start the comment and */ to end it."
        },
        {
            "question": "Which property adds space inside an element?",
            "options": [
                "margin",
                "border",
                "spacing",
                "padding"
            ],
            "answer": "padding",
            "explanation": "Padding is used to create space around an element's content, inside of any defined borders."
        },
        {
            "question": "Which of the following property is used to change the left margin of an element?",
            "options": [
                "margin-left",
                "padding-left",
                "indent",
                "left-margin"
            ],
            "answer": "margin-left",
            "explanation": "The margin-left property is used to set the left margin of an element."
        },
        {
            "question": "How do you make all the letters in a text uppercase?",
            "options": [
                "text-transform:uppercase;",
                "text-style:uppercase;",
                "font-case:uppercase;",
                "text-case:uppercase;"
            ],
            "answer": "text-transform:uppercase;",
            "explanation": "The text-transform property controls text case and capitalization."
        },
        {
            "question": "How do you select all elements with the class name \"intro\"?",
            "options": [
                ".intro",
                "intro",
                "#intro",
                "*intro"
            ],
            "answer": ".intro",
            "explanation": "In CSS, class selectors are prefixed with a dot (.). So, .intro will select all elements with the class name \"intro\"."
        },
        {
            "question": "How do you select an element with the ID \"header\"?",
            "options": [
                ".header",
                "header",
                "*header",
                "#header"
            ],
            "answer": "#header",
            "explanation": "In CSS, ID selectors are prefixed with a hash (#). So, #header will select the element with the ID \"header\"."
        },
        {
            "question": "Which property controls the text size?",
            "options": [
                "text-size",
                "font-size",
                "text-style",
                "font-weight"
            ],
            "answer": "font-size",
            "explanation": "The font-size property is used to control the size of the text."
        },
        {
            "question": "How do you display hyperlinks without an underline?",
            "options": [
                "a {decoration: none;}",
                "a {text-decoration: none;}",
                "a {underline: none;}",
                "a {text-line: none;}"
            ],
            "answer": "a {text-decoration: none;}",
            "explanation": "The text-decoration property is used to set the decoration of the text. Setting it to none removes the underline from hyperlinks."
        },
        {
            "question": "Which property aligns the text of an element to the center?",
            "options": [
                "text-align: center;",
                "text-center: true;",
                "font-align: center;",
                "align-text: center;"
            ],
            "answer": "text-align: center;",
            "explanation": "The text-align property is used to specify the horizontal alignment of text in an element."
        },
        {
            "question": "Which property adds space between an element and its surrounding elements?",
            "options": [
                "padding",
                "margin",
                "spacing",
                "boundary"
            ],
            "answer": "margin",
            "explanation": "The margin property is used to create space around elements, outside of any defined borders."
        },
        {
            "question": "What is the default value of the position property?",
            "options": [
                "relative",
                "absolute",
                "fixed",
                "static"
            ],
            "answer": "static",
            "explanation": "The default value of the position property is static, which means the element is not positioned in any special way."
        },
        {
            "question": "Which of the following will hide an element by making it completely transparent but still occupying space?",
            "options": [
                "visibility: invisible;",
                "opacity: 0;",
                "display: none;",
                "color: transparent;"
            ],
            "answer": "opacity: 0;",
            "explanation": "Setting opacity to 0 will make an element completely transparent but still taking up space in the layout."
        },
        {
            "question": "What is the purpose of the z-index property?",
            "options": [
                "Specify the weight of a font",
                "Set the zoom level of an element",
                "Stack elements on the Z-axis",
                "Determine the zig-zag pattern of borders"
            ],
            "answer": "Stack elements on the Z-axis",
            "explanation": "The z-index property specifies the stack order of an element. An element with a greater stack order is always in front of another element with a lower stack order."
        },
        {
            "question": "Which value of the overflow property will cause scrollbars to always appear?",
            "options": [
                "auto",
                "hidden",
                "scroll",
                "visible"
            ],
            "answer": "scroll",
            "explanation": "Setting overflow to scroll will always display scrollbars, whether they're needed or not."
        },
        {
            "question": "Which CSS property defines the space between the content of an element and its border?",
            "options": [
                "margin",
                "spacing",
                "padding",
                "border-spacing"
            ],
            "answer": "padding",
            "explanation": "Padding is the space between the content of an element and its border."
        },
        {
            "question": "How do you specify a border for all four sides that is medium, dashed, and red?",
            "options": [
                "border: red dashed medium;",
                "border: medium dashed red;",
                "all-border: medium dashed red;",
                "border-all: red medium dashed;"
            ],
            "answer": "border: medium dashed red;",
            "explanation": "The shorthand border property allows you to set the width, style, and color of all four sides simultaneously."
        },
        {
            "question": "How do you apply a class .selected to a <div> element in HTML?",
            "options": [
                "<div class: \"selected\">",
                "<div .selected>",
                "<div class=\"selected\">",
                "<div id=\"selected\">"
            ],
            "answer": "<div class=\"selected\">",
            "explanation": "To apply a class to an element in HTML, you use the class attribute with the class name."
        },
        {
            "question": "Which property adjusts the space between the individual characters of a text?",
            "options": [
                "letter-spacing",
                "word-spacing",
                "text-spacing",
                "font-spacing"
            ],
            "answer": "letter-spacing",
            "explanation": "The letter-spacing property adjusts the space between the characters of a text."
        },
        {
            "question": "Which of the following is NOT a CSS framework?",
            "options": [
                "Bootstrap",
                "Angular",
                "Bulma",
                "Foundation"
            ],
            "answer": "Angular",
            "explanation": "Angular is a JavaScript framework for building web applications. It's not a CSS framework."
        },
        {
            "question": "Which CSS property is used for specifying the shadows of a box?",
            "options": [
                "shadow-box",
                "border-shadow",
                "box-shadow",
                "padding-shadow"
            ],
            "answer": "box-shadow",
            "explanation": "The box-shadow property is used to add shadow effects around an element's frame."
        },
        {
            "question": "Which of the following is a shorthand property for setting margin values in the order top, right, bottom, left?",
            "options": [
                "margin: 10px 20px 10px 20px;",
                "margin: 10px 10px 20px 20px;",
                "margin: 20px 10px 10px 20px;",
                "margin: 10px 20px 20px 10px;"
            ],
            "answer": "margin: 10px 20px 10px 20px;",
            "explanation": "The margin shorthand follows the sequence: top, right, bottom, left."
        },
        {
            "question": "What will flex: 1 do in a flex container?",
            "options": [
                "Makes the item flexible and sets the flex item's width to 1px",
                "Sets the flex-grow property to 1, allowing it to grow if necessary",
                "Forces the item to be the first in the display order",
                "Aligns the item to the start of the flex container"
            ],
            "answer": "Sets the flex-grow property to 1, allowing it to grow if necessary",
            "explanation": "flex: 1 is shorthand that specifies the ability of a flex item to grow if necessary. It's equivalent to setting flex-grow: 1."
        },
        {
            "question": "How do you add a background color for all <ul> elements?",
            "options": [
                "ul all {background-color: #EDEDED;}",
                "ul {background-color: #EDEDED;}",
                "all.ul {background-color: #EDEDED;}",
                "list ul {background-color: #EDEDED;}"
            ],
            "answer": "ul {background-color: #EDEDED;}",
            "explanation": "You can directly use the element's name as the selector to style it."
        },
        {
            "question": "Which of the following properties will not affect an inline element?",
            "options": [
                "color",
                "padding",
                "width",
                "font-size"
            ],
            "answer": "width",
            "explanation": "Inline elements do not respect the width and height properties, they wrap content and don’t force line breaks."
        },
        {
            "question": "How can you add a comment in a CSS file?",
            "options": [
                "// this is a comment",
                "<!– this is a comment –>",
                "/* this is a comment */",
                "— this is a comment —"
            ],
            "answer": "/* this is a comment */",
            "explanation": "In CSS, comments are added by wrapping the text between /* and */."
        },
        {
            "question": "Which property is used to add a background image?",
            "options": [
                "background-color",
                "color",
                "background-image",
                "image-background"
            ],
            "answer": "background-image",
            "explanation": "The background-image property is used to specify a background image."
        },
        {
            "question": "Which property is used to create rounded corners for an element?",
            "options": [
                "border-style",
                "border-radius",
                "border-width",
                "border-color"
            ],
            "answer": "border-radius",
            "explanation": "The border-radius property in CSS is used to create rounded corners for an element's border. You can specify a single value for all corners or individual values for each corner."
        },
        {
            "question": "What is the purpose of the display: none; property in CSS?",
            "options": [
                "It hides an element without affecting the layout.",
                "It removes the element from the DOM.",
                "It creates an invisible element that still occupies space.",
                "It applies an invisible background color to the element."
            ],
            "answer": "It hides an element without affecting the layout.",
            "explanation": "The display: none; property in CSS hides an element from the layout, making it effectively invisible. However, it still occupies space in the document flow."
        },
        {
            "question": "What is the purpose of the float property in CSS?",
            "options": [
                "It controls the vertical alignment of an element.",
                "It allows text to wrap around an element.",
                "It animates an element's position.",
                "It applies a blur effect to an element."
            ],
            "answer": "It allows text to wrap around an element.",
            "explanation": "The float property in CSS is used to allow text and other inline elements to wrap around a floated element, such as an image."
        }
    ],
    "React": [
        {
            "question": "What is React primarily used for?",
            "options": [
                "Building mobile applications",
                "Building server-side applications",
                "Building user interfaces for web applications",
                "Data analysis"
            ],
            "answer": "Building user interfaces for web applications",
            "explanation": "React is a JavaScript library primarily used for building user interfaces in web applications."
        },
        {
            "question": "Which company developed React?",
            "options": [
                "Google",
                "Apple",
                "Facebook",
                "Microsoft"
            ],
            "answer": "Facebook",
            "explanation": "React was developed and is maintained by Facebook."
        },
        {
            "question": "What is JSX in React?",
            "options": [
                "A JavaScript extension that allows us to write HTML-like code inside JavaScript",
                "A tool for transpiling ES6 to ES5",
                "A built-in function to handle state in React",
                "A library for adding animations in React components"
            ],
            "answer": "A JavaScript extension that allows us to write HTML-like code inside JavaScript",
            "explanation": "JSX stands for JavaScript XML. It is a syntax extension for JavaScript, recommended by React for describing the UI structure. It allows developers to write HTML structures in a way that looks similar to XML within their JavaScript code, making the UI code more readable and intuitive."
        },
        {
            "question": "What method must every React class component implement?",
            "options": [
                "init()",
                "componentWillMount()",
                "execute()",
                "render()"
            ],
            "answer": "render()",
            "explanation": "Every React component must implement the render() method."
        },
        {
            "question": "What is the name of the concept that React uses to efficiently update the user interface?",
            "options": [
                "Bootstrap",
                "AJAX",
                "Virtual DOM",
                "WebSockets"
            ],
            "answer": "Virtual DOM",
            "explanation": "React uses a concept called the Virtual DOM to efficiently update the user interface."
        },
        {
            "question": "Which function allows you to create a React component?",
            "options": [
                "React.createComponent()",
                "React.makeComponent()",
                "React.createClass()",
                "React.buildComponent()"
            ],
            "answer": "React.createClass()",
            "explanation": "Before the ES6 class syntax, React.createClass() was the way to create a React component."
        },
        {
            "question": "In React, which feature is used pass the data between components?",
            "options": [
                "State",
                "Properties",
                "Elements",
                "Props"
            ],
            "answer": "Props",
            "explanation": "In React, data passed into a component is referred to as \"props\" or properties."
        },
        {
            "question": "In which lifecycle method should you make AJAX requests in a class component?",
            "options": [
                "componentWillMount()",
                "componentDidMount()",
                "render()",
                "componentWillUpdate()"
            ],
            "answer": "componentDidMount()",
            "explanation": "Making AJAX requests in the componentDidMount() lifecycle method ensures that the data is fetched as soon as the component is added to the DOM."
        },
        {
            "question": "How can you access the state of a component from inside of a method?",
            "options": [
                "this.state",
                "this.props.state",
                "this.getState()",
                "state.this"
            ],
            "answer": "this.state",
            "explanation": "The state of a React component can be accessed with this.state."
        },
        {
            "question": "Which of the following is a valid way to update the state in React class component?",
            "options": [
                "this.state.value = 100;",
                "this.setState({ value: 100 });",
                "state.value = 100;",
                "setState({ value: 100 });"
            ],
            "answer": "this.setState({ value: 100 });",
            "explanation": "The correct way to update the state in React is using the this.setState() method."
        },
        {
            "question": "What does props.children refer to?",
            "options": [
                "All components should have child components",
                "The child components defined within the component",
                "Props passed from a parent to its children",
                "The DOM nodes generated by the component"
            ],
            "answer": "The child components defined within the component",
            "explanation": "props.children refers to the content placed between the opening and closing tags of a component."
        },
        {
            "question": "Which hook can be used for performing side effects in function components?",
            "options": [
                "useEffect",
                "useState",
                "useProps",
                "useRender"
            ],
            "answer": "useEffect",
            "explanation": "The useEffect hook is used to perform side effects in function components, like data fetching, subscriptions, or manually changing the DOM."
        },
        {
            "question": "Which of the following hooks allows you to use state in function components?",
            "options": [
                "useState",
                "withState",
                "thisState",
                "haveState"
            ],
            "answer": "useState",
            "explanation": "The useState hook allows function components to use state."
        },
        {
            "question": "What is the primary use of Redux in a React application?",
            "options": [
                "Component styling",
                "DOM manipulation",
                "Managing state",
                "Handling forms"
            ],
            "answer": "Managing state",
            "explanation": "Redux is primarily used for managing application state in a centralized store."
        },
        {
            "question": "What is a Higher Order Component (HOC)?",
            "options": [
                "A component with a higher state value",
                "A component that renders after other components",
                "A component that takes another component as an argument",
                "A more advanced component"
            ],
            "answer": "A component that takes another component as an argument",
            "explanation": "An HOC is a function that takes a component and returns a new component with additional props or functionalities."
        },
        {
            "question": "What is a Fragment in React?",
            "options": [
                "A part of the React library used for AJAX calls",
                "A type of storage similar to localStorage",
                "A group of components",
                "A lightweight way to group multiple elements without adding an extra node to the DOM"
            ],
            "answer": "A lightweight way to group multiple elements without adding an extra node to the DOM",
            "explanation": "React Fragment allows grouping of multiple children without adding extra nodes to the DOM."
        },
        {
            "question": "Which of the following is not a lifecycle method in React class components?",
            "options": [
                "render()",
                "componentToRender()",
                "componentDidMount()",
                "shouldComponentUpdate()"
            ],
            "answer": "componentToRender()",
            "explanation": "componentToRender() is not a lifecycle method in React. The others are valid lifecycle methods."
        },
        {
            "question": "What is a key in React?",
            "options": [
                "A method to unlock premium React features",
                "A way to target CSS styles to specific components",
                "A special string attribute required when creating lists of elements",
                "The main method to store data in the component"
            ],
            "answer": "A special string attribute required when creating lists of elements",
            "explanation": "Keys in React help identify which items in a list have changed, are added, or are removed."
        },
        {
            "question": "In which direction is data passed in React by default?",
            "options": [
                "From child to parent",
                "From parent to child",
                "Both ways simultaneously",
                "Data cannot be passed in React"
            ],
            "answer": "From parent to child",
            "explanation": "In React, data is passed from parent to child through props by default. If you want to pass data from a child to a parent, you'd typically use callback functions."
        },
        {
            "question": "What does a constructor method in a class-based React component do?",
            "options": [
                "Render the component",
                "Mount the component",
                "Initialize the state and bind methods",
                "Fetch data"
            ],
            "answer": "Initialize the state and bind methods",
            "explanation": "In a class-based React component, the constructor method is used to initialize the component's state and bind methods."
        },
        {
            "question": "Which is the right way to bind a method in a React class component?",
            "options": [
                "this.methodName = this.methodName.bind()",
                "this.methodName.bind(this.methodName)",
                "this.methodName.bind(this)",
                "bind(this.methodName)"
            ],
            "answer": "this.methodName.bind(this)",
            "explanation": "In React class components, methods are bound using .bind(this) to ensure they have the correct context."
        },
        {
            "question": "Which of the following is used to define a prop's type in a component?",
            "options": [
                "PropTypes",
                "PropTypeCheck",
                "ReactTypes",
                "TypeProps"
            ],
            "answer": "PropTypes",
            "explanation": "PropTypes is a library that helps in defining and validating the types of props in a component."
        },
        {
            "question": "Which hook is used for memorizing expensive computations in React?",
            "options": [
                "useEffect",
                "useMemo",
                "useCallback",
                "useMemory"
            ],
            "answer": "useMemo",
            "explanation": "The useMemo hook is used to memorize the result of an expensive computation, ensuring it doesn't get recalculated on every render unless its dependencies change."
        },
        {
            "question": "What does the useReducer hook do?",
            "options": [
                "Reduces the size of your components",
                "Helps to optimize the performance of your components",
                "Manages state and actions in a similar way to Redux",
                "Reduces the number of hooks you can use in a component"
            ],
            "answer": "Manages state and actions in a similar way to Redux",
            "explanation": "useReducer is a hook that provides a way to manage state and actions in your components, similar to how Redux works."
        },
        {
            "question": "What is Context in React?",
            "options": [
                "A global state management tool",
                "A way to pass data through the component tree without passing props down manually",
                "A set of developer tools for debugging React applications",
                "An API for creating animations"
            ],
            "answer": "A way to pass data through the component tree without passing props down manually",
            "explanation": "Context provides a way to share values (data or functions) between components without having to pass props manually at every level."
        },
        {
            "question": "What is the purpose of the key prop in React?",
            "options": [
                "To unlock additional React features",
                "To help React identify which items have changed in a list",
                "To determine the component hierarchy",
                "To specify a unique identifier for a component's state"
            ],
            "answer": "To help React identify which items have changed in a list",
            "explanation": "The key prop helps React identify and differentiate each item in a list and determine which elements may need to be re-rendered."
        },
        {
            "question": "How do you create a functional component in React?",
            "options": [
                "Using the createComponent function",
                "Using a JavaScript function or ES6 arrow function",
                "Using the render method",
                "By extending the React.ComponentClass"
            ],
            "answer": "Using a JavaScript function or ES6 arrow function",
            "explanation": "A functional component is a simple JavaScript function or ES6 arrow function that returns JSX."
        },
        {
            "question": "Which lifecycle method is called once the component has been rendered to the DOM?",
            "options": [
                "componentDidRender()",
                "componentWillMount()",
                "componentHasMounted()",
                "componentDidMount()"
            ],
            "answer": "componentDidMount()",
            "explanation": "The componentDidMount() lifecycle method is called once the component has been rendered to the DOM, making it a common place to fetch data or handle other side effects."
        },
        {
            "question": "Which command can you use to create a new React app?",
            "options": [
                "create-react-app my-app",
                "npm start my-app",
                "npm install react",
                "react new-app my-app"
            ],
            "answer": "create-react-app my-app",
            "explanation": "The create-react-app tool allows developers to quickly create and set up a new React project."
        },
        {
            "question": "Which of the following hooks is used to execute side effects, such as data fetching, in functional components?",
            "options": [
                "useState()",
                "useEffect()",
                "useMemo()",
                "useProps()"
            ],
            "answer": "useEffect()",
            "explanation": "The useEffect() hook is used to execute side effects in functional components, and it's often used for operations like data fetching, DOM manipulation, or setting up subscriptions."
        },
        {
            "question": "What does JSX stand for?",
            "options": [
                "JavaScript Extended",
                "JavaScript XML",
                "JavaScript Experience",
                "Java Styled Components"
            ],
            "answer": "JavaScript XML",
            "explanation": "JSX stands for JavaScript XML. It allows developers to write HTML structures in a way that looks similar to XML within their JavaScript code, making the UI more intuitive and visually clear."
        },
        {
            "question": "In which lifecycle method should you avoid setting state in a class component to prevent unnecessary re-renders?",
            "options": [
                "shouldComponentUpdate()",
                "componentDidUpdate()",
                "componentWillUpdate()",
                "render()"
            ],
            "answer": "render()",
            "explanation": "Calling setState() directly inside the render() method will lead to an infinite loop since render() will be called every time the state updates."
        },
        {
            "question": "Which of the following hooks is used for sharing logic between components?",
            "options": [
                "useContext()",
                "useSharedLogic()",
                "useCustomHook()",
                "useCallback()"
            ],
            "answer": "useCustomHook()",
            "explanation": "Developers can create their own custom hooks (there's no actual hook named useCustomHook()) to share logic between different components. By convention, custom hooks start with the word \"use\"."
        },
        {
            "question": "How can you handle events in React?",
            "options": [
                "By adding a native HTML event attribute to an element",
                "By adding an inline JavaScript within HTML tags",
                "By using synthetic event handlers provided by React",
                "React does not support event handling"
            ],
            "answer": "By using synthetic event handlers provided by React",
            "explanation": "React wraps DOM events with its own set of events called synthetic events. These provide cross-browser consistency and integrate well with React's event system."
        },
        {
            "question": "What is the purpose of the React Router library?",
            "options": [
                "To handle HTTP requests in React applications.",
                "To manage and synchronize component states.",
                "To manage navigation and routing in React applications.",
                "To optimize the performance of React applications."
            ],
            "answer": "To manage navigation and routing in React applications.",
            "explanation": "The React Router library provides a routing solution for React applications. It allows developers to define routes, handle navigation, and render specific components based on the current URL."
        },
        {
            "question": "What is the purpose of the useParams hook in React Router?",
            "options": [
                "To handle form validation in React.js",
                "To retrieve query parameters from the URL",
                "To extract URL parameters from a route",
                "To manage the state of route transitions"
            ],
            "answer": "To extract URL parameters from a route",
            "explanation": "The useParams hook in React Router is used to extract URL parameters from a route. URL parameters are dynamic parts of the URL that can be accessed and used within a component to customize its behavior based on the specific route."
        },
        {
            "question": "How can you access form input values in React.js?",
            "options": [
                "By using the document.getElementById() method",
                "By using the event.target.value property",
                "By using the useState hook and setting the initial value",
                "By using the useRef hook and the current property"
            ],
            "answer": "By using the event.target.value property",
            "explanation": "In React.js, you can access form input values by using the event.target.value property within an event handler function. This property gives you the current value of the input element that triggered the event and allows you to capture and use the input data."
        },
        {
            "question": "How do you handle form input changes in React?",
            "options": [
                "Using the onChange event",
                "Using the onInput attribute",
                "Using the inputChanged method",
                "Using the handleForm attribute"
            ],
            "answer": "Using the onChange event",
            "explanation": "In React, the onChange event is commonly used to detect when the value of an input element changes."
        },
        {
            "question": "What is a controlled component in React?",
            "options": [
                "A component that does not have any state",
                "A component that dictates the behavior of other components",
                "An input element whose value is controlled by React state",
                "A component that cannot be updated"
            ],
            "answer": "An input element whose value is controlled by React state",
            "explanation": "A controlled component in React refers to an input element where the value is set by the component's state and can be altered via user interactions."
        },
        {
            "question": "How do you prevent a form from submitting by default in React?",
            "options": [
                "Using event.preventDefault()",
                "Using stopSubmit()",
                "Setting the form's submit attribute to false",
                "Removing the action attribute from the form"
            ],
            "answer": "Using event.preventDefault()",
            "explanation": "In React's event handling system, event.preventDefault() is used to stop the default action of an event, like preventing a form from submitting to the server."
        }
    ],
    "Angular": [
        {
            "question": "Angular is primarily considered as?",
            "options": [
                "A JavaScript Framework",
                "A CSS Framework",
                "A content management system",
                "A database system"
            ],
            "answer": "A JavaScript Framework",
            "explanation": "Angular is a platform and framework for building client-side applications with HTML and TypeScript."
        },
        {
            "question": "Which command is used to create a new Angular project?",
            "options": [
                "npm create angular-app",
                "ng new project-name",
                "angular init project-name",
                "npm start angular"
            ],
            "answer": "ng new project-name",
            "explanation": "The Angular CLI ng new command creates a new workspace and a new app project."
        },
        {
            "question": "Which of the following is a core component in an Angular application?",
            "options": [
                "ViewController",
                "Directive",
                "Activity",
                "Observer"
            ],
            "answer": "Directive",
            "explanation": "Directives are a core component in Angular. They add behavior to an existing DOM element or an existing component instance."
        },
        {
            "question": "How do you bind data to an attribute in Angular?",
            "options": [
                "{{variable}}",
                "(variable)",
                "[variable]",
                "=variable="
            ],
            "answer": "[variable]",
            "explanation": "In Angular, [variable] is used for property binding, binding data from the component to a specified attribute."
        },
        {
            "question": "Which Angular decorator is used to listen to DOM events?",
            "options": [
                "@Output()",
                "@Input()",
                "@Event()",
                "@HostListener()"
            ],
            "answer": "@HostListener()",
            "explanation": "The @HostListener() decorator allows you to listen to events of the DOM element that hosts an attribute directive."
        },
        {
            "question": "Which directive is used in Angular to add/remove an HTML element from the DOM based on a condition?",
            "options": [
                "*ngFor",
                "*ngSelect",
                "*ngSwitch",
                "*ngIf"
            ],
            "answer": "*ngIf",
            "explanation": "The *ngIf directive is used in Angular to conditionally add or remove an element from the DOM."
        },
        {
            "question": "How can you fetch data from a server or database in Angular?",
            "options": [
                "Using the HTTPModule",
                "Using the FetchAPI",
                "Using the ServerModule",
                "Using the DatabaseModule"
            ],
            "answer": "Using the HTTPModule",
            "explanation": "In Angular, the HTTPModule provides tools for working with HTTP, allowing you to fetch or save data."
        },
        {
            "question": "What does a pipe do in Angular?",
            "options": [
                "Connects two components",
                "Transforms data in the template",
                "Merges streams of data",
                "Opens a direct connection to the server"
            ],
            "answer": "Transforms data in the template",
            "explanation": "Pipes in Angular allow you to transform data for display in templates. For instance, formatting dates, currency, or text filtering."
        },
        {
            "question": "Which decorator allows communication from a child component to its parent?",
            "options": [
                "@Input()",
                "@Output()",
                "@ViewChild()",
                "@Connect()"
            ],
            "answer": "@Output()",
            "explanation": "The @Output() decorator in Angular is used to emit custom events from child components, which the parent component can then respond to."
        },
        {
            "question": "In which lifecycle hook is it recommended to send HTTP requests in an Angular component?",
            "options": [
                "constructor",
                "ngOnInit",
                "ngOnDestroy",
                "ngAfterViewInit"
            ],
            "answer": "ngOnInit",
            "explanation": "It’s recommended to send HTTP requests in the ngOnInit lifecycle hook in Angular. The constructor should ideally be used only for simple initializations."
        },
        {
            "question": "What purpose does the ngModel directive serve?",
            "options": [
                "Handling HTTP requests",
                "Data binding for both input and output",
                "Listening to DOM events",
                "Controlling animation"
            ],
            "answer": "Data binding for both input and output",
            "explanation": "ngModel is used for two-way data binding in Angular, which means it can bind the model (component’s property) to a form field and vice-versa."
        },
        {
            "question": "How can you generate a new service using Angular CLI?",
            "options": [
                "ng create service my-service",
                "ng generate service my-service",
                "ng new service my-service",
                "ng add service my-service"
            ],
            "answer": "ng generate service my-service",
            "explanation": "Using the Angular CLI, the ng generate service (or its shorthand ng g s) command helps in creating a new service."
        },
        {
            "question": "What is the use of Angular Directives?",
            "options": [
                "To inject services",
                "To initialize component state",
                "To manipulate the DOM elements",
                "To store data"
            ],
            "answer": "To manipulate the DOM elements",
            "explanation": "Directives in Angular are used to manipulate or extend the behavior of DOM elements."
        },
        {
            "question": "Which Angular decorator is used for making a class a root module?",
            "options": [
                "@Module()",
                "@Component()",
                "@Directive()",
                "@NgModule()"
            ],
            "answer": "@NgModule()",
            "explanation": "The @NgModule() decorator in Angular is used to define a module, and every Angular app has at least one root module."
        },
        {
            "question": "Which is the correct syntax for an Angular Event binding?",
            "options": [
                "{click}=”doSomething()”",
                "on-click=”doSomething()”",
                "(click)=”doSomething()”",
                "click[]=”doSomething()”"
            ],
            "answer": "(click)=”doSomething()”",
            "explanation": "In Angular, the syntax (eventName)=”methodName()” is used for event binding."
        },
        {
            "question": "Which command is used to install Angular CLI globally?",
            "options": [
                "npm install @angular/cli",
                "npm global install @angular/cli",
                "npm install -g @angular/cli",
                "npm –install @angular/cli"
            ],
            "answer": "npm install -g @angular/cli",
            "explanation": "The -g flag in the command is used to install the package globally."
        },
        {
            "question": "How do you define a route in Angular?",
            "options": [
                "Using <a> tags",
                "Using the Router service",
                "Using the Routes array",
                "Using the @Route() decorator"
            ],
            "answer": "Using the Routes array",
            "explanation": "In Angular, routes are typically defined using a constant array of type Routes."
        },
        {
            "question": "What’s the primary purpose of the ngOnInit lifecycle hook in Angular components?",
            "options": [
                "Initialization and data retrieval",
                "Destruction of instances",
                "Manipulation of the view’s DOM",
                "Handling of user input"
            ],
            "answer": "Initialization and data retrieval",
            "explanation": "ngOnInit is a component lifecycle hook that Angular calls shortly after creating the component. It’s a good place to put initialization logic and data retrieval."
        },
        {
            "question": "Which decorator allows you to define styles for a component?",
            "options": [
                "@Style()",
                "@ViewStyle()",
                "@ComponentStyle()",
                "@Component({styles: …})"
            ],
            "answer": "@Component({styles: …})",
            "explanation": "Inside the @Component decorator, you can define the styles for a component using the styles or styleUrls property."
        },
        {
            "question": "What is the main difference between constructor and ngOnInit in Angular?",
            "options": [
                "They serve the same purpose",
                "constructor is used for initialization, while ngOnInit is used for destruction",
                "constructor is used for dependency injection, while ngOnInit is used for initialization logic",
                "ngOnInit is used for dependency injection, while the constructor is used for initialization logic"
            ],
            "answer": "constructor is used for dependency injection, while ngOnInit is used for initialization logic",
            "explanation": "While both the constructor and ngOnInit can be used for initialization, by convention, the constructor is used mainly for dependency injection and ngOnInit is used for initialization logic."
        },
        {
            "question": "What is the purpose of the async pipe in Angular?",
            "options": [
                "To make asynchronous HTTP requests",
                "To automatically unsubscribe from observables or promises",
                "To pause the execution of the application",
                "To run change detection asynchronously"
            ],
            "answer": "To automatically unsubscribe from observables or promises",
            "explanation": "The async pipe subscribes to an Observable or Promise and returns the latest value it has emitted. When a new value is emitted, the async pipe marks the component to be checked for changes. It also automatically unsubscribes from the observable to reduce the risk of memory leaks."
        },
        {
            "question": "Which directive is used in Angular to loop through an array or object?",
            "options": [
                "ngFor",
                "ngIf",
                "ngSwitch",
                "ngWhile"
            ],
            "answer": "ngFor",
            "explanation": "The ngFor directive is a structural directive in Angular, and it’s used for rendering a list by iterating over an array or object."
        },
        {
            "question": "What is the primary purpose of NgModules in Angular?",
            "options": [
                "Error handling",
                "Two-way data binding",
                "To group together components, directives, and services that are related",
                "To enhance performance"
            ],
            "answer": "To group together components, directives, and services that are related",
            "explanation": "NgModules are used in Angular to group together components, directives, pipes, and services that are related, and organize them in sets."
        },
        {
            "question": "How can you bind to an input box value in Angular?",
            "options": [
                "Using ngValue",
                "Using ngBind",
                "Using [(value)]",
                "Using [(ngModel)]"
            ],
            "answer": "Using [(ngModel)]",
            "explanation": "In Angular, you can bind to an input box value using the [(ngModel)] two-way data binding syntax."
        },
        {
            "question": "In Angular, which directive is used to apply styles conditionally?",
            "options": [
                "ngStyle",
                "ngClass",
                "ngIf",
                "ngApply"
            ],
            "answer": "ngStyle",
            "explanation": "The ngStyle directive in Angular is used to apply styles to an element dynamically/conditionally based on some condition."
        },
        {
            "question": "Which decorator is used to listen to host events in an Angular directive?",
            "options": [
                "@EventListener",
                "@HostBinding",
                "@HostListener",
                "@Listen"
            ],
            "answer": "@HostListener",
            "explanation": "In Angular, the @HostListener decorator allows you to listen to the events of the host element in a directive."
        },
        {
            "question": "How do you fetch data from a server or API in Angular?",
            "options": [
                "Using the XMLHttpRequest object",
                "Using the HttpClient module",
                "Using the fetchData method",
                "Using the AjaxModule"
            ],
            "answer": "Using the HttpClient module",
            "explanation": "In Angular, the HttpClient module provides a simplified API for HTTP functionality for use with Angular applications, including fetching data from a server or API."
        },
        {
            "question": "What decorator is used to create a service in Angular?",
            "options": [
                "@Directive",
                "@Component",
                "@Injectable",
                "@Service"
            ],
            "answer": "@Injectable",
            "explanation": "The @Injectable decorator is used in Angular to denote a service, which can be injected into components and other services."
        },
        {
            "question": "Which module in Angular includes basic directives like ngIf and ngFor?",
            "options": [
                "BrowserModule",
                "FormsModule",
                "AppModule",
                "CommonModule"
            ],
            "answer": "CommonModule",
            "explanation": "The CommonModule in Angular includes basic directives like ngIf and ngFor."
        },
        {
            "question": "Which decorator in Angular is used to get data from a parent component?",
            "options": [
                "@Input",
                "@Output",
                "@ViewChild",
                "@GetData"
            ],
            "answer": "@Input",
            "explanation": "The @Input decorator in Angular is used to bind a property within one component (child) to receive a value from another component (parent)."
        }
    ],
    "Node JS": [
        {
            "question": "What is Node.js?",
            "options": [
                "A front-end framework",
                "A back-end framework",
                "A JavaScript runtime built on Chrome’s V8 JavaScript engine",
                "A type of database"
            ],
            "answer": "A JavaScript runtime built on Chrome’s V8 JavaScript engine",
            "explanation": "Node.js is not a framework; it’s a runtime environment that allows JavaScript to be executed server-side."
        },
        {
            "question": "Which package manager is bundled with Node.js by default?",
            "options": [
                "npm",
                "bower",
                "yarn",
                "grunt"
            ],
            "answer": "npm",
            "explanation": "npm, which stands for Node Package Manager, comes bundled with Node.js and facilitates package management."
        },
        {
            "question": "How can you initiate a project using npm?",
            "options": [
                "npm start",
                "npm init",
                "npm run",
                "npm create"
            ],
            "answer": "npm init",
            "explanation": "Using npm init, you can initialize a new project and create a package.json file."
        },
        {
            "question": "Which method is used in Node.js to include modules?",
            "options": [
                "require()",
                "include()",
                "import",
                "fetch()"
            ],
            "answer": "require()",
            "explanation": "In Node.js, the require() method is used to import modules."
        },
        {
            "question": "Which core module in Node.js provides asynchronous file operations?",
            "options": [
                "http",
                "url",
                "fs",
                "path"
            ],
            "answer": "fs",
            "explanation": "The fs module in Node.js is used for file operations, both synchronous and asynchronous."
        },
        {
            "question": "In Node.js, which of the following is an in-built event emitter?",
            "options": [
                "EventEmitter",
                "Events",
                "EventLoop",
                "EventYield"
            ],
            "answer": "EventEmitter",
            "explanation": "EventEmitter is a part of the events module in Node.js and is used to handle custom events within apps."
        },
        {
            "question": "Which global object provides functionality to control the Node.js runtime process?",
            "options": [
                "Global",
                "Runtime",
                "Process",
                "NodeControl"
            ],
            "answer": "Process",
            "explanation": "The process global object provides information about and control over the Node.js runtime process."
        },
        {
            "question": "How can you read command-line arguments in a Node.js application?",
            "options": [
                "argv",
                "process.args",
                "arguments",
                "process.argv"
            ],
            "answer": "process.argv",
            "explanation": "The process.argv property returns an array containing command-line arguments passed to the Node.js process."
        },
        {
            "question": "Which method is used to create a new instance of a server in Node.js?",
            "options": [
                "http.createServer()",
                "http.createInstance()",
                "http.newServer()",
                "http.createServerInstance()"
            ],
            "answer": "http.createServer()",
            "explanation": "The http.createServer() method from the http module is used to create a new server instance in Node.js."
        },
        {
            "question": "Which of the following is a core module for handling paths?",
            "options": [
                "url",
                "dir",
                "path",
                "location"
            ],
            "answer": "path",
            "explanation": "The path module provides utilities for working with file and directory paths."
        },
        {
            "question": "What does the stream module in Node.js provide?",
            "options": [
                "Tools for creating WebSockets",
                "Utilities for handling HTTP operations",
                "A way to handle streaming data",
                "Functions for dealing with promises"
            ],
            "answer": "A way to handle streaming data",
            "explanation": "The stream module provides the capability to handle streaming data, like reading from or writing to files in a continuous manner."
        },
        {
            "question": "What is the Node.js event loop?",
            "options": [
                "A loop that emits custom events",
                "A loop that continuously checks for events and processes them",
                "A mechanism to define custom events",
                "The main process of a Node.js application"
            ],
            "answer": "A loop that continuously checks for events and processes them",
            "explanation": "The event loop in Node.js continuously checks the event queue and processes events (like function callbacks), allowing Node.js to be non-blocking and asynchronous."
        },
        {
            "question": "Which utility allows you to automatically restart a Node application when changes are detected?",
            "options": [
                "NodeLive",
                "NodeReload",
                "Nodemon",
                "AutoNode"
            ],
            "answer": "Nodemon",
            "explanation": "Nodemon is a utility that monitors for any changes in your Node application and automatically restarts the server, making development more efficient."
        },
        {
            "question": "What is a buffer in Node.js?",
            "options": [
                "A temporary storage spot for data being transferred",
                "A type of variable",
                "A mechanism to control data flow",
                "A module for handling binary data"
            ],
            "answer": "A temporary storage spot for data being transferred",
            "explanation": "In Node.js, a buffer is a temporary storage location for raw data before it gets processed or transferred to a different location."
        },
        {
            "question": "Which Node.js method is used to delay the execution of a function?",
            "options": [
                "process.delay()",
                "setTimeout()",
                "wait()",
                "sleep()"
            ],
            "answer": "setTimeout()",
            "explanation": "setTimeout() is a global method in Node.js (and in browsers) used to execute a function after a set number of milliseconds."
        },
        {
            "question": "Which of the following allows Node.js to be scalable?",
            "options": [
                "Multithreading",
                "Event-driven architecture",
                "Larger memory allocation",
                "High CPU usage"
            ],
            "answer": "Event-driven architecture",
            "explanation": "Node.js’s event-driven, non-blocking I/O model allows it to be lightweight and efficient, making it scalable for real-time applications that run across distributed devices."
        },
        {
            "question": "What is the main difference between exports and module.exports in Node.js?",
            "options": [
                "They are the same.",
                "exports is for functions, while module.exports is for objects.",
                "exports is a reference to module.exports.",
                "module.exports is the legacy way to export modules."
            ],
            "answer": "exports is a reference to module.exports.",
            "explanation": "Both exports and module.exports point to the same object. However, if you reassign exports, it no longer references module.exports."
        },
        {
            "question": "What would be the primary use case for the cluster module in Node.js?",
            "options": [
                "Data validation",
                "Improved logging",
                "Load balancing over multiple CPU cores",
                "Data encryption"
            ],
            "answer": "Load balancing over multiple CPU cores",
            "explanation": "The cluster module allows Node.js applications to run on multiple CPU cores, ensuring better load balancing and improved application performance."
        },
        {
            "question": "Which of the following is NOT a core module in Node.js?",
            "options": [
                "fs",
                "http",
                "express",
                "url"
            ],
            "answer": "express",
            "explanation": "While express is a popular module used in Node.js for web server operations, it is not a core module. It has to be installed separately via npm."
        },
        {
            "question": "Which method in the fs module is used to read a file asynchronously?",
            "options": [
                "fs.readFile()",
                "fs.readSync()",
                "fs.openFile()",
                "fs.read()"
            ],
            "answer": "fs.readFile()",
            "explanation": "fs.readFile() is the asynchronous method used for reading files in Node.js."
        },
        {
            "question": "In which object are all the environment variables stored in a Node.js application?",
            "options": [
                "env",
                "process.env",
                "node.env",
                "app.env"
            ],
            "answer": "process.env",
            "explanation": "The process.env object contains the user environment in a Node.js application."
        },
        {
            "question": "What does the eventEmitter.emit method in Node.js do?",
            "options": [
                "It sets up a new event.",
                "It triggers an event.",
                "It listens for an event.",
                "It terminates an ongoing event."
            ],
            "answer": "It triggers an event.",
            "explanation": "eventEmitter.emit is used to trigger or emit a particular event."
        },
        {
            "question": "How do you install a package locally using npm in a Node.js application?",
            "options": [
                "npm install -g <package-name>",
                "npm local install <package-name>",
                "npm run install <package-name>",
                "npm install <package-name>"
            ],
            "answer": "npm install <package-name>",
            "explanation": "Using npm install <package-name> installs the package locally in the node_modules directory of the current project."
        },
        {
            "question": "In a Node.js application, which method is used to send a JSON response back from a server?",
            "options": [
                "res.json()",
                "res.sendJSON()",
                "res.returnJSON()",
                "res.pushJSON()"
            ],
            "answer": "res.json()",
            "explanation": "In Express (a popular framework for Node.js), res.json() is used to send a JSON response to the client."
        },
        {
            "question": "What does the npm init command do?",
            "options": [
                "It installs all the dependencies listed in package.json.",
                "It starts the Node.js application.",
                "It creates a new Node.js application.",
                "It initializes a new package.json file."
            ],
            "answer": "It initializes a new package.json file.",
            "explanation": "npm init is used to set up a new or existing npm package, primarily creating a package.json file."
        },
        {
            "question": "Which of the following is used to import modules in Node.js?",
            "options": [
                "import { module } from ‘module-name’",
                "#include ‘module-name’",
                "require(‘module-name’)",
                "using module-name"
            ],
            "answer": "require(‘module-name’)",
            "explanation": "In Node.js, the require function is used to import modules."
        },
        {
            "question": "Which npm command is used to install all dependencies listed in the package.json file?",
            "options": [
                "npm init",
                "npm run",
                "npm start",
                "npm install"
            ],
            "answer": "npm install",
            "explanation": "The npm install command installs all the dependencies listed in the package.json file."
        },
        {
            "question": "Which Node.js command is used to execute a JavaScript file, say “app.js”?",
            "options": [
                "node install app.js",
                "node run app.js",
                "node app.js",
                "npm app.js"
            ],
            "answer": "node app.js",
            "explanation": "To execute a file, you simply use the node followed by the filename."
        },
        {
            "question": "What is the purpose of the –save flag in the npm install command?",
            "options": [
                "To globally install a package",
                "To save a backup of the current project",
                "To save the package version in the package-lock.json",
                "To save the package in the package.json dependencies"
            ],
            "answer": "To save the package in the package.json dependencies",
            "explanation": "The –save flag is used to add the installed module to the package.json file’s dependencies."
        },
        {
            "question": "Which npm command can be used to list all globally installed packages?",
            "options": [
                "npm list -g",
                "npm global list",
                "npm show",
                "npm modules"
            ],
            "answer": "npm list -g",
            "explanation": "The command npm list -g displays all globally installed npm packages."
        }
    ],
    "Express.js": [
        {
            "question": "What is Express.js?",
            "options": [
                "A database",
                "A frontend framework",
                "A web server framework for Node.js",
                "An operating system"
            ],
            "answer": "A web server framework for Node.js",
            "explanation": "Express.js is a minimalist web server framework for Node.js that simplifies the process of building web applications."
        },
        {
            "question": "Which method sends a JSON response in Express.js?",
            "options": [
                "res.json()",
                "res.send()",
                "res.sendFile()",
                "res.render()"
            ],
            "answer": "res.json()",
            "explanation": "The res.json() method sends a JSON response."
        },
        {
            "question": "How do you capture query parameters in Express routes?",
            "options": [
                "req.data",
                "req.params",
                "req.query",
                "req.body"
            ],
            "answer": "req.query",
            "explanation": "Query parameters are captured using the req.query object."
        },
        {
            "question": "Which of these is not a core feature of Express?",
            "options": [
                "Middleware",
                "Routing",
                "Templating",
                "ORM"
            ],
            "answer": "ORM",
            "explanation": "While Express provides middleware, routing, and templating, it does not have an in-built Object-Relational Mapping (ORM) system."
        },
        {
            "question": "To serve static files like images, CSS files, and JavaScript files in Express, you use:",
            "options": [
                "express.static()",
                "res.sendFile()",
                "app.static()",
                "res.sendStatic()"
            ],
            "answer": "express.static()",
            "explanation": "The express.static() middleware function is used to serve static files."
        },
        {
            "question": "In Express.js, how do you redirect a user to another page?",
            "options": [
                "res.send(‘/new-url’)",
                "res.redirect(‘/new-url’)",
                "res.goto(‘/new-url’)",
                "app.redirect(‘/new-url’)"
            ],
            "answer": "res.redirect(‘/new-url’)",
            "explanation": "The res.redirect() method is used to redirect the user to another URL."
        },
        {
            "question": "What’s the primary use of middleware in Express?",
            "options": [
                "Data storage",
                "Error handling",
                "Execution of functions in the request-response cycle",
                "Frontend rendering"
            ],
            "answer": "Execution of functions in the request-response cycle",
            "explanation": "Middleware functions have access to the request and response objects and are used to execute any code, end the request-response cycle, or invoke the next middleware in the stack."
        },
        {
            "question": "What method is used to create a middleware in Express?",
            "options": [
                "app.middleware()",
                "app.use()",
                "express.middleware()",
                "express.use()"
            ],
            "answer": "app.use()",
            "explanation": "The app.use() method is used to mount a middleware function."
        },
        {
            "question": "How do you send a status of 404 and a message ‘Not Found’ in Express?",
            "options": [
                "res.status(404).message(‘Not Found’)",
                "res.status(404).send(‘Not Found’)",
                "res.send(404, ‘Not Found’)",
                "res.sendStatus(404, ‘Not Found’)"
            ],
            "answer": "res.status(404).send(‘Not Found’)",
            "explanation": "The res.status().send() combination allows you to set a specific status code and send a message."
        },
        {
            "question": "Which of these methods will handle HTTP POST requests in an Express app?",
            "options": [
                "app.post()",
                "app.get()",
                "app.all()",
                "app.put()"
            ],
            "answer": "app.post()",
            "explanation": "The app.post() method is specifically designed to handle POST requests."
        },
        {
            "question": "How do you capture data sent in the body of a POST request in Express?",
            "options": [
                "req.params",
                "req.body",
                "req.data",
                "req.query"
            ],
            "answer": "req.body",
            "explanation": "req.body contains data sent in the body of the request, typically used for POST data."
        },
        {
            "question": "To use req.body, what middleware must be used with Express?",
            "options": [
                "express.urlencoded()",
                "express.query()",
                "express.static()",
                "express.getbody()"
            ],
            "answer": "express.urlencoded()",
            "explanation": "express.urlencoded() is a middleware that parses incoming requests with URL-encoded payloads, thus populating req.body."
        },
        {
            "question": "Which middleware in Express.js helps in handling JSON data from POST requests?",
            "options": [
                "express.json()",
                "express.urlencoded()",
                "express.parse()",
                "express.data()"
            ],
            "answer": "express.json()",
            "explanation": "express.json() is a built-in middleware in Express.js that parses incoming requests with JSON payloads."
        },
        {
            "question": "Which of the following methods is used to render a view in Express.js?",
            "options": [
                "res.view()",
                "res.page()",
                "res.sendView()",
                "res.render()"
            ],
            "answer": "res.render()",
            "explanation": "res.render() is used to render a view template."
        },
        {
            "question": "If you want to set a cookie in Express.js, which method would you use?",
            "options": [
                "res.setCookie()",
                "res.cookie()",
                "res.saveCookie()",
                "res.putCookie()"
            ],
            "answer": "res.cookie()",
            "explanation": "The res.cookie() method is used to set cookies."
        },
        {
            "question": "In Express, if you wanted a middleware function to be executed for every request, where would you place it?",
            "options": [
                "At the end of all route definitions",
                "Before all route definitions",
                "Inside each route definition",
                "Inside the app’s main file"
            ],
            "answer": "Before all route definitions",
            "explanation": "Placing the middleware before all route definitions ensures it gets executed for every request before specific route logic is handled."
        },
        {
            "question": "What will next() function do in Express middleware?",
            "options": [
                "It will end the response cycle.",
                "It will pass control to the next middleware function.",
                "It will restart the request-response cycle.",
                "It will throw an error."
            ],
            "answer": "It will pass control to the next middleware function.",
            "explanation": "In Express, the next() function, when called within middleware, passes control to the next middleware in line."
        },
        {
            "question": "To serve static files in Express, which built-in middleware would you use?",
            "options": [
                "express.static()",
                "express.file()",
                "express.serve()",
                "express.folder()"
            ],
            "answer": "express.static()",
            "explanation": "The express.static() middleware is used to serve static files in an Express application."
        },
        {
            "question": "What does app.all() method do in Express.js?",
            "options": [
                "It handles all HTTP methods.",
                "It handles only POST and GET methods.",
                "It restarts the app.",
                "It closes all open routes."
            ],
            "answer": "It handles all HTTP methods.",
            "explanation": "The app.all() method is a routing method to specify a callback function that gets executed when an endpoint (a combination of a request method and route) is hit."
        },
        {
            "question": "Which function in Express.js wraps an asynchronous function to catch all the errors?",
            "options": [
                "catchAsync()",
                "asyncWrapper()",
                "wrapAsync()",
                "handleAsync()"
            ],
            "answer": "wrapAsync()",
            "explanation": "Though this isn’t a built-in Express function, wrapAsync() is commonly used in the community to handle errors in asynchronous functions without needing to always use try-catch."
        },
        {
            "question": "If you want to set several properties on a response at once in Express.js, which method would you use?",
            "options": [
                "res.set()",
                "res.properties()",
                "res.headerSet()",
                "res.multiSet()"
            ],
            "answer": "res.set()",
            "explanation": "The res.set() method is used in Express.js to set multiple headers in the response object."
        },
        {
            "question": "How can you access the query string parameters in Express.js?",
            "options": [
                "req.params",
                "req.data",
                "req.body",
                "req.query"
            ],
            "answer": "req.query",
            "explanation": "The req.query object contains the query string parameters in Express.js."
        },
        {
            "question": "What is the primary purpose of the Express ‘Router’?",
            "options": [
                "To route different files in the file system.",
                "To divide the application into modular, mountable route handlers.",
                "To connect to different databases.",
                "To parse incoming requests."
            ],
            "answer": "To divide the application into modular, mountable route handlers.",
            "explanation": "Express ‘Router’ is used to create modular, mountable route handlers in separate file(s) or modules."
        },
        {
            "question": "How do you get the HTTP method (like GET, POST) of a client’s request in Express?",
            "options": [
                "req.methodType()",
                "req.httpMethod",
                "req.type()",
                "req.method"
            ],
            "answer": "req.method",
            "explanation": "The req.method property contains a string representing the HTTP method of the request: GET, POST, PUT, and so on."
        },
        {
            "question": "How do you retrieve the value of a specific cookie sent in a request in Express.js?",
            "options": [
                "req.cookie.value",
                "req.cookies[cookieName]",
                "req.get(‘cookieName’)",
                "req.values.cookieName"
            ],
            "answer": "req.cookies[cookieName]",
            "explanation": "To retrieve the value of a specific cookie, you use req.cookies[cookieName] where cookieName is the name of the cookie you want to access."
        }
    ],
    "jQuery": [
        {
            "question": "What does jQuery stand for?",
            "options": [
                "Java Query",
                "JavaScript Quotient",
                "JavaScript Quick",
                "JavaScript Query"
            ],
            "answer": "JavaScript Query",
            "explanation": "jQuery is a fast and concise JavaScript Library that simplifies HTML document traversing, event handling, animating, and AJAX interactions for rapid web development."
        },
        {
            "question": "Which symbol is used as a shortcut for jQuery?",
            "options": [
                "%",
                "?",
                "$",
                "!"
            ],
            "answer": "$",
            "explanation": "$ is used as a shortcut for jQuery."
        },
        {
            "question": "To check if an element is hidden in jQuery, which method can be used?",
            "options": [
                "isVisible()",
                "isDisplay()",
                "isHidden()",
                "is(‘:hidden’)"
            ],
            "answer": "is(‘:hidden’)",
            "explanation": "The is(‘:hidden’) method checks if an element is hidden."
        },
        {
            "question": "Which jQuery method is used to set one or more style properties for selected elements?",
            "options": [
                "style()",
                "htmlStyle()",
                "css()",
                "setStyle()"
            ],
            "answer": "css()",
            "explanation": "The css() method is used to set one or more style properties for selected elements."
        },
        {
            "question": "How can we get the text inside an element using jQuery?",
            "options": [
                "innerText()",
                "html()",
                "getValue()",
                "text()"
            ],
            "answer": "text()",
            "explanation": "The text() method gets the combined text contents of each element in the set of matched elements."
        },
        {
            "question": "In jQuery, how can we get the value of an attribute?",
            "options": [
                "attr()",
                "getAttribute()",
                "getAttr()",
                "valAttr()"
            ],
            "answer": "attr()",
            "explanation": "The attr() method is used to get the value of an attribute for the first element in the set of matched elements."
        },
        {
            "question": "Which method in jQuery is used to insert content at the end of selected elements?",
            "options": [
                "appendTo()",
                "insertEnd()",
                "endInsert()",
                "addEnd()"
            ],
            "answer": "appendTo()",
            "explanation": "The appendTo() method inserts content at the end of the selected elements."
        },
        {
            "question": "What does the fadeIn() method in jQuery do?",
            "options": [
                "Hides the selected elements by fading them to transparent.",
                "Displays an element by fading it to opaque.",
                "Makes the element blink.",
                "None of the above."
            ],
            "answer": "Displays an element by fading it to opaque.",
            "explanation": "The fadeIn() method gradually changes the opacity, for selected elements, from hidden to visible (fading effect)."
        },
        {
            "question": "How can you retrieve the content of a selected item in jQuery?",
            "options": [
                "jQuery.content()",
                "jQuery.val()",
                "jQuery.get()",
                "jQuery.retrieve()"
            ],
            "answer": "jQuery.val()",
            "explanation": "The val() method in jQuery is used to get the current value of the first element in the set of matched elements."
        },
        {
            "question": "How do you add a class to an element in jQuery?",
            "options": [
                "addClass()",
                "insertClass()",
                "appendClass()",
                "setClass()"
            ],
            "answer": "addClass()",
            "explanation": "The addClass() method adds specified class(es) to each element in the set of matched elements."
        },
        {
            "question": "Which of the following methods is used to remove specific form elements?",
            "options": [
                "detach()",
                "delete()",
                "remove()",
                "eliminate()"
            ],
            "answer": "remove()",
            "explanation": "The remove() method in jQuery removes the set of matched elements from the DOM."
        },
        {
            "question": "How can you test if an element exists in the DOM?",
            "options": [
                "Using jQuery.exists()",
                "Checking $(selector).length > 0",
                "Using element.isPresent()",
                "Checking $(selector) !== null"
            ],
            "answer": "Checking $(selector).length > 0",
            "explanation": "In jQuery, if an element exists in the DOM, its length property will return a value greater than 0."
        },
        {
            "question": "What is the difference between $(document).ready() and window.onload?",
            "options": [
                "They are the same thing.",
                "window.onload only works for HTML documents, not XML.",
                "$(document).ready() is executed when the HTML DOM is loaded, while window.onload is executed when the page and all its resources are loaded.",
                "window.onload is a jQuery event, while $(document).ready() is a native JavaScript event."
            ],
            "answer": "$(document).ready() is executed when the HTML DOM is loaded, while window.onload is executed when the page and all its resources are loaded.",
            "explanation": "$(document).ready() ensures the readiness of the DOM of the page. window.onload ensures that images, scripts, and other assets are loaded."
        },
        {
            "question": "Which method is used to attach an event handler to an element, but only once?",
            "options": [
                ".one()",
                ".attach()",
                ".bindOnce()",
                ".singleEvent()"
            ],
            "answer": ".one()",
            "explanation": "The .one() method attaches an event handler that will execute only once."
        },
        {
            "question": "What does the .end() method do in jQuery?",
            "options": [
                "Stops the chaining of methods.",
                "Ends a running animation early.",
                "Exits the jQuery script.",
                "Reverts the most recent destructive action."
            ],
            "answer": "Reverts the most recent destructive action.",
            "explanation": "The .end() method in jQuery ends the most recent filtering operation in the current chain and returns the set of matched elements to its previous state."
        },
        {
            "question": "What does the .eq() method in jQuery do?",
            "options": [
                "Compares two elements for equality.",
                "Returns the element with the specified index from a set of matched elements.",
                "Executes a function for every element in a set.",
                "Checks if any of the selected elements have the specified class."
            ],
            "answer": "Returns the element with the specified index from a set of matched elements.",
            "explanation": "The .eq() method reduces the set of matched elements to the one at the specified index."
        },
        {
            "question": "Which jQuery method is used to prevent the execution of the default function of the event?",
            "options": [
                ".preventDefault()",
                ".stopDefault()",
                ".halt()",
                ".blockEvent()"
            ],
            "answer": ".preventDefault()",
            "explanation": "The .preventDefault() method prevents the browser’s default action associated with the event."
        },
        {
            "question": "How do you bind multiple events to an element in jQuery?",
            "options": [
                "Using multiple .on() methods.",
                "Using .multiBind()",
                "Passing multiple events to the .on() method separated by spaces.",
                "Binding one event at a time."
            ],
            "answer": "Passing multiple events to the .on() method separated by spaces.",
            "explanation": "Multiple events can be bound to an element by passing them to the .on() method separated by spaces."
        },
        {
            "question": "Which of the following correctly retrieves the value of an input box using jQuery?",
            "options": [
                "$(‘input’).getValue()",
                "$(‘input’).val()",
                "$(‘input’).inputValue()",
                "$(‘input:text’).getText()"
            ],
            "answer": "$(‘input’).val()",
            "explanation": "The .val() method in jQuery gets the current value of the first element in the set of matched elements."
        },
        {
            "question": "How can you hide all the paragraphs using jQuery?",
            "options": [
                "$(“p”).hidden()",
                "$(“p”).visibility(“hidden”)",
                "$(“p”).hide()",
                "document.querySelectorAll(“p”).style.display = “none”"
            ],
            "answer": "$(“p”).hide()",
            "explanation": "The .hide() method in jQuery hides the matched elements."
        },
        {
            "question": "Which jQuery method is used to switch between adding/removing one or more classes (toggles) from selected elements?",
            "options": [
                ".switchClass()",
                ".toggleClass()",
                ".flipClass()",
                ".alternateClass()"
            ],
            "answer": ".toggleClass()",
            "explanation": "The .toggleClass() method toggles between adding and removing one or more class names from the selected elements."
        },
        {
            "question": "How can you check if a checkbox is checked using jQuery?",
            "options": [
                "$(“input[type=’checkbox’]”).isChecked()",
                "$(“input[type=’checkbox’]”).is(“:checked”)",
                "$(“input[type=’checkbox’]”).checkStatus()",
                "$(“input[type=’checkbox’]”).value(“checked”)"
            ],
            "answer": "$(“input[type=’checkbox’]”).is(“:checked”)",
            "explanation": "The .is(“:checked”) method is used in jQuery to check if a checkbox is checked."
        },
        {
            "question": "What does the .ajax() method in jQuery do?",
            "options": [
                "It makes synchronous requests to the server.",
                "It retrieves data from the server asynchronously.",
                "It reloads the current page.",
                "It creates a new XMLHttpRequest object."
            ],
            "answer": "It retrieves data from the server asynchronously.",
            "explanation": "The .ajax() method in jQuery is used to make asynchronous HTTP requests."
        },
        {
            "question": "How can you chain multiple methods in jQuery for a cleaner code?",
            "options": [
                "Separate each method with a comma.",
                "Write each method on a new line.",
                "Use the then keyword between methods.",
                "Separate each method with a dot."
            ],
            "answer": "Separate each method with a dot.",
            "explanation": "In jQuery, you can chain multiple methods by separating each method with a dot."
        },
        {
            "question": "Which of the following will select all img elements with an alt attribute containing the word “nature”?",
            "options": [
                "$(“img[alt*=’nature’]”)",
                "$(“img[alt^=’nature’]”)",
                "$(“img[alt=’nature’]”)",
                "$(“img[alt$=’nature’]”)"
            ],
            "answer": "$(“img[alt*=’nature’]”)",
            "explanation": "The * selector in jQuery selects elements whose attribute value contains a specified value."
        }
    ],
    "Vue.js": [
        {
            "question": "What is VueJS primarily used for?",
            "options": [
                "Backend development",
                "Mobile app development",
                "Game development",
                "Frontend development"
            ],
            "answer": "Frontend development",
            "explanation": "VueJS is primarily a front-end JavaScript framework used for building user interfaces and single-page applications."
        },
        {
            "question": "Which directive is used in VueJS to bind an attribute to an expression?",
            "options": [
                "v-for",
                "v-bind",
                "v-model",
                "v-if"
            ],
            "answer": "v-bind",
            "explanation": "The v-bind directive is used to bind an attribute to an expression."
        },
        {
            "question": "What is the VueJS syntax for looping through items in an array?",
            "options": [
                "v-repeat",
                "v-for",
                "v-loop",
                "v-iterate"
            ],
            "answer": "v-for",
            "explanation": "v-for is the directive used for looping through arrays or objects in VueJS."
        },
        {
            "question": "In VueJS, which directive is used for two-way data binding on an input element?",
            "options": [
                "v-bind",
                "v-input",
                "v-model",
                "v-data"
            ],
            "answer": "v-model",
            "explanation": "v-model directive in VueJS provides two-way data binding on an input element."
        },
        {
            "question": "Which VueJS instance lifecycle hook is called once the instance is mounted onto the DOM?",
            "options": [
                "created",
                "beforeMount",
                "mounted",
                "beforeCreate"
            ],
            "answer": "mounted",
            "explanation": "The mounted hook is called after the instance has been mounted."
        },
        {
            "question": "What is Vuex used for in a VueJS application?",
            "options": [
                "Animation effects",
                "Routing",
                "State management",
                "Compiling templates"
            ],
            "answer": "State management",
            "explanation": "Vuex is a state management pattern + library for Vue.js applications."
        },
        {
            "question": "In VueJS, how do you define a computed property?",
            "options": [
                "Inside the methods object",
                "Inside the computed object",
                "Inside the props object",
                "Inside the data function"
            ],
            "answer": "Inside the computed object",
            "explanation": "Computed properties in VueJS are defined inside the computed object."
        },
        {
            "question": "Which directive is used to conditionally render a block in VueJS?",
            "options": [
                "v-show",
                "v-bind",
                "v-for",
                "v-if"
            ],
            "answer": "v-if",
            "explanation": "The v-if directive is used to conditionally render a block."
        },
        {
            "question": "Which of the following can be used to capture DOM events and execute some JavaScript?",
            "options": [
                "v-capture",
                "v-bind",
                "v-for",
                "v-on"
            ],
            "answer": "v-on",
            "explanation": "The v-on directive listens to DOM events and executes some JavaScript when they’re triggered."
        },
        {
            "question": "What does the Vue CLI command vue create my-project do?",
            "options": [
                "Deletes a Vue project named my-project",
                "Updates a Vue project named my-project",
                "Creates a new Vue project named my-project",
                "Opens a Vue project named my-project"
            ],
            "answer": "Creates a new Vue project named my-project",
            "explanation": "The command vue create my-project initializes a new Vue project with the name my-project."
        },
        {
            "question": "Which component option allows you to specify child components?",
            "options": [
                "children",
                "subs",
                "components",
                "subcomponents"
            ],
            "answer": "components",
            "explanation": "The components option allows you to specify child components within a parent component."
        },
        {
            "question": "How can you access the properties passed to a Vue component?",
            "options": [
                "this.data",
                "this.properties",
                "this.props",
                "this.values"
            ],
            "answer": "this.props",
            "explanation": "In VueJS, you can access the properties passed to a component using this.props."
        },
        {
            "question": "In VueJS, what is a directive that can conditionally apply to a class?",
            "options": [
                "v-class",
                "v-bind:class",
                "v-style",
                "v-css"
            ],
            "answer": "v-bind:class",
            "explanation": "The v-bind:class directive can be used to bind classes to a DOM element conditionally."
        },
        {
            "question": "When a Vue instance reaches the end of its lifecycle, which hook is called?",
            "options": [
                "beforeDestroy",
                "destroyed",
                "beforeDelete",
                "deleted"
            ],
            "answer": "destroyed",
            "explanation": "The destroyed lifecycle hook is called when a Vue instance has been destroyed."
        },
        {
            "question": "What file extension is commonly associated with single-file Vue components?",
            "options": [
                ".vuejs",
                ".vjs",
                ".v",
                ".vue"
            ],
            "answer": ".vue",
            "explanation": "Single-file Vue components typically have a .vue file extension."
        },
        {
            "question": "What is the purpose of a Vue Router in a VueJS application?",
            "options": [
                "Component styling",
                "Client-side routing",
                "State management",
                "Data modeling"
            ],
            "answer": "Client-side routing",
            "explanation": "Vue Router is the official router for Vue.js, and it’s used for client-side routing."
        },
        {
            "question": "What command is used to install a VueJS plugin?",
            "options": [
                "vue add",
                "vue install",
                "vue plugin",
                "vue use"
            ],
            "answer": "vue add",
            "explanation": "The vue add command is used to install and set up Vue plugins."
        },
        {
            "question": "Which Vue directive is used to execute expressions on load of an element?",
            "options": [
                "v-load",
                "v-on:load",
                "v-bind:load",
                "v-if:load"
            ],
            "answer": "v-on:load",
            "explanation": "The v-on:load directive is used to execute expressions when an element (like an image) has completely loaded."
        },
        {
            "question": "In VueJS, how do you specify a prop that is required for a component?",
            "options": [
                "isRequired: true",
                "required: true",
                "prop: required",
                "mandatory: true"
            ],
            "answer": "required: true",
            "explanation": "Within the props option, you can specify a prop to be required by setting required: true."
        },
        {
            "question": "Which feature of Vue allows for the reuse of component logic across multiple components?",
            "options": [
                "Directives",
                "Mixins",
                "Templates",
                "Scaffolds"
            ],
            "answer": "Mixins",
            "explanation": "Mixins in Vue allow developers to reuse component logic across multiple components."
        },
        {
            "question": "What is the role of the computed property in a Vue component?",
            "options": [
                "To manage local state",
                "To register component methods",
                "To store static data values",
                "To define reactive getters"
            ],
            "answer": "To define reactive getters",
            "explanation": "In Vue, computed properties are used to define reactive getters that can be used in templates like regular properties, but they derive their values from other reactive dependencies."
        },
        {
            "question": "What would you use to iterate over items in an array in a Vue template?",
            "options": [
                "v-loop",
                "v-iterate",
                "v-repeat",
                "v-for"
            ],
            "answer": "v-for",
            "explanation": "The v-for directive in Vue is used to render a list of items by iterating over an array."
        },
        {
            "question": "How do you handle an event like a button click in Vue?",
            "options": [
                "v-event:click",
                "v-handle:click",
                "v-click",
                "v-on:click"
            ],
            "answer": "v-on:click",
            "explanation": "The v-on:click directive is used to listen to the click events and execute a method or an expression when the element is clicked."
        },
        {
            "question": "If you want to conditionally render an element in Vue, which directive would you use?",
            "options": [
                "v-if",
                "v-show",
                "Both A and B",
                "Neither A nor B"
            ],
            "answer": "Both A and B",
            "explanation": "Both v-if and v-show can be used to conditionally render elements in Vue, but they have different use cases. While v-if completely removes or recreates the element, v-show simply toggles the display CSS property of the element."
        },
        {
            "question": "In Vue single-file components, which tag is used to include the component’s template?",
            "options": [
                "<script>",
                "<vue>",
                "<template>",
                "<style>"
            ],
            "answer": "<template>",
            "explanation": "In single-file components, the <template> tag is used to encapsulate the component’s template."
        },
        {
            "question": "In Vue, how can you prevent the default behavior of an event?",
            "options": [
                "using v-prevent",
                "using event.prevent()",
                "using .prevent modifier",
                "using v-stop"
            ],
            "answer": "using .prevent modifier",
            "explanation": "In Vue, you can use the .prevent modifier on an event listener to call event.preventDefault()."
        },
        {
            "question": "What is a Vue “filter” used for?",
            "options": [
                "Filtering items in an array",
                "Performing asynchronous operations",
                "Transforming the output of an expression",
                "Handling events"
            ],
            "answer": "Transforming the output of an expression",
            "explanation": "Filters are used in Vue templates to transform the raw value of an expression for user display."
        }
    ],
    "TypeScript": [
        {
            "question": "What is TypeScript primarily used for?",
            "options": [
                "Memory Management",
                "Dynamic Typing",
                "Static Typing",
                "Asynchronous operations"
            ],
            "answer": "Static Typing",
            "explanation": "TypeScript is primarily used to add static typing to JavaScript, enabling developers to catch type-related errors during compile time."
        },
        {
            "question": "Which of the following is NOT a valid TypeScript data type?",
            "options": [
                "void",
                "any",
                "dynamic",
                "tuple"
            ],
            "answer": "dynamic",
            "explanation": "TypeScript does not have a “dynamic” type. It has the “any” type which can represent any JavaScript value."
        },
        {
            "question": "How do you denote a variable as readonly in TypeScript?",
            "options": [
                "const",
                "static",
                "readonly",
                "fixed"
            ],
            "answer": "readonly",
            "explanation": "The readonly keyword in TypeScript ensures that a property cannot be re-assigned after its initial assignment."
        },
        {
            "question": "How do you specify that a function does not return anything in TypeScript?",
            "options": [
                "function myFunc(): undefined",
                "function myFunc(): void",
                "function myFunc(): null",
                "function myFunc(): None"
            ],
            "answer": "function myFunc(): void",
            "explanation": "In TypeScript, a function that doesn’t return anything should have its return type specified as void."
        },
        {
            "question": "How do you define a custom type in TypeScript?",
            "options": [
                "interface",
                "typedef",
                "type",
                "Both A and C"
            ],
            "answer": "Both A and C",
            "explanation": "In TypeScript, custom types can be defined using both interface and type keywords."
        },
        {
            "question": "What is the primary purpose of TypeScript interfaces?",
            "options": [
                "To create new classes",
                "To describe the shape of an object",
                "To generate HTML templates",
                "To manage asynchronous code"
            ],
            "answer": "To describe the shape of an object",
            "explanation": "Interfaces in TypeScript are primarily used to describe the shape or structure of an object. They ensure that objects have the correct properties and methods as described by the interface."
        },
        {
            "question": "What is a union type in TypeScript?",
            "options": [
                "A type that can be any value",
                "A type that can be one of several types",
                "A type that can be both a string and a number simultaneously",
                "A type that can be an object"
            ],
            "answer": "A type that can be one of several types",
            "explanation": "A union type describes a value that could be one of several different types."
        },
        {
            "question": "Which TypeScript feature allows for checking the type of a variable at runtime?",
            "options": [
                "Type guard",
                "Runtime type",
                "Dynamic type",
                "Typeof"
            ],
            "answer": "Type guard",
            "explanation": "Type guards allow you to narrow down the type of an object within a conditional block."
        },
        {
            "question": "What TypeScript compiler option ensures strict type checking?",
            "options": [
                "–strict",
                "–strictTypes",
                "–typeCheck",
                "–enforceTypes"
            ],
            "answer": "–strict",
            "explanation": "The –strict compiler option enables a wide range of type-checking behavior to ensure that type definitions are accurate."
        },
        {
            "question": "How do you define an optional parameter in the TypeScript function?",
            "options": [
                "function foo(param: string?)",
                "function foo(param?: string)",
                "function foo(param string=)",
                "function foo(param string?)"
            ],
            "answer": "function foo(param?: string)",
            "explanation": "In TypeScript, you can define an optional parameter by appending a ‘?’ to the parameter name."
        },
        {
            "question": "Which of the following will transpile a TypeScript file (example.ts) to JavaScript?",
            "options": [
                "typescript example.ts",
                "ts-compile example.ts",
                "tsc example.ts",
                "ts example.ts"
            ],
            "answer": "tsc example.ts",
            "explanation": "The tsc (TypeScript Compiler) command is used to transpile TypeScript files to JavaScript."
        },
        {
            "question": "How do you declare a variable that can be either a string or null in TypeScript?",
            "options": [
                "let variable: string || null;",
                "let variable: string | null;",
                "let variable: string & null;",
                "let variable: string && null;"
            ],
            "answer": "let variable: string | null;",
            "explanation": "The union type (using ‘|’) allows a variable to have one of multiple types."
        },
        {
            "question": "What is the purpose of the never type in TypeScript?",
            "options": [
                "To indicate that a variable can be any type.",
                "To represent the absence of values.",
                "To indicate a function always throws an exception or never returns.",
                "To represent the absence of a type."
            ],
            "answer": "To indicate a function always throws an exception or never returns.",
            "explanation": "The never type represents the type of values that never occur. For instance, a function that always throws an exception or one that never returns."
        },
        {
            "question": "How can you allow an object to have any number of properties of a given type in TypeScript?",
            "options": [
                "{ [key: any]: string; }",
                "{ [key: string]: any; }",
                "{ [property: string]: string; }",
                "{ [value: string]: string; }"
            ],
            "answer": "{ [key: string]: any; }",
            "explanation": "This syntax denotes an object that can have any number of properties, where the keys are strings and the values can be of any type."
        },
        {
            "question": "Which command would you use to install TypeScript globally using npm?",
            "options": [
                "npm install typescript",
                "npm global install typescript",
                "npm install -g typescript",
                "npm typescript install global"
            ],
            "answer": "npm install -g typescript",
            "explanation": "The -g flag in npm is used to install packages globally."
        },
        {
            "question": "How do you define private property in a TypeScript class?",
            "options": [
                "def property: string;",
                "private property: string;",
                "#property: string;",
                "property: private string;"
            ],
            "answer": "private property: string;",
            "explanation": "In TypeScript, the private keyword is used to define private properties in a class."
        },
        {
            "question": "Which of the following TypeScript types can the unknown type be assigned to without type assertion?",
            "options": [
                "string",
                "number",
                "any",
                "void"
            ],
            "answer": "any",
            "explanation": "The unknown type is a safe counterpart of any type. It can be assigned to any type without a type assertion."
        },
        {
            "question": "In TypeScript, what does an enum allow you to do?",
            "options": [
                "Store a list of numeric values.",
                "Store a set of named constants, numeric or string.",
                "Define a new data type.",
                "Assign multiple types to a variable."
            ],
            "answer": "Store a set of named constants, numeric or string.",
            "explanation": "Enums in TypeScript allow for a way of giving more friendly names to sets of numeric or string values."
        },
        {
            "question": "Which TypeScript feature allows for declaring new names for existing types?",
            "options": [
                "Aliases",
                "Enums",
                "Interfaces",
                "Decorators"
            ],
            "answer": "Aliases",
            "explanation": "Type aliases allow for creating new names (aliases) for types. It’s a way to give a type a new name."
        },
        {
            "question": "How do you specify a function type in TypeScript that takes in a number and returns a string?",
            "options": [
                "function(num: number) -> string",
                "function: (number) => string",
                "(num: number) => string",
                "Function(number): string"
            ],
            "answer": "(num: number) => string",
            "explanation": "In TypeScript, function types can be described using the parameter type and return type syntax, such as (parameterType) => returnType."
        },
        {
            "question": "What does the extends keyword allow you to do in TypeScript?",
            "options": [
                "Add methods to an existing function.",
                "Increase the value of a number variable.",
                "Create a subclass from a superclass.",
                "Extend the length of an array."
            ],
            "answer": "Create a subclass from a superclass.",
            "explanation": "In TypeScript, as in many object-oriented languages, the extends keyword is used for class declarations or class expressions to create a class as a child of another class."
        },
        {
            "question": "Which TypeScript keyword allows for a child class to override a method of its parent class?",
            "options": [
                "override",
                "super",
                "over",
                "extends"
            ],
            "answer": "super",
            "explanation": "The super keyword in TypeScript is used to call functions on an object’s parent. It is often used within an overridden method to refer to the version of the function in the parent class."
        },
        {
            "question": "How do you define an array of strings in TypeScript?",
            "options": [
                "Array<string>",
                "string[]",
                "Both A and B",
                "List<string>"
            ],
            "answer": "Both A and B",
            "explanation": "In TypeScript, both Array<string> and string[] are valid ways to define an array of strings."
        },
        {
            "question": "In TypeScript, how do you enforce a variable to be of a specific type at compile time?",
            "options": [
                "Using the force keyword.",
                "Using the type keyword.",
                "By using type annotations.",
                "By casting the variable."
            ],
            "answer": "By using type annotations.",
            "explanation": "Type annotations in TypeScript allow developers to enforce a variable to be of a specific type at compile time."
        },
        {
            "question": "Which TypeScript feature provides static typings for dynamic properties in objects and arrays?",
            "options": [
                "Generics",
                "Type guards",
                "Dynamic types",
                "Index signatures"
            ],
            "answer": "Index signatures",
            "explanation": "Index signatures in TypeScript allow us to describe types of properties that might not be known until runtime."
        },
        {
            "question": "In TypeScript, how can a subclass access a method from its superclass?",
            "options": [
                "Using the extends keyword",
                "Using the inherits keyword",
                "Using the super keyword",
                "Using the base keyword"
            ],
            "answer": "Using the super keyword",
            "explanation": "The super keyword in TypeScript is used to call functions on an object’s parent. When overriding a method in a derived class, the super keyword can be used to call the method on the parent class."
        },
        {
            "question": "How do you declare a class in TypeScript?",
            "options": [
                "def ClassName:",
                "class ClassName {}",
                "new Class ClassName {}",
                "object ClassName {}"
            ],
            "answer": "class ClassName {}",
            "explanation": "In TypeScript, you use the class keyword followed by the class name to define a new class, similar to ES6 in JavaScript."
        },
        {
            "question": "How do you create an instance of a TypeScript class?",
            "options": [
                "new MyClass()",
                "MyClass.new()",
                "MyClass.create()",
                "instance MyClass()"
            ],
            "answer": "new MyClass()",
            "explanation": "You create a new instance of a TypeScript class using the new keyword followed by the class name and parentheses."
        },
        {
            "question": "What does the extends keyword do in TypeScript?",
            "options": [
                "It imports a module.",
                "It creates an alias for a type.",
                "It allows a class to inherit from another class.",
                "It allows extending an array."
            ],
            "answer": "It allows a class to inherit from another class.",
            "explanation": "The extends keyword is used for class inheritance in TypeScript. It allows a class to inherit methods and properties from another class."
        },
        {
            "question": "What is the purpose of a constructor in TypeScript classes?",
            "options": [
                "To create a static method.",
                "To initialize object properties.",
                "To destroy an object.",
                "To run asynchronous code."
            ],
            "answer": "To initialize object properties.",
            "explanation": "The constructor in TypeScript is a special function that is automatically called when an object is created from a class. It is primarily used to initialize object properties."
        }
    ],
    "JSON": [
        {
            "question": "What does JSON stand for?",
            "options": [
                "JavaScript Oriented Notation",
                "JavaScript Object Notation",
                "Java Ordered Notation",
                "Java Object Notation"
            ],
            "answer": "JavaScript Object Notation",
            "explanation": "JSON stands for JavaScript Object Notation. It is a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate."
        },
        {
            "question": "How do you represent data in JSON?",
            "options": [
                "Key-Value pairs",
                "Metadata",
                "Binary Data",
                "Key-Object pairs"
            ],
            "answer": "Key-Value pairs",
            "explanation": "In JSON, data is represented as key-value pairs. This means each value is associated with a unique key."
        },
        {
            "question": "Which of the following is the primary purpose of JSON?",
            "options": [
                "Data storage",
                "Data interchange",
                "Data computation",
                "Data security"
            ],
            "answer": "Data interchange",
            "explanation": "JSON is mainly used as a format for data interchange between a server and a client or between different parts of an application."
        },
        {
            "question": "Which of these is a valid JSON value?",
            "options": [
                "function() { }",
                "{ key: \"value\" }",
                "'key': 'value'",
                "NaN"
            ],
            "answer": "{ key: \"value\" }",
            "explanation": "JSON values can be objects, arrays, strings, numbers, true, false, or null. Functions or special numeric values like NaN are not valid."
        },
        {
            "question": "In JSON, strings must be wrapped in…?",
            "options": [
                "Single quotes (' ')",
                "Double quotes (\" \")",
                "Either single or double quotes",
                "No quotes"
            ],
            "answer": "Double quotes (\" \")",
            "explanation": "In JSON, strings are always enclosed in double quotes."
        },
        {
            "question": "What is the file extension typically used for JSON files?",
            "options": [
                ".js",
                ".java",
                ".json",
                ".data"
            ],
            "answer": ".json",
            "explanation": "JSON files typically have a .json file extension."
        },
        {
            "question": "Which of the following data types is not supported in JSON?",
            "options": [
                "Arrays",
                "Functions",
                "Numbers",
                "Strings"
            ],
            "answer": "Functions",
            "explanation": "JSON does not support functions. It's purely a data format."
        },
        {
            "question": "Which of the following is the correct way to represent a boolean in JSON?",
            "options": [
                "\"true\"",
                "true",
                "'true'",
                "01"
            ],
            "answer": "true",
            "explanation": "Booleans in JSON are represented as true or false without quotes."
        },
        {
            "question": "Which data structures can JSON represent?",
            "options": [
                "Objects and Arrays",
                "Trees",
                "Graphs",
                "Queues"
            ],
            "answer": "Objects and Arrays",
            "explanation": "JSON can represent two structured types: objects (unordered sets of name/value pairs) and arrays (ordered sequences of values)."
        },
        {
            "question": "In JSON, which of these values represents 'no value'?",
            "options": [
                "undefined",
                "none",
                "null",
                "zero"
            ],
            "answer": "null",
            "explanation": "JSON uses null to represent no value or a null value."
        },
        {
            "question": "How would you represent a numeric value in JSON?",
            "options": [
                "\"10\"",
                "10.0",
                "'10'",
                ".10"
            ],
            "answer": "10.0",
            "explanation": "Numeric values in JSON are represented as numbers without quotes. They can be integers or floating-point numbers."
        },
        {
            "question": "Which symbol is used to denote the start and end of an array in JSON?",
            "options": [
                "{ }",
                "( )",
                "< >",
                "[ ]"
            ],
            "answer": "[ ]",
            "explanation": "Arrays in JSON are enclosed in square brackets [ ]."
        },
        {
            "question": "How would you represent a date in JSON?",
            "options": [
                "As a Date object",
                "As a string",
                "As a number",
                "As a function"
            ],
            "answer": "As a string",
            "explanation": "JSON does not have a date data type. Dates are typically represented as strings."
        },
        {
            "question": "In JSON, the keys of an object must be…?",
            "options": [
                "Strings",
                "Numbers",
                "Either strings or numbers",
                "Arrays"
            ],
            "answer": "Strings",
            "explanation": "In JSON, the keys of an object must always be strings wrapped in double quotes."
        },
        {
            "question": "Which of the following is a valid JSON object?",
            "options": [
                "{ \"name\": \"John\", \"age\": 30, \"city\": \"New York\" }",
                "{ name: \"John\", age: 30, city: \"New York\" }",
                "{ 'name': 'John', 'age': 30, 'city': 'New York' }",
                "{ name = \"John\", age = 30, city = \"New York\" }"
            ],
            "answer": "{ \"name\": \"John\", \"age\": 30, \"city\": \"New York\" }",
            "explanation": "In JSON, keys must be strings enclosed in double quotes."
        },
        {
            "question": "If you had the following JSON: { \"colors\": [\"red\", \"green\", \"blue\"] }, how would you describe the value associated with the key \"colors\"?",
            "options": [
                "An object",
                "A string",
                "An array",
                "A function"
            ],
            "answer": "An array",
            "explanation": "The value associated with the key \"colors\" is an array of strings."
        },
        {
            "question": "Which of the following is not a primitive type in JSON?",
            "options": [
                "String",
                "Number",
                "Object",
                "Boolean"
            ],
            "answer": "Object",
            "explanation": "In JSON, the primitive types are string, number, boolean, null. Objects and arrays are considered structured types."
        },
        {
            "question": "How would you represent an empty object in JSON?",
            "options": [
                "{}",
                "[]",
                "\"\"",
                "null"
            ],
            "answer": "{}",
            "explanation": "An empty object in JSON is represented by {}."
        },
        {
            "question": "How can you represent a negative number in JSON?",
            "options": [
                "-123",
                "\"123-\"",
                "123-",
                "\"negative123\""
            ],
            "answer": "-123",
            "explanation": "Negative numbers in JSON are represented the same way as in mathematics, with a preceding minus sign."
        },
        {
            "question": "If you encounter a value true in a JSON file, what data type is it?",
            "options": [
                "String",
                "Object",
                "Array",
                "Boolean"
            ],
            "answer": "Boolean",
            "explanation": "The value true in JSON represents a boolean data type."
        },
        {
            "question": "What is the root of a JSON document?",
            "options": [
                "Always an object",
                "Always an array",
                "Either an object or an array",
                "Neither an object nor an array"
            ],
            "answer": "Either an object or an array",
            "explanation": "The root of a JSON document can either be an object {} or an array []."
        },
        {
            "question": "Which of the following characters is used to separate key-value pairs in JSON?",
            "options": [
                ";",
                ":",
                "=",
                ","
            ],
            "answer": ":",
            "explanation": "In JSON, key-value pairs are separated using a colon :."
        },
        {
            "question": "If you wanted to include a special character in a JSON string, you would use…?",
            "options": [
                "Backticks",
                "Single quotes",
                "Escape sequences",
                "Brackets"
            ],
            "answer": "Escape sequences",
            "explanation": "Special characters in JSON strings are represented using escape sequences, like \\\" for a double quote."
        },
        {
            "question": "Which of the following methods in JavaScript is used to convert a JavaScript object into a JSON string?",
            "options": [
                "JSON.parse()",
                "JSON.stringify()",
                "JSON.convert()",
                "JSON.encode()"
            ],
            "answer": "JSON.stringify()",
            "explanation": "The JSON.stringify() method in JavaScript is used to convert a JavaScript object into a JSON string."
        },
        {
            "question": "In a JSON array, values must be separated by…?",
            "options": [
                "Semicolons ;",
                "Commas ,",
                "Colons :",
                "Spaces"
            ],
            "answer": "Commas ,",
            "explanation": "In a JSON array, values are separated by commas."
        }
    ],
    "XML": [
        {
            "question": "What does XML stand for?",
            "options": [
                "Xtreme Markup Language",
                "Extended Markup Language",
                "Exquisite Markup Language",
                "Extensible Markup Language"
            ],
            "answer": "Extensible Markup Language",
            "explanation": "XML stands for Extensible Markup Language, a markup language that is used to define rules for encoding documents."
        },
        {
            "question": "Which of the following symbols marks the start of an XML tag?",
            "options": [
                "{}",
                "()",
                "<>",
                "[]"
            ],
            "answer": "<>",
            "explanation": "XML tags are marked by angle brackets <>."
        },
        {
            "question": "Which of the following is the correct way to declare an XML version and encoding?",
            "options": [
                "<?xml version=”1.0″ encoding=”UTF-8″?>",
                "<xml version=1.0 encoding=UTF-8>",
                "{xml version:”1.0″, encoding:”UTF-8″}",
                "xml(version=1.0, encoding=UTF-8)"
            ],
            "answer": "<?xml version=”1.0″ encoding=”UTF-8″?>",
            "explanation": "XML declarations are made using <?xml … ?> and the version and encoding attributes should be enclosed in double-quotes."
        },
        {
            "question": "Which of the following is a self-closing XML tag?",
            "options": [
                "<tag></tag>",
                "<tag>",
                "<tag/>",
                "</tag>"
            ],
            "answer": "<tag/>",
            "explanation": "A self-closing XML tag is closed within the same tag by using a slash before the closing bracket."
        },
        {
            "question": "How do you add a comment in XML?",
            "options": [
                "<!–This is a comment–>",
                "//This is a comment",
                "# This is a comment",
                "* This is a comment"
            ],
            "answer": "<!–This is a comment–>",
            "explanation": "Comments in XML are added using <!– … –>."
        },
        {
            "question": "Which of the following XML elements is correctly nested?",
            "options": [
                "<outer><inner></inner></outer>",
                "<outer><inner></outer></inner>",
                "<outer></inner><inner></outer>",
                "<outer><inner>"
            ],
            "answer": "<outer><inner></inner></outer>",
            "explanation": "XML elements must be properly nested and closed in the order they were opened."
        },
        {
            "question": "Can XML tags contain spaces?",
            "options": [
                "Yes",
                "No",
                "",
                ""
            ],
            "answer": "No",
            "explanation": "XML tags cannot contain spaces. They should be a continuous string of characters."
        },
        {
            "question": "Which of the following is not a purpose of XML?",
            "options": [
                "Styling web pages",
                "Storing data",
                "Transporting data",
                "Describing data"
            ],
            "answer": "Styling web pages",
            "explanation": "XML is used for storing, transporting, and describing data. Styling web pages is typically done using CSS."
        },
        {
            "question": "What do XML attributes provide?",
            "options": [
                "Additional information about an element",
                "Structure to the XML document",
                "A way to create comments",
                "A method to close an element"
            ],
            "answer": "Additional information about an element",
            "explanation": "XML attributes provide additional information about XML elements."
        },
        {
            "question": "Which of the following is a correct XML attribute?",
            "options": [
                "<tag attribute=”value”>",
                "<tag attribute=value>",
                "<tag “attribute”=”value”>",
                "<tag attribute: value>"
            ],
            "answer": "<tag attribute=”value”>",
            "explanation": "XML attributes should have their values enclosed in double quotes."
        },
        {
            "question": "How can you specify an XML namespace?",
            "options": [
                "xmlns:prefix=”namespace-URL”",
                "namespace:prefix=”namespace-URL”",
                "ns:prefix=”namespace-URL”",
                "xml-namespace:prefix=”namespace-URL”"
            ],
            "answer": "xmlns:prefix=”namespace-URL”",
            "explanation": "Namespaces in XML are defined with the xmlns attribute."
        },
        {
            "question": "If an XML element is defined as empty, what does it mean?",
            "options": [
                "It has a closing tag but no opening tag",
                "It has neither child elements nor text",
                "It contains only attributes",
                "It contains only comments"
            ],
            "answer": "It has neither child elements nor text",
            "explanation": "An empty XML element does not contain any child elements or text. It can, however, still have attributes."
        },
        {
            "question": "Which of the following tools can be used to transform XML documents into other formats?",
            "options": [
                "XPath",
                "XSLT",
                "XQuery",
                "XML Schema"
            ],
            "answer": "XSLT",
            "explanation": "XSLT (Extensible Stylesheet Language Transformations) is used for transforming XML documents into other XML documents or other formats like HTML."
        },
        {
            "question": "What does XPath primarily do in XML?",
            "options": [
                "Transform XML data",
                "Validate XML structure",
                "Navigate and extract parts of an XML document",
                "Declare XML namespaces"
            ],
            "answer": "Navigate and extract parts of an XML document",
            "explanation": "XPath (XML Path Language) is a query language that allows navigation and extraction of specific parts of an XML document."
        },
        {
            "question": "Which of the following characters is a reserved character in XML?",
            "options": [
                "$",
                "#",
                "&",
                "@"
            ],
            "answer": "&",
            "explanation": "The & character is reserved in XML to start an entity reference (like &lt; for the < character)."
        },
        {
            "question": "How do you reference an external DTD in an XML document?",
            "options": [
                "<!DOCTYPE root-element SYSTEM “file.dtd”>",
                "<!DTD root-element SYSTEM “file.dtd”>",
                "<!XML root-element DTD “file.dtd”>",
                "<!DEFINE root-element FROM “file.dtd”>"
            ],
            "answer": "<!DOCTYPE root-element SYSTEM “file.dtd”>",
            "explanation": "The correct syntax for referencing an external DTD is using the <!DOCTYPE … SYSTEM …> declaration."
        },
        {
            "question": "Which of the following elements describes metadata inside the XML document and is placed at the top?",
            "options": [
                "<header>",
                "<meta>",
                "<info>",
                "<prolog>"
            ],
            "answer": "<prolog>",
            "explanation": "The prolog of an XML document is used to specify XML declarations, processing instructions, and doctype declarations. It generally describes the metadata of the document."
        },
        {
            "question": "Why would you use XQuery with XML?",
            "options": [
                "To define the structure of XML documents",
                "To transform XML data into other formats",
                "To query and manipulate XML data",
                "To navigate through an XML document hierarchically"
            ],
            "answer": "To query and manipulate XML data",
            "explanation": "XQuery is a language that allows querying and manipulating XML data. It lets users extract data from XML documents and databases."
        },
        {
            "question": "How can you include special characters in an XML document without them being interpreted as markup?",
            "options": [
                "Using backslashes",
                "Using Unicode escapes",
                "Using CDATA sections",
                "Using hexadecimal notation"
            ],
            "answer": "Using CDATA sections",
            "explanation": "CDATA sections allow you to include special characters without them being interpreted as XML markup."
        },
        {
            "question": "Which of the following is the root element in the XML document?",
            "options": [
                "The first element in the document",
                "The last element in the document",
                "The element that has no parent",
                "The element that has no children"
            ],
            "answer": "The element that has no parent",
            "explanation": "The root element is the topmost element in the XML hierarchy and does not have a parent."
        },
        {
            "question": "What purpose does the XML namespace serve?",
            "options": [
                "It provides a unique identity for elements and attributes",
                "It defines the structure of an XML document",
                "It specifies the default values for attributes",
                "It declares the version of XML used in the document"
            ],
            "answer": "It provides a unique identity for elements and attributes",
            "explanation": "XML namespaces prevent naming conflicts and provide a unique identity for elements and attributes in XML documents."
        },
        {
            "question": "What is the key difference between XML and HTML?",
            "options": [
                "XML is a markup language, while HTML is a programming language",
                "XML is used for data representation, while HTML is used for data presentation",
                "XML is case-sensitive, while HTML is not",
                "XML has predefined tags, while HTML allows custom tags"
            ],
            "answer": "XML is used for data representation, while HTML is used for data presentation",
            "explanation": "XML is designed to store and transport data, while HTML is designed to display data."
        },
        {
            "question": "Which of the following tools is NOT directly associated with XML processing?",
            "options": [
                "XSLT",
                "XPath",
                "JDBC",
                "XQuery"
            ],
            "answer": "JDBC",
            "explanation": "JDBC (Java Database Connectivity) is related to database operations in Java and is not directly associated with XML processing."
        },
        {
            "question": "Which statement about XML attributes is true?",
            "options": [
                "Attributes can contain multiple values",
                "Attributes can have child elements",
                "Each attribute must have a unique name within its element",
                "Attributes are mandatory for every element"
            ],
            "answer": "Each attribute must have a unique name within its element",
            "explanation": "Within a single XML element, each attribute must have a unique name."
        },
        {
            "question": "Which XML parser provides a tree structure of an XML document and allows the developer to navigate the tree?",
            "options": [
                "SAX (Simple API for XML)",
                "DOM (Document Object Model)",
                "XSLT",
                "XPath"
            ],
            "answer": "DOM (Document Object Model)",
            "explanation": "The DOM parser provides a tree structure of an XML document and allows for navigation and manipulation of this tree."
        }
    ],
    "Software Engineering": [
        {
            "question": "Which of the following best describes software engineering?",
            "options": [
                "Writing code in multiple programming languages",
                "The application of a systematic approach to software design",
                "The study of computer hardware components",
                "Fixing bugs in a software application"
            ],
            "answer": "The application of a systematic approach to software design",
            "explanation": "Software engineering applies systematic and disciplined approaches to design, develop, and maintain software."
        },
        {
            "question": "What does SDLC stand for in software engineering?",
            "options": [
                "Software Debugging Life Cycle",
                "Software Development Life Cycle",
                "System Design Life Cycle",
                "Software Delivery Life Cycle"
            ],
            "answer": "Software Development Life Cycle",
            "explanation": "SDLC stands for Software Development Life Cycle, which encompasses various phases from planning to maintenance in the software development process."
        },
        {
            "question": "Which phase comes first in SDLC?",
            "options": [
                "Testing",
                "Design",
                "Implementation",
                "Planning"
            ],
            "answer": "Planning",
            "explanation": "The planning phase is the initial step in SDLC, where project goals, scope, and constraints are determined."
        },
        {
            "question": "Which methodology promotes frequent inspection and adaptation?",
            "options": [
                "Waterfall model",
                "Spiral model",
                "Agile methodology",
                "V-model"
            ],
            "answer": "Agile methodology",
            "explanation": "Agile emphasizes frequent inspection, adaptation, and collaboration to deliver a product incrementally."
        },
        {
            "question": "Which process model is built around phases and is linear in nature?",
            "options": [
                "Waterfall model",
                "Scrum",
                "RAD (Rapid Application Development)",
                "Kanban"
            ],
            "answer": "Waterfall model",
            "explanation": "The Waterfall model is a sequential design process, where each phase relies on the deliverables of the previous one."
        },
        {
            "question": "What is the primary focus of software maintenance?",
            "options": [
                "Adding new features",
                "Debugging",
                "Enhancing the existing features",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Software maintenance involves debugging, enhancing existing features, and adding new features."
        },
        {
            "question": "Which type of testing focuses on ensuring individual units work as intended?",
            "options": [
                "System testing",
                "Unit testing",
                "Integration testing",
                "Acceptance testing"
            ],
            "answer": "Unit testing",
            "explanation": "Unit testing focuses on individual components or units of software to ensure they function correctly."
        },
        {
            "question": "In which testing phase do different software modules interact with each other?",
            "options": [
                "System testing",
                "Unit testing",
                "Integration testing",
                "Acceptance testing"
            ],
            "answer": "Integration testing",
            "explanation": "Integration testing focuses on the interactions between different software modules to ensure they work together as intended."
        },
        {
            "question": "What is a software “bug”?",
            "options": [
                "An unwanted and unintended property",
                "Documentation of software",
                "Part of the software design process",
                "A repeated cycle in software processes"
            ],
            "answer": "An unwanted and unintended property",
            "explanation": "A “bug” in software is an error, flaw, or fault that produces an unintended or incorrect result."
        },
        {
            "question": "What is the main goal of software architecture?",
            "options": [
                "Code optimization",
                "Error detection",
                "High-level structuring of the software system",
                "Cost estimation"
            ],
            "answer": "High-level structuring of the software system",
            "explanation": "The primary aim of software architecture is to determine the high-level structure of the software system and its components."
        },
        {
            "question": "Which of the following is NOT a characteristic of good software?",
            "options": [
                "Maintainability",
                "Usability",
                "Scalability",
                "Complexity"
            ],
            "answer": "Complexity",
            "explanation": "Good software should be simple, easy to understand, and not unnecessarily complex."
        },
        {
            "question": "In the context of software metrics, what does LOC stand for?",
            "options": [
                "Line Of Characters",
                "Length Of Code",
                "Line Of Code",
                "Logic Of Code"
            ],
            "answer": "Line Of Code",
            "explanation": "In software metrics, LOC stands for Line Of Code and is a metric that measures the size of a program by counting the number of lines in the text of the program’s source code."
        },
        {
            "question": "Which software process model involves risk assessment and iterative enhancement?",
            "options": [
                "Waterfall model",
                "Spiral model",
                "Agile methodology",
                "V-model"
            ],
            "answer": "Spiral model",
            "explanation": "The Spiral model combines elements of both design and prototyping-in-stages, making it a cyclic approach. It’s focused on risk assessment and iterative enhancement."
        },
        {
            "question": "In object-oriented programming, what does ‘polymorphism’ allow you to do?",
            "options": [
                "Create multiple classes",
                "Use an entity in multiple forms",
                "Hide data",
                "Establish a hierarchy among classes"
            ],
            "answer": "Use an entity in multiple forms",
            "explanation": "Polymorphism allows objects of different classes to be treated as objects of a common superclass. It permits an entity, such as a function or an object, to have more than one form."
        },
        {
            "question": "Which of the following models is NOT suitable for accommodating any change?",
            "options": [
                "Agile",
                "RAD",
                "Waterfall",
                "Incremental"
            ],
            "answer": "Waterfall",
            "explanation": "The Waterfall model is a linear and sequential approach where each phase must be completed before the next phase begins, making it less suitable for changes once a phase is completed."
        },
        {
            "question": "Which phase of SDLC involves determining system requirements?",
            "options": [
                "Planning",
                "Analysis",
                "Design",
                "Implementation"
            ],
            "answer": "Analysis",
            "explanation": "The Analysis phase of SDLC involves gathering and analyzing the system requirements."
        },
        {
            "question": "Which software development methodology emphasizes customer feedback and short iterations?",
            "options": [
                "Waterfall",
                "Scrum",
                "Spiral",
                "V-model"
            ],
            "answer": "Scrum",
            "explanation": "Scrum is an Agile methodology that emphasizes customer feedback, collaboration, and short iterations (called sprints) to deliver functional software increments."
        },
        {
            "question": "What is a “use case” primarily used for?",
            "options": [
                "Debugging software",
                "Designing the user interface",
                "Representing interactions between a user and a system",
                "Estimating project cost"
            ],
            "answer": "Representing interactions between a user and a system",
            "explanation": "A “use case” is a representation of interactions between an actor (typically a user) and a system to achieve a goal. It focuses on the system’s behavior from the user’s perspective."
        },
        {
            "question": "What is the main purpose of software testing?",
            "options": [
                "To improve the features of the software",
                "To find and correct errors in the software",
                "To enhance the user interface",
                "To boost the performance of developers"
            ],
            "answer": "To find and correct errors in the software",
            "explanation": "The primary purpose of software testing is to identify defects and ensure that they get fixed."
        },
        {
            "question": "Which document serves as a blueprint for the construction phase in the software development lifecycle?",
            "options": [
                "Requirement document",
                "Test document",
                "Design document",
                "User manual"
            ],
            "answer": "Design document",
            "explanation": "The design document lays out the software architecture and serves as a blueprint for developers during the construction phase."
        },
        {
            "question": "In software engineering, what is a ‘stakeholder’?",
            "options": [
                "An entity that holds the server",
                "A person or group with an interest in the project outcome",
                "A developer assigned to a module",
                "A tester with a specific role"
            ],
            "answer": "A person or group with an interest in the project outcome",
            "explanation": "Stakeholders are individuals or groups who have an interest in the project’s success, ranging from clients to users, developers, and more."
        },
        {
            "question": "What does the term ‘white box testing’ refer to?",
            "options": [
                "Testing without viewing the software’s code",
                "Testing the software’s user interface",
                "Testing based on the software’s internal logic and structure",
                "Testing with external tools"
            ],
            "answer": "Testing based on the software’s internal logic and structure",
            "explanation": "White box testing, also known as clear box testing, involves testing the software’s internal structures or workings."
        },
        {
            "question": "In the context of project management, what does ‘scope creep’ mean?",
            "options": [
                "Reducing the scope of a project",
                "Expanding the scope of a project without adjustments to time, budget, or resources",
                "Shifting the focus of the project to a new technology",
                "Gradual decrease in the project timeline"
            ],
            "answer": "Expanding the scope of a project without adjustments to time, budget, or resources",
            "explanation": "‘Scope creep’ refers to uncontrolled changes or continuous growth in a project’s scope, which can be a challenge for project managers as it might lead to projects going over time or over budget."
        },
        {
            "question": "What is the primary aim of a feasibility study in software engineering?",
            "options": [
                "Designing the user interface",
                "Determining if the proposed system is possible and practical",
                "Setting the budget for the project",
                "Recruiting team members for the project"
            ],
            "answer": "Determining if the proposed system is possible and practical",
            "explanation": "The feasibility study aims to evaluate the project’s potential for success and determine if it is technically and financially viable."
        },
        {
            "question": "What does UML stand for in software engineering?",
            "options": [
                "Unified Markup Language",
                "Universal Modeling Language",
                "Unified Modeling Language",
                "Unique Markup Language"
            ],
            "answer": "Unified Modeling Language",
            "explanation": "UML stands for Unified Modeling Language, a standard notation for the modeling of real-world objects as a first step in developing an object-oriented design methodology."
        },
        {
            "question": "In a software project, what does ‘WBS’ stand for?",
            "options": [
                "Work Breakdown Session",
                "Work Based Solution",
                "Work Breakdown Structure",
                "Work Build Session"
            ],
            "answer": "Work Breakdown Structure",
            "explanation": "WBS stands for Work Breakdown Structure. It’s a hierarchical decomposition of the total scope of work to be carried out by the project team."
        }
    ],
    "Operating System": [
        {
            "question": "Which of the following is the primary role of an operating system?",
            "options": [
                "System maintenance",
                "Internet browsing",
                "Bridging the gap between user and hardware",
                "Software installation"
            ],
            "answer": "Bridging the gap between user and hardware",
            "explanation": "The OS serves as an interface between the user and the hardware, making it user-friendly and efficient for program execution."
        },
        {
            "question": "What is the main function of the ALU (Arithmetic Logic Unit)?",
            "options": [
                "Execute operating system commands",
                "Perform arithmetic and logical operations",
                "Control system performance",
                "Allocate memory space"
            ],
            "answer": "Perform arithmetic and logical operations",
            "explanation": "ALU is responsible for performing both arithmetic (addition, subtraction, etc.) and logical operations (AND, OR, NOT, etc.)."
        },
        {
            "question": "Which of the following is considered non-volatile storage?",
            "options": [
                "RAM",
                "Cache",
                "CPU Registers",
                "Hard Disk"
            ],
            "answer": "Hard Disk",
            "explanation": "Non-volatile storage retains data even when power is turned off. Among the options, only the Hard Disk is non-volatile."
        },
        {
            "question": "Which process state is described as the process waiting for some event to occur?",
            "options": [
                "Running",
                "Blocked",
                "Ready",
                "Terminated"
            ],
            "answer": "Blocked",
            "explanation": "A process enters the blocked state when it awaits an event, like an input from the user or data from disk storage."
        },
        {
            "question": "In the context of an OS, what is “Thrashing”?",
            "options": [
                "Rapid switching between tasks",
                "High utilization of the CPU",
                "Excessive paging between main memory and disk",
                "Disk cleanup process"
            ],
            "answer": "Excessive paging between main memory and disk",
            "explanation": "Thrashing occurs when an OS spends a disproportionate amount of its time swapping data between main memory and disk storage, leading to reduced efficiency."
        },
        {
            "question": "Which component provides an interface between users and the operating system?",
            "options": [
                "Kernel",
                "Shell",
                "File System",
                "RAM"
            ],
            "answer": "Shell",
            "explanation": "Shell is the interface that allows users to interact with the operating system using commands."
        },
        {
            "question": "What is a multi-threaded process?",
            "options": [
                "A process that’s replicated multiple times",
                "A process divided into smaller child processes",
                "A process that has multiple paths of execution",
                "A process that runs on multiple CPUs"
            ],
            "answer": "A process that has multiple paths of execution",
            "explanation": "A multi-threaded process contains multiple threads, allowing multiple sequences or paths of code execution within the same process memory space."
        },
        {
            "question": "The mechanism of allowing multiple tasks to run simultaneously on a single processor is known as:",
            "options": [
                "Multi-threading",
                "Multiprocessing",
                "Multitasking",
                "Multi-allocation"
            ],
            "answer": "Multitasking",
            "explanation": "Multitasking is the concurrent execution of multiple tasks or processes on a single processor, giving the illusion that they’re running simultaneously."
        },
        {
            "question": "What is the primary purpose of the OS’s scheduler?",
            "options": [
                "Memory allocation",
                "Disk management",
                "Prioritizing process execution",
                "Handling user input"
            ],
            "answer": "Prioritizing process execution",
            "explanation": "The scheduler determines the sequence in which processes access the CPU based on their priorities and other factors."
        },
        {
            "question": "What is the function of the paging system in an OS?",
            "options": [
                "It increases the processing speed of the CPU.",
                "It manages the user interface components.",
                "It breaks physical memory into fixed-size blocks.",
                "It converts high-level language into machine code."
            ],
            "answer": "It breaks physical memory into fixed-size blocks.",
            "explanation": "Paging is a memory management scheme that eliminates the need for contiguous allocation of physical memory, dividing it into fixed-sized blocks known as pages."
        },
        {
            "question": "In OS, what is the role of a dispatcher?",
            "options": [
                "Handle memory allocation.",
                "Prioritize processes in the queue.",
                "Manage user access and permissions.",
                "Transfer control to the process selected by the scheduler."
            ],
            "answer": "Transfer control to the process selected by the scheduler.",
            "explanation": "Once the scheduler selects a process, the dispatcher is responsible for giving control to that process."
        },
        {
            "question": "Which of the following OS components manages all system resources?",
            "options": [
                "Shell",
                "Kernel",
                "File System",
                "Controller"
            ],
            "answer": "Kernel",
            "explanation": "The kernel is the core component of an OS that manages system resources, interfacing directly with hardware."
        },
        {
            "question": "In a multiprogramming system, when one program is waiting for I/O, what does the CPU do?",
            "options": [
                "Remains idle.",
                "Executes another program.",
                "Waits for the I/O to complete.",
                "Powers down to save energy."
            ],
            "answer": "Executes another program.",
            "explanation": "In multiprogramming, the objective is to maximize CPU utilization. So, when one program waits for I/O, the CPU begins executing another program."
        },
        {
            "question": "What is the purpose of a device driver in an OS?",
            "options": [
                "Enhancing CPU performance.",
                "Enabling communication between the OS and hardware devices.",
                "Scheduling processes for execution.",
                "Managing user permissions."
            ],
            "answer": "Enabling communication between the OS and hardware devices.",
            "explanation": "A device driver facilitates communication between the operating system and a hardware device, acting as a translator between the two."
        },
        {
            "question": "Which type of operating system is designed to manage network resources?",
            "options": [
                "Batch OS",
                "Multiprogramming OS",
                "Network OS",
                "Mobile OS"
            ],
            "answer": "Network OS",
            "explanation": "A Network Operating System is specifically designed to manage and coordinate network resources, ensuring smooth network operations."
        },
        {
            "question": "In which memory segment does the OS store temporary data, such as function parameters and return addresses?",
            "options": [
                "Code Segment",
                "Data Segment",
                "Stack Segment",
                "Heap Segment"
            ],
            "answer": "Stack Segment",
            "explanation": "The OS uses the stack segment to store temporary data, like function parameters and return addresses, in a Last-In-First-Out (LIFO) manner."
        },
        {
            "question": "Which of the following is NOT a function of the operating system?",
            "options": [
                "Providing a user interface.",
                "Running applications.",
                "Designing user-friendly icons.",
                "Managing system memory."
            ],
            "answer": "Designing user-friendly icons.",
            "explanation": "While an operating system provides icons for user navigation, the design aspect of icons is not inherently a function of the operating system but rather of the interface design."
        },
        {
            "question": "What term describes the duplication of system operations in a mirrored environment to ensure availability during failures?",
            "options": [
                "Multithreading.",
                "Multiprocessing.",
                "Fault Tolerance.",
                "Multitasking."
            ],
            "answer": "Fault Tolerance.",
            "explanation": "Fault tolerance refers to the ability of a system to continue to function properly in the event of a failure of some of its components."
        },
        {
            "question": "Which OS component provides an interface for users to interact with the system?",
            "options": [
                "Kernel.",
                "Shell.",
                "Device Driver.",
                "Scheduler."
            ],
            "answer": "Shell.",
            "explanation": "The shell provides an interface, which can be command-line or graphical, for users to communicate with the operating system."
        },
        {
            "question": "Which of the following best describes real-time operating systems?",
            "options": [
                "Systems that are used for complex calculations.",
                "Systems that can guarantee a certain capability within a specified time limit.",
                "Systems that are used for multitasking purposes.",
                "Systems used for batch processing."
            ],
            "answer": "Systems that can guarantee a certain capability within a specified time limit.",
            "explanation": "Real-time operating systems are designed to respond to inputs or events without any delay or within a predictable time."
        },
        {
            "question": "What is a daemon in the context of operating systems?",
            "options": [
                "A malicious software.",
                "A process that runs in the background.",
                "A type of hardware interrupt.",
                "A user-interface component."
            ],
            "answer": "A process that runs in the background.",
            "explanation": "A daemon is a background process that runs independently of interactive user sessions."
        },
        {
            "question": "Which of the following is not a type of CPU scheduling algorithm?",
            "options": [
                "First-Come-First-Serve (FCFS).",
                "Round Robin (RR).",
                "Shortest-Job-First (SJF).",
                "Maximum-Job-First (MJF)."
            ],
            "answer": "Maximum-Job-First (MJF).",
            "explanation": "MJF is not a standard CPU scheduling algorithm. FCFS, RR, and SJF are common scheduling algorithms."
        },
        {
            "question": "Which of the following best describes a lightweight process in operating systems?",
            "options": [
                "A process that uses minimal CPU time.",
                "A process that is faster than all other processes.",
                "A smaller unit of process that shares resources of the main process.",
                "A process with the lowest priority."
            ],
            "answer": "A smaller unit of process that shares resources of the main process.",
            "explanation": "A lightweight process or thread is a smaller unit within a main process, sharing the same resources but can run independently."
        },
        {
            "question": "In which memory storage is the operating system usually loaded?",
            "options": [
                "CPU Registers.",
                "Hard Drive.",
                "RAM.",
                "Cache."
            ],
            "answer": "RAM.",
            "explanation": "The operating system is usually loaded into RAM (Random Access Memory) because accessing data in RAM is much faster than from a hard drive. This ensures the OS operates efficiently."
        },
        {
            "question": "What is a deadlock in the context of operating systems?",
            "options": [
                "A situation where every process is executing without any wait.",
                "A situation where a process is terminated unexpectedly.",
                "A situation where two or more processes are waiting for each other to release resources, leading to a standstill.",
                "A situation where the CPU is functioning at its maximum capability."
            ],
            "answer": "A situation where two or more processes are waiting for each other to release resources, leading to a standstill.",
            "explanation": "Deadlock refers to a standstill situation where processes wait for each other to release resources and cannot proceed further."
        },
        {
            "question": "What is swapping in the context of an operating system?",
            "options": [
                "The process of shutting down the system.",
                "The method of moving data between the CPU and RAM.",
                "The method of exchanging data between RAM and the disk when RAM is full.",
                "The process of creating backup data."
            ],
            "answer": "The method of exchanging data between RAM and the disk when RAM is full.",
            "explanation": "Swapping is the process where data from RAM is moved to the disk (swap space) to free up RAM. When the data is needed again, it’s swapped back into RAM."
        },
        {
            "question": "Which part of the operating system handles system calls?",
            "options": [
                "The shell.",
                "The kernel.",
                "The file system.",
                "Device drivers."
            ],
            "answer": "The kernel.",
            "explanation": "The kernel is the core part of an operating system and handles system calls, providing services to processes."
        },
        {
            "question": "What does the file system in an OS do?",
            "options": [
                "It determines how data is displayed on the monitor.",
                "It defines the way data is stored, organized, and accessed on storage devices.",
                "It controls the RAM.",
                "It manages CPU scheduling."
            ],
            "answer": "It defines the way data is stored, organized, and accessed on storage devices.",
            "explanation": "The file system determines the way data is structured, stored, and retrieved on storage devices like hard drives."
        },
        {
            "question": "What is the primary function of an operating system’s command interpreter?",
            "options": [
                "To display graphics.",
                "To execute hardware operations.",
                "To interpret and execute commands provided by the user.",
                "To manage file storage."
            ],
            "answer": "To interpret and execute commands provided by the user.",
            "explanation": "The command interpreter, or shell, interprets commands given by the user and instructs the operating system to execute them."
        },
        {
            "question": "Which of the following is NOT a goal of an operating system?",
            "options": [
                "Resource allocation.",
                "User accessibility.",
                "Software development.",
                "Security and access control."
            ],
            "answer": "Software development.",
            "explanation": "While operating systems do support software development by providing APIs and other tools, the primary goal of an OS is not to develop software. Instead, it manages system resources, ensures security, and provides user accessibility."
        }
    ],
    "Computer Hardware": [
        {
            "question": "Which device is primarily used to link two or more separate networks?",
            "options": [
                "Hub",
                "Switch",
                "Router",
                "Repeater"
            ],
            "answer": "Router",
            "explanation": "Routers are specifically designed to route data packets between different networks, enabling communication between them."
        },
        {
            "question": "What does LAN stand for?",
            "options": [
                "Large Area Network",
                "Local Area Network",
                "Linear Area Network",
                "Longitudinal Area Network"
            ],
            "answer": "Local Area Network",
            "explanation": "LAN stands for Local Area Network. It's a network that connects computers within a limited area such as a home, school, or office."
        },
        {
            "question": "Which protocol is used for sending email?",
            "options": [
                "HTTP",
                "SMTP",
                "FTP",
                "ICMP"
            ],
            "answer": "SMTP",
            "explanation": "SMTP stands for Simple Mail Transfer Protocol and it's used for sending emails."
        },
        {
            "question": "Which protocol is used to securely access web content?",
            "options": [
                "HTTP",
                "FTP",
                "SFTP",
                "HTTPS"
            ],
            "answer": "HTTPS",
            "explanation": "HTTPS stands for HyperText Transfer Protocol Secure and is used to access web content securely, often symbolized by a padlock icon in browsers."
        },
        {
            "question": "Which protocol is used to transfer files between a client and a server on the internet?",
            "options": [
                "DNS",
                "HTTP",
                "FTP",
                "SMTP"
            ],
            "answer": "FTP",
            "explanation": "FTP, or File Transfer Protocol, is specifically designed for transferring files over a network."
        },
        {
            "question": "Which layer of the OSI model is responsible for routing?",
            "options": [
                "Data Link Layer",
                "Network Layer",
                "Transport Layer",
                "Session Layer"
            ],
            "answer": "Network Layer",
            "explanation": "The Network Layer is responsible for determining the best path to route data from the source to the destination."
        },
        {
            "question": "Which of the following is a type of guided media?",
            "options": [
                "Microwaves",
                "Satellite",
                "Coaxial cable",
                "Radio waves"
            ],
            "answer": "Coaxial cable",
            "explanation": "Guided media involves guiding signals along a specific path like wires or cables. Coaxial cable is an example of this."
        },
        {
            "question": "Which device broadcasts data to every device in a network?",
            "options": [
                "Router",
                "Gateway",
                "Hub",
                "Switch"
            ],
            "answer": "Hub",
            "explanation": "A hub sends data to every device in a network, irrespective of the intended recipient."
        },
        {
            "question": "What is the main purpose of the OSI model?",
            "options": [
                "Data encryption",
                "Data compression",
                "Providing a standardized framework for network communication",
                "Speeding up network transmission"
            ],
            "answer": "Providing a standardized framework for network communication",
            "explanation": "The OSI model provides a standardized framework that describes the functions of a networking or telecommunication system."
        },
        {
            "question": "In which layer of the OSI model does encryption and decryption occur?",
            "options": [
                "Presentation Layer",
                "Session Layer",
                "Transport Layer",
                "Application Layer"
            ],
            "answer": "Presentation Layer",
            "explanation": "The Presentation Layer is responsible for translating, encrypting, and compressing data."
        },
        {
            "question": "Which protocol operates at the Transport layer of the OSI model?",
            "options": [
                "IP",
                "TCP",
                "ARP",
                "ICMP"
            ],
            "answer": "TCP",
            "explanation": "TCP (Transmission Control Protocol) operates at the Transport layer and ensures data is transmitted reliably between devices."
        },
        {
            "question": "Which of the following is not a network topology?",
            "options": [
                "Ring",
                "Star",
                "Array",
                "Mesh"
            ],
            "answer": "Array",
            "explanation": "Array isn't a network topology. Common topologies include ring, star, bus, and mesh."
        },
        {
            "question": "What does the term 'ping' mean in the context of networks?",
            "options": [
                "Data storage request",
                "Data download request",
                "Testing network connectivity",
                "Initiating a network shutdown"
            ],
            "answer": "Testing network connectivity",
            "explanation": "'Ping' is a network diagnostic tool used to test the connectivity between two nodes in a network."
        },
        {
            "question": "Which technology allows a computer to call another computer over a phone line?",
            "options": [
                "Ethernet",
                "Fiber optics",
                "Modem",
                "Coaxial cable"
            ],
            "answer": "Modem",
            "explanation": "A modem modulates and demodulates digital signals, allowing computers to communicate over telephone lines."
        },
        {
            "question": "Which protocol is used for transferring web pages on the internet?",
            "options": [
                "FTP",
                "SMTP",
                "HTTP",
                "POP3"
            ],
            "answer": "HTTP",
            "explanation": "HTTP stands for HyperText Transfer Protocol and is used to transfer web pages on the internet."
        },
        {
            "question": "Which of the following network devices operates only at Layer 1 (Physical layer) of the OSI model?",
            "options": [
                "Hub",
                "Switch",
                "Router",
                "Bridge"
            ],
            "answer": "Hub",
            "explanation": "A hub operates at the Physical layer (Layer 1) of the OSI model and simply broadcasts data to all devices in the network."
        },
        {
            "question": "What does NAT stand for in networking?",
            "options": [
                "Network Address Translator",
                "Network Application Terminal",
                "Natural Address Tracker",
                "Network Address Tracking"
            ],
            "answer": "Network Address Translator",
            "explanation": "NAT stands for Network Address Translator. It allows a single device, such as a router, to act as an agent between the public network and a local network, which means it can help multiple devices in a local network use a single public IP address."
        },
        {
            "question": "Which network topology is best suited for a scenario where system availability is critical?",
            "options": [
                "Bus",
                "Star",
                "Ring",
                "Mesh"
            ],
            "answer": "Mesh",
            "explanation": "In a mesh topology, every device is connected to every other device, providing multiple paths for data transmission. This redundancy means it's highly available and fault-tolerant."
        },
        {
            "question": "Which layer of the OSI model deals with the creation, management, and termination of sessions?",
            "options": [
                "Session Layer",
                "Presentation Layer",
                "Transport Layer",
                "Network Layer"
            ],
            "answer": "Session Layer",
            "explanation": "The Session Layer is responsible for setting up, maintaining, and terminating sessions between applications at both ends."
        },
        {
            "question": "What kind of network attack attempts to make a machine or network resource unavailable?",
            "options": [
                "Phishing",
                "Spoofing",
                "Man-in-the-middle",
                "Denial of Service"
            ],
            "answer": "Denial of Service",
            "explanation": "A Denial of Service (DoS) attack is an attempt to render a machine or network resource unavailable to users."
        },
        {
            "question": "How many types of personal area networks (PANs) are there?",
            "options": [
                "One",
                "Two",
                "Three",
                "Four"
            ],
            "answer": "Two",
            "explanation": "There are two main types of PANs: Wired PAN and Wireless PAN (WPAN). Within WPAN, there are various technologies like Bluetooth, ZigBee, UWB, and IrDA, but they all fall under the wireless category."
        },
        {
            "question": "What is the primary purpose of a subnet mask in IP addressing?",
            "options": [
                "Error correction",
                "Data compression",
                "Dividing IP addresses into network and host portions",
                "Encrypting data for security"
            ],
            "answer": "Dividing IP addresses into network and host portions",
            "explanation": "A subnet mask is used to specify which portion of an IP address is the network and which part can be used for hosts."
        },
        {
            "question": "Which protocol ensures reliable data delivery by establishing a connection?",
            "options": [
                "UDP",
                "HTTP",
                "ICMP",
                "TCP"
            ],
            "answer": "TCP",
            "explanation": "TCP (Transmission Control Protocol) ensures reliable data delivery by establishing a connection and using acknowledgments to confirm data receipt."
        },
        {
            "question": "Which device operates at the Data Link Layer of the OSI model to forward data based on MAC addresses?",
            "options": [
                "Router",
                "Hub",
                "Switch",
                "Modem"
            ],
            "answer": "Switch",
            "explanation": "Switches operate at the Data Link Layer (Layer 2) of the OSI model and use MAC addresses to forward data to the correct destination."
        },
        {
            "question": "Which of the following is used to convert domain names into IP addresses?",
            "options": [
                "DHCP",
                "ARP",
                "DNS",
                "RARP"
            ],
            "answer": "DNS",
            "explanation": "DNS (Domain Name System) is used to resolve domain names into IP addresses."
        },
        {
            "question": "Which wireless networking protocol is limited in range but offers high transfer speeds?",
            "options": [
                "Bluetooth",
                "LTE",
                "WiMAX",
                "Wi-Fi"
            ],
            "answer": "Bluetooth",
            "explanation": "Bluetooth has a shorter range compared to other wireless protocols, but it can offer high transfer speeds, especially in its recent versions."
        },
        {
            "question": "Which of the following topologies uses a centralized hub or switch to connect all devices?",
            "options": [
                "Ring",
                "Mesh",
                "Star",
                "Bus"
            ],
            "answer": "Star",
            "explanation": "In a star topology, all devices are connected to a central hub or switch."
        },
        {
            "question": "What is the standard port number for HTTP?",
            "options": [
                "21",
                "80",
                "25",
                "110"
            ],
            "answer": "80",
            "explanation": "The standard port number for HTTP (HyperText Transfer Protocol) is 80."
        },
        {
            "question": "Which of the following is NOT a type of network cabling?",
            "options": [
                "Coaxial",
                "Optical fiber",
                "RJ45",
                "Twisted pair"
            ],
            "answer": "RJ45",
            "explanation": "RJ45 is a type of connector commonly used with twisted pair cables, not a type of cabling itself."
        },
        {
            "question": "Which network architecture uses a peer model without dedicated servers?",
            "options": [
                "Client-server",
                "Peer-to-peer",
                "Master-slave",
                "Hub and spoke"
            ],
            "answer": "Peer-to-peer",
            "explanation": "In a peer-to-peer network, all devices function as both clients and servers, sharing resources directly without the need for a dedicated server."
        },
        {
            "question": "Who is known as the \"father of the computer\"?",
            "options": [
                "Bill Gates",
                "Alan Turing",
                "Charles Babbage",
                "John von Neumann"
            ],
            "answer": "Charles Babbage",
            "explanation": "Charles Babbage is often referred to as the \"father of the computer\" due to his design of the Analytical Engine in the 19th century, which laid the foundation for the development of the modern computer."
        },
        {
            "question": "What is the brain of any computer system?",
            "options": [
                "ALU",
                "CPU",
                "Memory",
                "Control unit"
            ],
            "answer": "CPU",
            "explanation": "The CPU (Central Processing Unit) is often considered the \"brain\" of the computer as it performs all basic arithmetic, logical, and input/output operations."
        },
        {
            "question": "What does RAM stand for?",
            "options": [
                "Random Application Memory",
                "Random Access Memory",
                "Readable Archive Memory",
                "Random Archive Memory"
            ],
            "answer": "Random Access Memory",
            "explanation": "RAM stands for Random Access Memory, which temporarily stores data being processed by the CPU."
        },
        {
            "question": "What is the full form of WWW?",
            "options": [
                "World Wide Web",
                "World Wide Window",
                "Wide World Web",
                "World Width Web"
            ],
            "answer": "World Wide Web",
            "explanation": "WWW stands for World Wide Web, which is an information system where documents and other web resources are identified by URLs."
        },
        {
            "question": "What does the 'IP' stand for in 'IP address'?",
            "options": [
                "Internet Protocol",
                "Internal Protocol",
                "Internet Provider",
                "Internal Path"
            ],
            "answer": "Internet Protocol",
            "explanation": "'IP' in 'IP address' stands for Internet Protocol. An IP address is an address used to identify a computer on a network."
        },
        {
            "question": "Which company created Windows?",
            "options": [
                "Apple",
                "Microsoft",
                "IBM",
                "Google"
            ],
            "answer": "Microsoft",
            "explanation": "Windows is an operating system created by Microsoft."
        },
        {
            "question": "Which of these is a search engine?",
            "options": [
                "Windows",
                "Google",
                "MS Office",
                "Python"
            ],
            "answer": "Google",
            "explanation": "Google is a search engine. It is used to search for information on the World Wide Web."
        },
        {
            "question": "Which device is used to process data in a computer?",
            "options": [
                "RAM",
                "Hard Drive",
                "CPU",
                "Modem"
            ],
            "answer": "CPU",
            "explanation": "The Central Processing Unit (CPU) processes data and instructions. It's the \"brain\" of the computer."
        },
        {
            "question": "Which of the following is considered non-volatile memory?",
            "options": [
                "RAM",
                "ROM",
                "Cache",
                "Registers"
            ],
            "answer": "ROM",
            "explanation": "Read-Only Memory (ROM) retains its data even after the computer is turned off, making it non-volatile."
        },
        {
            "question": "Which software serves as the interface between the user and hardware?",
            "options": [
                "Operating System",
                "Application Software",
                "Utility Software",
                "Word Processor"
            ],
            "answer": "Operating System",
            "explanation": "The Operating System (OS) manages hardware resources and provides services for computer programs."
        },
        {
            "question": "What does the acronym 'URL' stand for?",
            "options": [
                "Uniform Resource Locator",
                "Universal Retrieval Language",
                "Uniform Retrieval Locator",
                "Universal Resource Language"
            ],
            "answer": "Uniform Resource Locator",
            "explanation": "URL is the address used to access web pages on the Internet."
        },
        {
            "question": "Which of the following devices provides an input to the computer?",
            "options": [
                "Speaker",
                "Monitor",
                "Keyboard",
                "RAM"
            ],
            "answer": "Keyboard",
            "explanation": "The keyboard is used to input data into a computer."
        },
        {
            "question": "In which type of computer is data represented as pulses of light?",
            "options": [
                "Digital Computer",
                "Analog Computer",
                "Hybrid Computer",
                "Optical Computer"
            ],
            "answer": "Optical Computer",
            "explanation": "Optical computers use light particles called photons for processing data."
        },
        {
            "question": "Which protocol is used for sending email?",
            "options": [
                "FTP",
                "HTTP",
                "SMTP",
                "UDP"
            ],
            "answer": "SMTP",
            "explanation": "Simple Mail Transfer Protocol (SMTP) is used to send emails."
        },
        {
            "question": "Which device allows multiple computers to connect to a single Internet connection?",
            "options": [
                "Switch",
                "Hub",
                "Modem",
                "Router"
            ],
            "answer": "Router",
            "explanation": "A router directs traffic on the internet and allows multiple devices to share a single internet connection."
        },
        {
            "question": "Which language is used for creating web pages?",
            "options": [
                "Python",
                "SQL",
                "HTML",
                "Java"
            ],
            "answer": "HTML",
            "explanation": "HyperText Markup Language (HTML) is the standard language used to create and design web pages."
        },
        {
            "question": "What does 'GUI' in computer terminology stand for?",
            "options": [
                "General Unified Interface",
                "Graphical User Interface",
                "General User Interface",
                "Graphical Unified Interface"
            ],
            "answer": "Graphical User Interface",
            "explanation": "GUI allows users to interact with electronic devices through graphical icons and audio indicators."
        },
        {
            "question": "Which of the following storage devices uses magnetic fields to store data?",
            "options": [
                "SSD",
                "Flash Drive",
                "Hard Disk Drive",
                "Optical Drive"
            ],
            "answer": "Hard Disk Drive",
            "explanation": "Hard Disk Drives (HDDs) use magnetic fields to store and retrieve data."
        },
        {
            "question": "What does 'BIOS' stand for in computer terminology?",
            "options": [
                "Binary Input Output System",
                "Basic Input Output System",
                "Base Input Output Set",
                "Basic Integrated Operating System"
            ],
            "answer": "Basic Input Output System",
            "explanation": "BIOS is firmware used to perform hardware initialization during the booting process."
        },
        {
            "question": "Which of these is not an operating system?",
            "options": [
                "Ubuntu",
                "Photoshop",
                "Windows",
                "macOS"
            ],
            "answer": "Photoshop",
            "explanation": "Photoshop is a graphic design and image editing software, not an operating system."
        },
        {
            "question": "What is the primary purpose of an operating system?",
            "options": [
                "Run desktop applications",
                "Connect to the internet",
                "Manage hardware and software resources",
                "Protect against viruses"
            ],
            "answer": "Manage hardware and software resources",
            "explanation": "The operating system manages both hardware (like the CPU, memory, disk drives) and software (like applications and files) resources of a computer."
        },
        {
            "question": "Which device is used to back up the data of your computer’s primary storage in a non-volatile manner?",
            "options": [
                "RAM",
                "Processor",
                "External Hard Drive",
                "Graphics Card"
            ],
            "answer": "External Hard Drive",
            "explanation": "An External Hard Drive can be used to store a copy of your computer's primary data for backup purposes."
        },
        {
            "question": "What is the primary difference between RAM and ROM?",
            "options": [
                "RAM is volatile; ROM is non-volatile",
                "RAM can store more data than ROM",
                "ROM is used to process data; RAM isn’t",
                "RAM is slower than ROM"
            ],
            "answer": "RAM is volatile; ROM is non-volatile",
            "explanation": "RAM loses its data when the computer is turned off, while ROM retains its data."
        },
        {
            "question": "Which of the following is not an input device?",
            "options": [
                "Keyboard",
                "Mouse",
                "Monitor",
                "Scanner"
            ],
            "answer": "Monitor",
            "explanation": "A monitor is an output device used to display information to the user."
        },
        {
            "question": "Which programming language is known as the 'mother of all languages'?",
            "options": [
                "C",
                "Fortran",
                "Cobol",
                "Assembly Language"
            ],
            "answer": "Assembly Language",
            "explanation": "Assembly language is a low-level programming language that is a close representation of machine code instructions for a computer."
        },
        {
            "question": "19. In the context of data storage, what does the acronym 'CD' stand for?",
            "options": [
                "Compact Disk",
                "Computer Drive",
                "Central Database",
                "Compressed Data"
            ],
            "answer": "Compact Disk",
            "explanation": "A Compact Disk (CD) is an optical disc used to store digital data."
        },
        {
            "question": "Which of the following is a primary function of the ALU (Arithmetic Logic Unit)?",
            "options": [
                "Manage the computer’s memory",
                "Connect the computer to the internet",
                "Perform arithmetic and logical operations",
                "Coordinate tasks between application software"
            ],
            "answer": "Perform arithmetic and logical operations",
            "explanation": "The ALU is responsible for performing arithmetic and logical operations in the CPU."
        },
        {
            "question": "Which of the following file extensions indicates a picture file?",
            "options": [
                ".mp3",
                ".jpg",
                ".doc",
                ".xls"
            ],
            "answer": ".jpg",
            "explanation": "The .jpg (or .jpeg) extension indicates a JPEG image file."
        },
        {
            "question": "What is the primary function of the computer's motherboard?",
            "options": [
                "Display graphics",
                "Provide audio output",
                "Serve as the main circuit board",
                "Store data long-term"
            ],
            "answer": "Serve as the main circuit board",
            "explanation": "The motherboard serves as the main circuit board that houses the CPU, RAM, and other essential components."
        },
        {
            "question": "Which computer network is specific to a single organization or business?",
            "options": [
                "Internet",
                "WAN",
                "Intranet",
                "Extranet"
            ],
            "answer": "Intranet",
            "explanation": "An Intranet is a private network specific to an organization or business."
        },
        {
            "question": "What does the acronym 'VGA' stand for in computer graphics?",
            "options": [
                "Visual Graphics Array",
                "Video Graphical Adapter",
                "Visual Graphical Adapter",
                "Video Graphics Array"
            ],
            "answer": "Video Graphics Array",
            "explanation": "VGA is a graphics standard for video display controller."
        },
        {
            "question": "Which device connects computers and allows them to talk to each other within a small local area such as a home or office?",
            "options": [
                "Router",
                "Switch",
                "Modem",
                "Firewall"
            ],
            "answer": "Switch",
            "explanation": "A switch is used to connect devices within a local area network (LAN) and allows them to communicate with each other."
        },
        {
            "question": "Which part of the computer temporarily holds program instructions and data?",
            "options": [
                "Hard Drive",
                "CPU",
                "RAM",
                "ROM"
            ],
            "answer": "RAM",
            "explanation": "RAM (Random Access Memory) temporarily holds data and instructions that the CPU can access quickly. It's volatile, meaning data is lost when the power is turned off."
        },
        {
            "question": "Which component performs all the arithmetic and logical operations?",
            "options": [
                "ALU (Arithmetic Logic Unit)",
                "Control Unit",
                "Memory Unit",
                "Cache"
            ],
            "answer": "ALU (Arithmetic Logic Unit)",
            "explanation": "The ALU is responsible for all arithmetic and logical operations. It's a core component of the CPU."
        },
        {
            "question": "Which of the following is a non-volatile memory?",
            "options": [
                "RAM",
                "Cache",
                "DRAM",
                "ROM"
            ],
            "answer": "ROM",
            "explanation": "ROM (Read-Only Memory) retains its contents even when the power is turned off, making it non-volatile."
        },
        {
            "question": "Pipelining is a technique where:",
            "options": [
                "Multiple instructions are executed in a sequence",
                "Multiple instructions are executed in parallel",
                "The CPU frequency is increased",
                "Cache memory is cleared regularly"
            ],
            "answer": "Multiple instructions are executed in parallel",
            "explanation": "Pipelining divides instruction processing into stages, with each stage being handled by a different segment of the CPU. It allows for increased throughput as multiple instructions can be processed simultaneously."
        },
        {
            "question": "What is the primary purpose of cache memory?",
            "options": [
                "Provide backup storage",
                "Speed up data access for the CPU",
                "Store the operating system",
                "Connect peripheral devices"
            ],
            "answer": "Speed up data access for the CPU",
            "explanation": "Cache memory provides high-speed volatile storage accessible to the CPU. It stores frequently used data, making data access faster compared to accessing the main memory."
        },
        {
            "question": "In which architecture is the data bus width different from the address bus width?",
            "options": [
                "Von Neumann Architecture",
                "Harvard Architecture",
                "SIMD",
                "RISC"
            ],
            "answer": "Harvard Architecture",
            "explanation": "In Harvard Architecture, the data bus and address bus have separate pathways, allowing different widths and potentially simultaneous access."
        },
        {
            "question": "Which architecture focuses on executing many instructions simultaneously?",
            "options": [
                "Pipelined Architecture",
                "MIMD (Multiple Instruction, Multiple Data)",
                "SIMD (Single Instruction, Multiple Data)",
                "RISC (Reduced Instruction Set Computing)"
            ],
            "answer": "MIMD (Multiple Instruction, Multiple Data)",
            "explanation": "MIMD architecture allows for multiple instructions on multiple data sets to be executed in parallel."
        },
        {
            "question": "Which of the following is NOT a characteristic of RISC (Reduced Instruction Set Computing)?",
            "options": [
                "Simple instructions",
                "Large set of complex instructions",
                "Emphasis on software",
                "Fixed instruction format"
            ],
            "answer": "Large set of complex instructions",
            "explanation": "RISC focuses on a smaller set of simple instructions, aiming for faster performance."
        },
        {
            "question": "Which level of cache memory is closest to the CPU?",
            "options": [
                "L1 cache",
                "L2 cache",
                "L3 cache",
                "RAM"
            ],
            "answer": "L1 cache",
            "explanation": "L1 cache is integrated within the CPU chip itself and is the fastest but also the smallest."
        },
        {
            "question": "Which of the following is a primary function of the Control Unit?",
            "options": [
                "Perform arithmetic operations",
                "Direct the operation of the processor",
                "Store data and instructions",
                "Enhance graphics"
            ],
            "answer": "Direct the operation of the processor",
            "explanation": "The Control Unit manages and coordinates the activities of the computer. It directs the operation of the processor."
        },
        {
            "question": "Fetch, Decode, and Execute are phases of:",
            "options": [
                "Pipelining",
                "Multithreading",
                "The Instruction Cycle",
                "Direct Memory Access"
            ],
            "answer": "The Instruction Cycle",
            "explanation": "The Instruction Cycle, often referred to as the fetch-decode-execute cycle, represents the steps a computer takes to retrieve, understand, and enact instructions."
        },
        {
            "question": "Which of the following storage devices can store maximum data?",
            "options": [
                "CD-ROM",
                "Blu-ray Disc",
                "DVD",
                "Floppy Disk"
            ],
            "answer": "Blu-ray Disc",
            "explanation": "Among the given options, a Blu-ray Disc has the highest storage capacity, often ranging from 25GB to 128GB, depending on the number of layers."
        },
        {
            "question": "In which memory is the data lost when the computer is turned off?",
            "options": [
                "ROM",
                "Hard Drive",
                "RAM",
                "SSD"
            ],
            "answer": "RAM",
            "explanation": "RAM is volatile memory, meaning its contents are lost when the power is turned off."
        },
        {
            "question": "Which type of memory is used to store BIOS?",
            "options": [
                "RAM",
                "ROM",
                "Cache",
                "DRAM"
            ],
            "answer": "ROM",
            "explanation": "BIOS (Basic Input/Output System) is stored in ROM, specifically in a type called EEPROM (Electrically Erasable Programmable Read-Only Memory)."
        },
        {
            "question": "Parallel processing is a feature of:",
            "options": [
                "Von Neumann Architecture",
                "SIMD",
                "Harvard Architecture",
                "MIMD"
            ],
            "answer": "MIMD",
            "explanation": "MIMD (Multiple Instruction, Multiple Data) involves multiple processors executing different instructions on different data simultaneously."
        },
        {
            "question": "Which of the following is a type of RAM?",
            "options": [
                "CD-ROM",
                "SSD",
                "SRAM",
                "Blu-ray Disc"
            ],
            "answer": "SRAM",
            "explanation": "SRAM (Static Random Access Memory) is a type of RAM that holds its content until power is connected, without the need for refreshing, unlike DRAM."
        },
        {
            "question": "Which component connects the CPU to other parts of the computer?",
            "options": [
                "RAM",
                "Bus",
                "ALU",
                "Register"
            ],
            "answer": "Bus",
            "explanation": "The bus acts as a communication system for transferring data between the CPU and other components such as RAM, hard drives, and I/O devices."
        },
        {
            "question": "Little-endian and big-endian are terms related to:",
            "options": [
                "Data bus width",
                "CPU clock speed",
                "Data storage format",
                "Cache size"
            ],
            "answer": "Data storage format",
            "explanation": "Little-endian and big-endian refer to byte ordering or how multibyte data is stored in memory. In little-endian, the least significant byte is stored first, while in big-endian, the most significant byte is stored first."
        },
        {
            "question": "What is the function of the registers in a CPU?",
            "options": [
                "Store the operating system",
                "Connect peripheral devices",
                "Provide backup storage",
                "Hold data temporarily for processing"
            ],
            "answer": "Hold data temporarily for processing",
            "explanation": "Registers are small, fast storage locations within the CPU that temporarily hold data and instructions that are being used by the ALU."
        },
        {
            "question": "The term \"clock cycle\" refers to:",
            "options": [
                "The speed of the RAM",
                "The refresh rate of the monitor",
                "A single oscillation of the CPU's clock",
                "The speed of the GPU"
            ],
            "answer": "A single oscillation of the CPU's clock",
            "explanation": "A clock cycle is a single oscillation or pulse of the CPU's clock. It represents the time taken to execute a basic operation."
        },
        {
            "question": "Which of the following is a secondary storage device?",
            "options": [
                "RAM",
                "Cache",
                "Hard Drive",
                "Register"
            ],
            "answer": "Hard Drive",
            "explanation": "Hard drives are secondary storage devices that store data permanently. They're non-volatile and retain data even when the power is turned off."
        },
        {
            "question": "What does ISA stand for in computer architecture?",
            "options": [
                "Integrated Service Architecture",
                "Internal Storage Algorithm",
                "Instruction Set Architecture",
                "Integrated System Application"
            ],
            "answer": "Instruction Set Architecture",
            "explanation": "ISA (Instruction Set Architecture) represents the part of a computer's architecture related to programming, including the native data types, instructions, registers, and memory addressing."
        },
        {
            "question": "Which of the following architectures relies heavily on parallel execution units?",
            "options": [
                "CISC (Complex Instruction Set Computing)",
                "RISC (Reduced Instruction Set Computing)",
                "EPIC (Explicitly Parallel Instruction Computing)",
                "MISC (Minimal Instruction Set Computing)"
            ],
            "answer": "EPIC (Explicitly Parallel Instruction Computing)",
            "explanation": "EPIC focuses on using parallel processing. Instructions are scheduled by the compiler, and the architecture uses multiple execution units to process instructions simultaneously."
        },
        {
            "question": "Which of the following terms is associated with \"powering up\" a computer system?",
            "options": [
                "Hibernate",
                "Reboot",
                "Booting",
                "Logging off"
            ],
            "answer": "Booting",
            "explanation": "Booting refers to the process of loading the operating system into RAM when a computer is powered on or restarted."
        },
        {
            "question": "Virtual memory is:",
            "options": [
                "Physical memory used by the GPU",
                "A memory management capability that uses hardware and software to enable a computer to compensate for physical memory shortages",
                "A type of non-volatile RAM",
                "Memory used by the BIOS"
            ],
            "answer": "A memory management capability that uses hardware and software to enable a computer to compensate for physical memory shortages",
            "explanation": "Virtual memory allows a computer to use hard disk space as an extension of RAM. When RAM is full, data that isn't immediately needed is temporarily moved to the hard disk."
        }
    ],
    "Linux": [
        {
            "question": "Which command is used to display the contents of a file?",
            "options": [
                "show",
                "display",
                "print",
                "cat"
            ],
            "answer": "cat",
            "explanation": "The ‘cat’ command is used to display the contents of a file."
        },
        {
            "question": "Which of the following is the Linux command to change directories?",
            "options": [
                "chdir",
                "move",
                "cd",
                "dirchg"
            ],
            "answer": "cd",
            "explanation": "The ‘cd’ command is used to change directories."
        },
        {
            "question": "What is the default shell in Linux?",
            "options": [
                "bash",
                "sh",
                "ksh",
                "csh"
            ],
            "answer": "bash",
            "explanation": "The ‘bash’ or Bourne Again SHell is the default shell for most Linux distributions."
        },
        {
            "question": "Which command will display the current working directory?",
            "options": [
                "pwd",
                "cwd",
                "dir",
                "list"
            ],
            "answer": "pwd",
            "explanation": "The ‘pwd’ command displays the present working directory."
        },
        {
            "question": "How do you list the hidden files in a directory?",
            "options": [
                "ls",
                "ls -a",
                "dir /hidden",
                "ls -h"
            ],
            "answer": "ls -a",
            "explanation": "The ‘ls -a’ command lists all files, including hidden ones."
        },
        {
            "question": "Which symbol represents the root directory in Linux?",
            "options": [
                "/",
                "\\",
                "~",
                "!"
            ],
            "answer": "/",
            "explanation": "In Linux, the root directory is represented by a forward slash (/)."
        },
        {
            "question": "Which command is used to remove a directory?",
            "options": [
                "rmdir",
                "remove",
                "del",
                "delete"
            ],
            "answer": "rmdir",
            "explanation": "The ‘rmdir’ command is used to remove empty directories."
        },
        {
            "question": "How do you print the first 10 lines of a file named ‘file.txt’?",
            "options": [
                "head -10 file.txt",
                "first -10 file.txt",
                "cat -10 file.txt",
                "print -10 file.txt"
            ],
            "answer": "head -10 file.txt",
            "explanation": "The ‘head’ command with the ‘-10’ option prints the first 10 lines of the specified file."
        },
        {
            "question": "Which command displays a file’s type?",
            "options": [
                "showtype",
                "displaytype",
                "cattype",
                "file"
            ],
            "answer": "file",
            "explanation": "The ‘file’ command is used to determine the type of a file."
        },
        {
            "question": "What is the command to search for a pattern in a file?",
            "options": [
                "search",
                "find",
                "grep",
                "locate"
            ],
            "answer": "grep",
            "explanation": "The ‘grep’ command searches files for a specified pattern."
        },
        {
            "question": "Which command is used to see the running processes in Linux?",
            "options": [
                "process",
                "run",
                "top",
                "exec"
            ],
            "answer": "top",
            "explanation": "The ‘top’ command displays a live, updating view of the running processes."
        },
        {
            "question": "What does the command chmod 777 filename do?",
            "options": [
                "Changes the owner of the file",
                "Deletes the file",
                "Gives read, write, and execute permissions to everyone for that file",
                "Hides the file"
            ],
            "answer": "Gives read, write, and execute permissions to everyone for that file",
            "explanation": "The chmod 777 command gives all permissions (read, write, and execute) to the owner, the group, and everyone else."
        },
        {
            "question": "Which command is used to find files in a directory?",
            "options": [
                "locate",
                "search",
                "find",
                "list"
            ],
            "answer": "find",
            "explanation": "The ‘find’ command is used to search and locate the list of files and directories based on conditions."
        },
        {
            "question": "How do you display the last ten lines of a file in Linux?",
            "options": [
                "bottom",
                "last",
                "tail",
                "end"
            ],
            "answer": "tail",
            "explanation": "The ‘tail’ command by default shows the last ten lines of a file."
        },
        {
            "question": "Which command is used to create a symbolic link?",
            "options": [
                "symb",
                "link",
                "ln",
                "connect"
            ],
            "answer": "ln",
            "explanation": "The ‘ln’ command is used to create links between files. The ‘-s’ option creates a symbolic link."
        },
        {
            "question": "How do you display your Linux system information?",
            "options": [
                "info",
                "uname -a",
                "version",
                "details"
            ],
            "answer": "uname -a",
            "explanation": "The uname -a command displays all the system information, including machine name, OS, kernel, etc."
        },
        {
            "question": "Which command is used to stop a process in Linux?",
            "options": [
                "stop",
                "halt",
                "kill",
                "terminate"
            ],
            "answer": "kill",
            "explanation": "The ‘kill’ command is used to terminate a process manually."
        },
        {
            "question": "What does the man command do?",
            "options": [
                "Manages directories",
                "Provides documentation or manual pages",
                "Manages users",
                "Monitors system performance"
            ],
            "answer": "Provides documentation or manual pages",
            "explanation": "The man command in Linux is used to display the user manual of any command that we can run on the terminal."
        },
        {
            "question": "What command can replace characters in a file?",
            "options": [
                "rep",
                "change",
                "sed",
                "swap"
            ],
            "answer": "sed",
            "explanation": "The ‘sed’ command, also known as stream editor, can be used to perform basic text transformations on an input stream (a file or input from a pipeline)."
        },
        {
            "question": "Which command shows disk usage?",
            "options": [
                "du",
                "disk",
                "space",
                "usage"
            ],
            "answer": "du",
            "explanation": "The ‘du’ (Disk Usage) command is used to check the directory size in Linux."
        },
        {
            "question": "What is the primary role of the sudo command?",
            "options": [
                "To run processes in the background",
                "To provide manual pages for commands",
                "To execute a command as another user, typically the superuser",
                "To search for files in a directory"
            ],
            "answer": "To execute a command as another user, typically the superuser",
            "explanation": "The sudo command allows a permitted user to execute a command as the superuser or another user, as specified in the sudoers file."
        },
        {
            "question": "What is the purpose of the ls command?",
            "options": [
                "To list the processes running on the system",
                "To show the file size of a given file",
                "To display the contents of a file",
                "To list files in a directory"
            ],
            "answer": "To list files in a directory",
            "explanation": "The ls command is commonly used to list the files and directories in the current working directory."
        },
        {
            "question": "How do you search for a specific word within a file?",
            "options": [
                "lookup",
                "grep",
                "seek",
                "findword"
            ],
            "answer": "grep",
            "explanation": "The grep command is used to search for specific text or patterns in a file."
        },
        {
            "question": "If you want to repeat the last command in Linux, what would you type?",
            "options": [
                "replay",
                "!!",
                "repeat",
                "redo"
            ],
            "answer": "!!",
            "explanation": "Typing !! in the terminal and pressing enter will execute the last command."
        },
        {
            "question": "How would you compress files using the Linux command line?",
            "options": [
                "compress",
                "minify",
                "gzip",
                "squeeze"
            ],
            "answer": "gzip",
            "explanation": "The gzip command is used to compress files. The files will then have a “.gz” extension."
        },
        {
            "question": "Which command can you use to change the permissions of a file?",
            "options": [
                "chown",
                "chmod",
                "chgroup",
                "chperm"
            ],
            "answer": "chmod",
            "explanation": "The chmod command is used to change the permissions of a file or directory."
        }
    ],
    "Software Testing": [
        {
            "question": "What is the main objective of software testing?",
            "options": [
                "Debugging the code",
                "Deploying the application",
                "Validating that software meets requirements and detecting defects",
                "Writing documentation"
            ],
            "answer": "Validating that software meets requirements and detecting defects",
            "explanation": "The primary goal of software testing is to ensure the software meets its specified requirements and to identify any defects or discrepancies between the actual and expected results."
        },
        {
            "question": "Which of the following testing types focuses on the functionality of the software?",
            "options": [
                "Performance Testing",
                "Usability Testing",
                "Functional Testing",
                "Security Testing"
            ],
            "answer": "Functional Testing",
            "explanation": "Functional testing is concerned with verifying that the software functions according to the defined requirements and specifications."
        },
        {
            "question": "What is a \"test case\"?",
            "options": [
                "A specific condition to determine the correctness of software",
                "A piece of code developers write",
                "A type of bug or defect",
                "The environment where testing is performed"
            ],
            "answer": "A specific condition to determine the correctness of software",
            "explanation": "A test case is a set of conditions or variables under which a tester determines whether a system under test satisfies requirements or works correctly."
        },
        {
            "question": "Which of the following is NOT a level of software testing?",
            "options": [
                "Unit Testing",
                "Integration Testing",
                "System Testing",
                "Requirement Testing"
            ],
            "answer": "Requirement Testing",
            "explanation": "Requirement Testing isn't a recognized level of software testing. The main levels of testing include Unit, Integration, and System Testing."
        },
        {
            "question": "In which phase of the SDLC is testing done?",
            "options": [
                "Requirement Gathering",
                "Design",
                "Coding",
                "Testing"
            ],
            "answer": "Testing",
            "explanation": "Testing is a distinct phase in the Software Development Life Cycle (SDLC). After coding is complete, the software moves to the testing phase where it undergoes various types of tests."
        },
        {
            "question": "Which type of testing focuses on testing the software for potential security vulnerabilities?",
            "options": [
                "Functional Testing",
                "Security Testing",
                "Usability Testing",
                "Compatibility Testing"
            ],
            "answer": "Security Testing",
            "explanation": "Security testing aims to uncover vulnerabilities, threats, and risks in a software application and prevent malicious attacks."
        },
        {
            "question": "What does \"Regression Testing\" involve?",
            "options": [
                "Testing a regression model in statistics",
                "Testing only the new features in software",
                "Testing to ensure that previously developed and tested software still functions after a change",
                "Testing the first version of a software"
            ],
            "answer": "Testing to ensure that previously developed and tested software still functions after a change",
            "explanation": "Regression Testing is conducted after modifications (like bug fixes or new features) to ensure that recent changes haven't adversely affected existing features."
        },
        {
            "question": "Which type of testing is carried out by the development team?",
            "options": [
                "Alpha Testing",
                "Beta Testing",
                "Acceptance Testing",
                "White Box Testing"
            ],
            "answer": "White Box Testing",
            "explanation": "White Box Testing (or Glass Box Testing) is carried out by the developers, as it involves testing the internal structures or workings of an application, which is typically known to the developers."
        },
        {
            "question": "What is \"Black Box Testing\"?",
            "options": [
                "Testing the external behavior of a program",
                "Testing by developers",
                "Testing based on the color of the box",
                "A type of performance testing"
            ],
            "answer": "Testing the external behavior of a program",
            "explanation": "Black Box Testing focuses on testing the software's functionality without any knowledge of its internal workings or logic."
        },
        {
            "question": "Which testing is done to ensure the software works for the intended audience?",
            "options": [
                "Usability Testing",
                "Security Testing",
                "Performance Testing",
                "Integration Testing"
            ],
            "answer": "Usability Testing",
            "explanation": "Usability Testing evaluates the software's user-friendliness and overall user experience, ensuring it is effective, efficient, and satisfying for the intended audience."
        },
        {
            "question": "What type of testing checks the software's performance under load?",
            "options": [
                "Load Testing",
                "Functional Testing",
                "Unit Testing",
                "Acceptance Testing"
            ],
            "answer": "Load Testing",
            "explanation": "Load Testing checks how the system behaves under a specific load, ensuring it can maintain good performance and responsiveness."
        },
        {
            "question": "What is the main purpose of \"Stress Testing\"?",
            "options": [
                "To test the software with insufficient resources",
                "To ensure software works in a stressed environment",
                "To check if the software can be easily hacked",
                "To ensure software works on different devices"
            ],
            "answer": "To test the software with insufficient resources",
            "explanation": "Stress Testing involves subjecting the software to conditions beyond its specifications to evaluate its behavior under adverse conditions, such as insufficient memory or disk space."
        },
        {
            "question": "Which of the following is a non-functional testing type?",
            "options": [
                "Integration Testing",
                "Unit Testing",
                "Usability Testing",
                "Alpha Testing"
            ],
            "answer": "Usability Testing",
            "explanation": "Non-functional testing checks non-functional aspects of software like usability, performance, and reliability. Usability Testing is one such type."
        },
        {
            "question": "Who typically conducts \"Beta Testing\"?",
            "options": [
                "Developers",
                "Testers",
                "End Users",
                "Managers"
            ],
            "answer": "End Users",
            "explanation": "Beta Testing is usually done by a select group of end-users before the software's final release to ensure it meets users' needs and is free of major issues."
        },
        {
            "question": "What is a \"Test Suite\"?",
            "options": [
                "A collection of software tools for testing",
                "A collection of defects found during testing",
                "A collection of test cases",
                "A room where testers work"
            ],
            "answer": "A collection of test cases",
            "explanation": "A Test Suite is a collection of test cases that are intended to be used to test a software program to ensure it meets certain standards and works as expected."
        },
        {
            "question": "Which of the following describes \"Exploratory Testing\"?",
            "options": [
                "Following a strict script",
                "Testing without a plan or documentation",
                "Only testing the most important features",
                "Exploring the software's source code"
            ],
            "answer": "Testing without a plan or documentation",
            "explanation": "Exploratory Testing involves testers actively exploring the application without a strict script, simultaneously designing and executing tests based on their findings."
        },
        {
            "question": "What is \"Sanity Testing\"?",
            "options": [
                "Checking the logical sanity of the software's code",
                "A test to check the stability of software under stress",
                "A quick test to determine if a particular software function is working",
                "Detailed and comprehensive testing"
            ],
            "answer": "A quick test to determine if a particular software function is working",
            "explanation": "Sanity Testing is done to ensure that a particular function or section of an application is working as expected, typically after a minor change."
        },
        {
            "question": "What is the primary goal of \"Compatibility Testing\"?",
            "options": [
                "Ensure software works on different devices and environments",
                "Check if software is compatible with previous versions",
                "Ensure software is compatible with other software products",
                "Check the software's compatibility with user requirements"
            ],
            "answer": "Ensure software works on different devices and environments",
            "explanation": "Compatibility Testing aims to ensure that software can run on different devices, operating systems, network environments, or browsers."
        },
        {
            "question": "Which testing type focuses on a single module or unit of code?",
            "options": [
                "System Testing",
                "Integration Testing",
                "Unit Testing",
                "Acceptance Testing"
            ],
            "answer": "Unit Testing",
            "explanation": "Unit Testing focuses on individual units or components of a software to validate that each unit functions correctly."
        },
        {
            "question": "Which type of testing validates the end-to-end functioning of an application?",
            "options": [
                "Unit Testing",
                "System Testing",
                "Performance Testing",
                "Load Testing"
            ],
            "answer": "System Testing",
            "explanation": "System Testing validates the complete and fully integrated software product, ensuring that the entire application works in terms of functionality, performance, and more."
        },
        {
            "question": "Which testing type is done after \"System Testing\"?",
            "options": [
                "Unit Testing",
                "Acceptance Testing",
                "Integration Testing",
                "Load Testing"
            ],
            "answer": "Acceptance Testing",
            "explanation": "Acceptance Testing is done after System Testing to ensure that the system meets the acceptance criteria and is ready for delivery to the client or end-users."
        },
        {
            "question": "What is \"End-to-End Testing\"?",
            "options": [
                "Testing the frontend of an application",
                "Testing the backend of an application",
                "Testing a single feature from start to finish",
                "Testing the flow of an application from start to finish, including its interaction with external systems"
            ],
            "answer": "Testing the flow of an application from start to finish, including its interaction with external systems",
            "explanation": "End-to-End Testing validates the flow of an application, ensuring that the entire process of using the application works smoothly, including its interactions with databases, networks, and other services."
        },
        {
            "question": "Which of the following is a benefit of automated testing?",
            "options": [
                "It can replace manual testing entirely",
                "It is always more accurate than manual testing",
                "It can execute repetitive tasks and regression tests efficiently",
                "It understands the context of software"
            ],
            "answer": "It can execute repetitive tasks and regression tests efficiently",
            "explanation": "Automated testing is especially beneficial for executing repetitive tasks, regression tests, and scenarios that need to be run frequently, ensuring quicker and consistent results."
        },
        {
            "question": "What is \"Boundary Value Analysis\"?",
            "options": [
                "Testing within the boundaries of the software's code",
                "Testing the software's user interface",
                "Testing with values that are on the edge of acceptable limits",
                "Analyzing the highest values a software can handle"
            ],
            "answer": "Testing with values that are on the edge of acceptable limits",
            "explanation": "Boundary Value Analysis is a testing technique where test cases are designed to include values at the boundary. If there are boundaries at"
        },
        {
            "question": "What is a \"Defect\"?",
            "options": [
                "An intended functionality that developers forgot to implement",
                "A feature that users request after software deployment",
                "Any variance between the actual and expected result",
                "An external factor affecting the software"
            ],
            "answer": "Any variance between the actual and expected result",
            "explanation": "A defect, also known as a bug or fault, is any variance between the actual result produced by the software and the expected result, causing the software to behave in an unintended way."
        }
    ],
    "Object-Oriented Programming (OOP)": [
        {
            "question": "Which of the following is NOT one of the core concepts of OOP?",
            "options": [
                "Inheritance",
                "Polymorphism",
                "Abstraction",
                "Compilation"
            ],
            "answer": "Compilation",
            "explanation": "While compilation is a step in many programming languages, it is not one of the core concepts of OOP. The main concepts are Inheritance, Polymorphism, Abstraction, and Encapsulation."
        },
        {
            "question": "What is the process of wrapping data and code into a single unit?",
            "options": [
                "Inheritance",
                "Encapsulation",
                "Abstraction",
                "Polymorphism"
            ],
            "answer": "Encapsulation",
            "explanation": "Encapsulation refers to bundling the data (attributes) and methods (functions) that operate on the data into a single unit or class."
        },
        {
            "question": "Which of these is achieved by using the 'private' access specifier?",
            "options": [
                "Abstraction",
                "Encapsulation",
                "Inheritance",
                "Overloading"
            ],
            "answer": "Encapsulation",
            "explanation": "Using the 'private' access specifier restricts the visibility and accessibility of class members, ensuring that data is hidden from the outside world. This is a form of encapsulation."
        },
        {
            "question": "What do you call the process by which one class can inherit properties of another class?",
            "options": [
                "Encapsulation",
                "Polymorphism",
                "Abstraction",
                "Inheritance"
            ],
            "answer": "Inheritance",
            "explanation": "Inheritance allows a class (derived class) to inherit properties and behaviors (methods) from another class (base class)."
        },
        {
            "question": "What is the main advantage of abstraction?",
            "options": [
                "Faster code execution",
                "Hiding internal details and showing only the functionality",
                "Code reusability",
                "Easy debugging"
            ],
            "answer": "Hiding internal details and showing only the functionality",
            "explanation": "Abstraction focuses on hiding the internal complexities and showing only the necessary features of an object."
        },
        {
            "question": "In OOP, what is an instance of a class called?",
            "options": [
                "Variable",
                "Object",
                "Method",
                "Constructor"
            ],
            "answer": "Object",
            "explanation": "An object is an instance of a class, and it represents a real-world entity."
        },
        {
            "question": "Which of these can be overloaded?",
            "options": [
                "Methods",
                "Constants",
                "Objects",
                "Classes"
            ],
            "answer": "Methods",
            "explanation": "In OOP, especially in languages like Java and C++, methods can be overloaded, which means defining multiple methods with the same name but with different parameters."
        },
        {
            "question": "What specifies a contract that classes must adhere to?",
            "options": [
                "Polymorphism",
                "Abstraction",
                "Interface",
                "Encapsulation"
            ],
            "answer": "Interface",
            "explanation": "An interface defines a contract. Classes that implement an interface must provide implementations for the interface's declared methods."
        },
        {
            "question": "In which relationship is an object of one class a member of another class?",
            "options": [
                "Functional",
                "Inheritance",
                "Association",
                "Composition"
            ],
            "answer": "Composition",
            "explanation": "Composition is a type of relationship where one class contains an object of another class as a member."
        },
        {
            "question": "Which principle of OOP suggests using the most restricted access level for members?",
            "options": [
                "Polymorphism",
                "Encapsulation",
                "Inheritance",
                "Abstraction"
            ],
            "answer": "Encapsulation",
            "explanation": "Encapsulation recommends restricting the access to the internals of an object as much as possible. This is achieved by using private or protected access levels."
        },
        {
            "question": "Which concept allows for implementing two or more interfaces by a single class?",
            "options": [
                "Multithreading",
                "Multiprogramming",
                "Multiple Inheritance",
                "Abstraction"
            ],
            "answer": "Multiple Inheritance",
            "explanation": "Multiple Inheritance (though not supported directly in all languages) allows a class to implement more than one interface."
        },
        {
            "question": "What kind of polymorphism is achieved when a class overrides a base class method?",
            "options": [
                "Compile-time polymorphism",
                "Run-time polymorphism",
                "Static polymorphism",
                "Dynamic polymorphism"
            ],
            "answer": "Run-time polymorphism",
            "explanation": "Run-time (or dynamic) polymorphism is achieved through method overriding."
        },
        {
            "question": "A blueprint that defines properties and behaviors is called:",
            "options": [
                "Object",
                "Method",
                "Interface",
                "Class"
            ],
            "answer": "Class",
            "explanation": "A class is a blueprint for creating objects and defines attributes and methods."
        },
        {
            "question": "Which of the following terms refers to the hiding of data or methods from outside a class?",
            "options": [
                "Polymorphism",
                "Data hiding",
                "Inheritance",
                "Overloading"
            ],
            "answer": "Data hiding",
            "explanation": "Data hiding is a fundamental principle of OOP and refers to the concept of preventing access to certain parts of an object from outside the class."
        },
        {
            "question": "Which feature in OOP allows a class to have methods with the same name as those in its parent class?",
            "options": [
                "Method overloading",
                "Method riding",
                "Method overriding",
                "Method hiding"
            ],
            "answer": "Method overriding",
            "explanation": "Method overriding allows a subclass to provide a different implementation of a method that is already defined in its superclass."
        },
        {
            "question": "Which concept represents the \"IS-A\" relationship in OOP?",
            "options": [
                "Association",
                "Aggregation",
                "Inheritance",
                "Composition"
            ],
            "answer": "Inheritance",
            "explanation": "Inheritance establishes an \"IS-A\" relationship between the base class and the derived class."
        },
        {
            "question": "Which of the following terms refers to a real-world representation of an abstraction?",
            "options": [
                "Object",
                "Method",
                "Class",
                "Interface"
            ],
            "answer": "Object",
            "explanation": "An object is a tangible representation of a class, which is essentially an abstraction."
        },
        {
            "question": "If an attribute or method is defined as protected, where can it be accessed?",
            "options": [
                "Only in the same class",
                "In the same class and its subclasses",
                "In any class",
                "Only in subclasses"
            ],
            "answer": "In the same class and its subclasses",
            "explanation": "Protected members can be accessed within their own class and by subclasses."
        },
        {
            "question": "What OOP principle ensures that internal details of how an object works are hidden, presenting a clear and consistent external interface?",
            "options": [
                "Polymorphism",
                "Inheritance",
                "Encapsulation",
                "Abstraction"
            ],
            "answer": "Abstraction",
            "explanation": "Abstraction hides the complex reality while exposing only the necessary parts."
        },
        {
            "question": "Which concept can be used to model real-world relationships between a whole and its parts?",
            "options": [
                "Inheritance",
                "Association",
                "Aggregation",
                "Composition"
            ],
            "answer": "Composition",
            "explanation": "Composition is a strong “whole-part” relationship, where parts do not have a lifecycle outside of the whole."
        },
        {
            "question": "Which of the following is a mechanism by which base class can access overridden functions of its derived classes?",
            "options": [
                "Polymorphism",
                "Inheritance",
                "Encapsulation",
                "Overloading"
            ],
            "answer": "Polymorphism",
            "explanation": "Through polymorphism, a base class reference can be used to call an overridden method in a derived class."
        },
        {
            "question": "Constructors in OOP:",
            "options": [
                "Must always return a value.",
                "Are used to allocate memory.",
                "Are used to initialize an object.",
                "Can never be overloaded."
            ],
            "answer": "Are used to initialize an object.",
            "explanation": "Constructors are special methods in a class that get called automatically when an object of the class is created. They are mainly used for initialization purposes."
        }
    ],
    "Embedded Systems": [
        {
            "question": "What is an embedded system?",
            "options": [
                "A stand-alone computer system",
                "A system that performs a variety of computing tasks",
                "A dedicated system designed to perform a specific task",
                "A system embedded into a network"
            ],
            "answer": "A dedicated system designed to perform a specific task",
            "explanation": "An embedded system is a dedicated system that performs a specified function or set of functions."
        },
        {
            "question": "Which programming language is widely used in embedded system development?",
            "options": [
                "Python",
                "C",
                "JavaScript",
                "Ruby"
            ],
            "answer": "C",
            "explanation": "The C programming language is popular in embedded system development due to its efficiency and low-level access to memory."
        },
        {
            "question": "Which component is the heart of an embedded system?",
            "options": [
                "RAM",
                "Input Device",
                "Microcontroller",
                "Output Device"
            ],
            "answer": "Microcontroller",
            "explanation": "A microcontroller acts as the central unit in most embedded systems, integrating a processor, memory, and input/output peripherals."
        },
        {
            "question": "Which of the following best describes the software in an embedded system?",
            "options": [
                "General-purpose software",
                "Operating System",
                "Firmware",
                "Utility software"
            ],
            "answer": "Firmware",
            "explanation": "Embedded systems often run on firmware, which is software programmed directly onto hardware components."
        },
        {
            "question": "Which of the following is NOT a characteristic of embedded systems?",
            "options": [
                "Real-time operation",
                "Task-specific functionalities",
                "High storage capacity",
                "Optimized for power consumption"
            ],
            "answer": "High storage capacity",
            "explanation": "Embedded systems typically have limited storage capacity as they are designed for specific tasks."
        },
        {
            "question": "Embedded systems usually have __________ boot-up times.",
            "options": [
                "Long",
                "Moderate",
                "Short",
                "Variable"
            ],
            "answer": "Short",
            "explanation": "Due to their specific functionalities and optimized designs, embedded systems usually have short boot-up times."
        },
        {
            "question": "Which of the following is a popular Real-Time Operating System (RTOS) used in embedded systems?",
            "options": [
                "Windows 10",
                "Linux",
                "FreeRTOS",
                "macOS"
            ],
            "answer": "FreeRTOS",
            "explanation": "FreeRTOS is a real-time operating system kernel specifically designed for embedded devices."
        },
        {
            "question": "Embedded systems are generally __________.",
            "options": [
                "Re-programmable",
                "Non-reprogrammable",
                "Often connected to the internet",
                "Designed for multiple tasks"
            ],
            "answer": "Non-reprogrammable",
            "explanation": "While some embedded systems can be re-programmed, many are designed with a one-time programmable memory."
        },
        {
            "question": "In embedded systems, what does \"RTOS\" stand for?",
            "options": [
                "Remote Transfer Operating System",
                "Real-Time Operating Software",
                "Real-Time Operating System",
                "Rapid Transfer Operating System"
            ],
            "answer": "Real-Time Operating System",
            "explanation": "RTOS stands for Real-Time Operating System, which ensures real-time task management in embedded systems."
        },
        {
            "question": "Which feature is essential for an RTOS?",
            "options": [
                "Predictable response time",
                "High storage capability",
                "Multitasking capability",
                "Internet connectivity"
            ],
            "answer": "Predictable response time",
            "explanation": "An essential feature of an RTOS is its predictable response time to events, ensuring tasks meet their deadlines."
        },
        {
            "question": "Embedded systems are typically designed for:",
            "options": [
                "Broad functionalities",
                "User upgradability",
                "Specific applications",
                "General-purpose computing"
            ],
            "answer": "Specific applications",
            "explanation": "Embedded systems are dedicated systems designed to perform specific functions or tasks."
        },
        {
            "question": "Which type of memory is typically used for permanent storage in embedded systems?",
            "options": [
                "RAM",
                "ROM",
                "Cache",
                "DDR"
            ],
            "answer": "ROM",
            "explanation": "ROM (Read-Only Memory) is typically used for permanent storage in embedded systems as it retains data even without power."
        },
        {
            "question": "In the context of embedded systems, what does \"DSP\" stand for?",
            "options": [
                "Digital Signal Processor",
                "Dedicated System Protocol",
                "Device Specific Programming",
                "Digital Systems Programming"
            ],
            "answer": "Digital Signal Processor",
            "explanation": "DSP stands for Digital Signal Processor, commonly used in embedded systems for processing analog signals."
        },
        {
            "question": "Which of the following is NOT a primary component of an embedded system?",
            "options": [
                "Microcontroller",
                "Input device",
                "Graphics card",
                "Output device"
            ],
            "answer": "Graphics card",
            "explanation": "While some advanced embedded systems might use graphics processing, a graphics card is not a primary component in most embedded system designs."
        },
        {
            "question": "An advantage of embedded systems over general-purpose systems is:",
            "options": [
                "Higher processing power",
                "Greater versatility",
                "Lower cost",
                "Better multitasking"
            ],
            "answer": "Lower cost",
            "explanation": "Due to their dedicated functionality and optimized design, embedded systems are often less expensive than general-purpose systems."
        },
        {
            "question": "Which of the following best describes \"firmware\"?",
            "options": [
                "Hardware components of an embedded system",
                "Temporary software that is easy to modify",
                "Software that provides UI for embedded systems",
                "Software programmed directly onto hardware components"
            ],
            "answer": "Software programmed directly onto hardware components",
            "explanation": "Firmware is software that's written directly onto the hardware components, often stored in the ROM or flash memory of embedded systems."
        },
        {
            "question": "The primary purpose of an RTOS in an embedded system is to:",
            "options": [
                "Enhance the user interface",
                "Manage tasks in real-time",
                "Provide internet connectivity",
                "Boost the system's processing power"
            ],
            "answer": "Manage tasks in real-time",
            "explanation": "The primary function of an RTOS is to ensure that tasks are managed and executed in real-time, meeting specific deadlines."
        },
        {
            "question": "What kind of embedded system is used in washing machines and printers?",
            "options": [
                "Standalone embedded systems",
                "Mobile embedded systems",
                "Networked embedded systems",
                "Real-time embedded systems"
            ],
            "answer": "Standalone embedded systems",
            "explanation": "Standalone embedded systems operate independently without the need for host systems or computers."
        },
        {
            "question": "In the context of embedded systems, \"SoC\" stands for:",
            "options": [
                "Software of Communication",
                "System of Components",
                "System on Chip",
                "Software on Chip"
            ],
            "answer": "System on Chip",
            "explanation": "SoC or System on Chip integrates all components of an electronic system onto a single chip."
        },
        {
            "question": "Which of the following is an example of a real-time embedded system?",
            "options": [
                "Digital watch",
                "Microwave oven",
                "Airbag system in cars",
                "MP3 player"
            ],
            "answer": "Airbag system in cars",
            "explanation": "The airbag system in cars must react in real-time during an accident, making it a real-time embedded system."
        },
        {
            "question": "What is the primary storage type used for fast data access in embedded systems?",
            "options": [
                "Hard Disk Drive",
                "Flash Memory",
                "CD-ROM",
                "Magnetic Tape"
            ],
            "answer": "Flash Memory",
            "explanation": "Flash memory provides fast data access and is commonly used in embedded systems."
        },
        {
            "question": "What is the primary role of a watchdog timer in an embedded system?",
            "options": [
                "To boost performance",
                "To reset the system if it hangs",
                "To improve connectivity",
                "To update the firmware"
            ],
            "answer": "To reset the system if it hangs",
            "explanation": "A watchdog timer monitors the system and can reset it if it becomes unresponsive or hangs."
        },
        {
            "question": "Which of these best describes the difference between an embedded OS and desktop OS?",
            "options": [
                "Embedded OS is more versatile",
                "Desktop OS is used in mobile devices",
                "Embedded OS is tailored for specific tasks",
                "Desktop OS has limited functionality"
            ],
            "answer": "Embedded OS is tailored for specific tasks",
            "explanation": "Embedded OS is designed for specific functions in dedicated systems, whereas a desktop OS is versatile and supports a wide range of applications."
        },
        {
            "question": "An embedded system's lifecycle is typically:",
            "options": [
                "Shorter than that of general-purpose systems",
                "Longer than that of general-purpose systems",
                "Same as that of general-purpose systems",
                "Unpredictable"
            ],
            "answer": "Longer than that of general-purpose systems",
            "explanation": "Embedded systems are designed for longevity and often last longer than general-purpose systems."
        },
        {
            "question": "A common challenge in embedded system design is:",
            "options": [
                "High power consumption",
                "Resource constraints",
                "Easy upgradability",
                "High storage requirements"
            ],
            "answer": "Resource constraints",
            "explanation": "Due to their specific nature and optimization requirements, embedded systems often operate under tight resource constraints, including memory, processing power, and storage."
        }
    ],
    "Artificial Intelligence": [
        {
            "question": "What is Artificial Intelligence?",
            "options": [
                "Replicating human intelligence in machines",
                "Using algorithms to sort data",
                "Programming computers to play games",
                "Building robots"
            ],
            "answer": "Replicating human intelligence in machines",
            "explanation": "AI aims to create systems that can perform tasks that would typically require human intelligence."
        },
        {
            "question": "Which of the following is NOT a subfield of AI?",
            "options": [
                "Neural Networks",
                "Natural Language Processing",
                "Quantum Computing",
                "Robotics"
            ],
            "answer": "Quantum Computing",
            "explanation": "While quantum computing may impact AI's future, it is a separate field of study, not a subfield of AI."
        },
        {
            "question": "Which technique is used in the classification of data?",
            "options": [
                "Regression",
                "Clustering",
                "Backpropagation",
                "Decision Tree"
            ],
            "answer": "Decision Tree",
            "explanation": "Decision Trees classify data by making decisions based on asking a series of questions."
        },
        {
            "question": "What is the primary goal of Machine Learning?",
            "options": [
                "Feed data into computers",
                "Allow machines to learn from data",
                "Program explicit rules for decision-making",
                "Develop quantum algorithms"
            ],
            "answer": "Allow machines to learn from data",
            "explanation": "Machine Learning, a subset of AI, focuses on enabling algorithms to learn from and make decisions based on data."
        },
        {
            "question": "In the context of AI, what does \"ANN\" stand for?",
            "options": [
                "Advanced Neural Network",
                "Artistic Neural Network",
                "Artificial Neuron Nexus",
                "Artificial Neural Network"
            ],
            "answer": "Artificial Neural Network",
            "explanation": "ANN stands for Artificial Neural Network, inspired by the human brain's structure and function."
        },
        {
            "question": "Which AI technique is used for searching solutions in a finite space?",
            "options": [
                "Decision Trees",
                "Heuristic Search",
                "Neural Networks",
                "Regression Analysis"
            ],
            "answer": "Heuristic Search",
            "explanation": "Heuristic Search strategies are algorithms that search for solutions in large or infinite domains."
        },
        {
            "question": "What is the Turing test used for?",
            "options": [
                "Testing quantum computers",
                "Validating if a machine can exhibit human-like intelligence",
                "Evaluating the efficiency of algorithms",
                "Testing the security of machine algorithms"
            ],
            "answer": "Validating if a machine can exhibit human-like intelligence",
            "explanation": "Proposed by Alan Turing, the Turing test checks whether a machine's behavior can mimic human intelligence."
        },
        {
            "question": "Which term is associated with the ability of machines to mimic human cognitive functions?",
            "options": [
                "Machine Learning",
                "Heuristics",
                "Deep Learning",
                "Cognitive Computing"
            ],
            "answer": "Cognitive Computing",
            "explanation": "Cognitive Computing focuses on simulating human thought processes in machines."
        },
        {
            "question": "In a feed-forward neural network:",
            "options": [
                "Neurons cycle or loop back to previous layers",
                "All neurons connect back to themselves",
                "Data flows in one direction, from input to output",
                "Data continuously recycles through the network"
            ],
            "answer": "Data flows in one direction, from input to output",
            "explanation": "In feed-forward neural networks, the data flows linearly from the input layer to the output layer without looping back."
        },
        {
            "question": "Which of the following is an unsupervised learning method?",
            "options": [
                "Classification",
                "Clustering",
                "Regression",
                "Reinforcement Learning"
            ],
            "answer": "Clustering",
            "explanation": "Clustering involves grouping data points without referring to known or labelled outcomes."
        },
        {
            "question": "Expert Systems in AI are designed to:",
            "options": [
                "Replace human experts",
                "Mimic human expertise in a specific domain",
                "Operate machinery",
                "Handle large datasets"
            ],
            "answer": "Mimic human expertise in a specific domain",
            "explanation": "Expert Systems emulate the decision-making abilities of a human expert in particular areas of knowledge."
        },
        {
            "question": "Which algorithm is used to explore a solution space by making incremental changes to the current solution?",
            "options": [
                "Regression",
                "Decision Tree",
                "Hill Climbing",
                "Backpropagation"
            ],
            "answer": "Hill Climbing",
            "explanation": "Hill Climbing is an iterative algorithm that starts with an arbitrary solution and incrementally varies it to find an optimal solution."
        },
        {
            "question": "Natural Language Processing (NLP) involves:",
            "options": [
                "Machines interacting naturally within their environment",
                "Computers understanding and generating human language",
                "Systems improving their accuracy over time without external input",
                "Algorithms analyzing the nature of data"
            ],
            "answer": "Computers understanding and generating human language",
            "explanation": "NLP focuses on enabling machines to read, decipher, understand, and make sense of human language."
        },
        {
            "question": "Which AI approach involves agents that make decisions by maximizing a reward?",
            "options": [
                "Supervised Learning",
                "Reinforcement Learning",
                "Decision Trees",
                "Clustering"
            ],
            "answer": "Reinforcement Learning",
            "explanation": "In Reinforcement Learning, agents take actions to maximize cumulative reward."
        },
        {
            "question": "The primary purpose of a perceptron is to:",
            "options": [
                "Store data for deep learning models",
                "Classify input into one of two possible categories",
                "Handle and manage large databases",
                "Implement quantum algorithms in neural networks"
            ],
            "answer": "Classify input into one of two possible categories",
            "explanation": "A perceptron is a binary classifier that maps input to one of two categories."
        },
        {
            "question": "Genetic algorithms are inspired by:",
            "options": [
                "Human cognitive processes",
                "Natural evolution",
                "Quantum mechanics",
                "Classical computing principles"
            ],
            "answer": "Natural evolution",
            "explanation": "Genetic algorithms simulate natural evolution processes like selection, crossover, and mutation to optimize solutions."
        },
        {
            "question": "Which of the following best describes \"fuzzy logic\"?",
            "options": [
                "Logic that deals with multi-valued truth",
                "Logic used in quantum computers",
                "Logic that is inconsistent",
                "Logic that is error-prone"
            ],
            "answer": "Logic that deals with multi-valued truth",
            "explanation": "Unlike classical logic with true or false values, fuzzy logic allows for degrees of truth, handling concepts that are ambiguous or vague."
        },
        {
            "question": "In the context of AI, what does \"ML\" stand for?",
            "options": [
                "Machine Logic",
                "Multi-Layered",
                "Machine Learning",
                "Multi-Lingual"
            ],
            "answer": "Machine Learning",
            "explanation": "ML stands for Machine Learning, which emphasizes algorithms that can learn and make decisions from data."
        },
        {
            "question": "What is the main goal of pattern recognition?",
            "options": [
                "Recognizing and categorizing data based on patterns",
                "Analyzing the efficiency of algorithms",
                "Building decision tree models",
                "Optimizing neural network layers"
            ],
            "answer": "Recognizing and categorizing data based on patterns",
            "explanation": "Pattern recognition focuses on classifying data based on known patterns."
        },
        {
            "question": "Which term refers to the ability of a machine to perform tasks without explicit instructions?",
            "options": [
                "Heuristics",
                "Turing capability",
                "Intelligence quotient (IQ)",
                "General Intelligence"
            ],
            "answer": "General Intelligence",
            "explanation": "General Intelligence, or Strong AI, refers to machines that can perform any intellectual task that humans can, without being explicitly programmed for it."
        },
        {
            "question": "Which of the following concepts is concerned with enabling machines to improve their performance over time based on experience?",
            "options": [
                "Heuristic Search",
                "Backpropagation",
                "Reinforcement Learning",
                "Cognitive Computing"
            ],
            "answer": "Reinforcement Learning",
            "explanation": "Reinforcement Learning is about agents learning by interacting with their environment and receiving feedback through rewards or penalties."
        },
        {
            "question": "Which type of AI system is designed to solve specific tasks and cannot perform tasks outside its domain?",
            "options": [
                "Strong AI",
                "Weak AI",
                "General AI",
                "Cognitive AI"
            ],
            "answer": "Weak AI",
            "explanation": "Weak AI, also known as Narrow AI, is designed and trained for a particular task, and cannot perform tasks beyond its designated domain."
        },
        {
            "question": "What type of algorithm would be best suited for a scenario where labeled training data is not available?",
            "options": [
                "Supervised Learning",
                "Semi-supervised Learning",
                "Unsupervised Learning",
                "Reinforcement Learning"
            ],
            "answer": "Unsupervised Learning",
            "explanation": "Unsupervised Learning algorithms are used when the training data is not labeled, and the algorithm tries to learn the underlying structure from the data."
        },
        {
            "question": "Which of the following is an essential aspect of a chatbot's capability in terms of AI?",
            "options": [
                "Ability to execute shell commands",
                "Ability to send emails automatically",
                "Understanding and generating human language",
                "Access to a large database"
            ],
            "answer": "Understanding and generating human language",
            "explanation": "For chatbots, the core AI capability is Natural Language Processing (NLP), which allows them to understand and generate human language."
        },
        {
            "question": "In the context of AI, agents operate in an environment and choose actions based on some policy to achieve a specific:",
            "options": [
                "Command",
                "Goal or set of goals",
                "Set of rules",
                "Feedback mechanism"
            ],
            "answer": "Goal or set of goals",
            "explanation": "Agents in AI are designed to operate autonomously in an environment to achieve specific goals. They base their actions on policies and strategies to maximize their chances of achieving those goals."
        }
    ],
    "Cyber Security": [
        {
            "question": "What is the primary objective of cyber security?",
            "options": [
                "Monitoring user activities",
                "Protecting systems from threats",
                "Developing software applications",
                "Enhancing system performance"
            ],
            "answer": "Protecting systems from threats",
            "explanation": "The primary goal of cyber security is to defend systems, networks, and data from digital attacks or unauthorized access."
        },
        {
            "question": "Which of the following refers to verifying the identity of a user, system, or application?",
            "options": [
                "Authentication",
                "Encryption",
                "Authorization",
                "Validation"
            ],
            "answer": "Authentication",
            "explanation": "Authentication ensures that users are who they claim to be. It's like checking an ID card at the entrance."
        },
        {
            "question": "Which of the following is a common tool used for authentication?",
            "options": [
                "VPN",
                "Firewall",
                "One-time password (OTP)",
                "Authorization Matrix"
            ],
            "answer": "One-time password (OTP)",
            "explanation": "An OTP is a password that is valid for only one login session or transaction. It is a commonly used mechanism for authentication."
        },
        {
            "question": "Which of the following is NOT a type of malware?",
            "options": [
                "Phish",
                "Worm",
                "Trojan",
                "Virus"
            ],
            "answer": "Phish",
            "explanation": "While \"phishing\" is a cyber attack method that aims to gather sensitive information, \"phish\" isn't a type of malware. Worms, Trojans, and viruses are all malware types."
        },
        {
            "question": "Which attack specifically targets vulnerabilities in a web application?",
            "options": [
                "DDoS attack",
                "Man-in-the-middle attack",
                "SQL injection",
                "Phishing"
            ],
            "answer": "SQL injection",
            "explanation": "SQL injection attacks target web applications by inserting malicious SQL code into query strings, potentially gaining unauthorized access to the underlying database."
        },
        {
            "question": "What does \"CIA\" stand for in the context of information security principles?",
            "options": [
                "Confidentiality, Integrity, Authentication",
                "Confidentiality, Integrity, Authorization",
                "Confidentiality, Integrity, Availability",
                "Confidentiality, Inspection, Authentication"
            ],
            "answer": "Confidentiality, Integrity, Availability",
            "explanation": "The CIA triad is a widely-used model that guides policies for information security within an organization."
        },
        {
            "question": "Which tool is primarily used for passive reconnaissance?",
            "options": [
                "Nmap",
                "Metasploit",
                "Whois",
                "John the Ripper"
            ],
            "answer": "Whois",
            "explanation": "Whois is used to gather information about who owns a domain name or IP address, making it a tool for passive reconnaissance."
        },
        {
            "question": "'Authorization' in Cyber Security is mainly concerned with:",
            "options": [
                "Verifying user identity",
                "Deciding which resources a user can access",
                "Protecting data from viruses",
                "Setting up VPNs"
            ],
            "answer": "Deciding which resources a user can access",
            "explanation": "While authentication validates the user's identity, authorization determines what permissions that authenticated user has."
        },
        {
            "question": "Which type of attack captures data packets to extract information?",
            "options": [
                "Sniffing",
                "Spoofing",
                "Spamming",
                "Pharming"
            ],
            "answer": "Sniffing",
            "explanation": "Sniffing attacks involve capturing and inspecting data packets as they travel across networks to extract sensitive information."
        },
        {
            "question": "What is a honeypot in the context of cyber security?",
            "options": [
                "A tool to detect vulnerabilities in software",
                "A type of malware that gathers information",
                "A decoy system to attract cyber attackers",
                "A method to encrypt data"
            ],
            "answer": "A decoy system to attract cyber attackers",
            "explanation": "A honeypot is a decoy system or network site that appears to be part of a network, but is actually isolated and monitored. Its purpose is to attract and divert an attacker."
        },
        {
            "question": "Which of the following is NOT a type of access control?",
            "options": [
                "Mandatory Access Control (MAC)",
                "Role-Based Access Control (RBAC)",
                "Discretionary Access Control (DAC)",
                "Malware Access Control (MAV)"
            ],
            "answer": "Malware Access Control (MAV)",
            "explanation": "MAV isn't a recognized access control type. MAC, RBAC, and DAC are common methodologies to define and restrict system access to authorized users."
        },
        {
            "question": "Which of the following refers to the process of confirming the identity of a user?",
            "options": [
                "Authorization",
                "Availability",
                "Encryption",
                "Authentication"
            ],
            "answer": "Authentication",
            "explanation": "Authentication is the process of verifying the identity of a user, system, or application."
        },
        {
            "question": "A VPN (Virtual Private Network) primarily helps in:",
            "options": [
                "Speeding up the internet connection",
                "Setting user permissions",
                "Creating a secure connection over the internet",
                "Authenticating users"
            ],
            "answer": "Creating a secure connection over the internet",
            "explanation": "VPNs are designed to create a private network from a public internet connection. They ensure your browsing remains private and secure."
        },
        {
            "question": "What is the primary goal of a Distributed Denial of Service (DDoS) attack?",
            "options": [
                "Steal sensitive information",
                "Gain unauthorized access to systems",
                "Disrupt service availability",
                "Inject malicious scripts into web applications"
            ],
            "answer": "Disrupt service availability",
            "explanation": "DDoS attacks aim to overwhelm target services with excessive requests, causing service interruptions or outages."
        },
        {
            "question": "Which encryption method encodes information in such a way that only the authorized party can read it, but does not require a secret key for decryption?",
            "options": [
                "Symmetric encryption",
                "Hashing",
                "Asymmetric encryption",
                "Steganography"
            ],
            "answer": "Hashing",
            "explanation": "Hashing converts information into a fixed size of characters, which usually isn't meant to be decrypted. It is commonly used for verifying data integrity."
        },
        {
            "question": "Which of the following best describes the term \"firewall\"?",
            "options": [
                "A tool to detect malware",
                "A system designed to block unauthorized access",
                "A type of virus",
                "An encryption algorithm"
            ],
            "answer": "A system designed to block unauthorized access",
            "explanation": "A firewall is a system that monitors and controls incoming and outgoing network traffic based on predetermined security policies, effectively establishing a barrier between trusted and untrusted networks."
        },
        {
            "question": "In cyber security, what does \"VPN\" stand for?",
            "options": [
                "Virtual Protocol Network",
                "Vital Protection Notation",
                "Verified Private Node",
                "Virtual Private Network"
            ],
            "answer": "Virtual Private Network",
            "explanation": "A VPN extends a private network across a public network and enables users to send and receive data across shared or public networks as if their devices were directly connected to the private network."
        },
        {
            "question": "What is a primary difference between a worm and a virus?",
            "options": [
                "Worms are harmful, viruses are not",
                "Worms replicate themselves, viruses do not",
                "Viruses replicate themselves, worms do not",
                "Worms require user action to spread, viruses do not"
            ],
            "answer": "Worms replicate themselves, viruses do not",
            "explanation": "Both worms and viruses are malicious software. However, a primary difference is that worms can replicate themselves and spread without any user action, while viruses typically require some form of user action to spread."
        },
        {
            "question": "Which of the following techniques can hide malware in an image or audio file?",
            "options": [
                "SQL injection",
                "DDoS attack",
                "Steganography",
                "Cross-site scripting"
            ],
            "answer": "Steganography",
            "explanation": "Steganography is the practice of hiding secret data within an ordinary, non-secret, file or message in order to avoid detection."
        },
        {
            "question": "A digital certificate is used to verify the:",
            "options": [
                "Integrity of a message",
                "Identity of a website or entity",
                "Password strength of a user",
                "Efficiency of a security policy"
            ],
            "answer": "Identity of a website or entity",
            "explanation": "Digital certificates are used to confirm the identity of the certificate holder and provide the receiver with a means to encode their messages to the holder."
        },
        {
            "question": "Which term refers to software applications that are specifically designed to detect and block malware?",
            "options": [
                "IDS (Intrusion Detection System)",
                "UTM (Unified Threat Management)",
                "Antivirus",
                "Proxy Server"
            ],
            "answer": "Antivirus",
            "explanation": "Antivirus software is specifically designed to detect, prevent, and remove malicious software, including viruses."
        },
        {
            "question": "An attacker who relies on user error to gain unauthorized access, typically by tricking the user, is using:",
            "options": [
                "a RAT",
                "social engineering",
                "ransomware",
                "a logic bomb"
            ],
            "answer": "social engineering",
            "explanation": "Social engineering exploits human psychology rather than technical vulnerabilities, often tricking individuals into revealing sensitive information or performing specific actions."
        },
        {
            "question": "Which type of attack redirects a web user to a fake website even when the user has typed in the correct address?",
            "options": [
                "Spoofing",
                "Pharming",
                "Sniffing",
                "Phishing"
            ],
            "answer": "Pharming",
            "explanation": "Pharming redirects users to fraudulent websites without their knowledge or consent, often achieved by hijacking domain names or manipulating DNS servers."
        },
        {
            "question": "What does \"2FA\" stand for in the realm of cyber security?",
            "options": [
                "Two-Function Authentication",
                "Two-Factor Algorithm",
                "Two-Field Access",
                "Two-Factor Authentication"
            ],
            "answer": "Two-Factor Authentication",
            "explanation": "Two-Factor Authentication is an added layer of security that requires a user to provide two types of identification before accessing an account."
        },
        {
            "question": "Which of the following tools is widely used for penetration testing?",
            "options": [
                "Wireshark",
                "Metasploit",
                "McAfee",
                "Wi-Fi Analyzer"
            ],
            "answer": "Metasploit",
            "explanation": "Metasploit is a popular penetration testing framework used to discover, exploit, and validate vulnerabilities in various systems."
        }
    ],
    "IoT (Internet of Things)": [
        {
            "question": "What does IoT stand for?",
            "options": [
                "Internet of Transactions",
                "Intranet of Things",
                "Interface of Technology",
                "Internet of Things"
            ],
            "answer": "Internet of Things",
            "explanation": "IoT refers to the Internet of Things, which involves connecting devices and systems to the internet to exchange data."
        },
        {
            "question": "Which technology is primarily used by IoT devices to store data in the cloud?",
            "options": [
                "QR codes",
                "Bluetooth",
                "RFID",
                "MQTT"
            ],
            "answer": "MQTT",
            "explanation": "MQTT (Message Queuing Telemetry Transport) is a lightweight messaging protocol designed for low-bandwidth, high-latency, or unreliable networks, making it ideal for IoT devices."
        },
        {
            "question": "Which technology allows IoT devices to communicate over very short distances?",
            "options": [
                "Bluetooth",
                "Satellite",
                "Fiber optics",
                "Dial-up"
            ],
            "answer": "Bluetooth",
            "explanation": "Bluetooth technology allows devices to communicate wirelessly over short distances, making it a popular choice for many IoT devices."
        },
        {
            "question": "Which of the following best describes a \"smart\" device in the context of IoT?",
            "options": [
                "A device with an on/off switch",
                "A device that can connect to the internet",
                "A device with a large storage capacity",
                "A device with multiple USB ports"
            ],
            "answer": "A device that can connect to the internet",
            "explanation": "In the context of IoT, a \"smart\" device is typically one that can connect to the internet and interact with other devices or systems."
        },
        {
            "question": "Which of the following poses the most significant challenge for IoT devices in terms of security?",
            "options": [
                "High power consumption",
                "Large size",
                "Limited computational capabilities",
                "High bandwidth usage"
            ],
            "answer": "Limited computational capabilities",
            "explanation": "Many IoT devices have limited computational capabilities, making it challenging to implement robust security features and leaving them vulnerable to attacks."
        },
        {
            "question": "The concept of connecting your refrigerator, washing machine, or other household appliances to the internet relates to:",
            "options": [
                "Industrial IoT",
                "Smart Cities",
                "Smart Home",
                "Wearable IoT"
            ],
            "answer": "Smart Home",
            "explanation": "Connecting household appliances to the internet to enhance their functionality and manage them remotely pertains to the Smart Home aspect of IoT."
        },
        {
            "question": "Which of the following is NOT typically an application of IoT in agriculture?",
            "options": [
                "Real-time weather forecasts",
                "Soil moisture sensors",
                "Crop health monitoring",
                "Automated email marketing"
            ],
            "answer": "Automated email marketing",
            "explanation": "While the other options are direct applications of IoT in agriculture, automated email marketing is more related to business and customer relations."
        },
        {
            "question": "How do IoT devices typically communicate with each other?",
            "options": [
                "Over a cellular network",
                "Using satellite links",
                "Through the postal service",
                "Via short-range wireless communications"
            ],
            "answer": "Via short-range wireless communications",
            "explanation": "While some IoT devices can communicate over cellular or satellite links, many use short-range wireless communications like Wi-Fi, Bluetooth, Zigbee, and Z-wave."
        },
        {
            "question": "What does the term \"edge computing\" mean in the context of IoT?",
            "options": [
                "Computing that happens on the outer edges of a network",
                "Computing that's performed on servers in a data center",
                "Computing that occurs directly on IoT devices",
                "Computing that is only for edge cases"
            ],
            "answer": "Computing that occurs directly on IoT devices",
            "explanation": "Edge computing refers to the practice of processing data directly on IoT devices (or \"at the edge\" of the network) rather than in a centralized cloud or data center."
        },
        {
            "question": "Which technology is often associated with IoT for object tracking and identification?",
            "options": [
                "Bluetooth",
                "Wi-Fi",
                "RFID",
                "LTE"
            ],
            "answer": "RFID",
            "explanation": "RFID (Radio-Frequency Identification) is commonly used in IoT for tracking and identifying objects through the use of electromagnetic fields."
        },
        {
            "question": "Which of the following is an open-source platform used for developing IoT applications?",
            "options": [
                "ThingSpeak",
                "Google Drive",
                "Excel",
                "iCloud"
            ],
            "answer": "ThingSpeak",
            "explanation": "ThingSpeak is an open-source IoT platform that allows users to collect and store sensor data in the cloud and develop IoT applications."
        },
        {
            "question": "What is the primary purpose of actuators in IoT systems?",
            "options": [
                "Detecting environmental changes",
                "Sending data to the cloud",
                "Providing an interface for user inputs",
                "Performing a specific action based on received data"
            ],
            "answer": "Performing a specific action based on received data",
            "explanation": "Actuators in IoT systems receive data and take specific actions based on that data, such as turning a device on or off."
        },
        {
            "question": "In the context of IoT, what does LPWAN stand for?",
            "options": [
                "Low Power Wide Area Network",
                "Linear Power Weighted Access Node",
                "Limited Power Wireless Application Network",
                "Last Point Web Access Network"
            ],
            "answer": "Low Power Wide Area Network",
            "explanation": "LPWAN (Low Power Wide Area Network) is a type of wireless telecommunication network designed to allow long-range communications at a low bit rate among connected objects, such as sensors and actuators."
        },
        {
            "question": "Which of the following is an essential characteristic of IoT devices?",
            "options": [
                "They must be mobile.",
                "They can function without the internet.",
                "They always have a graphical user interface.",
                "They can generate or collect data."
            ],
            "answer": "They can generate or collect data.",
            "explanation": "At their core, IoT devices either generate or collect data, which can then be sent to other devices or systems for analysis, action, or storage."
        },
        {
            "question": "In the context of IoT, the term \"gateway\" refers to:",
            "options": [
                "A physical barrier for IoT devices.",
                "The main source of power for an IoT device.",
                "A device that connects IoT devices to the internet.",
                "The software used to develop IoT applications."
            ],
            "answer": "A device that connects IoT devices to the internet.",
            "explanation": "An IoT gateway provides a bridge between local sensors, actuators, and other IoT devices and the cloud or data center, ensuring seamless data transmission."
        },
        {
            "question": "Which of the following best describes \"fog computing\"?",
            "options": [
                "Computing that is hazy and unclear.",
                "Computing based only in large data centers.",
                "A decentralized computing infrastructure closer to the data source.",
                "An outdated computing method."
            ],
            "answer": "A decentralized computing infrastructure closer to the data source.",
            "explanation": "Fog computing, also known as fog networking, is a decentralized computing infrastructure in which certain processes are performed at the edge of the network or on local nodes rather than in a centralized cloud."
        },
        {
            "question": "What primary advantage does IoT provide to businesses?",
            "options": [
                "Increasing the size of devices.",
                "Making devices louder.",
                "Providing a rich source of data for analysis and decision-making.",
                "Changing the color of devices."
            ],
            "answer": "Providing a rich source of data for analysis and decision-making.",
            "explanation": "The main advantage of IoT for businesses is the vast amount of data generated by connected devices, which can be analyzed to gain insights, improve operations, and make informed decisions."
        },
        {
            "question": "In IoT, what does the term \"endpoint\" refer to?",
            "options": [
                "The final goal of any IoT project.",
                "A device or node that communicates back to a central system.",
                "The main server where all data is stored.",
                "The power source for IoT devices."
            ],
            "answer": "A device or node that communicates back to a central system.",
            "explanation": "In IoT, an endpoint refers to any device or node that can be connected to a network and communicates back to a central system."
        },
        {
            "question": "Which IoT application involves using connected devices for health monitoring, fitness tracking, and medical data collection?",
            "options": [
                "Industrial IoT",
                "Smart Grid",
                "IoT in Retail",
                "Wearable IoT"
            ],
            "answer": "Wearable IoT",
            "explanation": "Wearable IoT involves devices like smartwatches, fitness trackers, and medical monitoring devices that users can wear, providing real-time data related to health, fitness, and well-being."
        },
        {
            "question": "What role does the \"Digital Twin\" concept play in IoT?",
            "options": [
                "It refers to two identical IoT devices working together.",
                "It's a digital representation of a physical device or system.",
                "It describes the backup systems for IoT networks.",
                "It's a method to reduce power consumption in devices."
            ],
            "answer": "It's a digital representation of a physical device or system.",
            "explanation": "The Digital Twin concept involves creating a digital replica of a physical device or system. This allows for monitoring, analysis, and optimization of the real-world counterpart without having to interact with it directly."
        },
        {
            "question": "Which of the following best describes the role of the \"Thing\" in IoT?",
            "options": [
                "The networks that connect devices.",
                "The software algorithms used in devices.",
                "The cloud where the data is stored.",
                "The physical device or object that collects or interacts with data."
            ],
            "answer": "The physical device or object that collects or interacts with data.",
            "explanation": "In the context of IoT, the \"Thing\" refers to the physical device or object—such as sensors, actuators, appliances, or wearable devices—that can collect, send, or receive data."
        },
        {
            "question": "What is a primary concern related to the proliferation of IoT devices?",
            "options": [
                "Decreasing the number of available IP addresses.",
                "The rising cost of internet bandwidth.",
                "Security vulnerabilities and potential breaches.",
                "The physical size of devices getting too small."
            ],
            "answer": "Security vulnerabilities and potential breaches.",
            "explanation": "With the increase in IoT devices, there's a growing concern about potential security vulnerabilities. Many devices have weak security measures, making them targets for hackers and malicious actors."
        },
        {
            "question": "Which of the following is NOT a common use case of IoT in smart cities?",
            "options": [
                "Traffic congestion monitoring.",
                "Energy usage optimization in buildings.",
                "Automated pizza delivery.",
                "Waste management optimization."
            ],
            "answer": "Automated pizza delivery.",
            "explanation": "While IoT has numerous applications in smart cities—like traffic monitoring, energy optimization, and waste management—automated pizza delivery isn't a standard application directly tied to the concept of smart cities."
        },
        {
            "question": "Which layer of the IoT architecture is primarily concerned with converting raw data into meaningful information?",
            "options": [
                "Perception Layer",
                "Network Layer",
                "Application Layer",
                "Database Layer"
            ],
            "answer": "Application Layer",
            "explanation": "The Application Layer of the IoT architecture focuses on delivering meaningful information to the end-user. This involves processing and converting the raw data gathered by the devices into actionable insights or visual representations."
        },
        {
            "question": "Smart Homes use IoT for:",
            "options": [
                "Making coffee",
                "Locking the front door remotely",
                "Regulating room temperature",
                "All of the above"
            ],
            "answer": "All of the above",
            "explanation": "Smart homes utilize IoT technology to enhance various aspects of daily life, including making coffee, locking doors remotely, and auto-regulating room temperatures."
        }
    ],
    "Hadoop": [
        {
            "question": "What does HDFS stand for?",
            "options": [
                "High-Definition File System",
                "Hadoop Distributed File System",
                "Hadoop Data Federation Service",
                "High-Dynamic File System"
            ],
            "answer": "Hadoop Distributed File System",
            "explanation": "HDFS stands for Hadoop Distributed File System. It is designed to store a large volume of data across multiple machines in a Hadoop cluster."
        },
        {
            "question": "What is the default block size in HDFS?",
            "options": [
                "32 MB",
                "64 MB",
                "128 MB",
                "256 MB"
            ],
            "answer": "128 MB",
            "explanation": "The default block size in HDFS is 128 MB. This large block size facilitates the storage and processing of big data."
        },
        {
            "question": "Who is the primary developer of Hadoop?",
            "options": [
                "Microsoft",
                "IBM",
                "Apache Software Foundation",
                "Google"
            ],
            "answer": "Apache Software Foundation",
            "explanation": "The Apache Software Foundation is the primary developer of Hadoop. The project is open-source and community-driven."
        },
        {
            "question": "Which of the following is not a core component of Hadoop?",
            "options": [
                "HDFS",
                "MapReduce",
                "YARN",
                "Spark"
            ],
            "answer": "Spark",
            "explanation": "Spark is not a core component of Hadoop. While it can run on Hadoop and process data from HDFS, it is a separate project."
        },
        {
            "question": "What does YARN stand for?",
            "options": [
                "Yet Another Resource Navigator",
                "Yet Another Resource Negotiator",
                "You Are Really Near",
                "Yarn Aims to Reuse Nodes"
            ],
            "answer": "Yet Another Resource Negotiator",
            "explanation": "YARN stands for Yet Another Resource Negotiator. It is the resource management layer for Hadoop, managing and scheduling resources across the cluster."
        },
        {
            "question": "What is the purpose of the JobTracker in Hadoop?",
            "options": [
                "To store data",
                "To manage resources",
                "To schedule and track MapReduce jobs",
                "To distribute data blocks"
            ],
            "answer": "To schedule and track MapReduce jobs",
            "explanation": "The JobTracker is responsible for scheduling and keeping track of MapReduce jobs in a Hadoop cluster. It allocates resources and monitors job execution."
        },
        {
            "question": "What is a DataNode in HDFS?",
            "options": [
                "A node that stores actual data blocks",
                "A node that manages metadata",
                "A node responsible for job tracking",
                "A node responsible for resource management"
            ],
            "answer": "A node that stores actual data blocks",
            "explanation": "A DataNode in HDFS is responsible for storing the actual data blocks. DataNodes are the workhorses of HDFS, providing storage and data retrieval services."
        },
        {
            "question": "What is the NameNode responsible for in HDFS?",
            "options": [
                "Storing actual data blocks",
                "Managing metadata and namespace",
                "Job scheduling",
                "Resource management"
            ],
            "answer": "Managing metadata and namespace",
            "explanation": "The NameNode manages metadata and the namespace of the HDFS. It keeps track of the file system tree and metadata for all the files and directories."
        },
        {
            "question": "What programming model does Hadoop use for processing large data sets?",
            "options": [
                "Divide and Rule",
                "Master-Slave",
                "MapReduce",
                "None of the above"
            ],
            "answer": "MapReduce",
            "explanation": "Hadoop uses the MapReduce programming model for distributed data processing. It involves a Mapper phase for filtering and sorting data and a Reducer phase for summarizing the data."
        },
        {
            "question": "What is the primary language for developing Hadoop?",
            "options": [
                "Python",
                "Java",
                "C++",
                "Ruby"
            ],
            "answer": "Java",
            "explanation": "Hadoop is primarily written in Java, and the core libraries are Java-based. Although you can write MapReduce programs in other languages, Java is the most commonly used."
        },
        {
            "question": "Which of the following can be used for data serialization in Hadoop?",
            "options": [
                "Hive",
                "Pig",
                "Avro",
                "YARN"
            ],
            "answer": "Avro",
            "explanation": "Avro is a framework for data serialization in Hadoop. It provides functionalities for data serialization and deserialization in a compact and efficient binary or JSON format."
        },
        {
            "question": "Which Hadoop ecosystem component is used as a data warehousing tool?",
            "options": [
                "Hive",
                "Flume",
                "ZooKeeper",
                "Sqoop"
            ],
            "answer": "Hive",
            "explanation": "Hive is used as a data warehousing tool in the Hadoop ecosystem. It facilitates querying and managing large datasets residing in distributed storage using SQL-like language called HiveQL."
        },
        {
            "question": "What is the role of ZooKeeper in the Hadoop ecosystem?",
            "options": [
                "Data Serialization",
                "Stream Processing",
                "Cluster Coordination",
                "Scripting Platform"
            ],
            "answer": "Cluster Coordination",
            "explanation": "ZooKeeper is used for cluster coordination in Hadoop. It provides distributed synchronization, maintains configuration information, and provides group services."
        },
        {
            "question": "Which tool can be used to import/export data from RDBMS to HDFS?",
            "options": [
                "Hive",
                "Flume",
                "Oozie",
                "Sqoop"
            ],
            "answer": "Sqoop",
            "explanation": "Sqoop is a tool designed to transfer data between Hadoop and relational database systems. It facilitates the import and export of data between HDFS and RDBMS."
        },
        {
            "question": "Which of the following is not a function of the NameNode?",
            "options": [
                "Store the data block",
                "Manage the file system namespace",
                "Keep metadata information",
                "Handle client requests"
            ],
            "answer": "Store the data block",
            "explanation": "The NameNode does not store actual data blocks. Instead, it manages the file system namespace, keeps metadata information, and handles client requests related to these tasks."
        },
        {
            "question": "What is the replication factor in HDFS?",
            "options": [
                "The block size of data",
                "The number of copies of a data block stored in HDFS",
                "The number of nodes in a cluster",
                "The amount of data that can be stored in a DataNode"
            ],
            "answer": "The number of copies of a data block stored in HDFS",
            "explanation": "The replication factor in HDFS refers to the number of copies of a data block that are stored. By default, this number is set to three, ensuring data reliability and fault tolerance."
        },
        {
            "question": "Which of the following is a scheduler in Hadoop?",
            "options": [
                "Sqoop",
                "Oozie",
                "Flume",
                "Hive"
            ],
            "answer": "Oozie",
            "explanation": "Oozie is a scheduler in Hadoop. It's a server-based workflow scheduling system to manage Hadoop jobs."
        },
        {
            "question": "Which daemon is responsible for MapReduce job submission and distribution?",
            "options": [
                "DataNode",
                "NameNode",
                "ResourceManager",
                "NodeManager"
            ],
            "answer": "ResourceManager",
            "explanation": "ResourceManager is responsible for the allocation of resources and the management of job submissions in a Hadoop cluster. It plays a pivotal role in the distribution and scheduling of MapReduce tasks."
        },
        {
            "question": "What is a Combiner in Hadoop?",
            "options": [
                "A program that combines data from various sources",
                "A mini-reducer that operates on the output of the mapper",
                "A tool to combine several MapReduce jobs",
                "A process to combine NameNode and DataNode functionalities"
            ],
            "answer": "A mini-reducer that operates on the output of the mapper",
            "explanation": "A Combiner in Hadoop acts as a local reducer, operating on the output of the Mapper phase, before the data is passed to the actual Reducer. It helps in reducing the amount of data that needs to be transferred across the network."
        },
        {
            "question": "In which directory Hadoop is installed by default?",
            "options": [
                "/usr/local/hadoop",
                "/home/hadoop",
                "/opt/hadoop",
                "/usr/hadoop"
            ],
            "answer": "/usr/local/hadoop",
            "explanation": "By default, Hadoop is installed in the /usr/local/hadoop directory. However, this can be changed based on user preferences or system requirements."
        },
        {
            "question": "Which of the following is responsible for storing large datasets in a distributed environment?",
            "options": [
                "MapReduce",
                "HBase",
                "Hive",
                "Pig"
            ],
            "answer": "HBase",
            "explanation": "HBase is a distributed column-oriented database built on top of HDFS (Hadoop Distributed File System). It's designed to store large datasets in a distributed environment, providing real-time read/write access."
        },
        {
            "question": "In a Hadoop cluster, if a DataNode fails:",
            "options": [
                "Data will be lost",
                "JobTracker will be notified",
                "NameNode will re-replicate the data block to other nodes",
                "ResourceManager will restart the DataNode"
            ],
            "answer": "NameNode will re-replicate the data block to other nodes",
            "explanation": "In Hadoop's HDFS, data is protected through replication. If a DataNode fails, the NameNode is aware of this and will ensure that the data blocks from the failed node are re-replicated to other available nodes to maintain the system's fault tolerance."
        },
        {
            "question": "Which scripting language is used by Pig?",
            "options": [
                "HiveQL",
                "Java",
                "Pig Latin",
                "Python"
            ],
            "answer": "Pig Latin",
            "explanation": "Pig uses a high-level scripting language called \"Pig Latin\". It's designed for processing and analyzing large datasets in Hadoop."
        },
        {
            "question": "What does \"speculative execution\" in Hadoop mean?",
            "options": [
                "Executing a backup plan if the main execution plan fails",
                "Running the same task on multiple nodes to account for node failures",
                "Predicting the execution time for tasks",
                "Running multiple different tasks on the same node"
            ],
            "answer": "Running the same task on multiple nodes to account for node failures",
            "explanation": "Speculative execution in Hadoop is a mechanism to enhance the reliability and speed of the system. If certain nodes are executing tasks slower than expected, Hadoop might redundantly execute another instance of the same task on another node. The task that finishes first will be accepted."
        },
        {
            "question": "What is the role of a \"Shuffler\" in a MapReduce job?",
            "options": [
                "It connects mappers to the reducers",
                "It sorts and groups the keys of the intermediate output from the mapper",
                "It combines the output of multiple mappers",
                "It distributes data blocks across the DataNodes"
            ],
            "answer": "It sorts and groups the keys of the intermediate output from the mapper",
            "explanation": "In the MapReduce paradigm, after the map phase and before the reduce phase, there is an essential step called the shuffle and sort. The shuffling phase is responsible for sorting and grouping the keys of the intermediate output from the mapper before they are presented to the reducer."
        }
    ],
    "Data Science": [
        {
            "question": "Which of the following is a supervised learning method?",
            "options": [
                "Association",
                "Clustering",
                "Regression",
                "Dimensionality Reduction"
            ],
            "answer": "Regression",
            "explanation": "Supervised learning involves training on labeled data. Regression is a supervised method where the outcome variable is predicted based on one or more predictor variables."
        },
        {
            "question": "In statistics, what does a Type I error represent?",
            "options": [
                "False Positive",
                "False Negative",
                "True Positive",
                "True Negative"
            ],
            "answer": "False Positive",
            "explanation": "A Type I error, or false positive, occurs when we reject the null hypothesis when it is actually true."
        },
        {
            "question": "Which technique is used to find the optimal number of clusters in k-means?",
            "options": [
                "Confusion Matrix",
                "ROC Curve",
                "Elbow Method",
                "Lift"
            ],
            "answer": "Elbow Method",
            "explanation": "The Elbow Method involves running the k-means clustering algorithm for a range of values of k, then plotting the sum of squared distances. The \"elbow\" of the curve represents the optimal value for k."
        },
        {
            "question": "Which of the following is not a part of the \"Five Number Summary\"?",
            "options": [
                "Mean",
                "Median",
                "Minimum",
                "Third Quartile"
            ],
            "answer": "Mean",
            "explanation": "The \"Five Number Summary\" consists of the Minimum, First Quartile, Median, Third Quartile, and Maximum. It does not include the Mean."
        },
        {
            "question": "The primary purpose of PCA (Principal Component Analysis) is:",
            "options": [
                "Classification",
                "Clustering",
                "Dimensionality Reduction",
                "Regression"
            ],
            "answer": "Dimensionality Reduction",
            "explanation": "PCA is a technique to simplify the complexity in high-dimensional data while retaining trends and patterns. It does this by transforming the original variables into a new set of variables, the principal components, which are orthogonal, and which reflect the maximum variance in the data."
        },
        {
            "question": "In which of these is the Central Limit Theorem not valid?",
            "options": [
                "Sample size is small (< 30) and data is heavily skewed",
                "Sample size is large (>= 30)",
                "Data is from a normal distribution",
                "Data is from a binomial distribution"
            ],
            "answer": "Sample size is small (< 30) and data is heavily skewed",
            "explanation": "The Central Limit Theorem (CLT) states that the distribution of the sum (or average) of many independent, identically distributed random variables approaches a normal distribution, irrespective of the shape of the original distribution. However, for heavily skewed data, a larger sample size might be needed to see the approximation to normality."
        },
        {
            "question": "Which algorithm can be used for both classification and regression tasks?",
            "options": [
                "Support Vector Machine",
                "K-Means Clustering",
                "Apriori",
                "Hierarchical Clustering"
            ],
            "answer": "Support Vector Machine",
            "explanation": "Support Vector Machines can be employed for both classification (categorizing data into classes) and regression (predicting a continuous value)."
        },
        {
            "question": "What is the purpose of the train-test split?",
            "options": [
                "Reduce computational power",
                "Train on one set and test on an unseen set",
                "Increase the accuracy of the model",
                "Deal with missing data"
            ],
            "answer": "Train on one set and test on an unseen set",
            "explanation": "The primary purpose of a train-test split is to evaluate the model's performance on unseen data. By training on one subset and testing on another, it simulates how the model would perform in real-world scenarios."
        },
        {
            "question": "Overfitting in a model indicates:",
            "options": [
                "The model performs poorly on both training and test data",
                "The model performs well on training data but poorly on test data",
                "The model is under-parameterized",
                "The model has too little data to learn from"
            ],
            "answer": "The model performs well on training data but poorly on test data",
            "explanation": "Overfitting happens when a model learns the training data too closely, including its noise and outliers, which makes it perform poorly on new, unseen data."
        },
        {
            "question": "In the context of a decision tree, what is \"Entropy\"?",
            "options": [
                "A metric to measure the purity of a split",
                "The depth of the tree",
                "The number of decision nodes in the tree",
                "The number of outcomes of a decision node"
            ],
            "answer": "A metric to measure the purity of a split",
            "explanation": "In decision trees, entropy is a measure of the impurity or disorder. A set that is homogenous will have an entropy of 0, while a set that has a 50-50 split of classes will have an entropy of 1 (assuming a binary classification)."
        },
        {
            "question": "Which method helps in avoiding overfitting in neural networks?",
            "options": [
                "Pruning",
                "Bagging",
                "Boosting",
                "Dropout"
            ],
            "answer": "Dropout",
            "explanation": "Dropout is a regularization technique used in neural networks where randomly selected neurons are ignored during training. This helps in preventing overfitting as it ensures that no one neuron relies too heavily on any one feature."
        },
        {
            "question": "Which of the following is not a metric used for evaluating regression models?",
            "options": [
                "Mean Squared Error (MSE)",
                "Root Mean Squared Error (RMSE)",
                "Accuracy",
                "R-squared"
            ],
            "answer": "Accuracy",
            "explanation": "Accuracy is typically used for classification tasks. For regression models, metrics like MSE, RMSE, and R-squared are more appropriate as they measure the difference between predicted and actual values."
        },
        {
            "question": "In time series analysis, what does \"stationarity\" mean?",
            "options": [
                "The series has a constant mean and variance over time",
                "The series has no trend",
                "The series has a regular seasonality pattern",
                "The series can be predicted with high accuracy"
            ],
            "answer": "The series has a constant mean and variance over time",
            "explanation": "A time series is said to be stationary if it has constant statistical properties over time, i.e., mean, variance, and autocorrelation structure do not change over time."
        },
        {
            "question": "In k-fold cross-validation:",
            "options": [
                "The data is divided into k sets and the model is trained k times using a different set as the test set each time.",
                "The data is divided into k sets and the model is trained once using k-1 sets combined.",
                "The data is divided into 2 sets, one for training and one for testing.",
                "The model is trained k times on the same data."
            ],
            "answer": "The data is divided into k sets and the model is trained k times using a different set as the test set each time.",
            "explanation": "In k-fold cross-validation, the data is split into k subsets. One subset is used as the test set, and the other k-1 subsets are combined and used as the training set. This process is repeated k times, each time with a different test set."
        },
        {
            "question": "Which of the following is a non-parametric machine learning algorithm?",
            "options": [
                "Linear Regression",
                "Logistic Regression",
                "Decision Trees",
                "Naive Bayes Classifier"
            ],
            "answer": "Decision Trees",
            "explanation": "Non-parametric models make no assumptions about the functional form of the transformation needed to achieve linearity. Decision Trees do not require any assumptions about the distribution of the data or the relationships between variables, making them non-parametric."
        },
        {
            "question": "Which method is used to capture the linear relationship between the dependent and independent variables in a dataset?",
            "options": [
                "Clustering",
                "Association",
                "Regression",
                "Classification"
            ],
            "answer": "Regression",
            "explanation": "Regression analysis is a method used to understand the relationship between dependent and independent variables, specifically when the relationship is linear."
        },
        {
            "question": "Which of the following is not a characteristic of Big Data?",
            "options": [
                "Volume",
                "Variety",
                "Validation",
                "Velocity"
            ],
            "answer": "Validation",
            "explanation": "The commonly referred to characteristics of Big Data are Volume, Variety, and Velocity, sometimes adding Veracity and Value to the list. Validation is not one of the recognized Vs of Big Data."
        },
        {
            "question": "Which of the following techniques can be used for outlier detection?",
            "options": [
                "Linear Regression",
                "IQR (Interquartile Range)",
                "R-squared",
                "Precision"
            ],
            "answer": "IQR (Interquartile Range)",
            "explanation": "IQR is a measure of statistical spread. Outliers can be detected by looking for values that lie outside 1.5 times the IQR above the third quartile or below the first quartile."
        },
        {
            "question": "What is the purpose of the A/B testing?",
            "options": [
                "Comparing two or more machine learning models",
                "Testing the hypothesis for population means",
                "Comparing the performance of two versions of a webpage or product to see which one performs better",
                "Training a model on set A and testing on set B"
            ],
            "answer": "Comparing the performance of two versions of a webpage or product to see which one performs better",
            "explanation": "A/B testing, also known as split testing, is a method of comparing two versions of a webpage or app against each other to determine which one performs better."
        },
        {
            "question": "In a ROC curve, if Area Under Curve (AUC) is 0.5, it implies:",
            "options": [
                "The model has a perfect performance",
                "The model's performance is better than random guessing",
                "The model's performance is worse than random guessing",
                "The model's performance is equivalent to random guessing"
            ],
            "answer": "The model's performance is equivalent to random guessing",
            "explanation": "In the context of the ROC curve, an AUC of 0.5 means that the model has no discriminative power and is as good as random guessing. An AUC value of 1 indicates a perfect model, while an AUC value of 0 indicates a perfectly bad model."
        },
        {
            "question": "Principal Component Analysis (PCA) is primarily used for:",
            "options": [
                "Classification of data",
                "Regression analysis",
                "Dimensionality reduction",
                "Clustering of data"
            ],
            "answer": "Dimensionality reduction",
            "explanation": "PCA is a technique used to emphasize variation and bring out strong patterns in a dataset. It's often used to make data easy to explore and visualize by reducing its number of dimensions, without much loss of information."
        },
        {
            "question": "Which of the following is a disadvantage of decision trees?",
            "options": [
                "They cannot handle linear data.",
                "They are prone to overfitting.",
                "They cannot be used for regression.",
                "They can only handle categorical data."
            ],
            "answer": "They are prone to overfitting.",
            "explanation": "Decision trees can easily become too complex and fit the noise in the data, leading to overfitting. This is especially true for trees that are very deep."
        },
        {
            "question": "Which of the following is not a supervised learning algorithm?",
            "options": [
                "k-Nearest Neighbors",
                "Random Forest",
                "Apriori",
                "Support Vector Machines"
            ],
            "answer": "Apriori",
            "explanation": "The Apriori algorithm is used for association rule learning, a type of unsupervised machine learning. It's used for frequent itemset mining and association rule learning over transactional databases."
        },
        {
            "question": "In the context of machine learning, bias:",
            "options": [
                "Is the error due to overly complex models.",
                "Refers to a model's predictions being systematically off.",
                "Is always undesirable and must be minimized.",
                "Means that a model performs differently based on the input data."
            ],
            "answer": "Refers to a model's predictions being systematically off.",
            "explanation": "In machine learning, bias refers to the error due to the assumptions made by a model to make a prediction. High bias can cause a model to miss relevant relations between features and target outputs (underfitting)."
        },
        {
            "question": "Which of the following statements about overfitting is false?",
            "options": [
                "Overfitting occurs when a model is too complex.",
                "Overfitting can result in high accuracy on the training data.",
                "Overfitting is desirable as it captures all patterns in the data.",
                "Regularization techniques can be used to prevent overfitting."
            ],
            "answer": "Overfitting is desirable as it captures all patterns in the data.",
            "explanation": "Overfitting is not desirable. It happens when a model learns not just the underlying patterns but also the noise in the training data. As a result, it performs poorly on new, unseen data."
        }
    ],
    "Unix": [
        {
            "question": "Which Unix command is used to display the contents of a file?",
            "options": [
                "cat",
                "show",
                "display",
                "type"
            ],
            "answer": "cat",
            "explanation": "The cat command is used to display the contents of a file. It stands for “concatenate and display”."
        },
        {
            "question": "Which Unix command is used to count the number of lines, words, and characters in a file?",
            "options": [
                "count",
                "wc",
                "calc",
                "measure"
            ],
            "answer": "wc",
            "explanation": "The wc command stands for “word count” and is used to display the number of lines, words, and characters in a file."
        },
        {
            "question": "What does the grep command do?",
            "options": [
                "Finds a file by name",
                "Searches inside a file for a string",
                "Replaces strings in a file",
                "Lists all files in a directory"
            ],
            "answer": "Searches inside a file for a string",
            "explanation": "grep stands for “global regular expression print” and is used to search for a specific string or pattern inside a file."
        },
        {
            "question": "What is the purpose of the chmod command?",
            "options": [
                "Modify file ownership",
                "Modify file permissions",
                "Change file type",
                "Move a file to a different directory"
            ],
            "answer": "Modify file permissions",
            "explanation": "The chmod command is used to change the permissions of a file or directory."
        },
        {
            "question": "Which of the following commands is used to remove a directory?",
            "options": [
                "rmdir",
                "del",
                "remove",
                "delete"
            ],
            "answer": "rmdir",
            "explanation": "The rmdir command is used to remove empty directories."
        },
        {
            "question": "The pwd command in UNIX is used for:",
            "options": [
                "Printing all directories",
                "Printing current directory",
                "Changing to the home directory",
                "Changing directory permissions"
            ],
            "answer": "Printing current directory",
            "explanation": "pwd stands for “print working directory” and it displays the path of the current directory."
        },
        {
            "question": "Which command will display all hidden files in a directory?",
            "options": [
                "ls -a",
                "ls -h",
                "ls -d",
                "ls -s"
            ],
            "answer": "ls -a",
            "explanation": "The ls -a command lists all entries, including those that start with a dot, which are hidden files in UNIX."
        },
        {
            "question": "What does the >> operator do in UNIX?",
            "options": [
                "Redirects error messages",
                "Appends output to a file",
                "Overwrites file content",
                "Compares two files"
            ],
            "answer": "Appends output to a file",
            "explanation": "The >> operator is used to append the output of a command to a file. If the file does not exist, it creates one."
        },
        {
            "question": "Which Unix command displays the manual or help pages of a command?",
            "options": [
                "man",
                "help",
                "info",
                "guide"
            ],
            "answer": "man",
            "explanation": "The man command is used to display the manual or help pages of a command. It stands for “manual”."
        },
        {
            "question": "Which Unix command is used to display the process status?",
            "options": [
                "ps",
                "stat",
                "view",
                "proc"
            ],
            "answer": "ps",
            "explanation": "The ps command is used to display information about the currently running processes."
        },
        {
            "question": "What does the kill command do in UNIX?",
            "options": [
                "Deletes a file",
                "Ends a user session",
                "Stops a running process",
                "Displays user activity"
            ],
            "answer": "Stops a running process",
            "explanation": "The kill command is used to send signals to processes, allowing you to stop, pause, or otherwise signal processes."
        },
        {
            "question": "Which Unix command can be used to display disk usage?",
            "options": [
                "du",
                "disk",
                "usage",
                "space"
            ],
            "answer": "du",
            "explanation": "The du command stands for “disk usage” and is used to estimate and display the disk space used by files."
        },
        {
            "question": "The which command in UNIX is used to:",
            "options": [
                "Determine the type of a file",
                "Search for a command’s binary location",
                "Search for files containing a specific string",
                "Display users logged into the system"
            ],
            "answer": "Search for a command’s binary location",
            "explanation": "The which command is used to locate the binary of a command to see where it resides on disk."
        },
        {
            "question": "The alias command in UNIX is used for:",
            "options": [
                "Renaming a file or directory",
                "Creating a shortcut for a command",
                "Displaying file permissions",
                "Listing all available commands"
            ],
            "answer": "Creating a shortcut for a command",
            "explanation": "The alias command allows users to create shortcuts or abbreviations for longer command sequences."
        },
        {
            "question": "Which of the following commands will display the last 100 lines of a file named “data.txt”?",
            "options": [
                "tail -n 100 data.txt",
                "head -n 100 data.txt",
                "cat 100 data.txt",
                "print -l 100 data.txt"
            ],
            "answer": "tail -n 100 data.txt",
            "explanation": "The tail command displays the last few lines of a file. With the -n option, you can specify the number of lines to display."
        },
        {
            "question": "What is the primary purpose of the crontab command?",
            "options": [
                "Schedule tasks to run at specific intervals",
                "Display system’s uptime",
                "Show system cron logs",
                "List files in the current directory"
            ],
            "answer": "Schedule tasks to run at specific intervals",
            "explanation": "The crontab command is used to create, read, update, and delete cron jobs for a user. Cron jobs are tasks scheduled to run at specific intervals."
        },
        {
            "question": "Which of the following commands is used to sort the contents of a file?",
            "options": [
                "order",
                "arrange",
                "sort",
                "classify"
            ],
            "answer": "sort",
            "explanation": "The sort command is used to sort the lines in a text file."
        },
        {
            "question": "Which command allows you to substitute a string in a file?",
            "options": [
                "replace",
                "alter",
                "sed",
                "swap"
            ],
            "answer": "sed",
            "explanation": "sed, or stream editor can be used to perform basic text transformations on an input stream or file."
        },
        {
            "question": "Which command is used to find the location of a program in UNIX?",
            "options": [
                "find",
                "locate",
                "where",
                "which"
            ],
            "answer": "which",
            "explanation": "While both find and locate can be used to search for files, the which command is specifically used to locate the executable file associated with a given command."
        },
        {
            "question": "Which command is used to send the output of one command as the input to another command?",
            "options": [
                ">>",
                "|",
                ">",
                "<<"
            ],
            "answer": "|",
            "explanation": "The pipe (|) is used to send the output of one command as input to another command."
        },
        {
            "question": "What does the chown command do?",
            "options": [
                "Change the name of a file or directory",
                "Change the permissions of a file or directory",
                "Change the owner of a file or directory",
                "Check for file ownership"
            ],
            "answer": "Change the owner of a file or directory",
            "explanation": "The chown command is used to change the owner (and optionally the group) of a file or directory."
        },
        {
            "question": "The ln command in UNIX is used to:",
            "options": [
                "List file names",
                "Link files",
                "Log in to the system",
                "List network connections"
            ],
            "answer": "Link files",
            "explanation": "The ln command is used to create links between files."
        },
        {
            "question": "Which command is used to repeat the last executed command in UNIX?",
            "options": [
                "redo",
                "!!",
                "repeat",
                "^"
            ],
            "answer": "!!",
            "explanation": "In many UNIX shells, !! is used to repeat the last executed command."
        },
        {
            "question": "What does the $? variable signify in UNIX?",
            "options": [
                "Total number of arguments",
                "Process ID of the last command",
                "Exit status of the last command",
                "Current user ID"
            ],
            "answer": "Exit status of the last command",
            "explanation": "In UNIX, $? gives the exit status of the last command executed. An exit status of 0 usually indicates success, while any other value indicates an error."
        },
        {
            "question": "The touch command in UNIX is primarily used to:",
            "options": [
                "Touch files or directories",
                "Display file content",
                "Modify file timestamps",
                "Change file permissions"
            ],
            "answer": "Modify file timestamps",
            "explanation": "The touch command is primarily used to create empty files and can also change the timestamps on existing files."
        }
    ],
    "Visual Basic": [
        {
            "question": "What type of programming language is Visual Basic?",
            "options": [
                "Procedural",
                "Object-oriented",
                "Functional",
                "Logic-based"
            ],
            "answer": "Object-oriented",
            "explanation": "While Visual Basic does support procedural programming, it is fundamentally an object-oriented language."
        },
        {
            "question": "Which of the following is NOT a valid data type in VB?",
            "options": [
                "Byte",
                "Float",
                "String",
                "Double"
            ],
            "answer": "Float",
            "explanation": "Visual Basic does not have a data type named \"Float\". It uses \"Single\" for floating-point numbers."
        },
        {
            "question": "Which of the following is the correct way to declare a variable in VB?",
            "options": [
                "var x as Integer",
                "Integer x = 5",
                "Dim x As Integer",
                "x: Integer = 5"
            ],
            "answer": "Dim x As Integer",
            "explanation": "In VB, variables are declared using the Dim statement."
        },
        {
            "question": "Which control allows for multi-line input in VB?",
            "options": [
                "TextBox",
                "Label",
                "MultiLineBox",
                "RichTextBox"
            ],
            "answer": "TextBox",
            "explanation": "The TextBox control with the MultiLine property set to true allows for multi-line input."
        },
        {
            "question": "Which keyword is used to handle exceptions in VB?",
            "options": [
                "Catch",
                "Handle",
                "Error",
                "Except"
            ],
            "answer": "Catch",
            "explanation": "In VB, exceptions are caught using the Try…Catch construct."
        },
        {
            "question": "The default property for a TextBox is:",
            "options": [
                "MultiLine",
                "Text",
                "ReadOnly",
                "Size"
            ],
            "answer": "Text",
            "explanation": "The default property for a TextBox control in VB is \"Text\"."
        },
        {
            "question": "Which event gets triggered when a form loads in VB?",
            "options": [
                "OnLoad",
                "Load",
                "FormStart",
                "Begin"
            ],
            "answer": "Load",
            "explanation": "The \"Load\" event gets triggered when a form loads in Visual Basic."
        },
        {
            "question": "Which of the following is NOT a valid loop in VB?",
            "options": [
                "For..Next",
                "While..End While",
                "Do..Loop",
                "Loop..Until"
            ],
            "answer": "Loop..Until",
            "explanation": "There isn't a \"Loop..Until\" loop in VB. The correct syntax is \"Do..Until\"."
        },
        {
            "question": "In VB, which keyword is used to end a procedure?",
            "options": [
                "EndSub",
                "Terminate",
                "Finish",
                "End"
            ],
            "answer": "End",
            "explanation": "In VB, the \"End\" keyword is used to end a procedure or a block of code."
        },
        {
            "question": "What does the Me keyword refer to in VB?",
            "options": [
                "The current object",
                "The main function",
                "The parent object",
                "The base class"
            ],
            "answer": "The current object",
            "explanation": "In VB, the Me keyword refers to the current instance of the object where it is used."
        },
        {
            "question": "Which function returns the length of a string in VB?",
            "options": [
                "Length()",
                "StrLength()",
                "Len()",
                "Size()"
            ],
            "answer": "Len()",
            "explanation": "The Len() function returns the length of a string in VB."
        },
        {
            "question": "What is the result of the following code: MsgBox(5 Mod 2)?",
            "options": [
                "1",
                "2.5",
                "2",
                "0"
            ],
            "answer": "1",
            "explanation": "The Mod operator returns the remainder of a division. So, 5 divided by 2 gives a remainder of 1."
        },
        {
            "question": "Which keyword is used to define a constant in VB?",
            "options": [
                "Static",
                "Const",
                "ReadOnly",
                "Fixed"
            ],
            "answer": "Const",
            "explanation": "In VB, constants are defined using the Const keyword."
        },
        {
            "question": "Which of the following is NOT an access modifier in VB?",
            "options": [
                "Public",
                "Private",
                "Protected",
                "Closed"
            ],
            "answer": "Closed",
            "explanation": "\"Closed\" is not a valid access modifier in Visual Basic."
        },
        {
            "question": "What does the ByVal keyword mean in a VB function parameter?",
            "options": [
                "Pass by reference",
                "Pass by value",
                "Pass by memory address",
                "Pass by pointer"
            ],
            "answer": "Pass by value",
            "explanation": "In VB, ByVal means that the parameter is passed by value."
        },
        {
            "question": "What type of variable is accessible only within the procedure where it's declared?",
            "options": [
                "Global",
                "Public",
                "Local",
                "Shared"
            ],
            "answer": "Local",
            "explanation": "Local variables are accessible only within the procedure or function where they are declared."
        },
        {
            "question": "Which of the following methods can be used to convert a string to an integer in VB?",
            "options": [
                "CInt()",
                "StrToInt()",
                "Convert.ToInt32()",
                "Both a and c"
            ],
            "answer": "Both a and c",
            "explanation": "In VB, you can use CInt() or Convert.ToInt32() to convert a string to an integer."
        },
        {
            "question": "How would you comment out multiple lines of code in VB?",
            "options": [
                "// … //",
                "<!– … –>",
                "/* … */",
                "' … '"
            ],
            "answer": "' … '",
            "explanation": "In VB, a single quote ' is used to comment out a line. For multiple lines, you would have to use a single quote at the beginning of each line."
        },
        {
            "question": "Which of the following is a method to create a new instance of an object in VB?",
            "options": [
                "Dim obj As New MyClass()",
                "Create obj As MyClass",
                "New obj Of MyClass",
                "Instantiate obj As MyClass"
            ],
            "answer": "Dim obj As New MyClass()",
            "explanation": "The correct syntax to create a new instance of an object in VB is Dim obj As New MyClass()."
        },
        {
            "question": "Which of the following event is fired when a form is closed?",
            "options": [
                "OnClose",
                "CloseEvent",
                "FormClosed",
                "Destroy"
            ],
            "answer": "FormClosed",
            "explanation": "The \"FormClosed\" event is triggered when a form is closed in VB."
        },
        {
            "question": "What is the default access level for class members if no access modifier is specified?",
            "options": [
                "Public",
                "Private",
                "Protected",
                "Shared"
            ],
            "answer": "Private",
            "explanation": "If no access modifier is specified for a class member in VB, it defaults to \"Private\"."
        },
        {
            "question": "Which keyword stops the execution of a loop, regardless of the loop condition?",
            "options": [
                "Exit",
                "Break",
                "Stop",
                "Terminate"
            ],
            "answer": "Exit",
            "explanation": "In VB, the Exit keyword is used within a loop to stop its execution immediately, regardless of the loop's condition."
        },
        {
            "question": "Which of the following collections does NOT allow duplicate elements?",
            "options": [
                "ArrayList",
                "List",
                "HashSet",
                "Collection"
            ],
            "answer": "HashSet",
            "explanation": "In VB, the HashSet collection does not allow duplicate elements."
        },
        {
            "question": "Which of the following is NOT a type of error in VB?",
            "options": [
                "Compile-time",
                "Logical",
                "Run-time",
                "Syntax-time"
            ],
            "answer": "Syntax-time",
            "explanation": "\"Syntax-time\" is not a recognized type of error in VB. The common types of errors include compile-time, logical, and run-time errors."
        },
        {
            "question": "Which keyword is used to raise exceptions in VB?",
            "options": [
                "Raise",
                "Alert",
                "Throw",
                "Error"
            ],
            "answer": "Throw",
            "explanation": "In VB, the Throw keyword is used to raise exceptions."
        }
    ],
    "MapReduce": [
        {
            "question": "What does MapReduce primarily focus on?",
            "options": [
                "Data storage",
                "Data replication",
                "Data processing",
                "Data encryption"
            ],
            "answer": "Data processing",
            "explanation": "While HDFS handles data storage in the Hadoop ecosystem, MapReduce is concerned with data processing across distributed systems."
        },
        {
            "question": "Which phase comes first in a MapReduce job?",
            "options": [
                "Combine",
                "Shuffle and Sort",
                "Reduce",
                "Map"
            ],
            "answer": "Map",
            "explanation": "In the MapReduce model, the \"Map\" phase precedes the \"Reduce\" phase. The Combine and Shuffle & Sort phases come in between."
        },
        {
            "question": "What is the role of the Mapper function in MapReduce?",
            "options": [
                "Aggregating data",
                "Breaking down data into key-value pairs",
                "Storing data",
                "Redistributing data"
            ],
            "answer": "Breaking down data into key-value pairs",
            "explanation": "The Mapper's primary role is to process input data and break it down into key-value pairs for further processing."
        },
        {
            "question": "The Reduce phase of MapReduce is responsible for:",
            "options": [
                "Distributing data across clusters",
                "Generating key-value pairs",
                "Aggregating or summarizing data based on keys",
                "Storing data into HDFS"
            ],
            "answer": "Aggregating or summarizing data based on keys",
            "explanation": "The Reduce phase aggregates or summarizes the key-value pairs provided by the Map phase based on keys."
        },
        {
            "question": "Which component decides the number of reduce tasks?",
            "options": [
                "DataNode",
                "NameNode",
                "JobTracker",
                "TaskTracker"
            ],
            "answer": "JobTracker",
            "explanation": "The JobTracker determines the number of reduce tasks based on the configuration. It is responsible for managing and monitoring MapReduce tasks in the cluster."
        },
        {
            "question": "Which step takes place between the Map and Reduce phases?",
            "options": [
                "Combine",
                "Partition",
                "Shuffle and Sort",
                "Distribute"
            ],
            "answer": "Shuffle and Sort",
            "explanation": "After the Map phase, the Shuffle and Sort step ensures that data belonging to a single key goes to the same reducer."
        },
        {
            "question": "The _______ ensures that only relevant key-value pairs go to a particular Reducer.",
            "options": [
                "Mapper",
                "Partitioner",
                "Combiner",
                "JobTracker"
            ],
            "answer": "Partitioner",
            "explanation": "The Partitioner's role is to make sure that all data for a single key gets sent to the same Reducer, ensuring efficient data processing."
        },
        {
            "question": "What is the primary purpose of the Combiner in a MapReduce job?",
            "options": [
                "Distributing tasks",
                "Storing intermediate data",
                "Local aggregation of data after the Map phase",
                "Ensuring data redundancy"
            ],
            "answer": "Local aggregation of data after the Map phase",
            "explanation": "The Combiner performs a local reduce task on the data generated by the Mapper, which can optimize network traffic."
        },
        {
            "question": "Which of the following languages can be used to write a MapReduce program?",
            "options": [
                "Only Java",
                "Java and C++",
                "Java and Python",
                "Java, Python, and Ruby"
            ],
            "answer": "Java and Python",
            "explanation": "While MapReduce was originally developed in Java, one can use streaming to write MapReduce programs in other languages like Python."
        },
        {
            "question": "If no Combiner is specified in a MapReduce job, what happens?",
            "options": [
                "The job fails",
                "The Reduce phase handles all aggregation",
                "The Mapper does the combining",
                "The job requires manual intervention"
            ],
            "answer": "The Reduce phase handles all aggregation",
            "explanation": "If no Combiner is set, there's no local aggregation after the Map phase, so all aggregation is done in the Reduce phase."
        },
        {
            "question": "In a MapReduce job, if you set the number of reducers to zero, what would happen?",
            "options": [
                "The job will fail",
                "Only the Map phase will execute",
                "Data will not be processed",
                "The system will automatically decide the number of reducers"
            ],
            "answer": "Only the Map phase will execute",
            "explanation": "Setting the number of reducers to zero means no Reduce tasks will run, and the system will only execute the Map phase."
        }
    ],
    "Cassandra": [
        {
            "question": "What type of database is Cassandra?",
            "options": [
                "Relational Database",
                "Document-based NoSQL Database",
                "Columnar NoSQL Database",
                "Graph Database"
            ],
            "answer": "Columnar NoSQL Database",
            "explanation": "Cassandra is a column-oriented NoSQL database, designed to manage large volumes of structured data across many servers."
        },
        {
            "question": "Which language is used to query Cassandra?",
            "options": [
                "SQL",
                "NoSQL",
                "CQL",
                "DQL"
            ],
            "answer": "CQL",
            "explanation": "Cassandra Query Language (CQL) is a query language for the Cassandra database."
        },
        {
            "question": "Which of the following best describes the architecture of Cassandra?",
            "options": [
                "Master-Slave",
                "Master-Master",
                "Peer-to-Peer",
                "Client-Server"
            ],
            "answer": "Peer-to-Peer",
            "explanation": "Cassandra follows a peer-to-peer architecture where all nodes in the cluster are treated equally, avoiding single points of failure."
        },
        {
            "question": "Which company originally developed Cassandra?",
            "options": [
                "Google",
                "Amazon",
                "Facebook",
                "Microsoft"
            ],
            "answer": "Facebook",
            "explanation": "Cassandra was originally developed by Facebook to power their Inbox search feature."
        },
        {
            "question": "In Cassandra, what does the term \"compaction\" refer to?",
            "options": [
                "Combining multiple tables",
                "Shrinking database size",
                "Merging multiple SSTables into one",
                "Distributing data uniformly across nodes"
            ],
            "answer": "Merging multiple SSTables into one",
            "explanation": "Compaction in Cassandra refers to the process of reclaiming space by merging SSTables and discarding duplicate data."
        },
        {
            "question": "Which of the following ensures high availability in Cassandra?",
            "options": [
                "Master node",
                "Sharding",
                "Replication",
                "Compaction"
            ],
            "answer": "Replication",
            "explanation": "To ensure high availability, data is replicated across multiple nodes in a Cassandra cluster."
        },
        {
            "question": "Which consistency level ensures the fastest write operations in Cassandra?",
            "options": [
                "QUORUM",
                "ALL",
                "ONE",
                "TWO"
            ],
            "answer": "ONE",
            "explanation": "With a consistency level of ONE, a write must be written to the commit log and memtable of at least one replica node."
        },
        {
            "question": "Which data structure is used to store data in memory in Cassandra?",
            "options": [
                "B-Tree",
                "AVL Tree",
                "Memtable",
                "Log Structured Merge Tree"
            ],
            "answer": "Memtable",
            "explanation": "In Cassandra, after data is written, it is first stored in a structure in memory called the memtable."
        },
        {
            "question": "What does SSTable stand for in the context of Cassandra?",
            "options": [
                "Super Storage Table",
                "Sorted String Table",
                "Sequential String Table",
                "Sorted String Tree"
            ],
            "answer": "Sorted String Table",
            "explanation": "In Cassandra, SSTable stands for Sorted String Table, which is an immutable data file to which Cassandra writes memtables periodically."
        },
        {
            "question": "In Cassandra, a ‘Keyspace’ is equivalent to what in relational databases?",
            "options": [
                "Column",
                "Table",
                "Database",
                "Row"
            ],
            "answer": "Database",
            "explanation": "In Cassandra, a 'Keyspace' is similar to a 'Database' in relational DBMS. It's a namespace to hold a set of tables."
        },
        {
            "question": "What is the primary write destination in Cassandra?",
            "options": [
                "Disk",
                "Memtable",
                "SSTable",
                "Commit Log"
            ],
            "answer": "Commit Log",
            "explanation": "In Cassandra, the primary write destination is the commit log. Once the write has been committed to the log, it's then written to the memtable."
        },
        {
            "question": "Which of the following is NOT a component of Cassandra's data model?",
            "options": [
                "Column",
                "Column family",
                "Keyset",
                "Super column"
            ],
            "answer": "Keyset",
            "explanation": "Cassandra's data model comprises columns, column families, and super columns. \"Keyset\" is not a term associated with its data model."
        },
        {
            "question": "What is the default port number on which Cassandra's CQL native transport listens?",
            "options": [
                "9041",
                "9042",
                "8080",
                "7000"
            ],
            "answer": "9042",
            "explanation": "By default, Cassandra's CQL native transport listens on port 9042. This is the port that client libraries use to connect to the Cassandra cluster."
        },
        {
            "question": "Which CQL query is used to retrieve all columns of all rows from a table named \"users\"?",
            "options": [
                "SELECT ALL FROM users;",
                "GET * FROM users;",
                "SELECT * FROM users;",
                "READ * FROM users;"
            ],
            "answer": "SELECT * FROM users;",
            "explanation": "In Cassandra's CQL, the correct syntax to retrieve all columns of all rows from a table is SELECT * FROM <table_name>;."
        },
        {
            "question": "In CQL, what is the correct data type to store a UUID (Universally Unique Identifier)?",
            "options": [
                "UNIQUEID",
                "ID",
                "STRING",
                "UUID"
            ],
            "answer": "UUID",
            "explanation": "In CQL, the UUID data type is used to store universally unique identifiers."
        },
        {
            "question": "Which CQL command is used to modify data in an existing row or rows of a table?",
            "options": [
                "MODIFY",
                "CHANGE",
                "ALTER",
                "UPDATE"
            ],
            "answer": "UPDATE",
            "explanation": "The UPDATE command is used in CQL to modify data in an existing row or rows of a table."
        },
        {
            "question": "To delete all rows from a table named \"employees\" without removing the table itself, which query should be used?",
            "options": [
                "DELETE * FROM employees;",
                "DROP ALL FROM employees;",
                "TRUNCATE employees;",
                "REMOVE * FROM employees;"
            ],
            "answer": "TRUNCATE employees;",
            "explanation": "The TRUNCATE command is used to delete all rows from a table while leaving the table structure intact."
        }
    ],
    "Redis": [
        {
            "question": "What type of database is Redis?",
            "options": [
                "Relational Database",
                "NoSQL Database",
                "Graph Database",
                "Document Store"
            ],
            "answer": "NoSQL Database",
            "explanation": "Redis is a NoSQL database, meaning it doesn’t use the traditional relational database structure. Instead, it stores data in a key-value format, making it highly versatile and efficient for various use cases."
        },
        {
            "question": "What data structure does Redis primarily use to store data?",
            "options": [
                "HashMap",
                "Binary Tree",
                "Key-Value Pair",
                "Linked List"
            ],
            "answer": "Key-Value Pair",
            "explanation": "Redis primarily uses key-value pairs to store data. This simple yet powerful data structure allows for fast access and retrieval of data."
        },
        {
            "question": "What does the command SET do in Redis?",
            "options": [
                "Retrieves a value associated with a key",
                "Deletes a key-value pair",
                "Stores a value associated with a key",
                "Updates an existing value without creating a new key"
            ],
            "answer": "Stores a value associated with a key",
            "explanation": "The SET command in Redis is used to store a value associated with a specified key. If the key already exists, the SET command will overwrite the existing value."
        },
        {
            "question": "Which command is used to retrieve the value of a key in Redis?",
            "options": [
                "GET",
                "FETCH",
                "RETRIEVE",
                "QUERY"
            ],
            "answer": "GET",
            "explanation": "The GET command in Redis is used to retrieve the value associated with a specific key. If the key does not exist, it returns nil."
        },
        {
            "question": "What is the maximum number of keys that can be stored in Redis?",
            "options": [
                "232 – 1",
                "264 – 1",
                "1 million",
                "10 million"
            ],
            "answer": "232 – 1",
            "explanation": "Redis can store up to 232 – 1 keys, which is approximately 4.29 billion keys. This large capacity makes Redis suitable for high-scale applications."
        },
        {
            "question": "In Redis, what is the default port number?",
            "options": [
                "5432",
                "6379",
                "8080",
                "27017"
            ],
            "answer": "6379",
            "explanation": "Redis uses port 6379 by default. This port number is chosen because it is “MERZ” spelled upside down, which is a tribute to a piece of art by Kurt Schwitters."
        },
        {
            "question": "Which Redis data type is used to store multiple unique elements in an unordered collection?",
            "options": [
                "String",
                "List",
                "Set",
                "Hash"
            ],
            "answer": "Set",
            "explanation": "A Set in Redis is used to store multiple unique elements in an unordered collection. It is useful for operations like membership tests, intersections, and unions."
        },
        {
            "question": "What does the EXPIRE command do in Redis?",
            "options": [
                "Sets a key to expire after a given number of seconds",
                "Immediately deletes a key",
                "Removes the expiration time from a key",
                "Renames a key"
            ],
            "answer": "Sets a key to expire after a given number of seconds",
            "explanation": "The EXPIRE command sets a timeout on a key, after which the key will be automatically deleted by Redis. This is useful for caching and temporary data storage."
        },
        {
            "question": "How can you check if a key exists in Redis?",
            "options": [
                "CHECK",
                "EXISTS",
                "VERIFY",
                "PING"
            ],
            "answer": "EXISTS",
            "explanation": "The EXISTS command in Redis checks if a key exists in the database. It returns 1 if the key exists and 0 if it does not."
        },
        {
            "question": "Which command is used to remove all keys from all databases in Redis?",
            "options": [
                "FLUSHDB",
                "FLUSHALL",
                "DEL ALL",
                "CLEAR"
            ],
            "answer": "FLUSHALL",
            "explanation": "The FLUSHALL command removes all keys from all databases in Redis. Use this command with caution, as it will delete all data stored in Redis."
        },
        {
            "question": "What does the LPUSH command do in Redis?",
            "options": [
                "Adds an element to the end of a list",
                "Adds an element to the beginning of a list",
                "Removes an element from the end of a list",
                "Removes an element from the beginning of a list"
            ],
            "answer": "Adds an element to the beginning of a list",
            "explanation": "The LPUSH command in Redis adds an element to the beginning (left side) of a list. If the list does not exist, a new list is created."
        },
        {
            "question": "Which Redis data type is used to store a sequence of strings in the order they were added?",
            "options": [
                "String",
                "List",
                "Set",
                "Hash"
            ],
            "answer": "List",
            "explanation": "A List in Redis stores a sequence of strings in the order they were added. Lists support operations like adding elements to the head or tail of the list, and retrieving elements by their index."
        },
        {
            "question": "How do you remove a specific field from a hash in Redis?",
            "options": [
                "HDELETE",
                "HREMOVE",
                "HDEL",
                "HPOP"
            ],
            "answer": "HDEL",
            "explanation": "The HDEL command in Redis is used to delete one or more fields from a hash. If the specified field(s) exist, they are removed; otherwise, the command has no effect."
        },
        {
            "question": "Which of the following is a persistent storage option in Redis?",
            "options": [
                "RDB",
                "AOF",
                "Both RDB and AOF",
                "Redis does not support persistence"
            ],
            "answer": "Both RDB and AOF",
            "explanation": "Redis supports two types of persistent storage: RDB (Redis Database Backup) and AOF (Append-Only File). RDB creates snapshots of the data at regular intervals, while AOF logs every write operation to ensure durability."
        },
        {
            "question": "How can you get the number of elements in a Redis set?",
            "options": [
                "SCARD",
                "SLEN",
                "SCOUNT",
                "SNUM"
            ],
            "answer": "SCARD",
            "explanation": "The SCARD command in Redis returns the number of elements in a set. This is useful for quickly determining the size of a set."
        },
        {
            "question": "What is the default number of databases available in Redis?",
            "options": [
                "1",
                "16",
                "32",
                "64"
            ],
            "answer": "16",
            "explanation": "Redis provides 16 databases by default, numbered from 0 to 15. You can switch between these databases using the SELECT command."
        },
        {
            "question": "Which command is used to remove the expiration time from a key in Redis?",
            "options": [
                "REMOVEEXPIRE",
                "PERSIST",
                "KEEP",
                "REVERT"
            ],
            "answer": "PERSIST",
            "explanation": "The PERSIST command removes the expiration time from a key, making it persistent (i.e., it will not expire)."
        },
        {
            "question": "What does the TTL command do in Redis?",
            "options": [
                "Sets the time-to-live for a key",
                "Retrieves the remaining time-to-live of a key",
                "Deletes a key immediately",
                "Lists all keys with a time-to-live"
            ],
            "answer": "Retrieves the remaining time-to-live of a key",
            "explanation": "The TTL command returns the remaining time-to-live of a key in seconds. If the key does not have an expiration time, it returns -1."
        },
        {
            "question": "Which Redis command is used to atomically increment a numeric value stored at a key?",
            "options": [
                "INCREMENT",
                "INC",
                "INCR",
                "ADD"
            ],
            "answer": "INCR",
            "explanation": "The INCR command atomically increments the numeric value stored at a key by one. This command is commonly used for counters."
        },
        {
            "question": "Which command in Redis is used to get all the keys matching a pattern?",
            "options": [
                "GETALL",
                "FIND",
                "SEARCH",
                "KEYS"
            ],
            "answer": "KEYS",
            "explanation": "The KEYS command in Redis returns all keys that match a specified pattern. This command is useful for finding keys with a common prefix or pattern."
        },
        {
            "question": "What is a Redis Sorted Set?",
            "options": [
                "A collection of unique elements, each associated with a score",
                "A collection of elements sorted alphabetically",
                "A collection of key-value pairs sorted by the key",
                "A collection of lists sorted by length"
            ],
            "answer": "A collection of unique elements, each associated with a score",
            "explanation": "A Redis Sorted Set is a collection of unique elements, each associated with a score. The elements are sorted by their scores, and the same score can be associated with multiple elements."
        },
        {
            "question": "Which command is used to add a member to a Sorted Set in Redis?",
            "options": [
                "ZADD",
                "SADD",
                "ZSET",
                "SSET"
            ],
            "answer": "ZADD",
            "explanation": "The ZADD command adds a member to a Sorted Set, along with its associated score. If the member already exists, the score is updated."
        },
        {
            "question": "What does the DEL command do in Redis?",
            "options": [
                "Deletes a key-value pair",
                "Deletes all keys",
                "Deletes all keys in the current database",
                "Deletes a specific key from all databases"
            ],
            "answer": "Deletes a key-value pair",
            "explanation": "The DEL command deletes a specified key-value pair from the database. If the key does not exist, the command has no effect."
        },
        {
            "question": "What does the RPOP command do in Redis?",
            "options": [
                "Removes and returns the last element of a list",
                "Removes and returns the first element of a list",
                "Removes all elements from a list",
                "Removes a specified element from a list"
            ],
            "answer": "Removes and returns the last element of a list",
            "explanation": "The RPOP command removes and returns the last element of a list. This command is useful for implementing stack-like behavior in Redis."
        },
        {
            "question": "What is the purpose of the MSET command in Redis?",
            "options": [
                "Sets multiple keys to multiple values",
                "Gets the values of multiple keys",
                "Deletes multiple keys",
                "Checks if multiple keys exist"
            ],
            "answer": "Sets multiple keys to multiple values",
            "explanation": "The MSET command in Redis is used to set multiple keys to multiple values in a single operation, which is faster and more efficient than setting each key-value pair individually."
        },
        {
            "question": "Which command is used to retrieve all the fields and values of a hash in Redis?",
            "options": [
                "HGET",
                "HGETALL",
                "HKEYS",
                "HVALS"
            ],
            "answer": "HGETALL",
            "explanation": "The HGETALL command retrieves all the fields and their corresponding values from a hash in Redis. The command returns the data as an array of field-value pairs."
        },
        {
            "question": "What is a Redis pipeline?",
            "options": [
                "A way to execute multiple commands in a single request",
                "A method to store data in different formats",
                "A type of data structure in Redis",
                "A way to synchronize data between different Redis instances"
            ],
            "answer": "A way to execute multiple commands in a single request",
            "explanation": "A Redis pipeline is a feature that allows you to send multiple commands to the server in a single request. This can reduce latency and improve performance by minimizing the number of round trips between the client and server."
        },
        {
            "question": "How do you rename a key in Redis?",
            "options": [
                "RENAMEKEY",
                "RENAME",
                "ALTERKEY",
                "CHANGENAME"
            ],
            "answer": "RENAME",
            "explanation": "The RENAME command in Redis is used to change the name of a key. If the new key name already exists, its value is overwritten."
        },
        {
            "question": "Which command is used to increment the score of a member in a Sorted Set?",
            "options": [
                "ZINCR",
                "ZINCRBY",
                "ZADDINCR",
                "ZUPDATEMEMBER"
            ],
            "answer": "ZINCRBY",
            "explanation": "The ZINCRBY command increments the score of a member in a Sorted Set by a specified amount. This is useful for updating rankings or scores dynamically."
        },
        {
            "question": "What is the purpose of the WATCH command in Redis?",
            "options": [
                "Monitors changes to specific keys",
                "Views all commands executed on the server",
                "Locks a key to prevent changes",
                "Tracks memory usage of specific keys"
            ],
            "answer": "Monitors changes to specific keys",
            "explanation": "The WATCH command in Redis is used to monitor one or more keys for changes. If any of the watched keys are modified before a transaction is executed, the transaction will be aborted."
        },
        {
            "question": "Which command is used to get the length of a list in Redis?",
            "options": [
                "LLEN",
                "LISTLEN",
                "LSIZE",
                "LLENGTH"
            ],
            "answer": "LLEN",
            "explanation": "The LLEN command in Redis returns the length of a list, that is, the number of elements present in the list."
        },
        {
            "question": "How do you check the memory usage of a specific key in Redis?",
            "options": [
                "MEMORY CHECK",
                "MEMUSAGE",
                "MEMORY USAGE",
                "MEMSIZE"
            ],
            "answer": "MEMORY USAGE",
            "explanation": "The MEMORY USAGE command in Redis provides an estimate of the number of bytes that a key and its associated value are consuming in memory."
        },
        {
            "question": "Which command in Redis is used to move a key to another database?",
            "options": [
                "MOVETO",
                "MIGRATE",
                "TRANSFER",
                "MOVE"
            ],
            "answer": "MOVE",
            "explanation": "The MOVE command in Redis moves a key from the current database to another specified database. This command is useful for organizing data across multiple databases."
        },
        {
            "question": "How can you list all the available databases in Redis?",
            "options": [
                "LISTDBS",
                "DBS",
                "INFO",
                "SHOWDBS"
            ],
            "answer": "INFO",
            "explanation": "The INFO command in Redis provides detailed information about the server, including the available databases. You can use this command to check the number of databases and their usage."
        },
        {
            "question": "What is a Redis Cluster?",
            "options": [
                "A group of Redis instances working together",
                "A method to store data in different formats",
                "A single Redis instance with multiple databases",
                "A special data structure in Redis"
            ],
            "answer": "A group of Redis instances working together",
            "explanation": "A Redis Cluster is a group of Redis instances that work together to provide scalability, high availability, and fault tolerance. Data is automatically partitioned across multiple nodes in the cluster."
        },
        {
            "question": "Which command is used to start a Redis server?",
            "options": [
                "redis-start",
                "redis-server",
                "redis-init",
                "start-redis"
            ],
            "answer": "redis-server",
            "explanation": "The redis-server command is used to start a Redis server. This command initializes the server and begins listening for client connections on the default or specified port."
        },
        {
            "question": "What does the PING command do in Redis?",
            "options": [
                "Checks the network latency",
                "Tests the connection to the Redis server",
                "Retrieves the value of a key",
                "Lists all active clients"
            ],
            "answer": "Tests the connection to the Redis server",
            "explanation": "The PING command in Redis is used to test the connection to the Redis server. If the server is running and accessible, it returns a “PONG” response."
        },
        {
            "question": "Which command is used to retrieve the configuration parameters of a Redis server?",
            "options": [
                "CONFIG GET",
                "CONFIG SHOW",
                "SHOW CONFIG",
                "GET CONFIG"
            ],
            "answer": "CONFIG GET",
            "explanation": "The CONFIG GET command is used to retrieve the configuration parameters of a Redis server. It can be used to check current settings or troubleshoot issues."
        },
        {
            "question": "What does the BITOP command do in Redis?",
            "options": [
                "Performs bitwise operations on string values",
                "Retrieves the value of a specific bit",
                "Sets the value of a specific bit",
                "Counts the number of set bits in a string"
            ],
            "answer": "Performs bitwise operations on string values",
            "explanation": "The BITOP command in Redis is used to perform bitwise operations (AND, OR, XOR, and NOT) on string values. The result is stored in a destination key."
        },
        {
            "question": "What is the default memory eviction policy in Redis?",
            "options": [
                "noeviction",
                "allkeys-lru",
                "volatile-lru",
                "allkeys-random"
            ],
            "answer": "noeviction",
            "explanation": "The default memory eviction policy in Redis is noeviction, which means Redis will return an error when memory limits are reached, rather than evicting keys. Other policies like allkeys-lru can be configured if needed."
        },
        {
            "question": "Which command is used to shutdown a Redis server?",
            "options": [
                "shutdown",
                "stop",
                "redis-stop",
                "stop-redis"
            ],
            "answer": "shutdown",
            "explanation": "The shutdown command is used to gracefully stop a Redis server. It ensures that all data is saved (if configured) before terminating the process."
        },
        {
            "question": "How can you atomically rename a key only if the new key does not exist in Redis?",
            "options": [
                "RENAMENX",
                "RENAMEIFNOT",
                "RENAME",
                "RENAMEONLY"
            ],
            "answer": "RENAMENX",
            "explanation": "The RENAMENX command renames a key only if the new key does not already exist. This command is atomic, meaning it is executed as a single, indivisible operation."
        },
        {
            "question": "What is the purpose of the SCAN command in Redis?",
            "options": [
                "Iterates over a collection of keys or elements",
                "Lists all keys in the database",
                "Removes keys matching a pattern",
                "Sorts a list of keys"
            ],
            "answer": "Iterates over a collection of keys or elements",
            "explanation": "The SCAN command is used to iterate over a collection of keys, hash fields, sets, or sorted sets. It is a safer alternative to the KEYS command for large datasets, as it avoids blocking the server."
        },
        {
            "question": "Which command is used to add an element to a Redis set?",
            "options": [
                "ADD",
                "SETADD",
                "SADD",
                "SET"
            ],
            "answer": "SADD",
            "explanation": "The SADD command adds one or more elements to a Redis set. If the element already exists, it is not added again, as sets do not allow duplicate elements."
        },
        {
            "question": "What does the HINCRBY command do in Redis?",
            "options": [
                "Increments the integer value of a hash field by a specified amount",
                "Increments all fields in a hash by one",
                "Increments a key by a specified amount",
                "Increments all keys by a specified amount"
            ],
            "answer": "Increments the integer value of a hash field by a specified amount",
            "explanation": "The HINCRBY command increments the integer value of a hash field by a specified amount. This is useful for counters stored within a hash."
        },
        {
            "question": "Which command is used to remove an element from a set in Redis?",
            "options": [
                "SPOP",
                "SREM",
                "SDELETE",
                "SETREM"
            ],
            "answer": "SREM",
            "explanation": "The SREM command removes one or more elements from a Redis set. If the element does not exist in the set, it is ignored."
        },
        {
            "question": "What does the CONFIG SET command do in Redis?",
            "options": [
                "Changes the configuration of a Redis server",
                "Sets the value of a key",
                "Sets the value of multiple keys",
                "Initializes the Redis server"
            ],
            "answer": "Changes the configuration of a Redis server",
            "explanation": "The CONFIG SET command in Redis changes the configuration of a running Redis server without requiring a restart. This command is useful for tuning performance and modifying settings dynamically."
        },
        {
            "question": "Which Redis command is used to perform a bitwise AND operation on multiple keys?",
            "options": [
                "BITAND",
                "BITOP AND",
                "BITWISEAND",
                "AND"
            ],
            "answer": "BITOP AND",
            "explanation": "The BITOP AND command performs a bitwise AND operation on multiple keys and stores the result in a destination key. This command is part of the BITOP family of commands in Redis."
        },
        {
            "question": "How can you persist the data stored in Redis to disk?",
            "options": [
                "SAVE",
                "PERSIST",
                "DUMP",
                "BACKUP"
            ],
            "answer": "SAVE",
            "explanation": "The SAVE command forces Redis to perform a synchronous save of the data stored in memory to disk, creating an RDB snapshot. This ensures that your data is persisted across server restarts."
        },
        {
            "question": "What is the purpose of the PUBSUB command in Redis?",
            "options": [
                "Manages the publish/subscribe messaging system",
                "Publishes data to a key",
                "Subscribes to a key",
                "Lists all active clients"
            ],
            "answer": "Manages the publish/subscribe messaging system",
            "explanation": "The PUBSUB command in Redis is used to manage the publish/subscribe messaging system. It allows you to check the state of the channels, list active subscriptions, and more."
        }
    ],
    "Apache Spark": [
        {
            "question": "Apache Spark is primarily written in which language?",
            "options": [
                "Java",
                "Python",
                "Scala",
                "Go"
            ],
            "answer": "Scala",
            "explanation": "Apache Spark is mainly written in Scala, but it provides APIs for Java, Scala, Python, and R."
        },
        {
            "question": "Which Spark module provides a programming interface for data structured in rows and columns?",
            "options": [
                "Spark Streaming",
                "Spark SQL",
                "Spark MLlib",
                "GraphX"
            ],
            "answer": "Spark SQL",
            "explanation": "Spark SQL offers a programming interface for structured data and allows querying the data using SQL."
        },
        {
            "question": "Which of the following is NOT a core component of Spark?",
            "options": [
                "Driver Program",
                "Cluster Manager",
                "Executors",
                "Zookeeper"
            ],
            "answer": "Zookeeper",
            "explanation": "Zookeeper is not a core component of Spark. It is primarily used in the Hadoop ecosystem."
        },
        {
            "question": "Which data structure represents an immutable, distributed collection of objects in Spark?",
            "options": [
                "DataFrame",
                "DataSet",
                "RDD (Resilient Distributed Dataset)",
                "Block"
            ],
            "answer": "RDD (Resilient Distributed Dataset)",
            "explanation": "RDD is the fundamental data structure in Spark representing an immutable, distributed collection of objects."
        },
        {
            "question": "In which mode does Spark run if you don’t configure a Cluster Manager?",
            "options": [
                "YARN",
                "Mesos",
                "Standalone",
                "Kubernetes"
            ],
            "answer": "Standalone",
            "explanation": "By default, if no Cluster Manager is specified, Spark runs in Standalone mode."
        },
        {
            "question": "Which Spark library allows real-time data processing?",
            "options": [
                "Spark MLlib",
                "Spark SQL",
                "GraphX",
                "Spark Streaming"
            ],
            "answer": "Spark Streaming",
            "explanation": "Spark Streaming is designed for real-time data processing and analysis."
        },
        {
            "question": "What command in the Spark shell is used to stop the SparkContext?",
            "options": [
                "spark.stop()",
                "stop.spark()",
                "spark.exit()",
                "exit.spark()"
            ],
            "answer": "spark.stop()",
            "explanation": "To stop the SparkContext, the spark.stop() command is used in the Spark shell."
        },
        {
            "question": "Which function is used to transform one RDD into another RDD in Spark?",
            "options": [
                "map()",
                "reduce()",
                "groupBy()",
                "filter()"
            ],
            "answer": "map()",
            "explanation": "The map() function is used to transform the data in one RDD to create a new RDD."
        },
        {
            "question": "In Spark, partitions are…",
            "options": [
                "Logical chunks of data",
                "Physical storage spaces",
                "Nodes in the cluster",
                "Separate clusters"
            ],
            "answer": "Logical chunks of data",
            "explanation": "In Spark, partitions represent logical chunks of data, allowing for distributed data processing."
        },
        {
            "question": "Spark's MLlib is used for…",
            "options": [
                "Graph computation",
                "Real-time processing",
                "Machine Learning",
                "SQL-based querying"
            ],
            "answer": "Machine Learning",
            "explanation": "MLlib is Spark’s machine learning library, providing several algorithms and utilities for ML tasks."
        },
        {
            "question": "What is the role of the Spark Driver?",
            "options": [
                "To run the main function and create RDDs.",
                "To physically store data.",
                "To distribute data across cluster nodes.",
                "To manage network traffic."
            ],
            "answer": "To run the main function and create RDDs.",
            "explanation": "The Spark Driver runs the main application, creates RDDs, and schedules tasks on the executors."
        },
        {
            "question": "How can you cache an RDD in Spark?",
            "options": [
                "rdd.cacheMe()",
                "rdd.store()",
                "rdd.keep()",
                "rdd.cache()"
            ],
            "answer": "rdd.cache()",
            "explanation": "The rdd.cache() method is used in Spark to cache an RDD for faster access during repeated operations."
        },
        {
            "question": "Which Spark component communicates with the cluster manager to ask for resources?",
            "options": [
                "Executors",
                "SparkContext",
                "Driver Program",
                "Tasks"
            ],
            "answer": "SparkContext",
            "explanation": "SparkContext is responsible for communicating with the cluster manager and coordinating the allocation of resources."
        },
        {
            "question": "Spark supports which of the following file formats for data processing?",
            "options": [
                "JSON, Parquet, and Avro",
                "XML only",
                "Text files only",
                "CSV only"
            ],
            "answer": "JSON, Parquet, and Avro",
            "explanation": "Apache Spark supports various file formats, including JSON, Parquet, and Avro, among others."
        },
        {
            "question": "DataFrames in Spark are similar to tables in…",
            "options": [
                "Word documents",
                "RDBMS",
                "PowerPoint",
                "Paint"
            ],
            "answer": "RDBMS",
            "explanation": "DataFrames in Spark can be considered equivalent to tables in Relational Database Management Systems (RDBMS) with support for querying using SQL."
        },
        {
            "question": "For handling large graphs and graph computation, Spark provides…",
            "options": [
                "GraphFrame",
                "GraphSQL",
                "GraphDB",
                "GraphX"
            ],
            "answer": "GraphX",
            "explanation": "GraphX is Spark's API for graphs and graph computation."
        },
        {
            "question": "The primary programming abstraction of Spark Streaming is…",
            "options": [
                "Continuous Data Stream",
                "DStream",
                "FastStream",
                "RStream"
            ],
            "answer": "DStream",
            "explanation": "DStream, or Discretized Stream, is the primary abstraction in Spark Streaming representing a continuous stream of data."
        },
        {
            "question": "Which of the following can be a source of data for Spark Streaming?",
            "options": [
                "Kafka",
                "HBase",
                "MongoDB",
                "SQLite"
            ],
            "answer": "Kafka",
            "explanation": "Kafka is a popular source for Spark Streaming, allowing for the processing of real-time data streams."
        },
        {
            "question": "How can Spark be integrated with Hadoop?",
            "options": [
                "By using Spark with HDFS for storage.",
                "By replacing Hadoop's MapReduce with Spark.",
                "Both a and b.",
                "None of the above."
            ],
            "answer": "Both a and b.",
            "explanation": "Spark can use HDFS for storage and can also replace Hadoop's MapReduce for processing, giving more flexibility and performance."
        },
        {
            "question": "What is the advantage of using DataFrames or Datasets over RDDs?",
            "options": [
                "They are more resilient.",
                "They allow for low-level transformations.",
                "They provide optimizations using Catalyst and Tungsten.",
                "They are more challenging to use."
            ],
            "answer": "They provide optimizations using Catalyst and Tungsten.",
            "explanation": "DataFrames and Datasets benefit from Spark's Catalyst optimizer and Tungsten execution engine for performance improvements."
        },
        {
            "question": "What does the 'reduceByKey' function do in Spark?",
            "options": [
                "Reduces the dataset size by a factor specified by the key.",
                "Groups the dataset based on keys.",
                "Merges the values for each key using an associative reduce function.",
                "Filters out all entries that don't match the specified key."
            ],
            "answer": "Merges the values for each key using an associative reduce function.",
            "explanation": "The reduceByKey function in Spark merges the values for each key using the given reduce function."
        },
        {
            "question": "In Spark's local mode, how many worker nodes does it run on?",
            "options": [
                "Multiple nodes as specified.",
                "Zero nodes.",
                "Only one node.",
                "Depends on the cluster manager."
            ],
            "answer": "Only one node.",
            "explanation": "In local mode, Spark runs on a single machine with one executor."
        }
    ],
    "Apache Kafka": [
        {
            "question": "What is Apache Kafka primarily used for?",
            "options": [
                "Image Processing",
                "Real-time streaming and processing",
                "Databases",
                "Machine Learning"
            ],
            "answer": "Real-time streaming and processing",
            "explanation": "Apache Kafka is designed for real-time data streaming and processing."
        },
        {
            "question": "Which of the following is NOT a core API in Kafka?",
            "options": [
                "Producer API",
                "Consumer API",
                "Streaming API",
                "Learning API"
            ],
            "answer": "Learning API",
            "explanation": "Kafka does not have a \"Learning API\". The main APIs are Producer, Consumer, and Streams."
        },
        {
            "question": "What is a Kafka broker?",
            "options": [
                "An API",
                "A Kafka server",
                "A topic",
                "A data record"
            ],
            "answer": "A Kafka server",
            "explanation": "A broker is a Kafka server that stores data and serves client requests."
        },
        {
            "question": "What is the purpose of a Kafka broker?",
            "options": [
                "To produce messages.",
                "To consume messages.",
                "To store data and serve client requests.",
                "To route messages to different networks."
            ],
            "answer": "To store data and serve client requests.",
            "explanation": "A Kafka broker is a server that stores data and handles client requests (from producers and consumers). Brokers form the backbone of the Kafka cluster."
        },
        {
            "question": "Which of the following best describes Kafka's durability?",
            "options": [
                "Data is stored temporarily",
                "Data is never saved",
                "Data is stored persistently",
                "Data is saved only in memory"
            ],
            "answer": "Data is stored persistently",
            "explanation": "Kafka ensures data persistence by storing records on disk and replicating data across multiple brokers."
        },
        {
            "question": "What does the Kafka Consumer API allow you to do?",
            "options": [
                "Send data to topics",
                "Process data streams",
                "Consume data from topics",
                "Monitor Kafka topics"
            ],
            "answer": "Consume data from topics",
            "explanation": "The Consumer API allows applications to read (consume) data from Kafka topics."
        },
        {
            "question": "What are Kafka partitions used for?",
            "options": [
                "Data backup",
                "Load balancing of data",
                "Monitoring",
                "Data encryption"
            ],
            "answer": "Load balancing of data",
            "explanation": "Partitions allow Kafka to horizontally scale as each partition can be hosted on a different server."
        },
        {
            "question": "What ensures data availability in case a Kafka broker fails?",
            "options": [
                "Checkpoints",
                "Replicas",
                "Backups",
                "Snapshots"
            ],
            "answer": "Replicas",
            "explanation": "Kafka topics are replicated across multiple brokers to ensure data availability in case of a broker failure."
        },
        {
            "question": "By default, where does a Kafka consumer start reading messages in a topic?",
            "options": [
                "From the beginning",
                "From the last message",
                "From the latest offset",
                "From a random offset"
            ],
            "answer": "From the latest offset",
            "explanation": "By default, a Kafka consumer starts reading messages from the latest offset, which means it doesn't consume old messages unless configured otherwise."
        },
        {
            "question": "In Kafka, a producer…",
            "options": [
                "Consumes data streams",
                "Sends messages to topics",
                "Manages topic replication",
                "Monitors topic offsets"
            ],
            "answer": "Sends messages to topics",
            "explanation": "A producer is responsible for sending data records to Kafka topics."
        },
        {
            "question": "What is the importance of an offset in Kafka?",
            "options": [
                "It determines the order of messages",
                "It encrypts the messages",
                "It compresses the message data",
                "It replicates the data"
            ],
            "answer": "It determines the order of messages",
            "explanation": "Each message within a partition has a unique offset which indicates its position in the sequence."
        },
        {
            "question": "How does Kafka ensure data integrity?",
            "options": [
                "By using data checksums",
                "By replicating data once",
                "By encrypting all data",
                "By avoiding persistent storage"
            ],
            "answer": "By using data checksums",
            "explanation": "Kafka uses checksums to validate the integrity of data."
        },
        {
            "question": "Which of the following ensures message order in Kafka?",
            "options": [
                "Broker",
                "Consumer",
                "Partition",
                "Replica"
            ],
            "answer": "Partition",
            "explanation": "Within a Kafka partition, the order of messages is maintained. However, across different partitions, the order isn't guaranteed."
        },
        {
            "question": "Which of the following best describes a Kafka Cluster?",
            "options": [
                "A collection of Kafka topics",
                "A type of Kafka API",
                "A collection of Kafka brokers working together",
                "A method to process data in Kafka"
            ],
            "answer": "A collection of Kafka brokers working together",
            "explanation": "A Kafka cluster consists of multiple brokers that work together to manage and maintain data records."
        },
        {
            "question": "If a Kafka Broker goes down, what ensures the data is not lost?",
            "options": [
                "Data is backed up in cloud storage",
                "Data is replicated across multiple brokers in the cluster",
                "Data is saved in external databases",
                "Kafka uses failover servers"
            ],
            "answer": "Data is replicated across multiple brokers in the cluster",
            "explanation": "Replication in Kafka ensures that even if a broker (or multiple brokers) fails, data will not be lost."
        },
        {
            "question": "Which role does the Kafka Producer primarily play?",
            "options": [
                "Consumes data from the Kafka topic",
                "Coordinates the brokers in the cluster",
                "Sends data to the Kafka topic",
                "Ensures data replication"
            ],
            "answer": "Sends data to the Kafka topic",
            "explanation": "The primary role of a Kafka producer is to publish or send data records to topics."
        },
        {
            "question": "What is the function of a Kafka Consumer?",
            "options": [
                "Producing data to topics",
                "Managing the Kafka cluster",
                "Reading data from a topic",
                "Storing data in partitions"
            ],
            "answer": "Reading data from a topic",
            "explanation": "A Kafka consumer subscribes to one or more topics and reads (consumes) the data from them."
        },
        {
            "question": "How is a Kafka Topic best described?",
            "options": [
                "A replication factor",
                "A Kafka API",
                "A queue for storing data records",
                "A method of consuming data"
            ],
            "answer": "A queue for storing data records",
            "explanation": "A Kafka topic is a distinct category or feed to which data records are published."
        },
        {
            "question": "Why are Kafka Partitions important?",
            "options": [
                "They ensure data encryption",
                "They replicate data across clusters",
                "They allow for horizontal scalability and parallel processing",
                "They coordinate broker activities"
            ],
            "answer": "They allow for horizontal scalability and parallel processing",
            "explanation": "Partitions enable Kafka topics to scale by splitting the data across multiple nodes in the cluster."
        },
        {
            "question": "In the context of Kafka, what are Offsets?",
            "options": [
                "Encryption keys",
                "Data replication factors",
                "Unique IDs for brokers",
                "Sequence IDs for messages within a partition"
            ],
            "answer": "Sequence IDs for messages within a partition",
            "explanation": "An offset is a unique identifier for a record within a Kafka partition, indicating its position in the sequence."
        },
        {
            "question": "If you have multiple consumers reading from the same topic, what allows them to keep track of messages they have already read?",
            "options": [
                "Partitions",
                "Brokers",
                "Offsets",
                "Producer IDs"
            ],
            "answer": "Offsets",
            "explanation": "Each consumer tracks its offset, signifying up to where it has read, so it knows where to continue from."
        },
        {
            "question": "What is a Consumer Group in Kafka?",
            "options": [
                "A group of topics",
                "A collection of producers",
                "A set of consumers sharing a common group identifier",
                "A cluster of brokers"
            ],
            "answer": "A set of consumers sharing a common group identifier",
            "explanation": "A Consumer Group consists of multiple consumers that share a common identifier. They work together to consume data, ensuring each record is processed once."
        },
        {
            "question": "Why would you use multiple consumers in a Consumer Group?",
            "options": [
                "To produce data to multiple topics",
                "To consume data from multiple clusters",
                "To achieve parallel processing of data and improve consumption speed",
                "To backup data in Kafka"
            ],
            "answer": "To achieve parallel processing of data and improve consumption speed",
            "explanation": "Having multiple consumers in a consumer group allows them to read from different partitions in parallel, speeding up data consumption."
        },
        {
            "question": "What is the primary role of ZooKeeper in a Kafka cluster?",
            "options": [
                "Storing actual message data.",
                "Balancing load between Kafka brokers.",
                "Managing topic and partition metadata.",
                "Compressing data for faster transmission."
            ],
            "answer": "Managing topic and partition metadata.",
            "explanation": "In the Kafka ecosystem, ZooKeeper's main role is to manage broker metadata, such as topic and partition information. It doesn't store the actual message data; that's handled by the Kafka brokers. ZooKeeper ensures all broker nodes have consistent metadata, making the cluster robust and fault-tolerant."
        },
        {
            "question": "If ZooKeeper fails in a Kafka cluster, what is the most likely immediate impact?",
            "options": [
                "Message data will be lost.",
                "New topics cannot be created, but existing topics will continue to function.",
                "The entire Kafka cluster will go offline.",
                "Kafka will start using another tool automatically."
            ],
            "answer": "New topics cannot be created, but existing topics will continue to function.",
            "explanation": "While ZooKeeper is vital for the management of metadata within a Kafka cluster, its failure doesn't imply the loss of message data or the entire Kafka cluster going offline. Existing topics will continue to operate since the brokers have the information they need for ongoing operations. However, operations that require coordination, such as creating new topics, will not be possible until ZooKeeper is restored."
        }
    ],
    "RabbitMQ": [
        {
            "question": "What primary role does RabbitMQ serve in an application architecture?",
            "options": [
                "Web server.",
                "Database management system.",
                "Message broker.",
                "Cache storage."
            ],
            "answer": "Message broker.",
            "explanation": "RabbitMQ is primarily known as a message broker. It accepts and forwards messages by offering a common platform for sending and receiving messages between applications."
        },
        {
            "question": "In RabbitMQ, what is a Queue?",
            "options": [
                "A protocol for communication.",
                "A mechanism to forward messages.",
                "A data structure that stores messages.",
                "A tool for monitoring system health."
            ],
            "answer": "A data structure that stores messages.",
            "explanation": "In RabbitMQ, a Queue is a data structure that stores messages until they are consumed or until they expire."
        },
        {
            "question": "Which language is RabbitMQ written in?",
            "options": [
                "Python",
                "Java",
                "Erlang",
                "C++"
            ],
            "answer": "Erlang",
            "explanation": "RabbitMQ is written in Erlang and is built on the Open Telecom Platform framework for clustering and failover."
        },
        {
            "question": "Which of the following is NOT a component of RabbitMQ?",
            "options": [
                "Producer",
                "Exchange",
                "Topic",
                "Channel."
            ],
            "answer": "Topic",
            "explanation": "While 'Topic' is an exchange type in RabbitMQ, it is not a primary component like Producer, Exchange, or Channel. A producer sends messages, an exchange routes them, and a channel is a virtual connection inside a connection."
        },
        {
            "question": "What role does a Producer play in RabbitMQ?",
            "options": [
                "Consumes messages from a queue.",
                "Establishes a TCP connection with RabbitMQ.",
                "Sends messages to RabbitMQ for consumption.",
                "Defines rules for message routing."
            ],
            "answer": "Sends messages to RabbitMQ for consumption.",
            "explanation": "A producer is an application that sends or produces messages to RabbitMQ."
        },
        {
            "question": "Which component in RabbitMQ is responsible for routing a message to one or multiple queues?",
            "options": [
                "Consumer",
                "Producer",
                "Binding",
                "Exchange"
            ],
            "answer": "Exchange",
            "explanation": "The Exchange in RabbitMQ is responsible for receiving messages from the producer and routing them to one or several queues, based on certain rules and bindings."
        },
        {
            "question": "What is the main protocol used by RabbitMQ?",
            "options": [
                "HTTP",
                "MQTT",
                "AMQP",
                "FTP"
            ],
            "answer": "AMQP",
            "explanation": "RabbitMQ primarily uses the Advanced Message Queuing Protocol (AMQP) for messaging. While it supports other protocols like MQTT, STOMP, etc., AMQP is the foundational protocol for RabbitMQ."
        },
        {
            "question": "What are producers in the context of RabbitMQ?",
            "options": [
                "They consume messages from the queue.",
                "They monitor message traffic.",
                "They generate and send messages to a queue.",
                "They store messages."
            ],
            "answer": "They generate and send messages to a queue.",
            "explanation": "Producers create messages and publish (send) them to exchanges in RabbitMQ."
        },
        {
            "question": "What is the primary function of a binding in RabbitMQ?",
            "options": [
                "Connecting a producer to an exchange",
                "Storing messages",
                "Linking an exchange to a queue",
                "Consuming messages from a queue"
            ],
            "answer": "Linking an exchange to a queue",
            "explanation": "Bindings determine how messages flow from exchanges to queues."
        },
        {
            "question": "Which type of exchange routes messages based on a wildcard pattern match?",
            "options": [
                "Direct",
                "Fanout",
                "Topic",
                "Headers"
            ],
            "answer": "Topic",
            "explanation": "The topic exchange routes messages to bound queues based on a wildcard pattern match against routing keys."
        },
        {
            "question": "What is a \"Dead Letter Exchange\" in RabbitMQ?",
            "options": [
                "An exchange for storing unprocessed messages",
                "An exchange where messages go if they can't be routed",
                "An exchange used for messages that need to be delayed",
                "An exchange that verifies the authenticity of messages"
            ],
            "answer": "An exchange where messages go if they can't be routed",
            "explanation": "If a message can't be delivered to any queue (for reasons like being rejected by a consumer), it can be rerouted to a Dead Letter Exchange."
        },
        {
            "question": "Which feature allows RabbitMQ to balance the load of message processing across multiple consumers?",
            "options": [
                "Message persistence",
                "Priority queuing",
                "Message acknowledgment",
                "Fair dispatching"
            ],
            "answer": "Fair dispatching",
            "explanation": "Fair dispatching uses the basic.qos method with the prefetch setting to ensure that RabbitMQ distributes messages evenly and fairly among consumers."
        },
        {
            "question": "What is a Consumer in RabbitMQ?",
            "options": [
                "A TCP connection to the RabbitMQ broker.",
                "A buffer that temporarily stores messages.",
                "An application that retrieves or consumes messages from RabbitMQ.",
                "An application that sets rules for message routing."
            ],
            "answer": "An application that retrieves or consumes messages from RabbitMQ.",
            "explanation": "Consumers receive messages from queues in RabbitMQ and process them."
        },
        {
            "question": "In RabbitMQ, what is the primary purpose of a Queue?",
            "options": [
                "To define routing rules for messages.",
                "To establish a connection to RabbitMQ.",
                "To store messages temporarily until they are consumed.",
                "To authenticate users."
            ],
            "answer": "To store messages temporarily until they are consumed.",
            "explanation": "A queue in RabbitMQ holds messages sent by producers until they can be processed by consumers."
        },
        {
            "question": "Which of the following best describes a Message in RabbitMQ?",
            "options": [
                "A set of routing rules.",
                "A TCP connection.",
                "An application that consumes data.",
                "Information sent between a producer and a consumer."
            ],
            "answer": "Information sent between a producer and a consumer.",
            "explanation": "A message is the data or information that is sent from the producer to the consumer via RabbitMQ."
        },
        {
            "question": "What is a Connection in the context of RabbitMQ?",
            "options": [
                "A buffer that stores messages.",
                "The rules that determine message routing.",
                "A TCP connection between the application and the RabbitMQ broker.",
                "A protocol used for messaging."
            ],
            "answer": "A TCP connection between the application and the RabbitMQ broker.",
            "explanation": "A connection refers to the TCP connection established between an application and the RabbitMQ server."
        },
        {
            "question": "Why might an application use multiple Channels in RabbitMQ within a single Connection?",
            "options": [
                "To connect to multiple RabbitMQ servers.",
                "To simultaneously send and receive multiple messages.",
                "To define different routing rules.",
                "To increase the size of the message buffer."
            ],
            "answer": "To simultaneously send and receive multiple messages.",
            "explanation": "Channels provide a way to multiplex a single TCP connection to send and receive multiple messages concurrently, without the need for multiple TCP connections."
        },
        {
            "question": "What is the primary role of an Exchange in RabbitMQ?",
            "options": [
                "Temporarily storing messages.",
                "Establishing a TCP connection.",
                "Sending messages to appropriate queues based on routing rules.",
                "Consuming messages from the queue."
            ],
            "answer": "Sending messages to appropriate queues based on routing rules.",
            "explanation": "Exchanges receive messages from producers and route them to the appropriate queues, based on predefined rules and bindings."
        },
        {
            "question": "In RabbitMQ, how is a Queue linked to an Exchange?",
            "options": [
                "Through a Message.",
                "Through a Consumer.",
                "Through a Binding.",
                "Through a Channel."
            ],
            "answer": "Through a Binding.",
            "explanation": "Bindings define the relationship between queues and exchanges, determining which messages flow into which queues."
        },
        {
            "question": "What does the Routing key help determine in RabbitMQ?",
            "options": [
                "The size of the message.",
                "The TCP port to connect to.",
                "The message's destination queue based on its value.",
                "The protocol version."
            ],
            "answer": "The message's destination queue based on its value.",
            "explanation": "The routing key is like an address for the message. The exchange uses the routing key to determine which queues the message should be delivered to."
        },
        {
            "question": "What does AMQP stand for in RabbitMQ?",
            "options": [
                "Asynchronous Message Query Protocol.",
                "Advanced Messaging Queue Property.",
                "Automatic Message Queueing Protocol.",
                "Advanced Message Queuing Protocol."
            ],
            "answer": "Advanced Message Queuing Protocol.",
            "explanation": "AMQP is a protocol used by RabbitMQ and other message brokers for messaging."
        }
    ],
    "DevOps": [
        {
            "question": "What does 'DevOps' stand for?",
            "options": [
                "Development Operations",
                "Device Operations",
                "Deviant Operations",
                "Developer's Operations"
            ],
            "answer": "Development Operations",
            "explanation": "DevOps combines \"Development\" and \"Operations\", emphasizing collaboration between developers and IT operations teams."
        },
        {
            "question": "Which tool is commonly used for Continuous Integration and Continuous Deployment (CI/CD)?",
            "options": [
                "Jenkins",
                "Docker",
                "Git",
                "Ansible"
            ],
            "answer": "Jenkins",
            "explanation": "Jenkins is a widely-used open-source tool that facilitates both Continuous Integration and Continuous Deployment."
        },
        {
            "question": "What does CI in CI/CD stand for?",
            "options": [
                "Continuous Input",
                "Continuous Integration",
                "Continuous Improvement",
                "Continuous Installation"
            ],
            "answer": "Continuous Integration",
            "explanation": "CI stands for Continuous Integration, a practice where developers integrate code into a shared repository frequently."
        },
        {
            "question": "Which of the following is NOT a configuration management tool?",
            "options": [
                "Chef",
                "Puppet",
                "Ansible",
                "Jira"
            ],
            "answer": "Jira",
            "explanation": "While Chef, Puppet, and Ansible are configuration management tools, Jira is an issue and project tracking tool."
        },
        {
            "question": "What is Docker primarily used for?",
            "options": [
                "Version Control",
                "Continuous Integration",
                "Containerization",
                "Project Management"
            ],
            "answer": "Containerization",
            "explanation": "Docker is primarily known for creating, deploying, and running applications in containers."
        },
        {
            "question": "What's the primary purpose of Kubernetes?",
            "options": [
                "Source code management",
                "Automated testing",
                "Container orchestration",
                "Configuration management"
            ],
            "answer": "Container orchestration",
            "explanation": "Kubernetes is a platform designed to manage containerized workloads and services."
        },
        {
            "question": "Which tool is mainly used for version control in DevOps?",
            "options": [
                "Jenkins",
                "Docker",
                "Kubernetes",
                "Git"
            ],
            "answer": "Git",
            "explanation": "Git is a distributed version control system commonly used in the DevOps world."
        },
        {
            "question": "What does IaC stand for in DevOps?",
            "options": [
                "Infrastructure as Computer",
                "Integration and Configuration",
                "Infrastructure as Code",
                "Input and Compute"
            ],
            "answer": "Infrastructure as Code",
            "explanation": "IaC or Infrastructure as Code is a method to provision and manage IT infrastructure through code and automation."
        },
        {
            "question": "Which of the following is a benefit of implementing DevOps?",
            "options": [
                "Slower release cycles",
                "Less collaboration between teams",
                "Reduced recovery time after failures",
                "Increased infrastructure cost"
            ],
            "answer": "Reduced recovery time after failures",
            "explanation": "DevOps practices like CI/CD allow for quicker detection and recovery from errors, reducing downtime."
        },
        {
            "question": "In DevOps, what does \"shift left\" refer to?",
            "options": [
                "Delaying testing to the end of the development cycle",
                "Incorporating operations earlier in the development cycle",
                "Left-aligning code",
                "Outsourcing operations"
            ],
            "answer": "Incorporating operations earlier in the development cycle",
            "explanation": "\"Shift left\" emphasizes incorporating testing and other operations earlier in the software development process."
        },
        {
            "question": "Which of the following represents a cultural aspect of DevOps?",
            "options": [
                "Using Docker",
                "Automation scripts",
                "Collaboration and sharing between teams",
                "Writing Infrastructure as Code"
            ],
            "answer": "Collaboration and sharing between teams",
            "explanation": "While tools and automation play a role in DevOps, its foundation lies in fostering a culture of collaboration and transparency between development and operations teams."
        },
        {
            "question": "What is Infrastructure as Code (IaC)?",
            "options": [
                "Writing scripts (code) to automate infrastructure deployment",
                "Using code repositories to store infrastructure information",
                "Documenting infrastructure requirements",
                "Writing application code that supports multiple infrastructure setups"
            ],
            "answer": "Writing scripts (code) to automate infrastructure deployment",
            "explanation": "Infrastructure as Code (IaC) involves managing and provisioning infrastructure through machine-readable definition files, automating the process."
        },
        {
            "question": "In which phase are automated tests primarily run in a CI/CD pipeline?",
            "options": [
                "Build",
                "Test",
                "Deploy",
                "Monitor"
            ],
            "answer": "Test",
            "explanation": "In a CI/CD pipeline, once the code is built (compiled and packaged), it moves to the testing phase, where automated tests are executed."
        },
        {
            "question": "What does the acronym \"CALMS\" stand for in the context of DevOps?",
            "options": [
                "Code, Automation, Logs, Monitoring, Security",
                "Culture, Automation, Lean, Measurement, Sharing",
                "Continuous Application Lifecycle Management System",
                "Code, Automation, Lifecycle, Monitoring, Systems"
            ],
            "answer": "Culture, Automation, Lean, Measurement, Sharing",
            "explanation": "CALMS represents the five pillars of DevOps – Culture, Automation, Lean, Measurement, and Sharing."
        },
        {
            "question": "Which tool is used for configuration management?",
            "options": [
                "Git",
                "Nagios",
                "Ansible",
                "Jira"
            ],
            "answer": "Ansible",
            "explanation": "Ansible is a popular tool for configuration management, automating tasks such as software configuration and deployment."
        },
        {
            "question": "Which practice involves deploying code into a production-like environment before actual production?",
            "options": [
                "Continuous Testing",
                "Canary Release",
                "Blue-Green Deployment",
                "Continuous Deployment"
            ],
            "answer": "Blue-Green Deployment",
            "explanation": "Blue-Green Deployment involves two parallel environments – Blue (current production) and Green (clone of production). New code is deployed to the Green environment and, once tested and verified, traffic is switched to it."
        },
        {
            "question": "What is a Version Control System (VCS) primarily used for?",
            "options": [
                "Infrastructure monitoring",
                "Configuration management",
                "Tracking changes to source code",
                "Application deployment"
            ],
            "answer": "Tracking changes to source code",
            "explanation": "A VCS like Git allows developers to track and manage changes to source code, facilitating collaboration and version management."
        },
        {
            "question": "Which tool is often used for orchestrating cloud infrastructure as code?",
            "options": [
                "Jenkins",
                "Grafana",
                "Terraform",
                "Docker"
            ],
            "answer": "Terraform",
            "explanation": "Terraform is a widely-used tool for defining and providing cloud infrastructure using a declarative configuration language. It enables Infrastructure as Code (IaC) practices for cloud resources."
        },
        {
            "question": "Which term describes a method where developers merge their changes back to the main branch multiple times a day?",
            "options": [
                "Continuous Deployment",
                "Continuous Integration",
                "Continuous Monitoring",
                "Continuous Feedback"
            ],
            "answer": "Continuous Integration",
            "explanation": "Continuous Integration (CI) is a DevOps practice where developers integrate code into a shared repository several times a day. It encourages more frequent code integrations and testing."
        },
        {
            "question": "Which of the following tools is primarily associated with monitoring and visualizing time-series data?",
            "options": [
                "Ansible",
                "Git",
                "Grafana",
                "Puppet"
            ],
            "answer": "Grafana",
            "explanation": "Grafana is an open-source platform for monitoring and observability. It's commonly used to visualize metrics from time-series databases."
        },
        {
            "question": "What does the term \"Immutable Infrastructure\" refer to?",
            "options": [
                "Infrastructure that can be easily changed and adapted",
                "Infrastructure components that are never updated once deployed",
                "Frequently changing infrastructure",
                "Infrastructure that is resistant to hacker attacks"
            ],
            "answer": "Infrastructure components that are never updated once deployed",
            "explanation": "Immutable Infrastructure refers to an approach where once infrastructure components are deployed, they are never modified. Instead, if changes are needed, new instances are created to replace the old ones."
        },
        {
            "question": "Which DevOps practice involves automating the provisioning and management of servers?",
            "options": [
                "Continuous Monitoring",
                "Continuous Feedback",
                "Configuration Management",
                "Continuous Testing"
            ],
            "answer": "Configuration Management",
            "explanation": "Configuration Management involves the use of tools and practices to automate the provisioning and management of servers, ensuring that they maintain the desired state over time."
        },
        {
            "question": "Which DevOps tool is known for its \"Infrastructure as Code\" capabilities and agentless architecture?",
            "options": [
                "Jenkins",
                "Git",
                "Puppet",
                "Ansible"
            ],
            "answer": "Ansible",
            "explanation": "Ansible is known for its Infrastructure as Code capabilities, allowing automation of cloud provisioning, configuration management, and application deployments. It operates on an agentless architecture, communicating via SSH or WinRM."
        }
    ],
    "Docker": [
        {
            "question": "What is Docker?",
            "options": [
                "Programming Language",
                "Text Editor",
                "Containerization Platform",
                "Web Server"
            ],
            "answer": "Containerization Platform",
            "explanation": "Docker is a platform designed to make it easier to create, deploy, and run applications using containers. It’s not a programming language, text editor, or web server."
        },
        {
            "question": "Which command is used to create a new Docker image?",
            "options": [
                "docker build",
                "docker pull",
                "docker run",
                "docker commit"
            ],
            "answer": "docker build",
            "explanation": "The docker build command is used to build a new image from a Dockerfile and a “context”. The context is the set of files in a specified directory or URLs that the image is built from."
        },
        {
            "question": "What does the Dockerfile contain?",
            "options": [
                "Compiled source code",
                "Docker images",
                "Binary data",
                "Instructions for building a Docker image"
            ],
            "answer": "Instructions for building a Docker image",
            "explanation": "A Dockerfile is a text file that contains the instructions for how to build a Docker image from a base image."
        },
        {
            "question": "What is a Docker container?",
            "options": [
                "A running instance of a Docker image",
                "A lightweight virtual machine",
                "A storage volume",
                "A service running on Docker Swarm"
            ],
            "answer": "A running instance of a Docker image",
            "explanation": "A Docker container is a running instance of a Docker image, which is an executable package that includes everything needed to run a piece of software, including the code, libraries, environment variables, and config files."
        },
        {
            "question": "What command is used to list all running Docker containers?",
            "options": [
                "docker list",
                "docker show",
                "docker ps",
                "docker display"
            ],
            "answer": "docker ps",
            "explanation": "The docker ps command lists all running Docker containers, along with various details like container ID, image name, creation time, and so on."
        },
        {
            "question": "Which command pulls an image from Docker Hub?",
            "options": [
                "docker get",
                "docker fetch",
                "docker pull",
                "docker download"
            ],
            "answer": "docker pull",
            "explanation": "The docker pull command is used to pull or download a Docker image from a registry like Docker Hub."
        },
        {
            "question": "How can you run a command inside an existing Docker container?",
            "options": [
                "docker exec",
                "docker attach",
                "docker run",
                "docker enter"
            ],
            "answer": "docker exec",
            "explanation": "The docker exec command allows you to run commands inside an existing container. For example, docker exec -it container_id /bin/bash would open a bash shell inside the container with ID container_id."
        },
        {
            "question": "Which command is used to remove a Docker image?",
            "options": [
                "docker rmi",
                "docker remove",
                "docker del",
                "docker erase"
            ],
            "answer": "docker rmi",
            "explanation": "The docker rmi command removes one or more Docker images from your local machine."
        },
        {
            "question": "What is Docker Compose?",
            "options": [
                "A scripting language for Docker",
                "A continuous integration tool for Docker",
                "A tool for defining and running multi-container Docker applications",
                "A Docker CLI plugin"
            ],
            "answer": "A tool for defining and running multi-container Docker applications",
            "explanation": "Docker Compose is a tool for defining and running multi-container Docker applications. With Compose, you define the services, networks, and volumes in a single docker-compose.yml file and then use docker-compose up to start the entire application stack."
        },
        {
            "question": "Which of the following is the default registry used by Docker?",
            "options": [
                "Kubernetes Hub",
                "Container Store",
                "Docker Hub",
                "Image Hub"
            ],
            "answer": "Docker Hub",
            "explanation": "Docker Hub is the default public registry where Docker images are stored and shared. You can pull and push images from and to Docker Hub."
        },
        {
            "question": "What is the primary purpose of the Docker Engine?",
            "options": [
                "To provide a graphical visualization of containers",
                "To build and run containers",
                "To manage databases inside containers",
                "To interface with Kubernetes"
            ],
            "answer": "To build and run containers",
            "explanation": "Docker Engine is the core of Docker. It is responsible for building, running, and managing containers."
        },
        {
            "question": "Which of the following commands logs you into Docker Hub from the CLI?",
            "options": [
                "docker login",
                "docker auth",
                "docker sign-in",
                "docker connect"
            ],
            "answer": "docker login",
            "explanation": "The docker login command allows users to log into Docker Hub or any other Docker registry from the command-line interface."
        },
        {
            "question": "What does the -d flag do in the docker run command?",
            "options": [
                "Deletes the container",
                "Displays detailed information",
                "Detaches the container (runs in the background)",
                "Downloads the latest image"
            ],
            "answer": "Detaches the container (runs in the background)",
            "explanation": "When using -d with the docker run command, the container starts in detached mode, which means it runs in the background and does not attach to the current terminal session."
        },
        {
            "question": "How do you specify a Dockerfile other than the default “Dockerfile” during the build process?",
            "options": [
                "Use –filename option",
                "Use –source option",
                "Use –file option",
                "Use –dockerfile option"
            ],
            "answer": "Use –file option",
            "explanation": "The –file or -f option allows users to specify a different Dockerfile than the default one. For example, docker build -f MyDockerfile .."
        },
        {
            "question": "In Docker, what is a bridge network?",
            "options": [
                "A public network accessible from outside",
                "A private network segment created for a specific container",
                "A way to connect multiple containers to the internet",
                "A network connecting containers to each other on the same host"
            ],
            "answer": "A network connecting containers to each other on the same host",
            "explanation": "The default bridge network in Docker allows containers to communicate with each other on the same host machine, but it does not allow for direct external access."
        },
        {
            "question": "How can you share storage volumes between containers?",
            "options": [
                "Using –volumes-from",
                "Using –share-storage",
                "Using –link",
                "Using –connect-volumes"
            ],
            "answer": "Using –volumes-from",
            "explanation": "The –volumes-from option allows a container to mount the volumes from another container, enabling data sharing between containers."
        },
        {
            "question": "Which of the following is not a valid storage driver for Docker?",
            "options": [
                "aufs",
                "btrfs",
                "zfs",
                "ntfs"
            ],
            "answer": "ntfs",
            "explanation": "NTFS is a filesystem used by Windows, but it’s not a storage driver for Docker. Docker supports storage drivers like aufs, btrfs, zfs, and others depending on the platform."
        },
        {
            "question": "What is the primary function of the .dockerignore file?",
            "options": [
                "To list all images to be pulled from the Docker Hub",
                "To specify commands to run inside a container",
                "To prevent certain files and directories from being copied into an image",
                "To provide metadata about a Docker image"
            ],
            "answer": "To prevent certain files and directories from being copied into an image",
            "explanation": "The .dockerignore file allows users to exclude files and directories from being copied to the image during the build process, much like .gitignore does for git repositories."
        },
        {
            "question": "Which Docker command shows the history and intermediate layers of an image?",
            "options": [
                "docker inspect",
                "docker details",
                "docker history",
                "docker layers"
            ],
            "answer": "docker history",
            "explanation": "The docker history command shows the history of an image, displaying the layers and the commands that were used to create them."
        },
        {
            "question": "In a docker-compose.yml file, what is the function of the depends_on key?",
            "options": [
                "Specifies the base images for services",
                "Specifies the build context for services",
                "Specifies the order in which services are started",
                "Specifies the network links between services"
            ],
            "answer": "Specifies the order in which services are started",
            "explanation": "In a docker-compose.yml file, the depends_on key indicates the order in which services should be started. A service with a depends_on key will not start until the services it depends on have been started."
        },
        {
            "question": "What is the primary purpose of Docker Swarm?",
            "options": [
                "Image version management",
                "Multi-host container orchestration",
                "Container storage optimization",
                "Automated container build pipeline"
            ],
            "answer": "Multi-host container orchestration",
            "explanation": "Docker Swarm is a native clustering and orchestration tool for Docker. It allows you to create and manage a swarm of Docker nodes and orchestrate services across multiple hosts."
        },
        {
            "question": "What command initializes a node as a Docker Swarm manager?",
            "options": [
                "docker swarm init",
                "docker swarm start",
                "docker swarm create",
                "docker swarm manager"
            ],
            "answer": "docker swarm init",
            "explanation": "The docker swarm init command initializes the current node as a Docker Swarm manager, which manages the infrastructure of a swarm."
        },
        {
            "question": "Which of the following is not a Docker network type?",
            "options": [
                "bridge",
                "host",
                "overlay",
                "transit"
            ],
            "answer": "transit",
            "explanation": "Docker supports several network types, including bridge, host, and overlay. “transit” is not one of the built-in network types in Docker."
        },
        {
            "question": "Which command is used to view the logs of a running Docker container?",
            "options": [
                "docker logs CONTAINER_ID/NAME",
                "docker show-logs CONTAINER_ID/NAME",
                "docker view CONTAINER_ID/NAME",
                "docker inspect CONTAINER_ID/NAME"
            ],
            "answer": "docker logs CONTAINER_ID/NAME",
            "explanation": "The docker logs command allows you to view the logs of a running container."
        },
        {
            "question": "What command creates a new volume in Docker?",
            "options": [
                "docker volume create",
                "docker create volume",
                "docker volume new",
                "docker new volume"
            ],
            "answer": "docker volume create",
            "explanation": "The docker volume create command is used to create a new volume."
        },
        {
            "question": "How can you inspect the details of a Docker network?",
            "options": [
                "docker network view NETWORK_NAME",
                "docker network show NETWORK_NAME",
                "docker network detail NETWORK_NAME",
                "docker network inspect NETWORK_NAME"
            ],
            "answer": "docker network inspect NETWORK_NAME",
            "explanation": "The docker network inspect command is used to display detailed information about a network."
        },
        {
            "question": "Which command stops a running Docker container?",
            "options": [
                "docker kill CONTAINER_ID/NAME",
                "docker pause CONTAINER_ID/NAME",
                "docker halt CONTAINER_ID/NAME",
                "docker stop CONTAINER_ID/NAME"
            ],
            "answer": "docker stop CONTAINER_ID/NAME",
            "explanation": "The docker stop command stops a running container."
        },
        {
            "question": "How can you see all images available on your local machine?",
            "options": [
                "docker show images",
                "docker list images",
                "docker images",
                "docker img"
            ],
            "answer": "docker images",
            "explanation": "The docker images command lists all images available locally."
        },
        {
            "question": "How do you remove a Docker volume?",
            "options": [
                "docker remove-volume VOLUME_NAME",
                "docker rmvol VOLUME_NAME",
                "docker volume rm VOLUME_NAME",
                "docker delete VOLUME_NAME"
            ],
            "answer": "docker volume rm VOLUME_NAME",
            "explanation": "The docker volume rm command is used to remove a volume."
        },
        {
            "question": "Which command connects a container to a Docker network?",
            "options": [
                "docker network connect NETWORK_NAME CONTAINER_NAME",
                "docker connect NETWORK_NAME CONTAINER_NAME",
                "docker attach NETWORK_NAME CONTAINER_NAME",
                "docker link NETWORK_NAME CONTAINER_NAME"
            ],
            "answer": "docker network connect NETWORK_NAME CONTAINER_NAME",
            "explanation": "The docker network connect command connects a running container to a Docker network."
        }
    ],
    "Git": [
        {
            "question": "What is Git?",
            "options": [
                "Text Editor",
                "Compiler",
                "Version Control System",
                "Operating System"
            ],
            "answer": "Version Control System",
            "explanation": "Git is a distributed version control system that allows multiple users to track and manage changes in software projects."
        },
        {
            "question": "Which command initializes a new Git repository?",
            "options": [
                "git new",
                "git create",
                "git start",
                "git init"
            ],
            "answer": "git init",
            "explanation": "The git init command is used to initialize a new Git repository and begin tracking an existing directory."
        },
        {
            "question": "How can you view the commit history in Git?",
            "options": [
                "git logs",
                "git history",
                "git commits",
                "git log"
            ],
            "answer": "git log",
            "explanation": "The git log command displays the commit history, showing various details about each commit."
        },
        {
            "question": "Which command adds changes to the staging area in Git?",
            "options": [
                "git add",
                "git save",
                "git upload",
                "git stage"
            ],
            "answer": "git add",
            "explanation": "The git add command stages the changes for commit, which means it tracks the new and modified files to be committed."
        },
        {
            "question": "Which command shows the status of changes in the repository?",
            "options": [
                "git status",
                "git show",
                "git view",
                "git display"
            ],
            "answer": "git status",
            "explanation": "The git status command displays the list of changed files that are staged, unstaged, and untracked."
        },
        {
            "question": "How do you commit the staged changes?",
            "options": [
                "git save",
                "git update",
                "git commit",
                "git store"
            ],
            "answer": "git commit",
            "explanation": "The git commit command captures a snapshot of the changes made and saves it to the version history with a unique ID."
        },
        {
            "question": "What does the .git directory store?",
            "options": [
                "Configuration files",
                "Source code",
                "Project documentation",
                "Repository metadata and version history"
            ],
            "answer": "Repository metadata and version history",
            "explanation": "The .git directory contains all the metadata and the object database for the repository. It’s the heart of Git, and the repository itself."
        },
        {
            "question": "Which command creates a new branch in Git?",
            "options": [
                "git new branch",
                "git branch-new",
                "git branch",
                "git create-branch"
            ],
            "answer": "git branch",
            "explanation": "Using git branch <branch-name>, you can create a new branch. This doesn’t switch to the new branch; you’d use git checkout or git switch for that."
        },
        {
            "question": "How do you switch to a different branch in Git?",
            "options": [
                "git switch",
                "git move",
                "git jump",
                "git hop"
            ],
            "answer": "git switch",
            "explanation": "The git switch <branch-name> command allows you to switch to a different branch. Before Git version 2.23, the common approach was git checkout <branch-name>."
        },
        {
            "question": "Which command merges one branch into another?",
            "options": [
                "git merge",
                "git join",
                "git combine",
                "git bind"
            ],
            "answer": "git merge",
            "explanation": "The git merge command integrates changes from one branch into another. This is commonly used when features or bug fixes from one branch need to be brought into the main branch."
        },
        {
            "question": "What is a merge conflict?",
            "options": [
                "An error in the Git configuration",
                "A disagreement among team members",
                "Overlapping changes between branches",
                "An issue with remote repository synchronization"
            ],
            "answer": "Overlapping changes between branches",
            "explanation": "A merge conflict occurs when there are changes in the same part of a file in both the current branch and the branch to be merged. Git cannot decide which change should take precedence, so it asks the user to resolve the conflict."
        },
        {
            "question": "Which command is used to clone a remote repository?",
            "options": [
                "git copy",
                "git replicate",
                "git duplicate",
                "git clone"
            ],
            "answer": "git clone",
            "explanation": "The git clone command is used to clone (or copy) a remote repository onto your local machine."
        },
        {
            "question": "Which command connects a local repository to a remote server?",
            "options": [
                "git link",
                "git bind",
                "git remote add",
                "git connect"
            ],
            "answer": "git remote add",
            "explanation": "The git remote add command connects a local repository to a remote server. This is often followed by a URL representing the location of the remote repository."
        },
        {
            "question": "How do you fetch the latest updates from a remote repository without merging them?",
            "options": [
                "git pull",
                "git get",
                "git fetch",
                "git update"
            ],
            "answer": "git fetch",
            "explanation": "The git fetch command fetches updates from a remote repository but doesn’t merge them. It allows you to review changes before integrating them."
        },
        {
            "question": "How do you push changes from a local branch to a remote repository?",
            "options": [
                "git send",
                "git upload",
                "git dispatch",
                "git push"
            ],
            "answer": "git push",
            "explanation": "The git push command pushes changes from your local branch to a remote repository. This updates the remote branch with your local changes."
        },
        {
            "question": "What does the HEAD in Git represent?",
            "options": [
                "The first commit in the repository",
                "The latest commit in the remote repository",
                "The currently checked-out commit",
                "The base of the current branch"
            ],
            "answer": "The currently checked-out commit",
            "explanation": "In Git, HEAD is a special pointer or reference that points to the currently checked-out commit in the repository."
        },
        {
            "question": "How can you undo the most recent commit?",
            "options": [
                "git revert HEAD",
                "git reset HEAD~1",
                "git undo",
                "git back"
            ],
            "answer": "git reset HEAD~1",
            "explanation": "The git reset HEAD~1 command moves the current branch pointer back to the previous commit, effectively undoing the most recent commit. Note that there are different modes (like –soft, –hard) which decide the fate of changes during this operation."
        },
        {
            "question": "Which command is used to stash changes in Git?",
            "options": [
                "git hide",
                "git keep",
                "git reserve",
                "git stash"
            ],
            "answer": "git stash",
            "explanation": "The git stash command temporarily saves changes that are not yet ready for a commit, allowing you to switch to another branch without committing the current changes."
        },
        {
            "question": "How do you create a tag in Git?",
            "options": [
                "git marker",
                "git tag",
                "git label",
                "git point"
            ],
            "answer": "git tag",
            "explanation": "In Git, the git tag command creates a reference point (or marker) for specific points in your project history. It’s often used to mark release points."
        },
        {
            "question": "Which of the following is not a valid merge strategy in Git?",
            "options": [
                "fast-forward",
                "recursive",
                "octopus",
                "squid"
            ],
            "answer": "squid",
            "explanation": "Git supports various merge strategies like fast-forward, recursive, and octopus. “squid” is not a merge strategy in Git."
        },
        {
            "question": "Which command lists all the branches in a Git repository?",
            "options": [
                "git list",
                "git branches",
                "git show-branches",
                "git branch"
            ],
            "answer": "git branch",
            "explanation": "The git branch command, when used without any arguments, lists all the branches in a Git repository."
        },
        {
            "question": "What does the git cherry-pick command do?",
            "options": [
                "Picks a random commit from history",
                "Applies changes from a specific commit to the current branch",
                "Deletes a specific commit",
                "Merges two unrelated branches"
            ],
            "answer": "Applies changes from a specific commit to the current branch",
            "explanation": "The git cherry-pick command allows you to take a commit from another branch and apply it to your current branch."
        },
        {
            "question": "How do you remove untracked files from your working directory?",
            "options": [
                "git clean",
                "git erase",
                "git purge",
                "git remove"
            ],
            "answer": "git clean",
            "explanation": "The git clean command removes untracked files from your working directory, ensuring your workspace is tidy."
        },
        {
            "question": "What is a bare repository in Git?",
            "options": [
                "A repository without any commits",
                "A repository with no branches",
                "A repository without a working directory",
                "A repository that can’t be cloned"
            ],
            "answer": "A repository without a working directory",
            "explanation": "A bare repository in Git is a repository that contains only the .git directory and no working directory. It’s typically used for shared repositories and remotes."
        },
        {
            "question": "How do you view the differences between the working directory and the last commit?",
            "options": [
                "git view",
                "git diff",
                "git changes",
                "git compare"
            ],
            "answer": "git diff",
            "explanation": "The git diff command shows the differences between the working directory and the last commit. It’s a useful tool to see the changes made before committing them."
        }
    ],
    "Kubernetes": [
        {
            "question": "What is Kubernetes?",
            "options": [
                "A programming language",
                "A cloud provider",
                "A container runtime",
                "A container orchestration platform"
            ],
            "answer": "A container orchestration platform",
            "explanation": "Kubernetes is a platform designed to automate deploying, scaling, and operating application containers."
        },
        {
            "question": "Which Kubernetes object provides declarative updates for Pods and ReplicaSets?",
            "options": [
                "Nodes",
                "Deployments",
                "Services",
                "ConfigMaps"
            ],
            "answer": "Deployments",
            "explanation": "Deployments are high-level objects that manage the desired state of an application, ensuring specified numbers of Pods and ReplicaSets are maintained."
        },
        {
            "question": "What is a Pod in Kubernetes?",
            "options": [
                "A storage unit",
                "The smallest and simplest unit in the Kubernetes object model",
                "A cluster",
                "A network policy"
            ],
            "answer": "The smallest and simplest unit in the Kubernetes object model",
            "explanation": "A Pod represents a single unit of deployment and can encapsulate one or more containers."
        },
        {
            "question": "Which Kubernetes component schedules the pods to worker nodes?",
            "options": [
                "Kubelet",
                "Kube-proxy",
                "Scheduler",
                "API Server"
            ],
            "answer": "Scheduler",
            "explanation": "The Scheduler is responsible for placing Pods onto Nodes based on factors like resources and affinity rules."
        },
        {
            "question": "What do you use to communicate with a Kubernetes cluster?",
            "options": [
                "kubeadm",
                "kubectl",
                "kubeconfig",
                "kube-dns"
            ],
            "answer": "kubectl",
            "explanation": "kubectl is the command-line tool used to interact with the Kubernetes cluster."
        },
        {
            "question": "Which Kubernetes component provides a REST interface for tasks like starting and stopping pods?",
            "options": [
                "kubelet",
                "kubectl",
                "kube-proxy",
                "kube-apiserver"
            ],
            "answer": "kube-apiserver",
            "explanation": "The kube-apiserver exposes the Kubernetes API, which provides the front end for the cluster's shared state through which all other components interact."
        },
        {
            "question": "What is the primary role of the 'etcd' in a Kubernetes cluster?",
            "options": [
                "Load balancing",
                "Data storage for cluster configuration",
                "Scaling applications",
                "Monitoring services"
            ],
            "answer": "Data storage for cluster configuration",
            "explanation": "etcd is a consistent and highly-available key-value store used by Kubernetes to store all cluster data."
        },
        {
            "question": "Which Kubernetes object can you use to ensure that there are always a specified number of replica Pods running?",
            "options": [
                "DaemonSet",
                "ReplicaSet",
                "Job",
                "Volume"
            ],
            "answer": "ReplicaSet",
            "explanation": "ReplicaSet ensures that a specified number of replica Pods are running at any given time."
        },
        {
            "question": "In Kubernetes, which object is used to create a gateway for inbound traffic to your cluster?",
            "options": [
                "Ingress",
                "NetworkPolicy",
                "Volume",
                "ConfigMap"
            ],
            "answer": "Ingress",
            "explanation": "Ingress manages external access to the services in a cluster, typically HTTP."
        },
        {
            "question": "What is the role of a 'Service' in Kubernetes?",
            "options": [
                "To scale applications",
                "To abstract how to access Pods",
                "To manage storage",
                "To deploy applications"
            ],
            "answer": "To abstract how to access Pods",
            "explanation": "Services enable communication between various components within and outside of the application. It abstracts the way to access the Pods, providing a stable endpoint."
        },
        {
            "question": "Which of the following is a container runtime used by Kubernetes?",
            "options": [
                "Jenkins",
                "Docker",
                "Helm",
                "Prometheus"
            ],
            "answer": "Docker",
            "explanation": "Docker is a container runtime that Kubernetes can use to run containers. Other runtimes include containerd and CRI-O."
        },
        {
            "question": "Which Kubernetes command is used to list all the pods in the current namespace?",
            "options": [
                "kubectl pods",
                "kubectl get pods",
                "kubectl list pods",
                "kubectl show pods"
            ],
            "answer": "kubectl get pods",
            "explanation": ""
        },
        {
            "question": "If a Node in Kubernetes becomes unresponsive, what will happen to the pods running on that node?",
            "options": [
                "They are deleted and not rescheduled",
                "They are paused until the node is responsive again",
                "They are rescheduled on another node",
                "They are automatically fixed"
            ],
            "answer": "They are rescheduled on another node",
            "explanation": "If a node becomes unresponsive, the pods on that node are deemed lost. Kubernetes reschedules these pods onto a healthy node."
        },
        {
            "question": "What is a 'namespace' in Kubernetes?",
            "options": [
                "A storage unit",
                "A type of Pod",
                "An isolated segment of the cluster for resources",
                "A network policy"
            ],
            "answer": "An isolated segment of the cluster for resources",
            "explanation": "Namespaces are used to provide scope for names and can be used to divide cluster resources among multiple users."
        },
        {
            "question": "Which tool can be used for package management in Kubernetes?",
            "options": [
                "Docker Compose",
                "Helm",
                "Git",
                "Terraform"
            ],
            "answer": "Helm",
            "explanation": "Helm is the package manager for Kubernetes that allows developers and operators to more easily configure and deploy applications on Kubernetes clusters."
        },
        {
            "question": "Which command is used to deploy an application from a manifest file named \"deployment.yaml\"?",
            "options": [
                "kubectl run deployment.yaml",
                "kubectl create deployment.yaml",
                "kubectl apply -f deployment.yaml",
                "kubectl launch -f deployment.yaml"
            ],
            "answer": "kubectl apply -f deployment.yaml",
            "explanation": "The kubectl apply command is used to apply a configuration change to a resource from a file or stdin."
        },
        {
            "question": "How can you get the logs of a specific pod?",
            "options": [
                "kubectl describe pod <POD_NAME>",
                "kubectl get logs <POD_NAME>",
                "kubectl log <POD_NAME>",
                "kubectl logs <POD_NAME>"
            ],
            "answer": "kubectl logs <POD_NAME>",
            "explanation": "The kubectl logs command is used to retrieve logs from a specific pod."
        },
        {
            "question": "What does 'K8s' stand for?",
            "options": [
                "Kube 8 system",
                "Kubernetes",
                "Kubernet eight",
                "Kube system"
            ],
            "answer": "Kubernetes",
            "explanation": "'K8s' is a numeronym for Kubernetes, where 8 stands for the number of letters between K and s."
        },
        {
            "question": "Which command initializes a Kubernetes master node?",
            "options": [
                "kubectl init",
                "kubeadm setup",
                "kubeadm init",
                "kube-start master"
            ],
            "answer": "kubeadm init",
            "explanation": "kubeadm init is used to bootstrap the Kubernetes master node."
        },
        {
            "question": "Which of the following is a best practice for storing secrets in Kubernetes?",
            "options": [
                "Store them in a ConfigMap",
                "Hardcode them in the Pod manifest",
                "Use environment variables in a Pod",
                "Use the Kubernetes Secret object"
            ],
            "answer": "Use the Kubernetes Secret object",
            "explanation": "Kubernetes 'Secret' object allows for more control over how sensitive information is stored and can be updated without redeploying pods."
        },
        {
            "question": "How can you scale a deployment in Kubernetes?",
            "options": [
                "kubectl scale deployment <DEPLOYMENT_NAME> –replicas=<NUMBER>",
                "kubectl configure deployment <DEPLOYMENT_NAME> –replicas=<NUMBER>",
                "kubectl update deployment <DEPLOYMENT_NAME> –replicas=<NUMBER>",
                "kubectl set deployment <DEPLOYMENT_NAME> –replicas=<NUMBER>"
            ],
            "answer": "kubectl scale deployment <DEPLOYMENT_NAME> –replicas=<NUMBER>",
            "explanation": "The kubectl scale command allows you to adjust the number of replicas in a deployment."
        },
        {
            "question": "Which Kubernetes feature allows you to automatically adjust the number of pod replicas based on CPU utilization or other select metric?",
            "options": [
                "AutoScaling Group",
                "ReplicaSet",
                "Horizontal Pod Autoscaler (HPA)",
                "Node Balancer"
            ],
            "answer": "Horizontal Pod Autoscaler (HPA)",
            "explanation": "HPA automatically scales the number of pods in a deployment or replica set based on observed metrics like CPU utilization."
        },
        {
            "question": "Which command provides detailed information about a specific resource or group of resources in Kubernetes?",
            "options": [
                "kubectl describe",
                "kubectl info",
                "kubectl details",
                "kubectl show"
            ],
            "answer": "kubectl describe",
            "explanation": "The kubectl describe command provides detailed information about resources, including events associated with the resources."
        },
        {
            "question": "How would you retrieve a list of all nodes in the cluster?",
            "options": [
                "kubectl get nodes",
                "kubectl describe nodes",
                "kubectl list nodes",
                "kubectl show nodes"
            ],
            "answer": "kubectl get nodes",
            "explanation": "The kubectl get nodes command provides a list of all nodes that belong to a Kubernetes cluster."
        },
        {
            "question": "If you want to delete a service named \"my-service\", which command would you use?",
            "options": [
                "kubectl remove service my-service",
                "kubectl destroy service my-service",
                "kubectl rm service my-service",
                "kubectl delete service my-service"
            ],
            "answer": "kubectl delete service my-service",
            "explanation": "The kubectl delete command is used to delete resources either from a file, stdin, or specifying labels, names, resource selectors, or resources."
        }
    ]
}